<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo d 推送至服务器</title>
    <url>//post/Hexo%E5%90%8C%E6%AD%A5%E6%9C%8D%E5%8A%A1%E5%99%A8.html</url>
    <content><![CDATA[<h1 id="Hexo-d-推送至服务器"><a href="#Hexo-d-推送至服务器" class="headerlink" title="Hexo d 推送至服务器"></a>Hexo d 推送至服务器</h1><p>​    前段时间利用Hexo搭建博客，并配合GitHub page进行页面显示，一切都很美妙，但有一个问题就是访问速度太慢，后面我希望将博客迁移到腾讯云中，之后就从服务器访问了。现在关于Hexo搭建基本博客的帖子已经很详细了，所以我会放一些我参考的链接，主要介绍如何从本地将文件同步到自己的服务器中。</p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="Hexo博客搭建"><a href="#Hexo博客搭建" class="headerlink" title="Hexo博客搭建"></a>Hexo博客搭建</h3><p>三水同学的笔记：<a href="https://sanshui.vip/2022/08/10/indexday1/">https://sanshui.vip/2022/08/10/indexday1/</a>  （这里操作完，基本上就是博客雏形和Github page的显示）</p>
<h3 id="Butterfly主题"><a href="#Butterfly主题" class="headerlink" title="Butterfly主题"></a>Butterfly主题</h3><p>有了基本的博客雏形，但样式比较单一，这时候就可以利用现有的Hexo主题，这里只列举了Butterfly，还有些其他主题，可以自行查找。</p>
<p>推荐教程：<a href="https://www.fomal.cc/posts/4aa2d85f.html">https://www.fomal.cc/posts/4aa2d85f.html</a>  （这里操作完，样子就会好看许多，剩下的就是页面的修改，按照自己的意愿）</p>
<h3 id="页面音乐播放"><a href="#页面音乐播放" class="headerlink" title="页面音乐播放"></a>页面音乐播放</h3><p>我当时觉得博客加点儿音乐很有感觉，就捣鼓了些。</p>
<p>推荐教程：<a href="https://blog.csdn.net/qq_41467882/article/details/124734598">https://blog.csdn.net/qq_41467882/article/details/124734598</a></p>
<h2 id="博客同步"><a href="#博客同步" class="headerlink" title="博客同步"></a>博客同步</h2><p>前面的步骤里，只有Hexo博客搭建是必须的，另外两个都是为了美化，那我们先说如何从本地同步到Github page。</p>
<ol>
<li><code>hexo g</code> : 生成静态页面</li>
<li><code>hexo d</code> : hexo帮你部署，这里需要在_config.yml中配置地址即可，上面的教程有讲</li>
</ol>
<p>我之前遇到个问题，以为<code>hexo g</code>只用生成一次即可，后面修改完直接<code>hexo d</code>,实际上需要每次都要执行这两步，因为需要根据你修改的文章，生成新的静态页面，再上传。这里我嫌麻烦在<code>package.json</code>中写了新的选项来一次执行两步：</p>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string-property property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 这里以后就可以用 yarn upload 来执行两步</span>
  <span class="token string-property property">"upload"</span><span class="token operator">:</span> <span class="token string">"hexo generate &amp;&amp; hexo deploy"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"build"</span><span class="token operator">:</span> <span class="token string">"hexo generate"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"clean"</span><span class="token operator">:</span> <span class="token string">"hexo clean"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"deploy"</span><span class="token operator">:</span> <span class="token string">"hexo deploy"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"server"</span><span class="token operator">:</span> <span class="token string">"hexo server"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​    说完上面的了，你的博客就已经可以通过本地修改，通过到Github page中，但有些问题：</p>
<ol>
<li>同步上去后，Github page显示会有延迟</li>
<li>普通用户会加载的很慢，影响体验</li>
</ol>
<p>​    所以这里我尝试着迁移到自己的服务器中，以后直接通过Nginx访问服务器的静态博客页面，这里就牵扯到了购买服务器和域名（非必要），服务器没必要买很大的，因为只是简单的做博客效果，一般最小的轻量级服务器都可以。域名的话就是访问方便， 除非你乐意给别人发IP地址访问。这里都是比较简单的操作，直接去阿里云，腾讯云或者其他的厂商官网查看。</p>
<blockquote>
<p>到这里我假设你已经可以通过IP地址/域名访问到Nginx了。那我们如何进行数据迁移呢？</p>
</blockquote>
<p>​    最初我在想有没有插件可以直接通过<code>hexo d</code>直接部署到服务器指定位置中，确实有，但是我一直显示连接异常，后选择其他方式。也就是通过<code>github</code>的<code>WebHooks</code>功能。</p>
<p>​    大致思路为： <code>hexo d</code> 推送代码到<code>github</code>仓库，当<code>WebHooks</code>监测到有pull事件，将发送一条命令通知服务器，然后服务器触发脚本，拉取最新<code>git</code>代码。</p>
<p><img src="../../typora-user-images/image-20221128112850056.png" alt="image-20221128112850056"></p>
<ol>
<li>下载go  : <code>yum install -y golang </code></li>
<li>设置代理 : <code>go env -w GOPROXY=[https://goproxy.cn](https://goproxy.cn/),direct</code>  否则用go访问会老超时</li>
<li>查看go环境，看是否代理修改了 : <code>go env</code></li>
<li>安装WebHooks : <code>go get github.com/adnanh/webhook</code></li>
<li>编写shell脚本，主要作用就是拉取<code>git</code>仓库代码，如果你前面已经在服务器自己博客文件目录中<code>git clone</code>，克隆Github文件了，这里之后就可以直接用<code>git pull</code>了</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>

<span class="token builtin class-name">cd</span> /home/blog/GMaya   <span class="token comment"># 这里就是你自己打算存放博客的目录，可以自己定义</span>
<span class="token function">git</span> pull
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>编写<code>hooks.json</code>文件，就放在上一个文件下面就行</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token string">"随便自定义"</span><span class="token punctuation">,</span>
    <span class="token string-property property">"execute-command"</span><span class="token operator">:</span> <span class="token string">"webhook.sh"</span><span class="token punctuation">,</span> # 这里是你脚本的名字，就是上面的文件
    <span class="token string-property property">"command-working-directory"</span><span class="token operator">:</span> <span class="token string">"/home/hook"</span> # 这里是你脚本存放的地址
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="7">
<li>后台启动</li>
</ol>
<p><code>nohup /root/go/bin/webhook -hooks /上面定义的地址/hooks.json -verbose &amp;</code></p>
<ol start="8">
<li>查看日志</li>
</ol>
<p><code>tail -f nohup.out</code></p>
<p>正常显示：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 version <span class="token number">2.8</span>.0 starting
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 setting up os signal watcher
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 attempting to load hooks from /home/hook/hooks.json
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 found <span class="token number">1</span> hook<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token function">file</span>
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 	loaded: gmaya-hooks
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 serving hooks on http://0.0.0.0:9000/hooks/<span class="token punctuation">&#123;</span>id<span class="token punctuation">&#125;</span>
<span class="token punctuation">[</span>webhook<span class="token punctuation">]</span> <span class="token number">2021</span>/01/30 00:10:53 os signal watcher ready<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    注意：这里可以看到是根据9000端口通信的，所以一方面需要在服务器打开防护墙端口，一方面在你的服务器厂商那里打开防火墙或者什么安全设置。这里我用的腾讯云，直接在轻量服务器里加入9000端口的设置即可。</p>
<p>​    现在你的服务器就已经监听Github了，但Github还不知道你的服务器。</p>
<ol start="9">
<li>github上配置钩子</li>
</ol>
<p><img src="../../typora-user-images/image-20221128114311505.png" alt="image-20221128114311505"></p>
<p>填入Payload URL：<code>http://ip:9000/hooks/上面你自己定义的ID，在hooks.json</code></p>
<p>添加好后，就可以直接从本地同步到Github上，当Github上发生修改，服务器就会被触发执行脚本，拉取最新的代码。</p>
]]></content>
      <tags>
        <tag>博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>内存划分与溢出</title>
    <url>//post/JVM/2_Java%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F%E4%B8%8E%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%BC%82%E5%B8%B8.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>​        对于java与C&amp;C++开发的一大区别就在内存管理方面。Java是通过虚拟机管理内存，但如果不熟悉虚拟机怎么使用管理内存，出现内存泄露和内存溢出问题，修正就会很艰难。</p>
<h1 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a>运行时数据区域</h1><p>​        Java虚拟机在执行Java程序的过程中会把所管理的内存划分为一个个小部分，有的部分随着进程的启动而一直存在，有的部分随着用户线程的启动和结束而创建和销毁。其管理的内存分为以下几个运行时数据区域。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hec54446j31500ncn0t.jpg" alt="image-20220613084723714"></p>
<h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>​        是一块儿较小的内存空间，他可以看做是当前线程所执行的字节码的行号指示器，通俗的来讲就是通过改变计数器的值来选取下一条需要执行的字节码指令，它是程序控制流的指示器，分支，循环，跳转，异常处理，线程恢复等基础功能都是依赖计数器完成的。</p>
<p>​        在java多线程中，是利用线程轮流切换，分配处理器执行时间的方式来实现的，也就是说我执行了一会儿A线程，时间到了，我要去执行B线程了，那B线程执行时间到，我要再切换会A线程，那我怎么知道刚才任务完成到哪了？所以每个线程都私有一个程序计数器来保证线程切换后能回到正确的位置。</p>
<p>​        如果执行的是一个Java方法，则计数器记录的是正在执行的虚拟机字节码指令的地址，如果执行的是一个本地方法（native），这个计数器值则应为空（Undefined）。这里的内存区域是唯一在《Java虚拟机规范》中没有任何OutOfMemoryError情况的区域。</p>
<h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef5tqq8j310e0k641a.jpg" alt="image-20220613091716081"></p>
<p>​        Java虚拟机栈也是线程私有的，他的生命周期与线程相同，每个方法被调用的时候，虚拟机栈就会同步创建一个栈帧来存储局部变量表，操作数栈，动态链接，方法出口等信息，每个方法的调用与执行结束都对应这栈帧的入栈与出栈。</p>
<p>​        其中局部变量表存放编译器可知的各种虚拟机基本数据类型（int，char），对应引用（Object），returnAddress（指向一条字节码指令地址）。局部变量表需要多大的空间在编译期间就可以确定的。也就是变量槽数量是不变了的。</p>
<p>​        这里存在两种异常情况：</p>
<ol>
<li>栈溢出（StackOverflowError），一般我们在递归算法中如果无限调用方法就会爆出该错误</li>
<li>内存溢出（OutOfMemoryError），如果设置栈可以动态扩展空间，当栈无法申请到更多的空间就会爆出OOM内存溢出。</li>
</ol>
<h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>​        与虚拟机栈类似，只不过虚拟站是执行Java方法，虚拟机栈是执行Native本地方法。也会有上述两种异常情况。</p>
<h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p>​        堆是虚拟机管理内存中最大的一部分，<em>是所有线程所共享的</em> ，该区域的唯一目的就是存放对象实例。本里应该是所有对象都存放在这里的，不过随着Java语言的不断发展，也不是很绝对。</p>
<p>​        由于堆空间是垃圾回收器管理的内存区域，也叫做“GC堆”，从回收内存的角度来看，由于现代垃圾回收器大部分都是基于分代收集理论设计的，所以我们常说：新生代，老年代，永久代，Eden空间，From Survivor空间，To Survivor空间，但这个只是一部分垃圾回收器的共同特性和设计风格，并不是标准就是这么规定的，还有一些其他的垃圾回收策略。</p>
<p>​        从分配内存的角度来看。Java堆空间可以划分出多个线程私有的分配缓冲区，以提高对象分配时的效率。将堆空间进行细分，只是为了更好地内存回收和内存分配。</p>
<p>​        根据《Java虚拟机规范》，Java堆可以处于物理上不连续的内存空间，但是在逻辑上它应该被视为连续的。</p>
<p>​        Java堆可以被实现成固定大小的，可以设置为可扩展的。(通过参数-Xmx和-Xms设定)，如果没有可分配的内存了，也会爆出OOM异常。</p>
<h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>​        方法区也是各个线程共享的区域，主要存放虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码缓存。</p>
<p>​        这里必须提到“永久代”这个概念，在JDK8以前很多人吧方法区叫做永久代，这是因为在之前HotSpot团队将收集器的分代思想扩展到方法区，用永久代来实现方法区，这样垃圾回收器就可以像管理堆一样的管理栈，但其他的虚拟机实现中并没有永久代，例如JRockit，IBM j9，这个并不被规范设定，而属于各自的实现。现在来看用永久代来实现方法区，更容易导致内存溢出问题。永久代有一个默认上限值。所以到了JDK6时就已经有使用<strong>本地内存</strong>来实现方法区的计划，到了JDK7时，就将<code>字符串常量池，静态变量</code>等移植到堆中，到了JDK8就彻底放弃了永久代，使用本地内存来实现<strong>元空间（Meta-space）</strong>把JDK7中剩下的内容放入（主要是类型信息）。</p>
<p>​        方法区这部分管理是比较宽松的，不需要连续的内存和内存大小的动态性。甚至可以不实现垃圾回收，但是并不是进去了，就永远保留，主要的内存回收针对的是常量池的回收和对类型的卸载。</p>
<p>​        如果方法区无法分配到更多的内存空间，就会爆出OOM异常。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><p>​        属于方法区的一部分，Class文件中除了类的模板，字段，方法，接口等描述信息，还有一个就是常量池表,用于存放编译后的各种字面量和符号引用。这部分内容在类加载后放在方法区的运行时常量池。</p>
<p>​        运行时常量池的一个特点就是动态性，并不要求常量一定只有编译期才能产生，运行期间也可以将新的常量放入。用得较多的就是String::intern()方法。</p>
<p>​        这部分在方法区内所以也有OOM的风险。</p>
<h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>​        这部分并不属于运行时数据区域，但是又频繁使用，而且会导致OOM的风险。</p>
<p>​        在JDK1.4中新加入了NIO类，引入了基于管道和缓冲区的I/O方式，它可以还是用Native函数库直接分配堆外内存，然后通过一个存储在堆里的DirectByteBuffer对象作为这片内存的引用操作，这样能提高性能，不用在java堆和Native堆上来回复制数据。</p>
<p>​        显然直接内存不会受到堆内存大小的限制，但是肯定是受到本机总内存的限制，一般服务器管理员如果在配置虚拟机内存管理大小时忽略掉这部分大小，可能就导致总使用内存大于实际内存大小。从而导致动态扩展时导致OOM异常。</p>
<h1 id="HotSpot虚拟机对象探秘"><a href="#HotSpot虚拟机对象探秘" class="headerlink" title="HotSpot虚拟机对象探秘"></a>HotSpot虚拟机对象探秘</h1><blockquote>
<p>这一章节我们讨论HotSpot虚拟机上Java堆中对象的分配，布局和访问的全过程</p>
</blockquote>
<h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><p>​        当虚拟机遇到一个字节码new指令时，会去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并检查这个类有没有加载，解析，初始化。如果没有则必须先加载类。</p>
<p>​        在一切准备工作完成后，虚拟机需要给新生对象分配内存空间，而该对象需要多大的空间在类的加载后就可以确定了，而为对象分配内存空间也就是把一块儿确认大小的内存块儿从堆空间中划分出来。这里有两种分配方式：</p>
<ol>
<li>假如堆中内存是绝对规整的，所有被使用的内存块儿放在一边，另一边是空闲的内存，中间放一个指针作为分界点。这样当需要新的空间时，只需要让指针平移与对象大小相等的距离，这种分配方式叫做指针碰撞。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef3ssezj314g0f0dhy.jpg" alt="image-20220613222609748"></p>
<ol start="2">
<li>如果堆中空间并不是规整的，被使用的区域和空闲区域交叉在一起，则不能只用指针碰撞，而只能维护一个列表，记录哪些内存块儿可用。在分配时在列表中找一个足够大的区域进行分配，并更新列表。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef5d3lpj316m0k877d.jpg" alt="image-20220613223521549"></p>
<p>​        使用哪种分配方式是由堆是否规整决定的，而堆是否规整是由采用的垃圾回收器是否带有空加压缩整理的能力决定的。</p>
<blockquote>
<p>除了如何划分空间以外，还有一个问题，对象创建在虚拟机中是非常频繁的操作，在多线程下，仅修改指针指向位置有这<strong>线程安全问题</strong>，比方说正在给对象A分配空间，指针还没有移动，对象B又使用原来的指针修改了。</p>
</blockquote>
<p>​        这里有两种解决方案：</p>
<ol>
<li>对分配动作进行同步处理，而实际中的虚拟机采用CAS来保证原子性和安全性。</li>
<li>把内存分配动作按照线程划分在不同的地方，即每个线程提前在堆中间分配一块儿空间，称为本地线程分配缓冲(TLAB)，哪个线程要分配内存，就在哪个线程的本地缓冲区中分配，只有本地缓冲区用完了，需要分配新的空间时再进行同步操作。是否使用TLAB，可以通过-XX:+/-UseTLAB来设定。</li>
</ol>
<p>​        在内存分配完成后，虚拟机必须将分配到的内存空间都初始化为0值，保证了对象的实例字段在java代码中可以不赋初始值就能直接使用。</p>
<p>​        接下来，虚拟机还需要对对象进行必要的设置，例如：这个对象是哪个类的实例（你是谁家的？），如何找到类的元数据信息（你家在哪？），对象的Hash值是多少（你身份证号多少？），对象的GC分代年龄（你多大？成年没？）</p>
<p>​        上面工作做完后，从虚拟机的角度看，一个新的对象已经创建好了，但从Java程序来看，对象的创建才刚刚开始——构造函数。也就是Class文件的<init>()方法没有执行，所有的字段为默认的零值，一般来说new指令之后会接着执行<init>()方法，按照程序设定来完成。这样一个可用对象就完成了。</p>
<h2 id="对象的内存布局"><a href="#对象的内存布局" class="headerlink" title="对象的内存布局"></a>对象的内存布局</h2><p>​        在HotSpot虚拟机中，对象在堆的存储布局分为：<strong>对象头，实例数据，对齐填充</strong>。</p>
<ol>
<li>对象头有两类信息<ol>
<li>存储对象自身的运行时数据，例如：哈希值，GC年龄，锁状态等数据。在32和64位虚拟机中分别为32位个bit和64个bit，官方称为 <strong>Mark Word</strong> ，但对象运行时数据很多，超过了32,64位Bitmap所能记录的最大限度，但对象头内的数据是对象自身定义数据的额外成本，所以被设计成一种动态的数据结构。</li>
<li>另一部分为类型指针，也就是虚拟机根据该指针来确定该对象是哪个类的实例，此外如果是数组，还需要记录数组的长度。</li>
</ol>
</li>
<li>实例数据，这里就存放着对象自身定义和从父类继承下来的各种类型的字段。HotSpot虚拟机默认分配顺序为longs、doubles、ints、shorts、chars、bytes、booleans，可以发现相同宽度的字段放在一起，且父类定义的会放在子类之前。如果参数设置：+XX:CompactFields参数为true（默认为true），子类中比较小的变量也允许插入到父类变量的空隙中，节省空间。</li>
<li>对齐填充，仅仅起到占位的作用。由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，换句话说任何对象的大小都必须是8字节的整数倍。对象头部分已经被设计成了8字节的倍数。</li>
</ol>
<h2 id="对象的访问"><a href="#对象的访问" class="headerlink" title="对象的访问"></a>对象的访问</h2><p>​        Java程序会通过栈上的reference数据来操作堆上的具体对象，它只是一个指向对象的引用。所以对象的访问方式也是又具体的虚拟机实现的，主流的访问方式是使用句柄和直接指针两种。</p>
<ol>
<li>通过句柄<ol>
<li>好处：reference中存放的稳定句柄地址，对象被移动（垃圾回收）时只改变句柄中的实例数据指针。reference本身不变。</li>
</ol>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef4as1rj316k0rawhw.jpg" alt="image-20220614225930127"></p>
<ol start="2">
<li>通过直接指针（默认）<ol>
<li>优点：一次访问，速度块</li>
</ol>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef30umij31680r8whn.jpg" alt="image-20220614230136856"></p>
<h1 id="实战：OutOfMemoryError异常"><a href="#实战：OutOfMemoryError异常" class="headerlink" title="实战：OutOfMemoryError异常"></a>实战：OutOfMemoryError异常</h1><p>​        在Java虚拟机规范中，除了程序计数器以外，其他区域都有发生内存溢出的可能，这一节通过代码验证各个运行时区域存储的内容，并且将初步介绍若干最基本的HotSpot虚拟机参数。</p>
<p>​        另外希望读者在实际工作中遇到内存异常时，能根据提示信息知道是哪个区域发生了异常，并且知道什么样的代码可能导致溢出。提示如果使用的控制台控制程序，直接在java后写参数即可，我这里使用的idea。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hef4z2owj31pj0u00y2.jpg" alt="image-20220615085843593"></p>
<h2 id="Java堆异常"><a href="#Java堆异常" class="headerlink" title="Java堆异常"></a>Java堆异常</h2><p>​        堆是存放对象实例的，所以当创建过多的对象并没有及时的GC掉就会挤满堆空间。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">HeapOOM</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
   <span class="token comment">/**
    * vm args: -Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError
    * 限制java堆的大小为20MB，不可扩展
    * -XX:+HeapDumpOnOutOfMemoryError 可以让虚拟机出现内存溢出异常时
    * Dump出当时的内存堆转储快照以便进行事后分析
    * 
    * java.lang.OutOfMemoryError: Java heap space
    */</span>
   <span class="token annotation punctuation">@Test</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">heap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">HeapOOM</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HeapOOM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        当出现<code>java.lang.OutOfMemoryError: Java heap space</code> 表示堆空间发生问题，要解决这个问题，我们需要分析映射出的<code>Dumping heap to java_pid753.hprof ...</code>文件。通过内存映像分析工具对Dump出来的堆转储快照进行分析。这里我们使用JProfiler来控制</p>
<ol>
<li><p>第一步确认到底是<code>内存溢出</code>还是<code>内存泄露</code>。</p>
<ol>
<li>内存溢出是指我无法申请到更多的空间</li>
<li>内存泄露是指我申请了空间，却无法释放已经申请的空间。</li>
</ol>
<blockquote>
<p>内存泄露  会导致  内存溢出</p>
</blockquote>
</li>
<li><p>如果是内存泄露，可以根据工具查看泄漏对象到GC Roots的引用链，什么原因导致无法被垃圾回收掉。</p>
</li>
<li><p>如果不是内存泄露，说明内存中的对象确实需要一存活，则应该检查-Xms -Xmx设置大小，看是否还可以多设置一些内存，再从代码上看，是否某些对象生命周期过长，存储结构不合理等。</p>
</li>
</ol>
<h2 id="虚拟机栈和本地方法栈溢出"><a href="#虚拟机栈和本地方法栈溢出" class="headerlink" title="虚拟机栈和本地方法栈溢出"></a>虚拟机栈和本地方法栈溢出</h2><p>​        在虚拟机中并不区分虚拟机栈和本地方法栈，只能通过<code>-Xss</code>参数化来设定，其中只有两种异常：</p>
<ol>
<li>栈深度大于虚拟机允许的最大深度：爆出StackOverflowError异常。</li>
<li>如果栈内存允许动态扩充，当无法再申请时爆出OOM。</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 虚拟机栈中出现的异常分为，超出栈限制的最大深度，抛出StackOverFlowError
     * 如果允许栈内存动态拓展，则会在无法申请到更多内存时，抛出OOM
     * HotSpot虚拟机选择的是不支持扩展，所以多数是抛出StackOverFlowError
     * 在单线程下，可能会因为递归不断地插入新的栈帧而将栈挤爆
     * 在多线程下，也可能单个线程的栈还没有溢出，申请线程太多也会造成内存溢出OOM
     * vm args：-Xss限制栈内容量
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token function">stackLeak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"stack length : "</span><span class="token operator">+</span>stackLength<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        出现栈溢出还是比较好确定位置的。栈溢出的话我们可以采取扩容和尾递归优化等方法记性扩容，如果是多线程导致的内存溢出，且不能减少内存数量的情况，只能通过减少最大堆和减少栈容量来换取更多的线程。</p>
<h2 id="方法区和运行时常量池溢出"><a href="#方法区和运行时常量池溢出" class="headerlink" title="方法区和运行时常量池溢出"></a>方法区和运行时常量池溢出</h2><pre><code>     这里使用String.intern()方法来测试，该方法会先判断字符串是否在字符串常量池内，如果已经存在，则直接返回地址，如果没有则创建一对象，并返回地址。而在JDK6以前，字符串常量池是在永久代的，所以可以通过`-XX:PermSize -XX:MaxPermSize`来限制永久代的大小，即可间接限制字符串常量池的大小。运行结果为：OOME:PermGen space
</code></pre>
<p>​        但在JDK7,8以后再使用该参数就没有用了，因为字符串常量池一定转移到堆中了，使用<code>-Xms</code>来控制堆的大小。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 在方法区和运行时常量池溢出
     * 通过String.inter()方法，该方法会先从字符串常量区寻找该对象，如果有直接返回，如果没有则创建并返回
     * JDK6以前 设置vm args：-XX:PermSize=6m -XX:MaxPermSize=6m 控制方法区大小 会爆出：OOM：PermGen space，
     * 说明这个时候的字符串常量池是在方法区中
     * JDK7以后 设置上述参数已经没有用了，字符串常量池被放在堆空间中，只能通过设置-Xmx参数限制堆大小可反应出来
     * vm args: -Xmx6m  爆出错误：OutOfMemoryError:GC overhead limit exceeded，这个代表当前已经没有可用内存了，经过多次GC之后仍然没有有效释放内存
     * -Xmx6m -XX:-UseGCOverheadLimit   爆出错误：OutOfMemoryError: Java heap space  说明字符串常量池已经转移到了堆空间中
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">permGenSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<blockquote>
<p>这里还有一个面试题</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 这个是String.intern()经典的问题
     * 当JDK6中得到的结果是两个false
     *      因为JDK6中 intern()方法将首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是字符串常量池的引用
     *      而StringBuilder创建的对象是在堆上面的，所有两者的地址当然不同
     * 而在JDK7中
     *      inter()方法就不需要再拷贝到字符串实例到常量池中了，字符串常量池已经在堆中了，只需要在字符串常量中记录一下实例引用就可以了
     *      而关于java的intern()爆出false，是因为在类加载的时候就有一个静态变量加入到字符串常量池了，所以后面再创建的就 不是同一个对象了
     *      System  --->  initializeSystemClass()  --->   sun.misc.Version.init();  其中Version类在加载的时候创建了一个静态变量
     *      private static final String launcher_name = "java";
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stringInternTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"计算机"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"软件"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里是直接在堆中创建了一个StringBuilder对象</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"ja"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"va"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//去字符串常量池找是否有java，有则返回地址，没有则创建后放回</span>
        <span class="token class-name">String</span> intern <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//这里是根据StringBuilder的值先去看字符串常量池是否有，有则返回，没有则创建</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"builder:"</span><span class="token operator">+</span>builder<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str:"</span><span class="token operator">+</span>str2<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"or_str:"</span><span class="token operator">+</span>intern<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>方法区也是放置类型信息的地方，如果动态生成大量的类，也会导致方法区溢出</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 关于方法去的内存溢出，注意：JDK6及其以前，方法区也被承认永久代，因为hotspot团队将堆空间的分代思想来构造方法区
     * 这样，就不用在针对方法区构建代码了，但是后来从JDk7开始将一些内容从方法区中抽离，而JDK完全使用元空间来代替永久代
     * 而一般类加载信息就会放到这部分中，我们可以通过不断地加载新的类，造成OOM
     * 这一块儿我们使用动态代理不断地创建新的类，需要注意的是这里并非纯粹的实验，许多主流的框架例如Spring都会使用到动态代理
     * 来创建新的代理类，而增强类越多，方法区就要越大，这样需要注意可能导致方法区的OOM
     * JDK7使用  JDK8中该指令已经remove了
     * vm args: -XX:PermSize=10M -XX:MaxPermSize=10M
     * JKD8使用
     * -XX:MaxMetaspaceSize:设置元空间的最大值，默认是-1，即不限制
     * -XX:MetaspaceSize:指定元空间的初始空间大小，以字节为单位，当触及该值时，进行垃圾回收
     *      ，同时收集器对该值进行调整，如果释放大量空间则将该值降低，如果释放很少的话，则会在最大值下相应提升
     * -XX:MinMetaspaceFreeRatio:作用是在垃圾回收之后控制最小的元空间剩余容量的百分比，可减少因为元空间的不足导致的
     *      垃圾回收的频率
     * -XX:MaxMetaspaceFreeRatio:控制对最大的元空间剩余容量的百分比
     *
     * Exception in thread "main" java.lang.OutOfMemoryError: Metaspace
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">methodArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">OOMObject</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">setUseCache</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> methodProxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>objects<span class="token punctuation">,</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OOMObject</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="直接内存溢出"><a href="#直接内存溢出" class="headerlink" title="直接内存溢出"></a>直接内存溢出</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
     * 直接内存，不属于运行时数据区，但这部分内存被频繁使用，而在JKD 1.4后加入了NIO
     * 它可以使用Native函数库直接分配堆外内存然后通过一个缓存在堆中的DirectByteBuffer对象
     * 作为这块儿内存的引用来操作，能显著的提高性能，因为避免了在Java堆和Native堆中来回的复制数据
     *
     * 容量可通过：-XX:MaxDirectMemorySize参数来设定大小，如果不设定默认使用java堆的最大值（-Xmx指定）
     *
     * java.lang.OutOfMemoryError
     * 	at sun.misc.Unsafe.allocateMemory(Native Method)
     * 	at OOM_EXP.text.DirectMemory(text.java:148)
     *
     * 由直接内存导致的内存溢出，明显特征是在Heap Dump文件中不会看见什么明显的异常情况
     * 如果发现内存溢出后的Dump文件很小，而程序中又间接的使用了DirectMemory（典型的间接使用就是Nio）
     * 那可以着重的检查直接内存方面的原因了
     */</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">DirectMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> unsafeField <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        unsafeField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Unsafe</span> unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> unsafeField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            unsafe<span class="token punctuation">.</span><span class="token function">allocateMemory</span><span class="token punctuation">(</span>_1MB<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​        由直接内存导致的内存溢出的一个明显的特征就是dump文件不会有明显异常情况，dump文件很小，如果程序中又使用了NIO，则需要重点关注。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​        现在我们已经知道虚拟机大概的划分，和各个区域存储什么信息，什么样的代码操作会导致，虽然Java中有垃圾回收，但如果不注意就会导致问题。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>内存溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型与线程</title>
    <url>//post/JVM/12_Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="Java内存模型与线程"><a href="#Java内存模型与线程" class="headerlink" title="Java内存模型与线程"></a>Java内存模型与线程</h1><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8zz0ocjxkj30lc08u3za.jpg" alt="image-20221211165341244"></p>
<p>​        上面的图就是<code>线程，工作内存，主内存</code>的关系，也可以看到线程想要获取数据，需要先到工作内存找，工作内存从主内存中找，那为啥需要这个工作内存 ? 而不直接访问主内存，也可以避免数据不一致的情况了。</p>
<p>​        这就需要我们对物理计算机中如何并发访问有一点儿了解，我们知道CPU内含有寄存器，但寄存器能存放的内容太少，而大部分时间都要从内存中获取，如果等待从内存中取得数据，CPU又被浪费了，因为两者间的速度差太多，所以引入了高速缓存。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8zz90yl99j30kg087dgj.jpg" alt="image-20221211170142836"></p>
<p>​        除了增加高速缓存外，为了处理器内部的运输单元能被充分利用，处理器会对输入代码进行乱序执行，在计算后将乱序执行的结果重组，保证该结果与顺序执行的结果一致。而潜在的风险就是一个计算任务依赖另一个计算任务的中间结果，其顺序性不能靠代码的先后顺序来保证，而Java内存模型也保留了这一点，我们也可以看到上面两幅图结构是非常相似的。所以Java内存模型的定义也是由硬件决定的。</p>
<h2 id="内存间交互操作"><a href="#内存间交互操作" class="headerlink" title="内存间交互操作"></a>内存间交互操作</h2><p>​        也就是图1中，<code>线程，工作内存，主内存</code>数据是怎么交互的，Java内存模型定义了8个操作，每个操作都是原子性的，对double，long类型的变量来说，<code>load,store,read,write</code>有一定例外，分为两次32位操作，问题不大。</p>
<p><strong>锁定（lock）</strong>: 作用于主内存中的变量，将他标记为一个线程独享变量。</p>
<p><strong>解锁（unlock）</strong>: 作用于主内存中的变量，解除变量的锁定状态，被解除锁定状态的变量才能被其他线程锁定。</p>
<p><strong>read（读取）</strong>：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。</p>
<p>**load(载入)**：把 read 操作从主内存中得到的变量值放入工作内存的变量的副本中。</p>
<p>**use(使用)**：把工作内存中的一个变量的值传给执行引擎，每当虚拟机遇到一个使用到变量的指令时都会使用该指令。</p>
<p><strong>assign（赋值）</strong>：作用于工作内存的变量，它把一个从执行引擎接收到的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。</p>
<p><strong>store（存储）</strong>：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的 write 操作使用。</p>
<p><strong>write（写入）</strong>：作用于主内存的变量，它把 store 操作从工作内存中得到的变量的值放入主内存的变量中。</p>
<blockquote>
<p>其中，<code>read,load</code> 和 <code>store,write</code>都要求顺序执行，但中间可以插入其他操作。</p>
</blockquote>
<p>​        Java中还规定了这8种操作必须满足的规则（这里我通俗说）</p>
<ol>
<li><code>read,load</code> 和 <code>store,write</code> 不能单独出现，我要了必须用，我给了你必须收。</li>
<li>工作内存中修改了，必须同步到主内存</li>
<li>如果工作内存没修改，不允许同步主内存</li>
<li>一个新变量只能在主内存中诞生</li>
<li>一个变量同一时刻只能被一个线程<code>lock</code>,如果统一线程多次加锁后，必须多次释放锁。 排他，可重入</li>
<li>一个变量Lock后，会清空工作内存，之后使用需要重新获取加载。</li>
<li>不能先unlock 再lock，也不允许unlock 别的线程加的锁</li>
<li>执行unlock前，先将此变量的值同步回主内存</li>
</ol>
<hr>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>三大特性：</p>
<ol>
<li>可见性（一个线程修改后，其他线程都能获取到新值）底层每次使用前都会刷新该变量值。</li>
<li>禁止指令重排优化，我用代码距离：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span> configOptions<span class="token punctuation">;</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> configText<span class="token punctuation">;</span>
<span class="token keyword">volatile</span> <span class="token keyword">boolean</span> initialized <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

<span class="token comment">// 线程A中执行 读取配置文件进行初始化</span>
configOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
configText <span class="token operator">=</span> <span class="token function">readConfigFile</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

<span class="token comment">// 线程B中执行 等待初始化好后，利用配置干活儿</span>
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>initialized<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">dosomethingWithConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        如果上面<code>initialized</code> 没用volatile修改，<code>initialized = true;</code>就可能排到上面，导致B线程以为初始化好后进行操作，导致问题。这些问题十分隐蔽，因为代码的执行顺序可能与代码编写的顺序不同。</p>
<blockquote>
<p>这里我看有的资料说Volatile具有原子性，但我自己代码验证无法保证，因为Java运算操作符无原子性。Volatile是满足先行发生原则，具体看下面：</p>
</blockquote>
<h2 id="先行发生原则"><a href="#先行发生原则" class="headerlink" title="先行发生原则"></a>先行发生原则</h2><p>​        负责判断数据是否存在竞争，线程是否安全的有效手段，如果两个操作之间关系不匹配这些规则，则可能被指令重拍</p>
<h3 id="程序次序规则"><a href="#程序次序规则" class="headerlink" title="程序次序规则"></a>程序次序规则</h3><p>​        在一个线程中，按照<strong>控制流</strong>顺序，书写在其那面的操作先行发生与书写在后面的操作。注意：控制流不是代码顺序</p>
<p>Java 提供了三种类型的控制流语句。</p>
<ol>
<li>决策声明<ul>
<li>if 语句</li>
<li>切换语句</li>
</ul>
</li>
<li>循环语句<ul>
<li>做while循环</li>
<li>while 循环</li>
<li>for 循环</li>
<li>for-each 循环</li>
</ul>
</li>
<li>跳转语句<ul>
<li>中断语句</li>
<li>继续声明</li>
</ul>
</li>
</ol>
<h3 id="管程锁定规则"><a href="#管程锁定规则" class="headerlink" title="管程锁定规则"></a>管程锁定规则</h3><p>​        同一个锁，unlock 先行于 lock操作，这里先行指的时间上的先后</p>
<h3 id="Volatile变量规则"><a href="#Volatile变量规则" class="headerlink" title="Volatile变量规则"></a>Volatile变量规则</h3><p>​        对Volatile变量的写操作先行发生于后面对这个变量的读操作，这里的先后指时间上的先后</p>
<h3 id="线程启动规则"><a href="#线程启动规则" class="headerlink" title="线程启动规则"></a>线程启动规则</h3><p>​        Thread的start() 先行于此线程的每个动作</p>
<h3 id="线程终止规则"><a href="#线程终止规则" class="headerlink" title="线程终止规则"></a>线程终止规则</h3><p>​        Thread所有操作都先行发生于对此线程的终止检查</p>
<h3 id="线程中断规则"><a href="#线程中断规则" class="headerlink" title="线程中断规则"></a>线程中断规则</h3><p>​        <code>Thread::interrupt() </code>先行发生与对此线程的中断检查 <code>Thread::interrupted()</code></p>
<h3 id="对象终止规则"><a href="#对象终止规则" class="headerlink" title="对象终止规则"></a>对象终止规则</h3><p>​        一个对象的初始化完成先于<code>finalized()</code>方法的开始</p>
<h3 id="传递性"><a href="#传递性" class="headerlink" title="传递性"></a>传递性</h3><p>​        操作A先行于操作B，操作B先与操作C，则操作A先于操作B</p>
<p>这里也举个重要的例子：简单的变量get，set方法</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">setValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> value<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>假设现在有线程A，B，线程A先执行（时间上）了<code>setValue(1)</code>,线程B后执行了<code>getValue()</code>,问线程B获取到的返回值是多少？</p>
</blockquote>
<p>这道题很坑，常理来想，时间上先发生的操作肯定比后发生的操作先执行。但实际上：</p>
<p>​        时间先后顺序与先行发生原则之间基本没有因果关系，我们衡量并发安全问题的时候不要受到时间顺序的干扰，一切必须以先行发生原则为准。 时间上的先后，代码上的先后 都不能决定是否并发安全。</p>
<hr>
<h2 id="Java与线程"><a href="#Java与线程" class="headerlink" title="Java与线程"></a>Java与线程</h2><p>​        实现线程主要有三种方式，使用内核线程实现（1:1），使用用户线程实现（1:N），使用用户线程+轻量级进程混合实现（N:M）</p>
<h3 id="内核线程实现"><a href="#内核线程实现" class="headerlink" title="内核线程实现"></a>内核线程实现</h3><p>​        直接由操作系统内核支持的线程，线程的切换也由内核管理，程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——轻量级进程，也就是传统意义线程，每个轻量级进程都由一个内核线程支持，一比一的关系。</p>
<p>优点：每个轻量级进程都是独立的调度单元，一个阻塞了，不影响整个进程继续工作</p>
<p>缺点：基于内核线程实现，各类操作需要频繁在 <code>用户态 与 内核态</code>间切换。且一个系统支持的轻量级进程是有限的</p>
<h3 id="用户线程实现"><a href="#用户线程实现" class="headerlink" title="用户线程实现"></a>用户线程实现</h3><p>​        狭义的用户线程指：完全建立在用户空间的线程库上，系统内核无法感知，线程的建立，同步，销毁和调度完全在用户态中完成，可以不切换到内核态，速度很快。 部分高性能的数据库多线程就是由用户线程实现的。</p>
<p>缺点：也是由于没有系统内核的支持，所有系统操作都要由用户程序自己处理，Java，Ruby曾使用，后面也不用了，不过Go语言支持用户线程，作为高并发。</p>
<h3 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h3><p>​        既存在用户线程，也存在轻量级进程。用户线程还是在用户态，轻量级进程作为内核线程与用户线程之间的桥梁。</p>
<h3 id="Java线程的实现"><a href="#Java线程的实现" class="headerlink" title="Java线程的实现"></a>Java线程的实现</h3><p>​        HotSpot为例，它的每个Java线程都是直接映射到一个操作系统原生线程实现的，也就是上面的轻量级进程。线程的调度全权交给操作系统。</p>
<h3 id="Java线程调度"><a href="#Java线程调度" class="headerlink" title="Java线程调度"></a>Java线程调度</h3><p>​        线程调度分为：协同式 和 抢占式</p>
<ol>
<li>协同式：线程执行时间由线程本身来控制。线程把自己工作干完了，主动通知系统切换到另一个线程。Lua使用</li>
<li>抢占式：每个线程由操作系统来分配执行时间。Java使用</li>
</ol>
<p>​        协同式的好处是实现简单，但如果一个线程卡死会导致程序一直阻塞。如果使用抢占式，可以保证线程的执行时间片到时间了，就切换到其他线程了，比方说我们用IDEA写代码，如果卡死了，我们可以启动任务管理器来Kill这个卡死线程。</p>
<h3 id="状态转化"><a href="#状态转化" class="headerlink" title="状态转化"></a>状态转化</h3><p>​        线程状态。线程可以处于以下状态之一：</p>
<ul>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#NEW"><code>NEW</code></a><br>尚未启动的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#RUNNABLE"><code>RUNNABLE</code></a><br>在 Java 虚拟机中执行的线程处于这种状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#BLOCKED"><code>BLOCKED</code></a><br>阻塞等待监视器锁的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#WAITING"><code>WAITING</code></a><br>无限期等待另一个线程执行特定操作的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#TIMED_WAITING"><code>TIMED_WAITING</code></a><br>等待另一个线程执行某个操作达指定等待时间的线程处于此状态。</li>
<li><a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Thread.State.html#TERMINATED"><code>TERMINATED</code></a><br>已退出的线程处于此状态。</li>
</ul>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
  </entry>
  <entry>
    <title>垃圾回收与内存分配</title>
    <url>//post/JVM/3_%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5.html</url>
    <content><![CDATA[<h1 id="垃圾收集器与内存分配策略"><a href="#垃圾收集器与内存分配策略" class="headerlink" title="垃圾收集器与内存分配策略"></a>垃圾收集器与内存分配策略</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>我们先提出三个问题：</p>
<blockquote>
<p>哪部分内存需要回收?</p>
<p>什么时候进行回收？</p>
<p>如何进行回收？</p>
</blockquote>
<h2 id="生存还是死亡？"><a href="#生存还是死亡？" class="headerlink" title="生存还是死亡？"></a>生存还是死亡？</h2><h3 id="where"><a href="#where" class="headerlink" title="where"></a>where</h3><p>​    我们都知道在Java中，栈，本地方法区，程序计数器都是线程私有的，随着线程的创建和结束，内存也会自动的分配和销毁，执行的方法也随着栈帧的插入和弹出而创建和销毁。所以这部分区域我们不必担心。</p>
<p>​    而方法区（元空间）和堆空间，是线程共享的，这部分区域的内存就是我们需要去进行垃圾回收的区域。</p>
<h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p>​    什么时候进行垃圾回收，就需要我们判断这个对象是否仍被引用，如果没有一个指针指向它，那我们就可以放心的进行垃圾回收，如果仍被引用，那就不行（你杀根本干嘛，这人我正用着呢），关于对象引用判断分为两种：</p>
<h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><p>​    就是说一个人引用，就对一个引用计数器加一，如果这个人不引用了，我们就减一，当引用计数器等于0的时候，我们就可以判定，可以被垃圾清理了。</p>
<blockquote>
<p>该方法易理解，且实现简单。但一个缺点就是遇到循环依赖，不好处理。在主流的java虚拟机中都没有使用该方法进行判断。下面用代码进行说明。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> referenceCountingGC <span class="token punctuation">&#123;</span>
  <span class="token class-name">Object</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token comment">/**
   * 这里创建一个字节数组只是为了，占一些内存，方便后面看GC情况。
   */</span>
  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1mb <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
  <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bigSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1mb<span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token comment">/**
   * -XX:+PrintGCDetails 
   * 输出GC详情
   * @param args
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    referenceCountingGC <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">referenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    referenceCountingGC <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">referenceCountingGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">A</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token class-name">B</span><span class="token punctuation">;</span>
    <span class="token class-name">B</span><span class="token punctuation">.</span>instance <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span>

    <span class="token class-name">A</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">B</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * [Full GC (System.gc()) 
     * [PSYoungGen: 496K->0K(38400K)]
     * [ParOldGen: 8K->424K(87552K)]
     * 504K->424K(125952K
     * ), [Metaspace: 3208K->3208K(1056768K)],
     * 0.0135739 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] 
     * 
     * 我们看到即使两个对象相互引用，但JVM还是进行回收了，侧面反映出JVM没有使用
     * 引用技术法来判断对象是否存活
     */</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h4><p>​    简单来说我们将对象之间相互的引用想象成一个树结构，其中根对象为<code>GC roots</code>(有一系列的根对象)，树结构中节点与节点之间形成链，当我们寻找一个对象时，从GC roots往下走，该路径为<code>引用链</code>,如果一个对象无法在引用链中找到，就是不可达的，我们就对可以进行垃圾回收。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefu2sk4j313s0skjuh.jpg" alt="image-20220623095217493"></p>
<p>​        这里我们可以看到虽然object5,object6,object7之间相互引用，但是在引用链外，所以也是要判定为需要垃圾回收的。</p>
<blockquote>
<p>有哪些可以对象可作为GC roots呢？</p>
</blockquote>
<ol>
<li>在虚拟机栈（局部变量表）中引用的对象，也就是当前方法正在使用的参数，局部变量，临时变量。</li>
<li>方法区中静态属性引用对象。（类的引用型静态变量）</li>
<li>方法区中常量引用对象。譬如字符串常量池中引用的对象。</li>
<li>本地方法栈中JNI（Native方法）引用对象</li>
<li>Java虚拟机内部引用对象，如基本数据类型对应的Class对象，一些异常对象，类加载器对象。</li>
<li>被同步锁持有的对象</li>
<li>反映Java虚拟机内部情况的JMXBean，JVMTI中注册的回调，本地代码缓存。</li>
</ol>
<p>除了上述固定的GC Roots集合外，根据用户所选的<code>垃圾回收器</code>以及<code>当前回收的内容区域</code>不同，还有其他对象<code>临时</code>加入，共同构建GC Roots集合。比如：分代收集，局部回收。</p>
<h4 id="再谈引用"><a href="#再谈引用" class="headerlink" title="再谈引用"></a>再谈引用</h4><p>​    最初在JKD1.2版本之前，引用的概念就是<code>引用与非引用</code>，但现在我们希望能够再细分一些，比如一些对象我们希望在内存足够时，你就继续待着，如果内存不够了，那我们就清理掉(这么看与裁员是一样的)。很多系统的缓存功能都符合这样的应用场景。</p>
<p>​    在JDK1.2后，Java对引用的概念进行扩充，分为<code>强引用，软引用，弱引用，虚引用</code></p>
<ul>
<li>强引用就是最原始的概念<code>Object o1 = new Object()</code>,只要强引用关系还在，就不会清除</li>
<li>软引用是指一些有用，但非必要的对象，在系统放生内存溢出前，将这些对象放入回收范围之中，进行第二次的回收，如果这次回收没有足够的内存，就会抛出内存溢出异常，java中使用<code>SoftReference类</code>实现软引用。</li>
<li>弱引用指分必要对象，只会撑到下次垃圾回收之前，无论内存够不够，都会清理，java中使用<code>WeekReference类</code>实现</li>
<li>虚拟用（幽灵引)一个对象有没有虚引用都不影响是否被清理，它的作用是指当清理时，系统收到一个通知。java中使用<code>PhantomReference类</code>实现</li>
</ul>
<h3 id="how"><a href="#how" class="headerlink" title="how"></a>how</h3><p>​    当进行可达性分析后，一个对象被判定为不可达，也不是非死不可，第一次判断完后，该对象被一次标记，现在可以算的上<code>缓期</code>，随后再进行一次筛选，<strong>判断此对象是否有必要执行finalize()方法？</strong></p>
<blockquote>
<p>如果对象没有覆盖finalize()方法，或者finalize()方法已经被执行了，就判定为<code>没必要执行</code></p>
</blockquote>
<p>​    如果该对象被判定为有必要执行执行finalize()方法，对象会被放到<code>F-Queue</code>的队列中，随后一条由虚拟机创建的，低调低优先级的Finalizer线程会去执行他们的finalize()方法，这里的执行时指启动finalize()方法，并不一定等待到运行结束，因为如果finalize()执行缓慢，甚至发生死循环，则其他对象无法被删除，可能导致内存回收子系统的崩溃，finalize()是最后一次救自己的机会，随后还会有第二次标记，只要在这之前，将自己与引用链上重新关联，那再第二次标记时就会踢出<code>即将回收的队列</code>，如果这个时候还没逃走，那就得被清理了。下面用代码演示：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">FinalizeEscapeGC</span> <span class="token constant">SAVE_HOOK</span><span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes i am still alive"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finalize method executed !"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//进行自救</span>
        <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"进行自救："</span><span class="token operator">+</span><span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FinalizeEscapeGC</span> escapeGC <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建的对象："</span><span class="token operator">+</span>escapeGC<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        escapeGC <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//第一次成功救出自己</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//因为  Finalizer方法优先级低，我们等一下</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//下面代码和上面一样</span>
        <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//因为  Finalizer方法优先级低，我们等一下</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">FinalizeEscapeGC</span><span class="token punctuation">.</span><span class="token constant">SAVE_HOOK</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i am dead"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    运行后我们发现第一次gc后，该对象还存活，因为第一次执行了finalize()方法时，我们将对象本身赋值给了类变量，但是当第二次gc时，对象就彻底清除了，因为finalize()只执行一次。</p>
<blockquote>
<p>最后声明一点，不要使用finalize()来拯救对象，官网也不推荐，只是在这里让大家知道它是干嘛的就行了。</p>
</blockquote>
<h3 id="回收方法区"><a href="#回收方法区" class="headerlink" title="回收方法区"></a>回收方法区</h3><p>​    在《Java虚拟机规范》中并未要求堆方法区实现垃圾回收，所以有的虚拟机版本确实没有回收方法区，而且方法区回收也是比较苛刻的。</p>
<p>​    方法区垃圾回收主要回收两类：废弃的常量，类型信息。</p>
<blockquote>
<p>常量的垃圾回收和上面的类似，主要判断一个类型是否不再被使用比较苛刻，需要满足下面三点：</p>
</blockquote>
<ol>
<li>该类所有实例，包括派生子类的实例都已经被回收。</li>
<li>加载该类的类加载被回收了。</li>
<li>该类对应的java.lang.Class对象没有被任何引用。</li>
</ol>
<blockquote>
<p>满组上面三点，也不一定被回收，下面介绍一些相关虚拟机参数：</p>
</blockquote>
<ol>
<li>-Xnoclassgc 控制是否对类型回收。</li>
<li>-verbose:class -XX:+TraceClassLoading查看类加载和卸载信息(需要Product版虚拟机)</li>
<li>-XX:+TraceClassUnLoading(需要FastDebug版虚拟机)</li>
</ol>
<blockquote>
<p>什么时候需要回收方法区？</p>
</blockquote>
<p>​    在大量使用反射，动态代理，CGLib等字节码框架，会动态创建很多类，通常都需要Java虚拟机具有类型卸载的能力。保证不会堆方法区有太大的压力</p>
<hr>
<h2 id="垃圾收集算法"><a href="#垃圾收集算法" class="headerlink" title="垃圾收集算法"></a>垃圾收集算法</h2><p>​    在上面我们已经知道判定一个对象是否会被回收可通过<code>引用计数式</code>和<code>追踪式(可达性分析)</code>两种算法，而引用计数式在主流的垃圾回收策略中都没使用，所以我们下面讨论的还是追踪式算法。</p>
<blockquote>
<p>第一个问题：我们每次都是直接对整个堆进行可达性分析和垃圾回收吗？</p>
</blockquote>
<p>​    不可行，这会导致消耗大量的时间。大多数的垃圾回收都遵从“分代收集”的理论进行设计，而它是建立在两个分代假说上的。</p>
<p>​    &gt; 若分代假说：绝大多数对象都是朝生夕死的</p>
<p>​    &gt; 强分代假说：熬过越多次垃圾回收的对象，越难以消亡</p>
<p>​    这两个分代假说共同奠基了一个设计原则：收集器应该将Java堆划分出不同的区域。通俗的讲我们把<code>新生对象</code>放在一起，把<code>老不死的(戏称)</code>放在一起，通过回收对象的年龄（熬过的回收次数）放在不同的区域，每次只针对<code>新生代</code>进行垃圾回收，<code>老年代</code>偶尔进行一次回收。针对不同的区域收集，也就有了<code>Minor GC ,Major GC ,Full GC</code>回收类型的划分。</p>
<p>​    在划分区域后，根据不同区域以及区域内元素的特点，我们使用不同的<code>垃圾收集算法</code>，且他们都是基于分代收集理论。后面我们会详细说明。</p>
<p>​    &gt; 标记-清除算法</p>
<p>​    &gt; 标记-复制算法</p>
<p>​    &gt; 标记-整理算法</p>
<blockquote>
<p>第二个问题：对象不是孤立存在的，如果对象之间存在跨代引用怎么办？</p>
</blockquote>
<p>​    当我们针对新生代垃圾回收时，因为存在跨代引用，我们还得遍历老年代保证可达性分析结果的正确。这肯定也会对内存回收带来负荷，为了解决这个问题，我们对分代收集理论添加第三条经验法则：</p>
<p>​    &gt; 跨代引用假说：跨代引用相比同代引用要少的多。</p>
<p>​    其实根据前面法则，我们也能知道如果针对存在跨代引用，那么新生代的对象在经历过多轮垃圾回收后，也会被放到老年代的，这样问题就解决了，<strong>但在之此前我们怎么减少对老年代分析的性能消耗？</strong>，我们可以依据跨代引用假说，我们就可以不用对整个老年代进行扫描，只需要在新生代上建立一个全局的数据结构(记忆集，Remembered Set)，这个结构把老年代划分成若干个小块儿，标识出老年代的哪一块儿内存存在跨代引用，这样每次对新生代垃圾回收时，只用把老年代这片内存的对象加入到GC Roots即可。虽然在对象改变关系时维护数据的准确性，但比起扫描整个老年区还是划算的。</p>
<blockquote>
<p>这里我们需要确定一些回收类型的概念</p>
<blockquote>
<p>部分收集（Partial GC）：目标不是完整的收集整个Java堆，其中又细分为：</p>
<blockquote>
<p>新生代收集(Minor GC)：只收集新生代</p>
<p>老年代收集(Major GC)：只收集老年代，只有CMS收集器有单独收集老年代的行为(这里有一些概念上的混淆，有人会把Major GC 和 Full GC混淆，需要我们自己判断说的到底是哪个)</p>
<p>混合收集(Mixed GC)：收集新生代和部分老年代，目前只有G1收集器有</p>
</blockquote>
<p>整堆收集（Full GC）：收集整个堆区域和方法区</p>
</blockquote>
</blockquote>
<h3 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h3><p>​    这是一个最早期最基础的算法，也就是我们先标记哪些对象需要清除，然后再统一进行清理，当然我们也可以只标记哪些需要保留，将没有标记的进行统一的清理，但是这个算法存在两个问题：</p>
<ol>
<li>执行效率不稳定：如果有大量对象需要清理或者大量对象需要留下，那我们在标记和清除上花的时间就越多。</li>
<li>内存空间碎片化问题，也就是说在我们标记，清除后会产生大量不连续的内存碎片，当后面再分配大对象时，无法分配到空间，而再进行一次GC。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefugyq0j30t00ig75n.jpg" alt="image-20220624100645632"></p>
<h3 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h3><p>​    也被称为复制算法，最初理论为内存按照容量分成1:1两块，每次只使用一块儿，当一块儿不够用时，在分析后，将保留的对象标记并复制到另一半区域，移动堆顶指针，按照顺存放，然后直接清除之前的区域。这样就不用担心空间零散的碎片。不过<strong>缺点也很明显</strong>，你直接分一半，也太浪费空间了，导致频繁的标记复制。<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefux99ij30gr0a874p.jpg" alt="image-20220624122757393"></p>
<p>​    后面又进行了一次优化：<code>Appel式回收</code>，新生代分为一个较大的<code>Eden区域</code>，和两个较小的<code>Survivor区</code>,默认比例为8:1:1,也就是每次我们只使用Eden区和一个Survivor区，当垃圾回收时，将保留的对象都放在另一个Survivor区域，然后直接堆之前的区域清理。</p>
<blockquote>
<p>第三个问题：那假如这次清理完，发现有大量的对象需要保存，但是一个Survivor区不够，怎么办？</p>
</blockquote>
<p>​    这里就设计了一个安全设计，当一个Survivor区不够，就需要使用老年代来做分配担保，将这些对象（超出的部分）直接交给老年代。不过我们最好还是用代码测试一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a3<span class="token punctuation">;</span>
    <span class="token comment">/**
     * -XX:NewSize=10485760—新生代大小为10m
     * -XX:MaxNewSize=10485760—新生代最大大小为10m
     * -Xms20M—初始堆大小为20m
     * -Xmx20M—最大堆大小为20m
     * -XX:+UseParNewGC：新生代使用ParNewGC垃圾回收器
     * -XX:+UseConcMarkSweepGC---老年代使用CMS
     * -XX:+PrintGCDetails---打印GC详细日志
     * -XX:+PrintGCTimeStamps—打印GC时间
     * -XX:SurvivorRatio=8—设置eden区和survivor区的比例为8:1:1
     * -XX:PretenureSizeThreshold=10485760—设置最大对象的阈值为10m
     *
     * @param args
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 当前为6m时，可以将对象全部放在eden区
         * par new generation   total 9216K, used 8000K
         * eden space 8192K,  97% used
         * from space 1024K,   0% used
         * concurrent mark-sweep generation total 10240K, used 0K
         */</span>
        a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1m</span>

        <span class="token comment">/**
         * 可以发现当再添加189k时,发生了第一次gc，
         * 如果Survivor区放不下存活对象，存活对象并不是全都进入老年代，而是部分对象进入老年代，部分对象继续被分配到Survivor区
         * par new generation   total 9216K, used 720K
         * eden space 8192K,   1% used
         * from space 1024K,  62% used
         * concurrent mark-sweep generation total 10240K, used 6146K
         */</span>
        a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">189</span><span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">//直接分配一个5m的对象，由于eden区只有8m，之前已经分配了的再加上一些未知对象也会占据一定的内存空间，此时必然会引起新生代gc</span>
        a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//5m</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以发现在上面的实验情况与我们想象的并不一样，结论就是：<code>如果Survivor区放不下存活对象，存活对象并不是全都进入老年代，而是部分对象进入老年代，部分对象继续被分配到Survivor区。</code>下面还有一种情况我们用代测试：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> demo2 <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 此时从红框中的信息可以清晰的发现，from区被占用率为0%，
     * 而老年代空间则被使用了26m左右，存活对象还是25m，逻辑没变，
     * 那么这情况就可以表明25m对象在新生代gc后都进入了老年代。
     * 
     * 
     * 结论：新生代gc后，如果触发了老年代gc，即使survivor区放的下部分存活对象，对象也会全部进入老年代。
     * @throws InterruptedException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//一开始我们就分配了80m，相当于一个eden区</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">80</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        data0 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token comment">//请求40m</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//每个请求10m</span>
            data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        data <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">10</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">/**
     * -XX:NewSize=104857600—新生代大小为100m
     * -XX:MaxNewSize=104857600—新生代最大大小为100m
     * -Xms200M—初始堆大小为200m
     * -Xmx200M—最大堆大小为200m
     * -XX:+UseParNewGC：新生代使用ParNewGC垃圾回收器
     * -XX:+UseConcMarkSweepGC---老年代使用CMS
     * -XX:+PrintGCDetails---打印GC详细日志
     * -XX:+PrintGCTimeStamps—打印GC时间
     * -XX:SurvivorRatio=8—设置eden区和survivor区的比例为8:1:1
     * -XX:PretenureSizeThreshold=104857600—设置最大对象的阈值为100m
     * @param args
     * @throws InterruptedException
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 上述代码一开始就被分配了80m的大对象，所以这个对象会直接进入老年代占据80m空间，
         * 那老年代就只剩20m空间了。肯定不够分配新生代GC后的存活下来的25m对象，就会触发full gc。
         */</span>
        <span class="token function">loadData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    上面测试的结论是：<code>新生代gc后，如果触发了老年代gc，即使survivor区放的下部分存活对象，对象也会全部进入老年代。</code></p>
<h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><p>​    现在我们是针对的<code>老年代</code>对象的存亡特征，其中标记的过程仍然是”标记-清除”，但后续不是直接清除可回收对象，而是让所有存活对象都向内存空间一端移动，然后直接清理掉边界值以外的内存，这样也不用担心空间碎片的问题了。但是缺点也很明显，老年代中大部分都向都是存活的，如果移动并更新引用它们的地方，也是非常负重的操作。而且必须暂停所有的用户应用程序才能进行。</p>
<p>​    所以如果是使用标记-清除算法，内存分配会很复杂，使用标记-整理算法，内存回收时很复杂。Hotspot虚拟机里面关注吞吐量的<code>Parallel Old收集器</code>基于标记-整理算法的，关注延迟的<code>CMS收集器</code>是基于标记-清除的。具体详细内容可以去深入了解。</p>
<p>​    还有一种和稀泥的方法，前面一直使用标记-清理算法，暂时容忍空间碎片，当影响到对象分配时，再进行标记-整理算法。前面提到的<code>CMS收集器</code>遇到碎片过多时，采用的就是这个方式。</p>
<hr>
<h2 id="经典垃圾收集器"><a href="#经典垃圾收集器" class="headerlink" title="经典垃圾收集器"></a>经典垃圾收集器</h2><p>​    如果说垃圾收集算法是内存回收的方法论，那垃圾回收器就是内存回收的实践者，在《Java虚拟机规范》并未声明垃圾收集器规定，所以各个厂商，不同版本的垃圾收集器都会有一些差别，不同的虚拟机也会提供不同的参数来选择适合自己场景的收集器。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heftlrvrj30j60eqt9h.jpg" alt="image-20220628151229971"></p>
<p>​    上图为各个收集器直接可行的匹配关系。</p>
<h3 id="Serial-收集器"><a href="#Serial-收集器" class="headerlink" title="Serial 收集器"></a>Serial 收集器</h3><p>​    它是最基础的，最早的收集器，基于<code>标记复制</code>算法实现，特点：<code>单线程，当进行垃圾收集的时候，必须暂停其他所有工作线程，直到收集完毕，Stop The World</code>。对于大部分人来说是不可接受的，好比你每运行一小时，都得暂停是十五分钟。</p>
<p>​    但注意的是它依然是HotSpot虚拟机运行在客户端的默认新生代收集器，它的优点就是简单且高效，对于内存资源受限制的环境，它是所有收集器中额外内存消耗最小的，对于单核处理或者处理器较少时，Serial就很高效，没有线程交互的开销。</p>
<h3 id="ParNew-收集器"><a href="#ParNew-收集器" class="headerlink" title="ParNew 收集器"></a>ParNew 收集器</h3><p>​    相当于是一个Serial多线程并行版本，基于<code>标记复制</code>算法实现，其实性能一般，只不过是后来出现的CMS收集器只能个Serial和ParNew收集器配合使用，CMS收集器的一个特点就是首次实现垃圾收集线程和用户线程（基本上）同时工作。</p>
<p>​    但是后来又出现了G1收集器，G1收集器是一个面向全堆的收集器，所以ParNew就算是退休了，不过当随着可以被使用的处理器核数的增加，效率也会优化。</p>
<h3 id="Parallel-Scavenge-收集器"><a href="#Parallel-Scavenge-收集器" class="headerlink" title="Parallel Scavenge 收集器"></a>Parallel Scavenge 收集器</h3><p>​    一款新生代收集器，基于<code>标记-复制</code>算法实现的收集器，也是一个多线程收集器，那我们为啥使用它？</p>
<blockquote>
<p>是因为该收集器的特点是与其他收集器关注点不同</p>
</blockquote>
<p>​    CMS收集器的关注点是尽可能的缩短垃圾回收时，用户线程停顿的时间，而Parallel Scavenge关注的是吞吐量</p>
<p>$$ 吞吐量 = {用户代码运行时间 \over 用户代码运行时间+运行垃圾收集时间} $$</p>
<p>​    举个例子，如果代码运行+运行垃圾收集时间用了100分钟，其中垃圾收集用了一分钟，那吞吐量就是99%。主要适合于后台运算而不需要太多交互的分析任务。所以它也被称为<code>吞吐量优先收集器</code>。</p>
<p>​    可通过<code>-XXLMaxGCPauseMilis</code>来控制最大垃圾收集时间，也可通过<code>-XX:GCTimeRatio</code>参数设置吞吐量大小。还有一个重要参数<code>-XX:+UseAdaptiveSizePolicy</code>，它是一个开关，用了我们就不用自己设定新生代各个区域划分问题，虚拟机会自己收集信息，来动态调整最合适的划分，被称为：<code>垃圾收集的自适应的调节策略</code>。</p>
<hr>
<h2 id="实战：内存分配与回收策略"><a href="#实战：内存分配与回收策略" class="headerlink" title="实战：内存分配与回收策略"></a>实战：内存分配与回收策略</h2><p>​    Java技术体系的自动内存管理，最核心的目标就是自动化的解决两个问题：<code>内存分配</code>和<code>内存回收</code>，在之前我们讲的都是内存回收，现在我们来看一下内存分配的细节，这里我是使用JDK1.8，HotSpot虚拟机，使用的<code>ParallelGC</code></p>
<blockquote>
<p>这里有一个很细的点：《深入理解Java虚拟机》使用的<code>Serial+Serial Old</code>客户端默认收集器组合下的内存分配和回收策略，但咱们的jvm是服务端的，说是只能在32位机<code>jvm.cfg</code>修改文件使用客户端，所以当我运行书上第一个代码块儿时，就发现结果与书上不对，想不出原因，所以如果你也是ParallelGC，那么书本上本章上许多代码结果都是不一样的。一些VM参数也是无法使用的或者没有效果的。</p>
<ol>
<li>java -XX:+PrintCommandLineFlags -version    输出JVM默认垃圾收集器,第四行的<code>UseParallelGC</code>和最后一行的<code>Server VM</code></li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">
<span class="token punctuation">[</span>root<span class="token annotation punctuation">@jeespring</span> <span class="token operator">~</span><span class="token punctuation">]</span># java <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintCommandLineFlags</span> <span class="token operator">-</span>version
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">InitialHeapSize</span><span class="token operator">=</span><span class="token number">132500800</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token class-name">MaxHeapSize</span><span class="token operator">=</span><span class="token number">2120012800</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">PrintCommandLineFlags</span> 
<span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedClassPointers</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseCompressedOops</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">-</span><span class="token class-name">UseLargePagesIndividualAllocation</span> <span class="token operator">-</span><span class="token constant">XX</span><span class="token operator">:</span><span class="token operator">+</span><span class="token class-name">UseParallelGC</span>
java version <span class="token string">"1.8.0_211"</span>
<span class="token class-name">Java</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token constant">SE</span> <span class="token class-name">Runtime</span> <span class="token class-name">Environment</span> <span class="token punctuation">(</span>build <span class="token number">1.8</span><span class="token number">.0_211</span><span class="token operator">-</span>b12<span class="token punctuation">)</span>
<span class="token class-name">Java</span> <span class="token class-name">HotSpot</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token class-name">Bit</span> <span class="token class-name">Server</span> <span class="token constant">VM</span> <span class="token punctuation">(</span>build <span class="token number">25.211</span><span class="token operator">-</span>b12<span class="token punctuation">,</span> mixed mode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>/usr/libexec/java_home -V   这个是在mac上找我的jvm在哪</li>
<li>find . -name “jvm.cfg”   如果你找不到jvm.cfg，通过它去找,表示在当前路径下找</li>
<li>JVM的Server端和Client端区别网上有详细介绍，通俗的讲就是Client端轻量快速，Server端重量性能好（默认）。</li>
</ol>
</blockquote>
<blockquote>
<p>对象的内存分配从概念上来讲，应该是在堆上分配，不过实际中也可能通过即时编译后拆分为标量间接存储在栈上（这个在我之前写的<code>逃逸分析</code>中有说明）</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hefveh9mj30g10bbq3f.jpg" alt="image-20220627093330808"></p>
<pre><code>### 对象优先在Eden分配（书本原题目）
</code></pre>
<ol>
<li>Serial：当大对象要分配内存时，发现Eden区已经满了，而且Survivor区也不够，会将Eden区原来的对象直接放入老年代，再把新的对象放入Eden区。</li>
<li>Parallel（我测试的）：发现Eden区满了，Survivor区不够，会直接把大对象放到老年代，Eden区对象不变。读者可以自己再测试一遍</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 对象分配
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB  <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * VM: -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8  -XX:+PrintGCDetails
     * 堆空间分配20m，新生代10m，新生代中的Eden和Survivor为8：1：1
     * @param args
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>a3<span class="token punctuation">,</span>a4<span class="token punctuation">;</span>
        a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
        a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
        a3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token comment">/**
         * 上面已经创建了8m，相当于Eden区已经满了，现在我们再放一个4M的对象
         * Eden已经放不下了，会启动一次MinorGC，我们看一下会之前的对象和新来的对象如何分配
         * 
         *  PSYoungGen      total 9216K, used 8001K
         *      eden space 8192K, 97% used
         *      from space 1024K, 0% used
         *  ParOldGen       total 10240K, used 4096K
         */</span>
        a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h3 id="大对象直接进入老年代"><a href="#大对象直接进入老年代" class="headerlink" title="大对象直接进入老年代"></a>大对象直接进入老年代</h3><p>​    我们知道一般对象不会直接到老年区，得现在Eden区和Survivor区熬几轮，但如果有大的对象已经在里面了，那么就很容易触犯minor GC，导致对象进行标记-复制，所以可以可以通过设置<code>XX:PretenureSizeThreshold</code>来指定超过多大的对象直接去了老年区（注意这个参数Parallel无法使用）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 对象分配
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> no1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> _1MB  <span class="token operator">=</span> <span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * VM:  -Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8  -XX:+PrintGCDetails -XX:PretenureSizeThreshold=3145728
     * 堆空间分配20m，新生代10m，新生代中的Eden和Survivor为8：1：1
     * -XX:PretenureSizeThreshold 表示 需要分配的对象只要大于3M，就直接分配到老年区，注意：这个参数只能Serial使用，ParallelGC无法使用
     * @param args
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a4<span class="token punctuation">;</span>
        a4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token operator">*</span>_1MB<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h3><p>​    意思就是我们给每个对象定义一个对象年龄计数器，存储在对象头中，每经历一次Minor GC后存活，并可以存储到Survivor区时，年龄就+1，当长到系统<code>-MaxTenuringThreshold</code>设定值时（默认值15），就去老年代.</p>
<h3 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h3><p>​    这里就是说系统可以动态判断，如果每个对象都得等15轮minor GC，那就会导致频繁的GC，影响性能，如果Survivor区中对低于或者等于某个年龄的对象总和超过了Survivor空间的一半，那这个年龄及其以上的对象直接进入老年区。</p>
<h3 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h3><p>​    我们在前面就提到，其实老年代就是新生代的担保人，如果新生代放不下的对象，我就把对象放到老年代。根据这第一点我们就可以推断出每次<code>Minor GC</code>前，虚拟机都应检查老年代最大的连续空间是否有足够的空间装下新生代所有对象，如果空间足够，那我们就放心的Minor GC，如果不够了，虚拟机去查看<code>-XX:HandlePromotionFailur</code>参数是否允许担保失败，如果允许，继续检查老年代之前进来对象的平均大小是否小于老年代最大连续空间（简单来说：通过以前来的，猜测后面来的应该差不多大），如果足够，进行Minor GC，虽然有风险，如果不够，或者是没有担保，则直接<code>Full GC</code>,这就很影响性能了。所以一般都会将<code>-XX:HandlePromotionFailur</code>打开，来避免频繁的FUll GC。这个参数在JDK6 Update24后就不再使用了。</p>
<p>​    也就是现在只要老年代的连续空间大于新生代对象总大小或者以往对象的平均值大小，就会进行Minor GC，否则将进行Full GC。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    垃圾收集器在许多场景都是影响系统停顿时间和吞吐能力的重要因素，虚拟机之所以提供各种不同的收集器和大量的调节参数就是因为各种有各种的适用场景，需要我们不断探索，不断组合。当然我们也需要知道每种收集器的特点以及范围。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>垃圾回收</tag>
        <tag>内存分配</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载机制</title>
    <url>//post/JVM/7_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>虚拟机是如何加载Class文件的？</p>
<p>Class文件进入虚拟机后会有什么变化？</p>
</blockquote>
<p>​        在Java中我们知道有编译期和运行期，其中编译期为我们写的java代码通过javac编译成一个一个的class文件，而运行期则为将class文件通过jvm加载到内存中，通过一些列操作变成可以jvm直接使用的Java类型。这为Java带来了极高的扩展性和灵活性，例如动态链接和到动态加载，具体下来可用面向接口编程和一系列设计模式进行举例。</p>
<h2 id="类的加载时机"><a href="#类的加载时机" class="headerlink" title="类的加载时机"></a>类的加载时机</h2><p>​        一个类型从加载到jvm内存中开始，到卸载出内存为止，整个生命周期经历了：</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heg77pblj30vo0fydhc.jpg" alt="image-20220611192459719"></p>
<p>​        其中加载，验证，准备，初始化是按部就班的开始的，解析则不一定，一些情况中解析是在初始化后的，而这也是为了支持java的运行时绑定特性。</p>
<p>​        一般类的加载在《java虚拟机规范》中并没有强制要求，根据具体的虚拟机实现完成，而类的初始化则严格按照规定，有且只有六中情况，必须对类进行初始化，而前面的步骤自然也要提前完成。</p>
<ol>
<li>遇到new,getstatic,putstatic,invokestatic 这四条字节码指令时，如果当前系统中还没加载这个类，则必须对其进行初始化。其中具体场景有：<ol>
<li>通过new关键字创建实例时，对类进行初始化：<code>new Object()</code>。</li>
<li>读取或设置一个类型的静态字段（static final 不算，因为在编译期间就把结果放在了常量池中，读取数据时，不需要初始化该类）：<code>read(object.Field)</code></li>
<li>调用一个类的静态方法。<code>object.Field()</code></li>
</ol>
</li>
<li>使用reflect包进行反射时，对类进行初始化。<code>Class.forName(class_reference_name)</code></li>
<li>在该类初始化时发现其父类还没有初始化，则先将其父类进行初始化，再初始化当前类</li>
<li>当虚拟机启动时，用户需要执行一个主类（<code>执行main()方法的类</code>），虚拟机会先初始化这个类</li>
<li>jdk7新加入的动态语言支持时，如果有一个java.long.invoke.MethodHandle实例最后解析为REF_getStatus,REF_putStatus,REF_invokeStatic,REF_newInvokeSpecial四种类型的方法句柄，当这个方法句柄的类没有初始化时，则需要先初始化。</li>
<li>当一个接口中定义了JDK8新加入的默认方法，(被default关键字修饰的接口方法)时，该类的实现类发生初始化时，需要先对其接口初始化</li>
</ol>
<p>​        这6方法为有且仅有的使触发类型进行初始化的场景，也被称为主动引用，其他引用方式的类型都不会触发初始化了，也被称为被动引用。下面举几个例子：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is SuperClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is SubClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">NotInitialization</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
        通过-XX:+TraceClassLoading可以查看类的加载情况
        可以发现三个类的被加载了，但是SubClass类并没有初始化，也就是其中的static静态代码块并没执行
        而这里我们通过子类去调用父类的静态变量，则只是初始化父类信息
        
        运行结果：
        this is SuperClass
        10
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">SubClass</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NotInitialization</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//这里我们可以发现，在创建类型数组时，也只是对该类型进行加载，而没有初始化</span>
        <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperClass</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">NotInitialization</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/**
         * 我们可发现这里也没有打印静态代码块内容i，连ConstClass类都没有加载
         * 这是因为ConstClass.i 在编译期间通过常量的传播优化，已经将该值传入到
         * NotInitialization类的常量池中，这时候对ConstClass.i的引用就变成了对自身常量池的引用
         */</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ConstClass</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">ConstClass</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is ConstClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        而接口的加载与类的加载有一些不同，接口也有初始化的过程，与类一致，但是没有static静态代码块，编译器仍会为接口生成“<clinit>”类构造器，用来初始化接口中定义的成员变量，而接口与类的真正区别在于，类的初始化之前会将父类都进行初始化，而接口在初始化时，并不要求父接口都完成初始化，只有在真正使用父接口时（如引用接口中的常量）才会初始化。</p>
<h2 id="类加载的过程"><a href="#类加载的过程" class="headerlink" title="类加载的过程"></a>类加载的过程</h2><h3 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h3><p>​        在加载阶段，java虚拟机需要完成以下三件事</p>
<ol>
<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>
<li>将这个字节流代表的静态存储结构转化为方法区的运行时数据结构</li>
<li>在内存中生成一个代表这个类的java.long.Class对象，作为方法区这个类的各种数据的访问入口</li>
</ol>
<blockquote>
<p>《java虚拟机规范》对这三点要求并不是很具体，供开发人员操作的空间很大</p>
</blockquote>
<blockquote>
<p>就比如说获取二进制字节流的方式就有很多</p>
<ol>
<li>从ZIP压缩包获取，常见的JAR包，WAR包</li>
<li>从网络中获取，常见的有Web Applet</li>
<li>运行时计算生成，动态代理技术</li>
<li>从其他文件生成，JSP文件生成对应的Class文件</li>
<li>。。。</li>
</ol>
</blockquote>
<p>​        相对于类加载过程的其他阶段，非数组类型的加载阶段（准确来说是加载阶段中获取类的二进制字节流的动作）是开发者可控性最高的阶段，加载阶段既可以使用java虚拟机内置的启动类加载器来完成。也可以由用户定义的类加载器完成。</p>
<p>​        对于数组类而言，情况也有所不同，数组类本身不通过类加载器创建，是由Java虚拟机在内存中动态构造出来的，但数组类与类加载仍有很大关系，因为里面的元素还是要靠类加载器完成加载。一个数组类在创建中遵守以下几个规则。</p>
<ol>
<li>如果数组类的元素为引用型数据，就递归采用原先定义好的类加载过程去加载组件，数组类将被标记在加载该组件类型的类加载器的类名称空间上。（！！！一个类型必须与类加载器一起确定唯一性）</li>
<li>如果数组类元素不是引用型（例如<code>int[]</code>）Java虚拟机将会把数组类标记为与启动类加载器关联。</li>
<li>数组类的可访问性与他的组件类型的可访问性一致，如果组件类型不是引用类型，他的数组类的可访问性将默认为public，可被所有的类和接口访问到。</li>
</ol>
<p>​        加载阶段结束后，Java虚拟机外部的二进字节流就按照虚拟机所设定的格式存储在<code>方法区</code>之中，类型数据妥善安置在方法区之后，会在Java<code>堆内存</code>中实例化一个<code>java.lang.Class</code>类的对象，这个对象将作为程序访问方法区中类型数据的<code>外部接口</code></p>
<p>​        加载阶段与连接阶段的部分动作是交叉进行的，加载阶段尚未完成，连接阶段可能就已经开始。</p>
<h4 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h4><p>​        对于任何一个类，<strong>都需要它的类加载器与类本身共同确定在虚拟机中的唯一性</strong>，每个类加载器都有自己的名称空间，通俗来说判断两个类是否相等，前提条件就是是否是同一个类加载器加载的，换句话说：即使是同一个Class文件源，通过不同的类加载器，两个类也就势必不同。</p>
<blockquote>
<p>代码测试</p>
<p>这个案例中我们可以看到我们自己定义了一个类记载器，然后来加载当前这个类，并输出实例对象，都没有问题，但最后使用instance时做类型判定时发现输出为false。</p>
<p>这是因为我们在类的初始化中所述，当java含有main方法的启动类执行时，会默认进行类的初始化，这个时候它是由系统默认的类加载器，而当我们在main方法中创建了一个类加载器时并加载该类，在虚拟机中创建的完全就是不同的类了。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">//org.fenixsoft.classloading.ClassLoaderTest@47089e5f</span>
    <span class="token comment">//false</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassLoader</span> myloader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> fileName <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".class"</span><span class="token punctuation">;</span>
                    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>inputStream <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span> <span class="token function">defineClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> b<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> instance <span class="token operator">=</span> myloader<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token string">"org.fenixsoft.classloading.ClassLoaderTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>fenixsoft<span class="token punctuation">.</span>classloading<span class="token punctuation">.</span></span>ClassLoaderTest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h5><p>​        从java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该加载器是用C++实现的(这里仅限HotSpot)，是虚拟机的一部分，另外一种是其他所有的类加载器，又java实现，独立于虚拟机外部，并全部继承抽象类<code>java.lang.ClassLoader</code></p>
<p>​        从JDK1.2以来，Java一直保持着三层类加载器，双亲委派的类加载架构，尽管该架构，在java模块化系统出现了一些调整，但未改变主体架构。</p>
<blockquote>
<p> 下面我们来介绍什么是三层类加载器，什么是双亲委派。</p>
</blockquote>
<ol>
<li>启动类加载器（BootStrap Class Loader）<ol>
<li>只加载<code>&lt;JAVA_HOME&gt;/bin</code>目录下的文件</li>
<li>被-Xbootclasspath参数指定的路径下文件</li>
<li>按照文件名（rt.jar,tools.jar）可被识别的类库</li>
<li>启动类加载器无法被java程序直接调用，当自定义类加载器时，需要交给启动类加载器，使用null代替即可。</li>
</ol>
</li>
</ol>
<blockquote>
<p>通过<code>java.lang.Class.getClassLoader()方法作为示例</code></p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
    * Returns the class loader for the class.  Some implementations may use
    * null to represent the bootstrap class loader. This method will return
    * null in such implementations if this class was loaded by the bootstrap
    * class loader.
    *
    * &lt;p> If a security manager is present, and the caller's class loader is
    * not null and the caller's class loader is not the same as or an ancestor of
    * the class loader for the class whose class loader is requested, then
    * this method calls the security manager's &#123;@code checkPermission&#125;
    * method with a &#123;@code RuntimePermission("getClassLoader")&#125;
    * permission to ensure it's ok to access the class loader for the class.
    *
    * &lt;p>If this object
    * represents a primitive type or void, null is returned.
    *
    * @return  the class loader that loaded the class or interface
    *          represented by this object.
    * @throws SecurityException
    *    if a security manager exists and its
    *    &#123;@code checkPermission&#125; method denies
    *    access to the class loader for the class.
    * @see java.lang.ClassLoader
    * @see SecurityManager#checkPermission
    * @see java.lang.RuntimePermission
    */</span>
   <span class="token annotation punctuation">@CallerSensitive</span>
   <span class="token keyword">public</span> <span class="token class-name">ClassLoader</span> <span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">ClassLoader</span> cl <span class="token operator">=</span> <span class="token function">getClassLoader0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
       <span class="token class-name">SecurityManager</span> sm <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">if</span> <span class="token punctuation">(</span>sm <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">checkClassLoaderPermission</span><span class="token punctuation">(</span>cl<span class="token punctuation">,</span> <span class="token class-name">Reflection</span><span class="token punctuation">.</span><span class="token function">getCallerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">return</span> cl<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li><p>扩展类加载器（Extension Class Loader）:</p>
<ol>
<li><p>这个类加载器是在类<code>sun.misc.Launcher&amp;ExtClassLoader</code>中以Java代码形式实现的</p>
</li>
<li><p>主要负责加载<code>&lt;JAVA_HOME&gt;/lib/ext</code>目录中</p>
</li>
<li><p>或者被<code>java.ext.dirs</code>系统变量所指定的路径中所有的类库</p>
</li>
<li><p>这是Java系统类库的扩展机制，也就是可以将具有通用性的类库放置在ext目录里扩展Java SE的功能</p>
<blockquote>
<p>不过在JDK9之后被模块化带来的天然扩展能力替代</p>
</blockquote>
</li>
<li><p>由于是Java编写的，开发者可直接调用</p>
</li>
</ol>
</li>
<li><p>应用程序类加载器（Application Class Loader）：</p>
<ol>
<li>在<code>sun.misc.Launcher$AppClassLoader</code>来实现的。</li>
<li>是ClassLoader.getSystemClassLoader()方法的返回值</li>
<li>负责加载用户路径（ClassPath）上所有的类库</li>
<li>可被直接调用，如果没有自己定义，它就是系统默认的类加载器</li>
</ol>
</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heg7kduuj30hy0g2gmo.jpg" alt="image-20220618151703298"></p>
<p>​        双亲委派模型要求：除了顶部的启动类加载器，剩下的类加载器都应有自己的父类加载器，这里的父类不是指继承，<code>通常</code>指的是组合，也就是复用父类加载器的代码。</p>
<blockquote>
<p>这里的通常是指:双亲委派模型并不是强制性约束，而是推荐的一种类加载器实现的最佳实现</p>
</blockquote>
<blockquote>
<p>双亲委派模型的工作流程：</p>
</blockquote>
<p>​        当类加载器受到类加载请求时，并不会自己直接尝试加载，而是交给父类加载器，所有的请求最终都应该到启动类加载器，如果父类反馈无法加载（搜索范围找不到所需的类），子类再自己去尝试加载。</p>
<blockquote>
<p>双亲委派的好处？</p>
</blockquote>
<p>​        一个好处就是可以让类也保持一种层级关系，比如<code>java.lang.Object</code>,每个类的超类，存放在<code>rt.jar</code>下，无论哪个类加载器加载，都会发送到启动类加载器加载，因此Object类在各种类加载器环境下都能保证是同一个类。</p>
<p>​        这里如果不使用双亲委派模型，就会导致类关系混乱。比如用各自不同的类加载器加载Object，系统中就会有不同的Object类。比如我们自己写一个Object类,或者一个String类，编译可以通过，但是无法运行，这也是一种强有力的保护措施。</p>
<blockquote>
<p>双亲委派的代码：</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> <span class="token function">loadClass</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">boolean</span> resolve<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">ClassNotFoundException</span>
    <span class="token punctuation">&#123;</span>
  			<span class="token comment">// 只能有一个线程来加载</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token function">getClassLoadingLock</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// First, check if the class has already been loaded</span>
            <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> c <span class="token operator">=</span> <span class="token function">findLoadedClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">long</span> t0 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>parent <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      	<span class="token comment">// 如果有父类加载器，用父类的</span>
                        c <span class="token operator">=</span> parent<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
												<span class="token comment">// 用Bootstrap</span>
                        c <span class="token operator">=</span> <span class="token function">findBootstrapClassOrNull</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// ClassNotFoundException thrown if class not found</span>
                    <span class="token comment">// from the non-null parent class loader</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// If still not found, then invoke findClass in order</span>
                    <span class="token comment">// to find the class.</span>
                    <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    c <span class="token operator">=</span> <span class="token function">findClass</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token comment">// this is the defining class loader; record the stats</span>
                    <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getParentDelegationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addTime</span><span class="token punctuation">(</span>t1 <span class="token operator">-</span> t0<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClassTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addElapsedTimeFrom</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name"><span class="token namespace">sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span></span>PerfCounter</span><span class="token punctuation">.</span><span class="token function">getFindClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">resolveClass</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h5 id="破坏双亲委派模型"><a href="#破坏双亲委派模型" class="headerlink" title="破坏双亲委派模型"></a>破坏双亲委派模型</h5><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>​        确保class文件的二进制流数据符合java虚拟机规范，不会损害虚拟机。我们可以知道java编译器会先对代码进行格式检查，如果正确才编译成class文件，但是class文件并不一定是编译后的，也可以通过0,1直接在二进制编辑器中生成的，所以虚拟机需要再对该数据进行校验。</p>
<p>​        验证阶段一般分为：文件格式校验，元数据校验，字节码校验，符号引用校验。</p>
<ol>
<li><p>文件格式校验：</p>
<ol>
<li>该阶段只要检查文件版本，魔数，索引等一些规范数据是否正常</li>
<li>如果没有问题，字节流才被允许进入java虚拟机内存的方法区进行存储，也就是后面的阶段都是针对方法区的存储结构进行的，不会直接读取，操作字节流了。</li>
</ol>
</li>
<li><p>元数据校验：</p>
<ol>
<li>针对类的信息进行检查，比如父类信息，子类是否实现父类所有要求实现的方法。</li>
<li>保证符合《Java语义规范》</li>
</ol>
</li>
<li><p>字节码校验：</p>
<ol>
<li>这一部分是整个校验部分最复杂的，负责检查语义是否合法，比如类中的方法体，进行校验分析，保证不会损害虚拟机。</li>
<li>需要注意如果一个类型的方法体的字节码没有通过字节码验证，说明一定有问题，但如果验证通过了，也无法保证其一定安全。</li>
</ol>
<blockquote>
<p>这里引申一个概念：“停机问题”</p>
<blockquote>
<p>通俗的讲：通过程序去判断一个程序是否有问题是无法保证准确的。</p>
</blockquote>
</blockquote>
<ol start="3">
<li>后面因为设计团队不想在这个阶段花费太多的时间，JDK6之后javac编译器和虚拟机进行一项联合优化，把尽可能多的校验放在javac中，具体做法是在方法体Code属性的属性表新添加一个“StackMapTable”属性。以后虚拟机只检查它就好了，不过也有一定被篡改欺骗的风险。</li>
</ol>
</li>
<li><p>符合引用校验：        </p>
<ol>
<li>发生在虚拟机将符号引用变为直接引用的时候。</li>
<li>判断该类是否缺少或者被禁止访问它所需要的外部资源，例如外部类，方法，字段。</li>
<li>这里可以做一个优化，当一个程序运行的全部代码已经被反复的使用和验证后，则可以在生产环境使用<code>-Xverify:none</code>参数来关闭大部分的类校验措施，缩短虚拟机加载的时间。</li>
</ol>
</li>
</ol>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>​        这一阶段是正式为类中定义的静态变量（static修饰的）进行初始化零值，也就是类型的默认值。这一部分数据在JDK7之前是放在方法区的，后面类变量则会随着Class对象存放在堆中。</p>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><blockquote>
<p>符号引用：可以指向没有加载到虚拟机中内容</p>
<p>直接引用：直接指向目标的指针，也就是必须是虚拟机内的</p>
</blockquote>
<p>​        将常量池中的符号引用变为直接引用。</p>
<h4 id="类或接口解析"><a href="#类或接口解析" class="headerlink" title="类或接口解析"></a>类或接口解析</h4><p>​        假设当前代码在A类中，需要将一个符号引用B解析为一个直接引用C，则解析需要以下三步。</p>
<ol>
<li>如果C不是一个数组类型，虚拟机会把代表B的全限定名交给A的类加载器去加载C类。</li>
<li>如果是数组，则按照第一步去加载元素类型。</li>
<li>如果上面都没问题，C已经是一个类或者接口了，但这个时候还需要进行符号引用验证，就是看是否有权限访问。<ol>
<li>如果可以访问说明肯定是下面三种情况的一种：<ol>
<li>C为public，且与A在同一个模块儿</li>
<li>C是public，但与A不在一个模块儿，但是 C允许A访问</li>
<li>C不是public，但是与D在同一个包</li>
</ol>
</li>
</ol>
</li>
</ol>
<h4 id="字段解析"><a href="#字段解析" class="headerlink" title="字段解析"></a>字段解析</h4><p>​        通俗的说现在我需要解析C类的一个变量，如果C类本身含有则直接返回直接引用，如果没有就从下向上到父类和接口中寻找，如果有则返回直接引用，如果没有则抛出<code>java.lang.NoSuchFieldError</code>，如果成功返回来了引用还需要判断有没有权限，如果没有则派出<code>java.lang.IllegalAccessError</code>异常。</p>
<p>​        而实际中如果父类和接口都有同名字段，则可能拒绝编译。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> text1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">C</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 爆出：Reference to 'i' is ambiguous, both 'B.i' and 'A.i' match</span>
        <span class="token comment">// 无法编译</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>





<h4 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h4><p>​        与字段解析类似，解析符号引用方法，看是否本类是否有，如果有则返回直接引用，没有去父类找，如果还没有去看自己实现的接口与父接口有没有该方法，如果有说明该类是一个抽象类爆出<code>java.lang.ABstractMethodError</code>异常，否则返回<code>java.lang.NoSuchMethodError</code>,如果成功返回了，还得继续判断权限，如果没有返回：<code>java.lang.IllegalAccessError</code>.</p>
<h4 id="接口方法解析"><a href="#接口方法解析" class="headerlink" title="接口方法解析"></a>接口方法解析</h4><p>​        与方法解析类似。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>​        虚拟机开始正式执行类中编写的java程序代码。对静态代码块儿进行执行，对静态变量进行赋值。这里注意：静态代码块儿与静态变量优先级一致，谁在前面先执行谁。以下例子就能说明问题：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//Error:(13, 28) java: 非法前向引用 无法进行编译</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>虚拟机会保证子类初始化前，先将父类进行初始化。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> text1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 2</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">B<span class="token punctuation">.</span>B</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span>  <span class="token keyword">int</span> <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">A</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token class-name">B</span> <span class="token operator">=</span> <span class="token class-name">A</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ol>
<li>上述初始化过程其实是执行了生成的<code>&lt;clinit&gt;()</code>方法,它并不是必须的，如果类和接口没有静态代码块也没有静态变量赋值，就不会生成这个方法</li>
<li>接口没有静态代码块和静态变量，但是可以进行初始化值，所以也会生成<code>&lt;clinit&gt;()</code>方法，但是接口不同的是，初始化时只执行自己的<code>&lt;clinit&gt;()</code>方法，不会管父类的，只有使用父类定义变量时，才会使用。</li>
<li><strong>虚拟机需要保证，在多线程情况下，类的初始化只完成一次，所以进行同步加锁，只有一个线程去执行<code>&lt;clinit&gt;()</code>方法，其他线程阻塞，如果该方法持续很久，就会导致多线程一直阻塞这是很隐蔽的。！！！</strong></li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> text1 <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">//会导致线程一直阻塞。</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"init DeadLoopClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>类加载</tag>
      </tags>
  </entry>
  <entry>
    <title>后端编译与优化</title>
    <url>//post/JVM/%E5%90%8E%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96.html</url>
    <content><![CDATA[<h1 id="后端编译与优化"><a href="#后端编译与优化" class="headerlink" title="后端编译与优化"></a>后端编译与优化</h1><h2 id="编译器优化技术"><a href="#编译器优化技术" class="headerlink" title="编译器优化技术"></a>编译器优化技术</h2><h3 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h3><blockquote>
<p>逃逸分析本身不是直接进行优化的方法，而是一种为优化提供帮助的分析算法</p>
<p>逃逸分析的原理：</p>
<p>​        我们分析对象的动态作用域，如果对象创建在方法中，可能被外部方法所引用到，例如作为参数被外部方法进行调用，这叫做<code>方法逃逸</code>，</p>
<p>​        被外部线程所访问到，例如赋值给外部线程使用的变量中。称为<code>线程逃逸</code></p>
</blockquote>
<p>​        从不逃逸，方法逃逸，线程逃逸。称为对象从小到大的逃逸程度，我们因此也可以做不同的优化策略、</p>
<h4 id="栈上分配"><a href="#栈上分配" class="headerlink" title="栈上分配"></a>栈上分配</h4><p>​        大家都知道在java中，所有的对象都存储在堆空间中，随着存放 的对象越来越多，也就需要垃圾回收器来进行工作，而这一步也是非常消耗性能的，那这里就引出一个概念<code>栈上分配</code>，也就是当我们进行逃逸分析后，发现对象不存在<code>线程逃逸</code>，我们将对象存储在栈上，随着栈帧的插入与弹出，对象本身也跟着创建和销毁。</p>
<blockquote>
<p> 这里我们需要提醒两点：</p>
<ol>
<li><p>之前放在堆中，堆中对象是被各个线程共享的，只要有指针指向该对象的地址，就可以进行使用。但栈是线程独有的。所以栈上分配的第一点：<code>对象不会被线程共享，也叫做线程逃逸</code>。</p>
</li>
<li><p>如果对象被分配到栈上了，随着栈帧插入与弹出（也就是方法的调用与结束），变量会跟着创建和删除，那如果该变量被方法外所引用，比如被当做方法参数被其他方法进行调用。这也称为<code>方法逃逸</code></p>
</li>
</ol>
</blockquote>
<p>​        栈上分配支持：<code>方法逃逸</code>，不支持：<code>线程逃逸</code></p>
<h4 id="标量替换"><a href="#标量替换" class="headerlink" title="标量替换"></a>标量替换</h4><blockquote>
<p>这里的标量是指Java中基础变量，例如：<code>int,char,boolen,short,Refference</code>等，也就是变量不能再拆分为更小的元素，这就叫<code>标量</code>。</p>
<p>而当我们创建对象后，对象可以再被细分为各种标量的组合，该对象也叫做<code>聚合量</code></p>
</blockquote>
<p>​        面向过程编程的一个好处就是不用封装对象，效率更高，所以通过这一点，如果我们能分析出该对象只有一部分会被使用，且对象不会逃逸到方法体外，则我们不创建该对象，而是直接创建对象的标量，进行使用。下面我们来代码解释一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> x<span class="token punctuation">;</span>
  <span class="token keyword">int</span> y<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> x<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//没有优化前</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> <span class="token constant">XX</span> <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token constant">XX</span><span class="token punctuation">,</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> person<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//第一步：构造函数内联后的样子</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> <span class="token constant">XX</span> <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
  <span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token function">point_memory_alloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//堆中分配P对象</span>
  p<span class="token punctuation">.</span>x<span class="token operator">==</span><span class="token constant">XX</span><span class="token punctuation">;</span>													<span class="token comment">//Person构造函数内联后</span>
  p<span class="token punctuation">.</span>y<span class="token operator">==</span><span class="token number">42</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> p<span class="token punctuation">.</span>x<span class="token punctuation">;</span>												<span class="token comment">//Person::getX()被内联后</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//第二步：进行标量替换优化</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> <span class="token constant">XX</span> <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token comment">//相当于我不创建一个完整对象了，我只创建几个标量来代替使用</span>
  <span class="token keyword">int</span> pX <span class="token operator">=</span> <span class="token constant">XX</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> py <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> pX<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//第三步：作无效代码消除后</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> x<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        标量替换会更加严格一些：不允许方法逃狱。</p>
<h4 id="同步消除"><a href="#同步消除" class="headerlink" title="同步消除"></a>同步消除</h4><blockquote>
<p>同步消除是指Java中的锁的优化，也就是当我们分析出一个同步的方法，实际中不会被其他线程所争抢，那么久没有必要上锁了，相当于你去公共厕所，怕别人进来，你上把锁。走了再开锁，那如果是在你家，只有你一个人时，就没必要再加个锁吧，再懒点儿你门都可以不要了。</p>
</blockquote>
<p>​        当经过逃逸分析后，我们发现方法不会被其他线程访问使用，也就是线程逃逸，我们就可以不对线程进行同步操作。</p>
<h4 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h4><p>​        从测试中我们发现效果不错，但实际中可能分析后消耗了性能还发现能被优化的很少。所以在<code>JDK 6 Update 23</code>之前是禁止该优化的，之后才开始默认开启逃逸分析。</p>
<ol>
<li><code>-XX:+DoEscapeAnalysis</code>手动开启逃逸分析</li>
<li><code>-XX:+PrintEscapeAnalysis</code>来查看开启后的分析结果</li>
<li><code>-XX:+EliminateAllocations</code>开启标量替换</li>
<li><code>-XX:+PrintEliminateAllocations</code>查看标量替换结果</li>
<li><code>-XX:+EliminateLocks</code>开启同步消除</li>
</ol>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>逃逸分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础</title>
    <url>//post/Java/Java%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><blockquote>
<p>如何将ArrayList变成同步操作？</p>
</blockquote>
<p><code>Collections.synchronizedList(arrayList);</code></p>
<p>Collections.synchronizedList是一个包装类，会将arrayList的一些操作进行加锁，这里我们注意：<strong>读写加锁，迭代器不加锁</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>mutex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Must be manually synched by user!</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Must be manually synched by user</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token class-name">ListIterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> list<span class="token punctuation">.</span><span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Must be manually synched by user</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h3><blockquote>
<p>Collections.synchronizedList和Vector的区别?</p>
</blockquote>
<p>Vector底层维护的也是一个数组，每次扩容可以按照指定的数进行扩容，默认扩容两倍</p>
<p>特点就是所有操作进行同步，导致效率比较低</p>
<p>结论：Vector比较同步全面，Collections.synchronizedList在迭代时需要小心。</p>
<h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><p>也是一个线程安全版的ArrayList，适用于读多写少的场景，其中所有可变操作（add、set等等）都是通过对底层数组进行一次新的复制来实现的。所以频繁的写是消耗性能的。</p>
<blockquote>
<p>Collections.synchronizedList和CopyOnWriteArrayList怎么选择</p>
</blockquote>
<ol>
<li>多读少写优先考虑CopyOnWriteArrayList; </li>
<li>SyncList的’读写’都较为均衡，相比CopyOnWriterList其读操作更慢，写操作更快; </li>
<li>Copy…List的’写时复制原理’会导致’写操作’中间多出来一个’table’备份，从而占用内存，所以要特别注意防止内存溢出。</li>
</ol>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><blockquote>
<p>HashMap存储的是Key,Value.也就是一个个小节点，所以内部封装了Node类来存储值，再通过Node数组来存放一个个Node，这里有意思的就是Node它也是一个链表结构，当对key求Hash值时，如果数组上这个位置已经有值了，则直接绑定到之前加入节点的后面，很方便。既能做到查询快，插入也快。</p>
</blockquote>
<blockquote>
<p>HashMap中Put到底是怎么走的？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">//先对key求一个Hash值</span>
        <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">,</span>
                   <span class="token keyword">boolean</span> evict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">//这里初始化一个Node数组，一个Node节点</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">;</span>
				<span class="token comment">//判定Node数字有没有初始化过</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
          	<span class="token comment">//如果没有，说明现在的Node数组是一个空数组，需要进行扩容后存放数据</span>
            n <span class="token operator">=</span> <span class="token punctuation">(</span>tab <span class="token operator">=</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  			<span class="token comment">//通过数组中Hash位置判定，是否之前插入过数据</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> tab<span class="token punctuation">[</span>i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
 						<span class="token comment">//如果没有直接在该节点上插入一个新的Node节点</span>
          	tab<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
          	<span class="token comment">//这里就是如果之前插入过一个节点，那现在就需要将新来的节点和之前的连接</span>
            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span> <span class="token class-name">K</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> p<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> p<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> tab<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token function">newNode</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">>=</span> <span class="token constant">TREEIFY_THRESHOLD</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// -1 for 1st</span>
                            <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                        <span class="token keyword">break</span><span class="token punctuation">;</span>
                    p <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// existing mapping for key</span>
                <span class="token class-name">V</span> oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent <span class="token operator">||</span> oldValue <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                <span class="token function">afterNodeAccess</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
  			<span class="token comment">//统计有多少数据</span>
        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
				<span class="token comment">//判定是否需要扩容</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>size <span class="token operator">></span> threshold<span class="token punctuation">)</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">afterNodeInsertion</span><span class="token punctuation">(</span>evict<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTab <span class="token operator">=</span> table<span class="token punctuation">;</span>
  			<span class="token comment">//原来数组的大小</span>
        <span class="token keyword">int</span> oldCap <span class="token operator">=</span> <span class="token punctuation">(</span>oldTab <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> oldTab<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  			<span class="token comment">//老的临界点值</span>
        <span class="token keyword">int</span> oldThr <span class="token operator">=</span> threshold<span class="token punctuation">;</span>
        <span class="token keyword">int</span> newCap<span class="token punctuation">,</span> newThr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>oldCap <span class="token operator">>=</span> <span class="token constant">MAXIMUM_CAPACITY</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                threshold <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> oldTab<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>newCap <span class="token operator">=</span> oldCap <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span>
                     oldCap <span class="token operator">>=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span>
                newThr <span class="token operator">=</span> oldThr <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// double threshold</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>oldThr <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// initial capacity was placed in threshold</span>
            newCap <span class="token operator">=</span> oldThr<span class="token punctuation">;</span>
  			<span class="token comment">//这里一般就是第一次使用时，进行默认初始化 容量：16   边界值：12   加载因子：0.75</span>
        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// zero initial threshold signifies using defaults</span>
            newCap <span class="token operator">=</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">;</span>
            newThr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token constant">DEFAULT_LOAD_FACTOR</span> <span class="token operator">*</span> <span class="token constant">DEFAULT_INITIAL_CAPACITY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>newThr <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">float</span> ft <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span>newCap <span class="token operator">*</span> loadFactor<span class="token punctuation">;</span>
            newThr <span class="token operator">=</span> <span class="token punctuation">(</span>newCap <span class="token operator">&lt;</span> <span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">&amp;&amp;</span> ft <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token punctuation">)</span><span class="token constant">MAXIMUM_CAPACITY</span> <span class="token operator">?</span>
                      <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>ft <span class="token operator">:</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        threshold <span class="token operator">=</span> newThr<span class="token punctuation">;</span>
        <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"rawtypes"</span><span class="token punctuation">,</span><span class="token string">"unchecked"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  			<span class="token comment">// 一般是按照一倍扩容的</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>newCap<span class="token punctuation">]</span><span class="token punctuation">;</span>
        table <span class="token operator">=</span> newTab<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>oldTab <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> oldCap<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> e<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    oldTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                        newTab<span class="token punctuation">[</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> <span class="token punctuation">(</span>newCap <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">TreeNode</span><span class="token punctuation">)</span>
                        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span><span class="token punctuation">)</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> newTab<span class="token punctuation">,</span> j<span class="token punctuation">,</span> oldCap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// preserve order</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> loHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> loTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> hiHead <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> hiTail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">></span></span> next<span class="token punctuation">;</span>
                        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                            next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> oldCap<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    loHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                loTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                                    hiHead <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                <span class="token keyword">else</span>
                                    hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
                                hiTail <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>loTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            loTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                            newTab<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> loHead<span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>hiTail <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            hiTail<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                            newTab<span class="token punctuation">[</span>j <span class="token operator">+</span> oldCap<span class="token punctuation">]</span> <span class="token operator">=</span> hiHead<span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> newTab<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="put-⽅法原理"><a href="#put-⽅法原理" class="headerlink" title="put() ⽅法原理"></a>put() ⽅法原理</h4><ol>
<li>先将Key，Value封装为一个Node。</li>
<li>通过HashCode()得出Hash值</li>
<li>通过哈希函数将Hash值装换为数组下标<ol>
<li>如果这个位置没有任何元素，则直接插入Node</li>
<li>如果已经有了Node链表，将当前Node的key与链表上每一个Key进行equals比较<ol>
<li>如果都返回false，则插入链表末尾</li>
<li>如果有true，则直接新的Node的value替代原来的。（保证不可重复）</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>注意：HashMap中允许key，value为null，但只能有一个</p>
<p>​     HashTable中key和value都不能为空</p>
</blockquote>
<h4 id="get-方法原理"><a href="#get-方法原理" class="headerlink" title="get() 方法原理"></a>get() 方法原理</h4><ol>
<li>通过key的HashCode()方法求出Hash值</li>
<li>通过哈希函数将hash值转为数组的下标</li>
<li>通过下标定位到数组的某个位置<ol>
<li>如果没有链表，直接返回Null</li>
<li>如果有链表，以此进行匹配每个节点上的key通过equals进行比较<ol>
<li>如果都为false，则返回null</li>
<li>如果为true，则返回值</li>
</ol>
</li>
</ol>
</li>
</ol>
<blockquote>
<p>放在HashMap中的key元素需要同时重写hashCode()和equals()方法</p>
</blockquote>
<h4 id="重写HashCode-和equals-方法"><a href="#重写HashCode-和equals-方法" class="headerlink" title="重写HashCode()和equals()方法"></a>重写HashCode()和equals()方法</h4><blockquote>
<p>一定要分布均匀</p>
<ol>
<li><p>如果hashCode()返回的一个值，就会变成单链表</p>
</li>
<li><p>如果hashCode()返回的都不一样值，HashMap就变成数组了</p>
</li>
</ol>
<p>这也称为分布不均匀</p>
<p>equals ，hashCode 需要同时重写，保证一个对象一旦相等，Hash值也应该相同</p>
</blockquote>
<h4 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h4><p>如果可以预测到容量最好，多设置一些，一方面避免频繁的扩容，一方面也需要考虑到加载因子的边界值</p>
<h4 id="为什么Map需要有加载因子，0-75"><a href="#为什么Map需要有加载因子，0-75" class="headerlink" title="为什么Map需要有加载因子，0.75"></a>为什么Map需要有加载因子，0.75</h4><ol>
<li>如果不设置边界值，Map的Hash碰撞概率到后面会越来越高，影响效率</li>
<li>0.75是一个普遍值，需要用数学证明</li>
</ol>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><ol>
<li>自平衡二叉树，平衡二叉树是指：根节点的左子节点与右子树的高度相差不会超过1层，当超过时，会进行自旋翻转</li>
<li>迭代器采用中序遍历</li>
<li>无序，不可重复，可排序（这里需要注意如果key为自定义类型，需要实现<code>java.lang.Comparable</code>接口，重写compareTo方法，或者在TreeMap构造器中重新compare方法）<ol>
<li>当我们规则固定时，建议使用实现<code>java.lang.Comparable</code>接口。</li>
<li>当当我们规则需要修改时，使用Comparator接口</li>
</ol>
</li>
</ol>
<h2 id="Collection工具类"><a href="#Collection工具类" class="headerlink" title="Collection工具类"></a>Collection工具类</h2><ol>
<li><code>Collections.sort(List list)</code></li>
<li><code>Collections.sort(List list, Compataor cmp)</code></li>
</ol>
<h2 id="String存储原理"><a href="#String存储原理" class="headerlink" title="String存储原理"></a>String存储原理</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token comment">//这里是直接创建在方法区的字符串常量池</span>
       <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>
       <span class="token comment">//这个是在堆中创建了一个String对象，但值是指向方法区的</span>
       <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token comment">//判断这个字符串在常量池是否存在，如果存在直接返回，如果不存在创建返回</span>
       <span class="token class-name">String</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//false</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//false</span>
       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//true</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="String-StringBuilder-StringBuffer"><a href="#String-StringBuilder-StringBuffer" class="headerlink" title="String,StringBuilder,StringBuffer"></a>String,StringBuilder,StringBuffer</h4><ol>
<li>String被final修饰，当你修改时是直接创建一个新的在方法区，所以当我们使用时，如果该值经常就修改，最好使用后面两个</li>
<li>StringBuilder没有final修饰，可变，线程不安全，效率高</li>
<li>StringBuffer没有final修饰，可变，线程安全，效率低</li>
</ol>
<h2 id="锁问题"><a href="#锁问题" class="headerlink" title="锁问题"></a>锁问题</h2><h3 id="Synchronize（重量级锁）"><a href="#Synchronize（重量级锁）" class="headerlink" title="Synchronize（重量级锁）"></a>Synchronize（重量级锁）</h3><blockquote>
<p>加在方法上，对方法进行同步，也就是每次只能一个线程进入。默认为非公平锁</p>
</blockquote>
<ol>
<li>优点：简单，直接，自动完成加锁，解锁操作</li>
<li>缺点：在用户态和内核态进行切换，效率低。</li>
</ol>
<h3 id="ReenLock（手动锁）"><a href="#ReenLock（手动锁）" class="headerlink" title="ReenLock（手动锁）"></a>ReenLock（手动锁）</h3><blockquote>
<p>通过创建锁对象，手动的进行加锁，和解锁</p>
</blockquote>
<ol>
<li>优点：可以自己设置为公平或非公平锁</li>
</ol>
<blockquote>
<p>非公平锁：假如有三个线程同时来，那最终哪个线程能够进入就看谁快，（不用排队）</p>
<p>公平锁：三个线程进入，依次放入一个队列，（先到先得）</p>
</blockquote>
<ol start="2">
<li>缺点：需要自己注意解锁的过程，锁是可重入的，如果少释放一层就会出现死锁现象</li>
</ol>
<h3 id="CAS（Compare-And-Set：轻量级锁，乐观锁）"><a href="#CAS（Compare-And-Set：轻量级锁，乐观锁）" class="headerlink" title="CAS（Compare And Set：轻量级锁，乐观锁）"></a>CAS（Compare And Set：轻量级锁，乐观锁）</h3><blockquote>
<p>通过<code>AtomicReference</code>进行创建自旋锁，每次线程操作前会检查自旋锁的值是否是预想值，如果不是需要进行自旋操作，知道当前值与预期值一致时，才可以操作。</p>
</blockquote>
<ol>
<li>优点：不会进入内核态，减少切换的性能消耗</li>
<li>缺点：自旋其实就是循环，如果一个线程一直无法进行操作，就会导致CPU空转，也会带来性能消耗</li>
</ol>
<blockquote>
<p>CAS的经典问题：ABA问题 -&gt; 就是说我预期值为1，但是别的线程先改成2了，再一个线程又改成1了，那当我判断时并不知道这个值之前已经被人操作了，我会继续执行我自己的逻辑。那么该如何解决呢？</p>
</blockquote>
<p>使用<code>AtomicStampedReference</code>加上时间戳，通俗的说就是加上一个版本号，不仅要比较当前值，还要比较版本号。只有两者都相等，才执行更新操作。</p>
<blockquote>
<p>如果优化CAS?</p>
</blockquote>
<p>​    可在线程空转一定时间后，放入阻塞队列中等待。</p>
<h3 id="LockSupport"><a href="#LockSupport" class="headerlink" title="LockSupport"></a>LockSupport</h3><ol>
<li>是什么<ol>
<li>对阻塞，唤醒的优化机制</li>
<li>其实底层使用的是一个permit许可证，取值范围0-1</li>
</ol>
</li>
<li>能干嘛<ol>
<li>线程同步操作</li>
</ol>
</li>
<li>去哪下<ol>
<li>JUC包</li>
</ol>
</li>
<li>怎么玩<ol>
<li>LockSupport.port相当于需要消耗一个许可证，如果许可证=1，则直接-1返回，不会阻塞，</li>
<li>LockSupport.unport相当于给出一个许可证，但是许可证上限是1，重复使用unport许可证还是等于1，所以执行两次LockSupport.unport 和 LockSupport.port，会导致最后一个port阻塞</li>
</ol>
</li>
<li>AB法则<ol>
<li>Object.wait() 和 Object.notify() 有哪些不足<ol>
<li>wait 和 notify 必须在同步代码块中出现.</li>
<li>无法先notify，再wait，会导致死锁问题</li>
</ol>
</li>
<li>Lock.Condition.await()  和 signal() 有哪些不足<ol>
<li>与wait,notify的问题一致</li>
</ol>
</li>
<li>所以我们推出了LockSupport，看是如果解决上述方法了。</li>
</ol>
</li>
</ol>
<h3 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h3><p>我们通过对ReentrantLock的源码解读来学习</p>
<blockquote>
<p>创建锁</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 创建一个Reentrant锁</span>
<span class="token class-name">ReentrantLock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 通过构造器我们可以看到实际上创建的是一个Sync对象</span>
<span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Sync</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token comment">// Sync类是继承了AQS（抽象队列同步器）</span>
<span class="token keyword">abstract</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>获取锁</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 底层还是sync对象调用lock方法</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">-></span>  sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// lock方法是Sync的抽象模板方法，具体由NonfairSync进行实现，这里我们使用默认的非公平锁</span>
<span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  					<span class="token comment">// 尝试获取锁</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 如果获取成功则，将当前线程设为所有者线程</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                <span class="token comment">// 如果没获取到，则再判断</span>
                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">// 调用nonfairTryAcquire(int acquires) 再次尝试获取锁，判断是否为可重入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
            <span class="token comment">// 先将当前线程创建成一个节点，加入等待队列中，再进行最后的尝试</span>
            <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">EXCLUSIVE</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token function">selfInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">nonfairTryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> acquires<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 当前线程</span>
    <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 这里使用AQS方法，获取锁值，</span>
  	<span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 如果为0说明可以抢占锁了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> acquires<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 判断之前抢到锁的线程是否就是自己，保证锁的可重入性</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 如果是，则计数器+1</span>
        <span class="token keyword">int</span> nextc <span class="token operator">=</span> c <span class="token operator">+</span> acquires<span class="token punctuation">;</span>
        <span class="token comment">// 这里怕计数器溢出了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>nextc <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// overflow</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>nextc<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断抢锁成功</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
   <span class="token comment">// 抢锁失败</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">addWaiter</span><span class="token punctuation">(</span><span class="token class-name">Node</span> mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token comment">// 添加一个等待节点，并标记为渎职EXCLUSIVE独占模式</span>
    <span class="token class-name">Node</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Try the fast path of enq; backup to full enq on failure</span>
    <span class="token comment">// 获取队列中的尾结点</span>
    <span class="token class-name">Node</span> pred <span class="token operator">=</span> tail<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>pred <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 尾结点不为空，说明前面还有等待的节点，则进行串联</span>
        node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
            <span class="token keyword">return</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 如果队列为空，则插入当前节点到队列中</span>
    <span class="token function">enq</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最后返回生成的节点</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token class-name">Node</span> <span class="token function">enq</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这是一个自旋结构</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 再次判断队列是否为空</span>
            <span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Must initialize</span>
                <span class="token comment">// 将该节点加入队列，这里注意头结点和尾结点是一个系统自建的一个节点，也是一个面试可能考的点，第一个进入等待队列的节点，其头指针指向的是哨兵节点</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetHead</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 新来的节点连接尾结点或哨兵节点</span>
                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> t<span class="token punctuation">;</span>
                <span class="token comment">// 将尾指针设置为新加入的节点</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetTail</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    t<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
                    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>开始准备将节点进行阻塞</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">acquireQueued</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Node</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">boolean</span> failed <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">boolean</span> interrupted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
       <span class="token comment">// 自旋结构</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token comment">// 获取当前封装节点的前一个节点</span>
            <span class="token keyword">final</span> <span class="token class-name">Node</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">predecessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果p就是头结点，也就是哨兵节点，则再尝试去获取锁</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> head <span class="token operator">&amp;&amp;</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 如果获取成功了，将当前线程节点设置为头结点</span>
                <span class="token function">setHead</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 将之前的头结点进行垃圾回收，这里其实就是头结点的替换</span>
                p<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// help GC</span>
                failed <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token comment">// 返回线程是否被打断过</span>
                <span class="token keyword">return</span> interrupted<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// Park相当于wait进行阻塞</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> node<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>
                <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                interrupted <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>failed<span class="token punctuation">)</span>
            <span class="token comment">// 取消排队</span>
            <span class="token function">cancelAcquire</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">shouldParkAfterFailedAcquire</span><span class="token punctuation">(</span><span class="token class-name">Node</span> pred<span class="token punctuation">,</span> <span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token comment">// 获取前一个节点可能是哨兵节点的状态值</span>
        <span class="token keyword">int</span> ws <span class="token operator">=</span> pred<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
        <span class="token comment">// 如果status值=-1</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">==</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span>
            <span class="token comment">// 说明这个节点已经尝试过一次（因为调用结构为自旋），但是失败了</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/*
             * Predecessor was cancelled. Skip over predecessors and
             * indicate retry.
             */</span>
            <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
                node<span class="token punctuation">.</span>prev <span class="token operator">=</span> pred <span class="token operator">=</span> pred<span class="token punctuation">.</span>prev<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>pred<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            pred<span class="token punctuation">.</span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 这里如果是第一次来，则将前节点状态值设置为-1</span>
            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>pred<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token class-name">Node</span><span class="token punctuation">.</span><span class="token constant">SIGNAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">parkAndCheckInterrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 当前节点直接被挂起，相当于阻塞，也就是不再去抢锁了</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">interrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>解锁</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java">lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">-></span>   sync<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 尝试解锁</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tryRelease</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 当前节点解锁成功后，再看AQS头结点</span>
            <span class="token class-name">Node</span> h <span class="token operator">=</span> head<span class="token punctuation">;</span>
            <span class="token comment">// 如果头结点不为空，且只要status!=0,说明队列中肯定有阻塞的节点</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>h <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> h<span class="token punctuation">.</span>waitStatus <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> releases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将当前线程节点状态-1，</span>
            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> releases<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token comment">// c=0表示已经锁解除干净了，没有重入了</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
                <span class="token comment">// 将占锁标记指向null，其他线程看到了。就可以直接去抢占了</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// 设置这个线程的状态值</span>
            <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 返回解锁成功</span>
            <span class="token keyword">return</span> free<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unparkSuccessor</span><span class="token punctuation">(</span><span class="token class-name">Node</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
         * If status is negative (i.e., possibly needing signal) try
         * to clear in anticipation of signalling.  It is OK if this
         * fails or if status is changed by waiting thread.
         */</span>
				<span class="token comment">// 注意这个的node是AQS的头结点，判断status值</span>
        <span class="token keyword">int</span> ws <span class="token operator">=</span> node<span class="token punctuation">.</span>waitStatus<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ws <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// 将头结点的值设置为0</span>
            <span class="token function">compareAndSetWaitStatus</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> ws<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/*
         * Thread to unpark is held in successor, which is normally
         * just the next node.  But if cancelled or apparently null,
         * traverse backwards from tail to find the actual
         * non-cancelled successor.
         */</span>
        <span class="token comment">// 获取到哨兵节点后第一个阻塞节点</span>
        <span class="token class-name">Node</span> s <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> s<span class="token punctuation">.</span>waitStatus <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            s <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span> t <span class="token operator">=</span> tail<span class="token punctuation">;</span> t <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> t <span class="token operator">!=</span> node<span class="token punctuation">;</span> t <span class="token operator">=</span> t<span class="token punctuation">.</span>prev<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span>waitStatus <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                    s <span class="token operator">=</span> t<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token comment">// 这里我们可以看到被阻塞的线程被唤醒了</span>
            <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>IO流</title>
    <url>//post/Java/IO%E6%B5%81.html</url>
    <content><![CDATA[<p>今天面试的时候问了一道IO流的题，鉴于之前在java基础篇的时候学过一遍，后再无使用和复习，就再跟着韩顺平老师的课件复习一遍。</p>
<h1 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h1><h2 id="IO流是什么？"><a href="#IO流是什么？" class="headerlink" title="IO流是什么？"></a>IO流是什么？</h2><p>当我们使用程序读取或修改本地文件时， 文件是以流的形式加载在内存中的。</p>
<ol>
<li>InputStream:输入流，从数据源加载至内存。</li>
<li>OutputStream:输出流，从存在中加载至目的地。</li>
</ol>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heh5hdrcj30jh045dg2.jpg" alt="image-20220902174637579"></p>
<h2 id="IO流有哪些分类"><a href="#IO流有哪些分类" class="headerlink" title="IO流有哪些分类"></a>IO流有哪些分类</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heh5td93j30tz0bywh6.jpg" alt="image-20220902174807812"></p>
<blockquote>
<p> 输入流，输出流是最宽泛的概念，也是我们上面讲的概念。那为什么还需要分成字节流，字符流，节点流，处理流呢？</p>
</blockquote>
<p>字节我们都知道：byte，是一个二进制单位，而我们的文件可以是txt(存储字符的),png(存储图片的),mp3(存储音频的),mp4(存储视频的)，但传输的时候我们都将其转化为二进制，因为计算机只能识别二进制，也就是字节。所以字节流的意思就是说：将该文件以字节为单位进行读取，可以一个字节一个字节读取，或者一段字节数组进行重复读取。这样不管是什么文件都可以进行传输了。</p>
<p>那为啥还需要字符流呢？这是已因为字节流是直接作用于文件的，而字符流使用了缓冲区，先将数据写入缓冲区进行读写操作，当输出流close或者flush时，才会把内容写入目的地。一般我们在操作文本内容时，使用字符流会更好一些，而图片，视频如果使用字符流，可能导致文件损坏。</p>
<p>节点流代表的是我们实际操作数据的流，相比包装流会更贴近底层一些，也就是我们使用FileInputStream,FileOutputStream等，而包装流是封装在节点流之上，用来加入缓存，封装接口，进行性能优化等。相当于节点流是mybatis，包装流就是mybatis-plus。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heh68926j30h10g3dgh.jpg" alt="image-20220903100526143"></p>
<h2 id="具体使用（这里我只引用常用的）："><a href="#具体使用（这里我只引用常用的）：" class="headerlink" title="具体使用（这里我只引用常用的）："></a>具体使用（这里我只引用常用的）：</h2><h3 id="FileInputStream-节点流，字节流"><a href="#FileInputStream-节点流，字节流" class="headerlink" title="FileInputStream(节点流，字节流)"></a>FileInputStream(节点流，字节流)</h3><blockquote>
<p>请使用 FileInputStream 读取 hello.txt 文件，并将文件内容显示到控制台</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> readLength <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLength <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLength<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"哪里出现问题了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="FileOutputStream-节点流，字节流"><a href="#FileOutputStream-节点流，字节流" class="headerlink" title="FileOutputStream(节点流，字节流)"></a>FileOutputStream(节点流，字节流)</h3><blockquote>
<p>请使用  FileOutputStream    在 hello.txt 文件，中写入  “hello，world”,   如果文件不存在，会创建<br>文件(注意：前提是目录已经存在.)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 这里构造器如果加true，表示追加模式，如果不写，默认是覆盖原来内容</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token string">"hello，world---"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>图片文件的拷贝</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven_.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        fileInputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="FileReader-节点流，字符流"><a href="#FileReader-节点流，字符流" class="headerlink" title="FileReader(节点流，字符流)"></a>FileReader(节点流，字符流)</h3><blockquote>
<p>使用  FileReader   从    story.txt   读取内容，并显示</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> readLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>readLen<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="FileWriter-节点流，字符流"><a href="#FileWriter-节点流，字符流" class="headerlink" title="FileWriter(节点流，字符流)"></a>FileWriter(节点流，字符流)</h3><blockquote>
<p>使用 FileWriter   将   “风雨之后，定见彩虹”    写入到   note.txt    文件中,    注意细节.</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">@Test
public void fileWriter() throws IOException &#123;
    &#x2F;&#x2F; 使用 FileWriter   将   “风雨之后，定见彩虹”    写入到   note.txt    文件中,    注意细节.
    FileWriter fileWriter &#x3D; new FileWriter(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;, true);
    try &#123;
        fileWriter.write(&quot;风雨之后，定见彩虹&quot;);
    &#125; finally &#123;
        &#x2F;&#x2F; 一定要关闭流 ，数据才会写入到文件中，或者使用fileWriter.flush();
        fileWriter.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BufferReader-包装流，字符流"><a href="#BufferReader-包装流，字符流" class="headerlink" title="BufferReader(包装流，字符流)"></a>BufferReader(包装流，字符流)</h3><blockquote>
<p>使用BufferReader读取文件，并打印到控制台</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">@Test
public void bufferedReader() throws IOException &#123;
    BufferedReader bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;));
    String readLen;
    try &#123;
        &#x2F;&#x2F; readLine() 按照行读取，效率高
        while ((readLen &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;
            System.out.println(readLen);
        &#125;
    &#125; catch (IOException e) &#123;
        throw new RuntimeException(e);
    &#125; finally &#123;
        &#x2F;&#x2F; 这里包装流关闭时，节点流底层自动关闭了
        bufferedReader.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BufferWriter-包装流，字符流"><a href="#BufferWriter-包装流，字符流" class="headerlink" title="BufferWriter(包装流，字符流)"></a>BufferWriter(包装流，字符流)</h3><blockquote>
<p>bufferWriter 写 文件</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bufferWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 换行</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">newLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>bufferReader，bufferedWriter 拷贝文件</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void fileCopyByBuffered() throws IOException &#123;
    BufferedReader bufferedReader &#x3D; new BufferedReader(new FileReader(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;));
    BufferedWriter bufferedWriter &#x3D; new BufferedWriter(new FileWriter(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello_.txt&quot;));
    String readLen;
    try &#123;
        &#x2F;&#x2F; 注意这里的bufferedReader.readLine()为换行符时，默认返回的是空字符，所以导致原本换行的地方，现在直接拼接了
        while ((readLen &#x3D; bufferedReader.readLine()) !&#x3D; null) &#123;
            if (&quot;&quot;.equals(readLen)) &#123;
                &#x2F;&#x2F; 这样就能保证正常输出了，还有一点比方说：\n\n\n  实际上中间只空了两行
                readLen+&#x3D;&quot;\n&quot;;
            &#125;
            bufferedWriter.write(readLen);
        &#125;
    &#125; finally &#123;
        bufferedWriter.close();
        bufferedReader.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="BufferInputStream-包装流，字节流"><a href="#BufferInputStream-包装流，字节流" class="headerlink" title="BufferInputStream(包装流，字节流)"></a>BufferInputStream(包装流，字节流)</h3><h3 id="BufferOutputStream-包装流，字节流"><a href="#BufferOutputStream-包装流，字节流" class="headerlink" title="BufferOutputStream(包装流，字节流)"></a>BufferOutputStream(包装流，字节流)</h3><blockquote>
<p>BufferInputStream,BufferOutputStream拷贝文件</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void fileCopyByBufferedStream() throws IOException &#123;
    BufferedInputStream bufferedInputStream &#x3D; new BufferedInputStream(new FileInputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;wallhaven.png&quot;));
    BufferedOutputStream bufferedOutputStream &#x3D; new BufferedOutputStream(new FileOutputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;wallhaven__.png&quot;));
    byte[] bytes &#x3D; new byte[1024];
    int readLen &#x3D; 0;
    try &#123;
        while ((readLen &#x3D; bufferedInputStream.read(bytes)) !&#x3D; -1) &#123;
            bufferedOutputStream.write(bytes,0,readLen);
        &#125;
    &#125; finally &#123;
        bufferedInputStream.close();
        bufferedOutputStream.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ObjectInputStream-对象流，字节流"><a href="#ObjectInputStream-对象流，字节流" class="headerlink" title="ObjectInputStream(对象流，字节流)"></a>ObjectInputStream(对象流，字节流)</h3><p>对象流就是我们将java对象进行序列化，存储在文件中，并可以通过对象流反序列化回来，要序列化的对象一定需要实现<code>Serializable</code>,其属性也需要实现，基本数据类型会自动变成包装类，而包装类是已经实现了的。</p>
<blockquote>
<p>序列化一个dog对象到文件中，并再反序列化回来</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void objectInputStream() throws IOException, InterruptedException, ClassNotFoundException &#123;
    &#x2F;&#x2F; FileOutputStream()  如果没有使用追加默认 会直接将文件清空
    ObjectOutputStream objectOutputStream &#x3D; new ObjectOutputStream(new FileOutputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;dog.dat&quot;));
    try &#123;
        objectOutputStream.writeObject(new dog(&quot;旺财&quot;,123));
        objectOutputStream.writeObject(1);
        System.out.println(&quot;输出成功&quot;);
    &#125; finally &#123;
        objectOutputStream.close();
    &#125;

    Thread.sleep(500);

    &#x2F;&#x2F; ObjectInputStream 在读取数据文件时候会判断 magic value，version value，来判断文件是否正确，如果不正确会爆出EOP错误
    ObjectInputStream objectInputStream &#x3D; new ObjectInputStream(new FileInputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;dog.dat&quot;));
    try &#123;
        Object o &#x3D; objectInputStream.readObject();
        System.out.println((dog)o);
        System.out.println(objectInputStream.readObject());
        System.out.println(&quot;读取成功&quot;);
    &#125; finally &#123;
        objectInputStream.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="ObjectOutputStream-对象流，字节流"><a href="#ObjectOutputStream-对象流，字节流" class="headerlink" title="ObjectOutputStream(对象流，字节流)"></a>ObjectOutputStream(对象流，字节流)</h3><h3 id="InputStreamReader-转化流，字节流"><a href="#InputStreamReader-转化流，字节流" class="headerlink" title="InputStreamReader  (转化流，字节流)"></a>InputStreamReader  (转化流，字节流)</h3><blockquote>
<p>为什么需要转化流？</p>
</blockquote>
<p>因为字符编码问题，当我们使用BufferedReader读txt文件时，默认使用Utf-8编码，现在想用其他编码格式，就可以将字节流转为字符流，然后指定编码规则，其实字符流本身底层使用的还是字节流，只是针对字符内容做出了优化。</p>
<blockquote>
<p>字节流FileInputStream 包装成字节流InputStreamReader,对文件进行读取(按照 utf-8/gbk 格式),进而在包装成BufferedReader。</p>
</blockquote>
<pre class="line-numbers language-none"><code class="language-none">public void InputStreamReader() throws IOException &#123;
    &#x2F;&#x2F; 将字节流FileInputStream 包装成字符流 InputStreamReader，对文件进行读取（utf-8&#x2F;gbk格式）,进而包装成BufferedReader
    FileInputStream fileInputStream &#x3D; new FileInputStream(&quot;&#x2F;Users&#x2F;qinsicheng&#x2F;IdeaProjects&#x2F;IOStream&#x2F;com&#x2F;qinsicheng&#x2F;hello.txt&quot;);
    &#x2F;&#x2F; 底层默认使用的就是UTF-8  ，我们也可以使用gbk等
    InputStreamReader inputStreamReader &#x3D; new InputStreamReader(fileInputStream, &quot;utf-8&quot;);
    BufferedReader bufferedReader &#x3D; new BufferedReader(inputStreamReader);

    try &#123;
        String s &#x3D; bufferedReader.readLine();
        System.out.println(&quot;读取到的内容&#x3D;&quot;+s);
    &#125; catch (IOException e) &#123;
        throw new RuntimeException(e);
    &#125; finally &#123;
        bufferedReader.close();
    &#125;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="OutputStreamWriter-转化流，字节流"><a href="#OutputStreamWriter-转化流，字节流" class="headerlink" title="OutputStreamWriter(转化流，字节流)"></a>OutputStreamWriter(转化流，字节流)</h3><blockquote>
<p>使用gbk编码输出文本</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">OutputStreamWriter</span> outputStreamWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>fileOutputStream<span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>outputStreamWriter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello Jvav 世界"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
        bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>序列化需要注意的点</p>
</blockquote>
<ol>
<li>读写顺序一定一致</li>
<li>序列化，反序列化对象，需要实现Serializable</li>
<li>序列化的类中加入 SerialVersionUID,提高版本的兼容性</li>
<li>序列化对象时，其属性也都必须实现序列化接口</li>
<li>序列化具有继承性</li>
</ol>
<h2 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h2><ol>
<li>创建文件，并写入内容</li>
<li>利用转化流，改变字符编码</li>
<li>读取properties文件，创建对象</li>
<li>将对象序列化</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 判断磁盘是否有mytemp文件，如果没有就创建mytemp</span>
        <span class="token comment">// 创建文件前需要保证该路径是否存在，如果不存在应先创建对应的包</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/pack1/pack2/pack3/mytemp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">boolean</span> mkdirs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getParentFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mkdirs<span class="token operator">?</span><span class="token string">"创建前提包"</span><span class="token operator">:</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">boolean</span> newFile <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>newFile<span class="token operator">?</span><span class="token string">"成功创建"</span><span class="token operator">:</span><span class="token string">"创建失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 2. 如果该文件已经存在 则输出文件已经存在，请不要重复创建了</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件已经存在，请不要重复创建了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 3. 在该文件中追加hello , world</span>
        <span class="token class-name">FileOutputStream</span> fileOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"hello,world"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据写入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            fileOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 使用BufferedReader 读取一个文本文件 为每一行加一个句号，并输出到屏幕</span>
        <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> readLen<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen <span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 如果不加\n 默认换行只返回""，所有内容挤在一起</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readLen<span class="token operator">+</span><span class="token string">".\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">// 2.如果文本是gbk模式 出现了乱码</span>
        <span class="token class-name">InputStreamReader</span> inputStreamReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedReader</span> bufferedReader1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> readSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//            while ((readSize = inputStreamReader.read(chars)) != -1) &#123;</span>
<span class="token comment">//                System.out.println(new String(chars,0,readSize));</span>
<span class="token comment">//            &#125;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>readLen<span class="token operator">=</span>bufferedReader1<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>readLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            bufferedReader1<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finalTest3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 编写一个dog.properties 含有：name，age</span>
        <span class="token comment">// 编写一个dog类，创建一个dog对象，并读取dog.properties相应的属性，并完成初始化。</span>
        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里需要注意 IDEA的properties文件默认使用的编码ISO-8859-1，要么改为utf-8，要么读的时候改变字符编码格式</span>
        <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>fileReader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        properties<span class="token punctuation">.</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 实例化dog对象</span>
        dog dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">dog</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭流</span>
        fileReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将dog对象序列化到dog.dat文件</span>
        <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.dat"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>​    我们上面列举到的实例，只是针对本地文件读取，这个最简单的，而真正需要我们去运用的是在网络IO中。不过基础还是得先打好。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>IO流</tag>
      </tags>
  </entry>
  <entry>
    <title>反射复习</title>
    <url>//post/Java/%E5%8F%8D%E5%B0%84%E5%A4%8D%E4%B9%A0.html</url>
    <content><![CDATA[<h1 id="反射复习"><a href="#反射复习" class="headerlink" title="反射复习"></a>反射复习</h1><h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><p>​    当我们创建一个对象时，需要事先在源码中进行编写，例如：<code>new Object()</code>,但如果未来发生变化，我就不得不在源码中进行修改，这也违反了开闭原则，我们能不能仅修改配置文件就可以调整系统中需要创建的类。比如说我在配置文件写:</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">classPathName</span><span class="token punctuation">=</span><span class="token value attr-value">org.Mysql.SQLBuilder</span>
<span class="token key attr-name">mathod</span><span class="token punctuation">=</span><span class="token value attr-value">getSqlSession</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    我想未来我的系统可以读取该配置文件，知道需要的是一个<code>org.Mysql.SQLBuilder</code>类，并且调用<code>getSqlSession</code>方法。等到未来如果修改成：</p>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">classPathName</span><span class="token punctuation">=</span><span class="token value attr-value">org.Oracle.SQLBuilder</span>
<span class="token key attr-name">mathod</span><span class="token punctuation">=</span><span class="token value attr-value">getSqlSessions</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    那系统也能动态的感知到现在需要的是<code>org.Oracle.SQLBuilder</code>,并要调用<code>getSqlSessions</code>方法。在使用反射前我们是无法解决的，因为所有使用的类，在编译期就固定了。所以引出了反射技术。也就是为了在运行期，可动态获取类信息或者创建对象。</p>
<p>​    这在我们学习框架例如Spring，Mybatis时就经常使用，比如我想动态的获取<code>@Table(name=&quot;my_db&quot;)</code>注解内的内容，就可以通过反射来进行获取。</p>
<blockquote>
<p>具体功能：</p>
</blockquote>
<ol>
<li><p>在运行时判断任意一个对象所属的类  （</p>
</li>
<li><p>在运行时构造任意一个类对象   </p>
</li>
<li><p>在运行时得到任意一个类所具有的的成员方法和方法</p>
</li>
<li><p>在运行时调用任意一个对象的成员变量和方法</p>
</li>
<li><p>生成动态代理</p>
</li>
</ol>
<h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p>​    反射机制允许程序在执行期间借助<code>Reflection API</code>，获取任何类的内部信息（比如：成员变量，构造器，成员方法等），并能操作属性和方法。</p>
<p>​    当JVM加载完类后，会在堆中产生一个Class类型的对象（一个类只有一个Class对象），这个类对象包含了类的完整结构信息。</p>
<blockquote>
<p>Java反射机制原理图</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221203151322560.png" alt="image-20221203151322560"></p>
<blockquote>
<p>类加载过程</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221203155444189.png" alt="image-20221203155444189"></p>
<p><img src="../../typora-user-images/image-20221203155504141.png" alt="image-20221203155504141"></p>
<p>​        简单来说就是我们写成的源码，在被JVM加载后，会对每个类生成唯一的Class对象，每当我们实例化一个对象时，这个对象的对象头都有一个指针指向对象所属的唯一的Class对象。</p>
<p>​        当我们获取到Class对象时，我们可以知道Class成员变量，方法，构造器，并进行任意的使用。</p>
<blockquote>
<p>其中最主要的几个类：</p>
</blockquote>
<ol>
<li><strong>Java.lang.Class</strong> 表示一个类</li>
<li><strong>Java.lang.reflect.Method</strong>  表示方法</li>
<li><strong>Java.lang.reflect.Field</strong>   表示成员变量</li>
<li><strong>Java.lang.reflect.Constructor</strong>   表示构造器</li>
</ol>
<p>​        其中Method，Field，Constructor都有<code>getModifiers()</code>以int形式返回修饰符(private，protect，public)</p>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">0: 默认
1: public
2: private
4: protected
8: static
16: fianl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    public(1) + static(8) = 9  这样就可以判断出一些信息。</p>
<h2 id="怎么用"><a href="#怎么用" class="headerlink" title="怎么用"></a>怎么用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  	<span class="token comment">// 找到String的类对象</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
  	<span class="token comment">// 获取字段 public</span>
    <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 获取方法 public</span>
    <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 获取构造器 public</span>
    <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 所有修饰符的都可以获取到</span>
    aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>反射的优缺点：</p>
</blockquote>
<ol>
<li>优点：可以动态创建和使用对象</li>
<li>缺点：反射基本是解释执行，对执行速度有影响</li>
</ol>
<blockquote>
<p>我们可代码验证</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常方式：</span>
        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cat<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"正常调用："</span><span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 反射方式：</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Cat</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> cat<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Cat</span> cat1 <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> hi <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> time<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            hi<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>cat1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射调用："</span><span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 结果： </span>
        <span class="token comment">// 正常调用：9</span>
        <span class="token comment">// 反射调用：84</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    Method和Field和Constructor对象都有<code>setAccessible()</code>方法,setAccessible作用是启动和禁止访问安全检查的开关。当setAccessible(true)表示反射的对象在使用时取消访问检查，提高反射的效率，为false则表示执行访问检查。当我们修改上述代码：<code>hi.setAccessible(true);</code>，最终执行速度可以快一倍左右。</p>
<p>​    并且当我们访问<code>private</code>修饰的变量，方法，构造器时，如果不设置<code>setAccessible()</code>会爆出：<code>java.lang.IllegalAccessException</code>; 如果设置则可正常访问。</p>
<h4 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h4><p><img src="../../typora-user-images/image-20221203154354105.png" alt="image-20221203154354105"></p>
<ol>
<li>Class也是类，继承Object。</li>
<li>Class类不是new出来的，而是系统创建的</li>
<li>某个类的Class类对象，在内存只有一份，因为类只加载一次 （如果多线程同时进行同一个类加载，会导致阻塞）</li>
<li>每个类的实例都知道自己是哪个Class实例的</li>
<li>通过Class对象可以完整的获取一个类的完整结构</li>
<li>Class对线是存放在堆的</li>
<li>类的字节码二进制数据，是放在方法区的，也称为元数据。</li>
</ol>
<blockquote>
<p>Class类的常用方法：</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221203155854410.png" alt="image-20221203155854410"></p>
<blockquote>
<p>如何获取Class类</p>
</blockquote>
<ol>
<li>已经知道全类名：<code>Class.forName(&quot;className&quot;)</code>,常用语配置文件读取，加载类</li>
<li>已经知道具体的类：<code>Class clas = Cat.class</code>,性能最好，一般用在参数传递</li>
<li>已经知道类的实例：<code>Class clas = cat.getClass()</code></li>
<li>包装类型：<code>Class i = Inteager().Type</code></li>
<li>基本数据类型：int.class</li>
</ol>
<blockquote>
<p>哪些类型有Class对象</p>
</blockquote>
<pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown"><span class="token list punctuation">1.</span> 类
<span class="token list punctuation">2.</span> 接口
<span class="token list punctuation">3.</span> 数组
<span class="token list punctuation">4.</span> 枚举
<span class="token list punctuation">5.</span> 注解
<span class="token list punctuation">6.</span> 基本数据类型
<span class="token list punctuation">7.</span> void<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="最终测试"><a href="#最终测试" class="headerlink" title="最终测试"></a>最终测试</h2><p>测试1：</p>
<p>​    定义PrivateTest类，私有属性name，属性值为hellokitty</p>
<ol>
<li>提供getName的公有方法</li>
<li>利用Class类获取私有的name属性，修改属性值，并调用getName方法，打印name属性</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PrivateTest</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">PrivateTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">PrivateTest</span> instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span> name <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        name<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span><span class="token string">"wangCai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Method</span> getName <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"getName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>getName<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">PrivateTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"hellokitty"</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>测试2：</p>
<ol>
<li>反射获取File类的Class对象</li>
<li>在控制台打印File类的所有构造器</li>
<li>通过newInstance创建File对象，并创建一个本地文件</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> demo <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchFieldException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.io.File"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> constructors <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>constructors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> constructor <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"doc.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        file<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell脚本</title>
    <url>//post/Linux/shell%E8%84%9A%E6%9C%AC.html</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><h2 id="输入输出重定向"><a href="#输入输出重定向" class="headerlink" title="输入输出重定向"></a>输入输出重定向</h2><blockquote>
<p>我们在后台挂在jar包时，常使用过一个命令：<code>nohup java -jar xxx.jar &gt; java.log 2&gt;&amp;1 &amp;</code></p>
<p>这里就有几个知识点：</p>
<ol>
<li>末尾的 <code>&amp;</code> 代表后台默认启动，页面关闭后，程序终止。</li>
<li>头部的 <code>nohup</code> 表示页面关闭后，后台仍继续运行，如果没有指定日志文件，则默认将输出重定向到<code>nohup.log</code>文件</li>
<li><code>java -jar xxx.jar</code>最基本的启动jar包</li>
<li><code>&gt; java.log</code> 将运行jar包后的输出日志文件重定向到 <code>java.log</code>文件中</li>
<li><code>2&gt;&amp;1</code>将标准输出与标准错误输出合并，在当前语义下就是将所有信息输出到 <code>java.log</code>文件。<ol>
<li>如果只写 <code>&gt;</code> 表示只将正常输出重定向到log文件中，错误信息直接显示页面</li>
<li>如果写 <code>2&gt;</code> 表示只将错误输出重定向到log文件中，正常信息直接显示页面</li>
</ol>
</li>
<li><code>&gt;</code> 默认表示重定向，并覆盖原来内容</li>
<li><code>&gt;&gt;</code> 表示以追加的方式重定向</li>
</ol>
</blockquote>
<p>这样我们就可以监控到后台运行程序的日志信息了。</p>
<h2 id="shell脚本保证程序运行"><a href="#shell脚本保证程序运行" class="headerlink" title="shell脚本保证程序运行"></a>shell脚本保证程序运行</h2><blockquote>
<p><strong>需求</strong>：当我们将项目挂在到服务器中，可能过一会儿服务就挂机了，我们可能还不知道请求，就需要一个脚本定时的去监控，程序是否仍在运行中。</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:8080</span>
<span class="token assign-left variable">renren</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:82</span>
<span class="token assign-left variable">getaway</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:9001</span>
<span class="token assign-left variable">manager</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token function">lsof</span> <span class="token parameter variable">-i:8001</span>
<span class="token assign-left variable">back</span><span class="token operator">=</span><span class="token variable">$?</span>
<span class="token comment">#echo "'renren:', $&#123;renren&#125;"</span>
<span class="token comment">#echo "'getaway:',$&#123;getaway&#125;"</span>
<span class="token comment">#echo "'manager:',$&#123;manager&#125;"</span>
<span class="token comment">#echo "'back:',$&#123;back&#125;"</span>
<span class="token comment"># 判断项目文件都是否都正产运转，如果没有运转，则进行记录日志，并重新启动服务</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;back&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/dist
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>, server restart"</span> <span class="token operator">>></span> renre.log
        <span class="token function">nohup</span> <span class="token function">node</span> server.js <span class="token operator">>></span> renre.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
        <span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;renren&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/java
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>, server restart"</span> <span class="token operator">>></span> renren.log
        <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> renren-fast.jar <span class="token operator">>></span> renren.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;getaway&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/java
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>, server restart"</span> <span class="token operator">>></span> getaway.log
        <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> getaway-0.0.1-SNAPSHOT.jar <span class="token operator">>></span> getaway.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token keyword">fi</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;manager&#125;</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
        <span class="token builtin class-name">cd</span> /project/qiyuan/java
        <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +%F%n%T<span class="token variable">)</span></span>,node server restart"</span> <span class="token operator">>></span> manager.log
        <span class="token function">nohup</span> <span class="token function">java</span> <span class="token parameter variable">-jar</span> manager-0.0.1-SNAPSHOT.jar <span class="token operator">>></span> manager.log <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span>
<span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis挖矿分析</title>
    <url>//post/Redis/%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BD%93%E4%BD%A0%E5%AD%A6%E4%B9%A0Redis%EF%BC%8C%E5%8F%91%E7%8E%B0%E8%87%AA%E5%B7%B1%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E6%8C%96%E7%9F%BF%E4%BA%86.html</url>
    <content><![CDATA[<h1 id="为什么当你学习Redis，发现自己的服务器在挖矿了"><a href="#为什么当你学习Redis，发现自己的服务器在挖矿了" class="headerlink" title="为什么当你学习Redis，发现自己的服务器在挖矿了"></a>为什么当你学习Redis，发现自己的服务器在挖矿了</h1><p>​    在我学习Redis时，因为嫌麻烦就没有设置密码，结果导致一段时间后系统提醒我，我的服务器上有挖矿行为，如果不清理就停止运行，我一脸懵逼，并不断上网查找哪里出现问题了，但最终还是没有解决，无奈下我初始化了服务器。希望本篇文章能对你有锁帮助，顺利让你体会到入侵自己服务器的感觉。</p>
<h2 id="你是如何连接服务器的？"><a href="#你是如何连接服务器的？" class="headerlink" title="你是如何连接服务器的？"></a>你是如何连接服务器的？</h2><p>​    在最初我们购买好自己的服务器后，要么在服务器厂商页面进行安全连接，要么通过<code>SSH 用户名@密码</code>方式进行连接，例如下图：</p>
<p><img src="../../typora-user-images/image-20221017171909179.png" alt="image-20221017171909179"></p>
<p>​    但到后面我们发现每次都需要输入密码，也太麻烦了，可以利用秘钥登陆服务器。那如何获取到你的秘钥呢？</p>
<ol>
<li><p>客户端通过命令行模式输入：<code>ssh-keygen</code>生成自己的公钥和私钥（这里可以指定参数，具体自己查）。</p>
<p><img src="../../typora-user-images/image-20221017172559852.png" alt="image-20221017172559852"></p>
</li>
<li><p>手动将客户端的公钥放入远程<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>的指定位置,/root/.ssh/authorized_keys。</p>
<p><img src="../../typora-user-images/image-20221017173030351.png" alt="image-20221017173030351"></p>
</li>
<li><p>现在我们再通过ssh进行登陆，可以看到直接登陆到服务器了</p>
</li>
</ol>
<p><img src="../../typora-user-images/image-20221017173225460.png" alt="image-20221017173225460"></p>
<p>那说了这么多，我们发现只要服务器上有你的秘钥，你就可以直接进行登陆，不需要设置密码。那这和Redis有啥关系呢？</p>
<h2 id="你是如何连接Redis的？"><a href="#你是如何连接Redis的？" class="headerlink" title="你是如何连接Redis的？"></a>你是如何连接Redis的？</h2><p>通常有三种：</p>
<ol>
<li>在服务器中使用<code>redis-cli</code>进行操作</li>
<li>在代码中连接使用</li>
<li>在本地远程连接使用：<code>redis-cli -h IP地址</code></li>
</ol>
<p>而我们最长使用的就是使用代码进行连接，因此需要修改Redis的配置文件。来运行我们远程访问。修改一下参数：</p>
<ol>
<li><code>protected-mode no</code></li>
<li><code>bind 0.0.0.0</code></li>
</ol>
<p>​    如果你忘了设置密码了，当Redis重新加载配置文件后，理论上你能访问到的同时，别人只要知道你的IP地址，也就能操作你的Redis了，下图显示本地可以直接访问，并进行操作了。</p>
<p><img src="../../typora-user-images/image-20221017175943082.png" alt="image-20221017175943082"></p>
<p>​    接下来我们对Redis存储一些值，输入：<code>cat 你的公钥本地地址 | redis-cli -h 服务器IP地址 -x set crackit</code></p>
<p><img src="../../typora-user-images/image-20221017180431887.png" alt="image-20221017180431887"></p>
<p>​    通过上面的指令，我们已经成功的将公钥值放入Redis中了，并可以查询到。</p>
<blockquote>
<p>192.168.1.11:6379&gt; config set dir /root/.ssh/    配置地址设置</p>
<p>OK </p>
<p>192.168.1.11:6379&gt; config get dir </p>
<ol>
<li>“dir” 2) “/root/.ssh” </li>
</ol>
<p>192.168.1.11:6379&gt; config set dbfilename “authorized_keys”</p>
<p>OK</p>
<p>192.168.1.11:6379&gt; save </p>
<p>OK</p>
</blockquote>
<p>​    上面相当于把你redis中存储的值直接保存到了<code>/root/.ssh/authorized_keys </code>这个文件里,这不就是我们远程连接设置秘钥的地方嘛，我草！！！，所以这时候你的服务器已经可以让别人进出无阻了，想干嘛干嘛了。关键这不是最恶心人的。当服务器厂商对你提醒后，你去检查你的秘钥，发现真的多出来一个，你想删却发现没有权限。如果运气好你可以在定时任务中找到莫名奇妙的任务，你删掉，但并没什么用，相当于你家大门已经没有了，你疯狂的上网搜索，发现可以用<code>chattr</code>来修改文件权限，但惊奇的发现chatter这个指令不存在，是的，人家把你的大砍刀也直接顺走了。我们一步步来解决。</p>
<ol>
<li><p>首先我们需要chatter来修改文件属性，但是显示指令不存在</p>
<ol>
<li>使用：<code>yum -y install e2fsprogs</code>,但是可能显示该包已经存在</li>
<li>直接：<code>yum remove e2fsprogs</code>卸载之前的，然后从新下载。</li>
</ol>
</li>
<li><p>这时候看chatter应该是可以用了</p>
<ol>
<li><p>使用：<code>lsattr authorized_keys</code>，去检查该文件</p>
<p><img src="../../typora-user-images/image-20221017185101472.png" alt="image-20221017185101472"></p>
</li>
<li><p>如果是这种情况说明文件已经被锁定了，我们使用：<code>chattr -ia authorized_keys </code>也就是去掉这两个属性。</p>
</li>
</ol>
</li>
<li><p>这时候该文件已经可以被chmod修改权限了，使用<code>chmod 777 authorized_keys</code></p>
</li>
<li><p>如果上面都没问题，使用：<code>rm -f authorized_keys</code> 直接删除。</p>
</li>
<li><p>最后检查定时任务之类的。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    由于攻击是我亲身经历的，让我们烦恼了好一阵子，所以在这里写下来，希望能对你有所帮助。不要在服务器上尝试我上述的打开Redis权限的步骤，因为你大概率十分钟之内就被攻击了。别不信，我就是这么被攻击的。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>网络攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring如何解决循环依赖</title>
    <url>//post/Spring/Spring%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96.html</url>
    <content><![CDATA[<h2 id="Spring循环依如何解决？"><a href="#Spring循环依如何解决？" class="headerlink" title="Spring循环依如何解决？"></a>Spring循环依如何解决？</h2><blockquote>
<p>循环依赖是什么？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">B</span> b<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">A</span> a<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">//简单来说就是A的创建依赖于B，B的创建依赖于A。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在一般场景下，如何解决循环依赖的问题？</p>
<p>我们知道对象的创建一般有：</p>
<p>​    无参构造器+属性Set方法初始化对象</p>
<p>​    有参构造器直接初始化对象</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过有参构造器初始化</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">B</span> b<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">A</span> a<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> client<span class="token punctuation">&#123;</span>
  <span class="token comment">//我们发现会无限套娃下去，有参构造器方法不能使用</span>
  <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//通过无参参构造器初始化</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">B</span> b<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>
  <span class="token class-name">A</span> a<span class="token punctuation">;</span>
  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setA</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> client<span class="token punctuation">&#123;</span>
  <span class="token comment">//可以发现无参构造器+set方法可以完成任务</span>
  <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  a<span class="token punctuation">.</span><span class="token function">setB</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
  b<span class="token punctuation">.</span><span class="token function">setA</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>通过上面的场景，我们就可以知道利用Set方法可以解决循环依赖，那在Spring中也是如此，但增加了亿丝细节</p>
</blockquote>
<blockquote>
<p>我们在使用Spring时，常讲Spring容器，也就是我们不去new对象，而是从容器中取对象，那这个容器到底是什么？</p>
</blockquote>
<p>​    容器顾名思义，就是存放数据对象的地方，又是在内存中的，每次我们向容器里取对象时都会提供一个对象名，或者是类型信息，然后容器返回相应的数据，那在Java基础中，我们学习到的Map结构，就很符合这样要求，通过Key，Value来存储对象信息。所以其实Spring容器就是通过一个Map来实现的，也就是这个家伙<code>Map&lt;String, Object&gt; singletonObjects</code>,但更确切的来说它叫做一级缓存，专门存放已经完整经过生命周期的对象（对象初始化后，参数也赋值了）。那既然有一级缓存就可能有其他级缓存，确实Spring有三层缓存，而这三层缓存就是来解决循环依赖的关键！！！</p>
<blockquote>
<p>三级缓存为哪三级，分别是干嘛的？</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heivk5brj30wo0bz40a.jpg" alt="image-20220705113930715"></p>
<p>上图就Spring中的源码，三个Map对象的就是三级缓存</p>
<ol>
<li><code>singletonObjects</code>:一级缓存存放完整生命周期的Bean，我们从容器中取对象，就从这里找的。</li>
<li><code>earlySingletonObjects</code>:二级缓存存放半生命周期的Bean，可以理解为通过无参构造器向堆空间申请内存了，但是没有对属性赋值。</li>
<li><code>singletonFactories</code>:三级缓存存放创建Bean的工厂。</li>
</ol>
<blockquote>
<p>我们知道Spring容器中可以设置对象为多例模式和单例模式，每种模式都可以解决循环依赖问题吗？</p>
</blockquote>
<blockquote>
<p>单例模式我们知道是存放在一级缓存中的，那<em>prototype</em>模式的对象是否也在一级缓存中？</p>
</blockquote>
<p>下面我们先来看看当创建prototype对象时，底层发生了什么</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assertBeanFactoryActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">//获取目标bean</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> requiredType<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//一般do开头的方法都是干实事儿的，重点关注</span>
   <span class="token keyword">return</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> requiredType<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Eagerly check singleton cache for manually registered singletons.  </span>
<span class="token comment">// 可以看到不管是不是单例模式都会来一级缓存寻找，但是这里没有找到</span>
<span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>typeCheckOnly<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">//标记对象是否之前创建过了</span>
   <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//这里只有第一次创建时会进来，标记为该类型对象已经创建，第二次获取bean实例时就知道之前已经创建了，直接退出</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">markBeanAsCreated</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mergedBeanDefinitions<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// Let the bean definition get re-merged now that we're actually creating</span>
            <span class="token comment">// the bean... just in case some of its metadata changed in the meantime.</span>
            <span class="token function">clearMergedBeanDefinition</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token comment">//这里记录之前创建过的对象</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>alreadyCreated<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断是否为isPrototypel类型对象</span>
<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mbd<span class="token punctuation">.</span><span class="token function">isPrototype</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// It's a prototype -> create a new instance.</span>
   <span class="token class-name">Object</span> prototypeInstance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      <span class="token function">beforePrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//这里就要创建prototypeInstance实例了</span>
      prototypeInstance <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
      <span class="token function">afterPrototypeCreation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
  <span class="token comment">//重点</span>
   bean <span class="token operator">=</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>prototypeInstance<span class="token punctuation">,</span> name<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">RootBeanDefinition</span> mbd<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>
      <span class="token keyword">throws</span> <span class="token class-name">BeanCreationException</span> <span class="token punctuation">&#123;</span>

   <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token class-name">RootBeanDefinition</span> mbdToUse <span class="token operator">=</span> mbd<span class="token punctuation">;</span>

   <span class="token comment">// Make sure bean class is actually resolved at this point, and</span>
  	<span class="token comment">//在动态解析类的情况下克隆bean定义</span>
   <span class="token comment">// clone the bean definition in case of a dynamically resolved Class</span>
   <span class="token comment">// which cannot be stored in the shared merged bean definition.</span>
   <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> resolvedClass <span class="token operator">=</span> <span class="token function">resolveBeanClass</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>mbd<span class="token punctuation">.</span><span class="token function">hasBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mbd<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      mbdToUse <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RootBeanDefinition</span><span class="token punctuation">(</span>mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
      mbdToUse<span class="token punctuation">.</span><span class="token function">setBeanClass</span><span class="token punctuation">(</span>resolvedClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">// Prepare method overrides.</span>
   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      mbdToUse<span class="token punctuation">.</span><span class="token function">prepareMethodOverrides</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BeanDefinitionValidationException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinitionStoreException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            beanName<span class="token punctuation">,</span> <span class="token string">"Validation of method overrides failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.</span>
      <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">resolveBeforeInstantiation</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>
   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeanCreationException</span><span class="token punctuation">(</span>mbdToUse<span class="token punctuation">.</span><span class="token function">getResourceDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span>
            <span class="token string">"BeanPostProcessor before instantiation of bean failed"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">//这里do开头，是重点</span>
      <span class="token class-name">Object</span> beanInstance <span class="token operator">=</span> <span class="token function">doCreateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbdToUse<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
         logger<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Finished creating instance of bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// No special handling: simply use no-arg constructor.</span>
<span class="token comment">//要通过无参构造器创建了</span>
<span class="token keyword">return</span> <span class="token function">instantiateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//获取实例化策略，然后实例化对象</span>
beanInstance <span class="token operator">=</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">instantiate</span><span class="token punctuation">(</span>mbd<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> parent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * Return the instantiation strategy to use for creating bean instances.
 */</span>
<span class="token keyword">protected</span> <span class="token class-name">InstantiationStrategy</span> <span class="token function">getInstantiationStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>instantiationStrategy<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//马上要创建了</span>
<span class="token keyword">return</span> <span class="token class-name">BeanUtils</span><span class="token punctuation">.</span><span class="token function">instantiateClass</span><span class="token punctuation">(</span>constructorToUse<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//利用反射要真正创建实例了</span>
<span class="token keyword">return</span> ctor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>argsWithDefaultValues<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">B</span> b<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">B</span> <span class="token function">getB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token class-name">B</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
		<span class="token comment">//进入A的无参构造器，实例化对象</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---A created success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Initialize the bean instance.</span>
		<span class="token class-name">Object</span> exposedObject <span class="token operator">=</span> bean<span class="token punctuation">;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
			<span class="token comment">//填充属性</span>
			<span class="token function">populateBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> mbd<span class="token punctuation">,</span> instanceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
			exposedObject <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> exposedObject<span class="token punctuation">,</span> mbd<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>以上断点代码就是Spring中的源码显示，大家感兴趣，也可以自己打一遍。</p>
<p><strong>小总结</strong>：</p>
<ol>
<li>我们可以看到为什么当变量设置为prototype时，每次返回的对象都不一样.<ul>
<li>因为在Spring容器中根本没有缓存之前的对象，而是每次都反射一个新的对象进行返回。</li>
<li>而在单例模式时，会将对象放到缓存中，这样你下次再要对象时，直接从一级缓存中找。</li>
</ul>
</li>
<li>prototype也叫做原型，很多人以为是利用了原型设计模式，存第一次创建的实例，然后每次拷贝一个新的返回。<ul>
<li>但根据源码阅读发现创建的实例根本没有存储在容器中，哪来的拷贝。<code>不看源码你就被坑了，但是也不要相信我的话，你最好自己再看一遍。</code></li>
<li>推荐一个博主写的文章：<a href="https://blog.csdn.net/FanYien/article/details/117898188%E3%80%82">https://blog.csdn.net/FanYien/article/details/117898188。</a></li>
</ul>
</li>
<li>那prototype能解决循环依赖问题吗？<ul>
<li>不能，因为假如说A类中有一个B属性需要注入，当实例化A时需要注入B，而B现在没有，需要先实例一个B对象，实例B的时候一个A注入，但容器中找不到之前创建的A，所以需要自己再实例一个A对象，循环往复，因为每次返回的对象都不同。Spring官网也明确禁止了。</li>
<li>所以我们说Spring解决循环依赖的前提是对象是单例模式下的，并通过Set方法构建。</li>
</ul>
</li>
<li>那单例模式下是如何解决循环依赖的？<ul>
<li>这里推荐另一个博主写的，写的非常详细：<a href="https://blog.csdn.net/oneby1314/article/details/113789384">https://blog.csdn.net/oneby1314/article/details/113789384</a></li>
<li>其实总结下来就是，利用三层缓存来解决，现在容器需要注入一个A对象时，先去一级缓存中找，没有的话则容器直接实例化一个A（没有对属性赋值）并放入三级缓存，当需要注入A对象的B属性类时，也去容器找，没有的话再实例化一个B，当给B对象的A赋值时，也去一级缓存找，没有则去二级缓存找，再没有去三级缓存，这是发现找到了之前的A，则直接注入，B这就算完整了放在一级缓存，又回到A的初始化，去一级缓存找，发现有一个B，则对A也初始化。这样循环依赖就解决掉了。具体可以看上面博主的文章。</li>
</ul>
</li>
<li>看完后突然感觉似乎一层缓存也可以解决循环依赖问题，为什么Spring要用三层？<ul>
<li>这里我是看了<a href="https://juejin.cn/post/6930904292958142478%E8%BF%99%E4%BD%8D%E5%8D%9A%E4%B8%BB%E7%9A%84%E6%96%87%E7%AB%A0%E6%89%8D%E7%90%86%E8%A7%A3%E4%B8%80%E4%BA%9B">https://juejin.cn/post/6930904292958142478这位博主的文章才理解一些</a></li>
<li>大致是说三级缓存是Spring在结合<code>AOP</code>跟Bean的生命周期的设计，保证如果需要代理时，保证在Bean生命周期最后一步再完成代理。</li>
<li><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8heirn3enj31xs0ekad1.jpg" alt="image-20220902091424411"></li>
</ul>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    这算是我第一次自己读Spring源码，在之前一般遇到问题我都是看有没有别人的总结，觉的源码我肯定看不了，看别人的总结又方便又快捷。今天是因为当我再来回顾这些知识的时候，脑子里出现很多问题，感觉作者并没有说清楚，而且众说纷纭，那我们就自己做实验，自己去寻找答案吧，虽然开始做是耗时耗力，但能让你的心慢慢沉下来，浮躁是读不了源码的，感谢之前一位朋友的建议，<code>生活上我们很多事情不需要太较真，但学习必须较真!!!</code>,文笔有限，如果觉得哪里写的有问题，也欢迎提醒我进行修改。最后建议大家，全信书不如无书，自己去打断点看源码得到的才是最真实的。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>循环依赖,三级缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>封装自己的SDK</title>
    <url>//post/Spring/%E5%B0%81%E8%A3%85%E8%87%AA%E5%B7%B1%E7%9A%84SDK.html</url>
    <content><![CDATA[<h1 id="封装自己的SDK"><a href="#封装自己的SDK" class="headerlink" title="封装自己的SDK"></a>封装自己的SDK</h1><p>​    我们在开发Spring项目时常常会引入各种<code>xxx-spring-boot-starter</code>的依赖包，然后在配置文件中填入必要的信息，就可以使用依赖提供好的容器。这里是在鱼皮新项目直播中学习到的，特此记录一下。可在未来封装自己的SDK进行封装与装逼。</p>
<h2 id="SDK项目下"><a href="#SDK项目下" class="headerlink" title="SDK项目下"></a>SDK项目下</h2><ol>
<li>将pom.xml中的<build>标签删除</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>
       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>excludes</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclude</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclude</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>excludes</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>定义我们需要的模型</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> sqlSessionFactory <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token comment">/**
     * 获取连接
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"创建并返回数据库Connection"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>自动扫描并添加容器</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span><span class="token string">"sicheng.database"</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@ComponentScan</span>
<span class="token keyword">public</span> <span class="token keyword">class</span>  sqlSessionConfig<span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> sqlSessionFactory <span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token function">sqlSessionFactory</span><span class="token punctuation">(</span>userName<span class="token punctuation">,</span>password<span class="token punctuation">,</span>driver<span class="token punctuation">,</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>在resources资源下进行配置：META-INF包下的spring.factories文件</li>
</ol>
<pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># spring boot starter  这里配置你注册容器类的引用，也就是第三步的类引用，会自动扫描并注入</span>
<span class="token key attr-name">org.springframework.boot.autoconfigure.EnableAutoConfiguration</span><span class="token punctuation">=</span><span class="token value attr-value">com.example.sichengclientsdk.sqlSessionConfig</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<ol start="5">
<li>Maven进行install操作，在你的pom.xml中找到对应的依赖值</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sicheng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sicheng-client-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="6">
<li>在别的项目中进行引用，这里需要注意：maven的install只会创建在本地，如果远程使用，需要注册到Maven依赖库</li>
</ol>
<h2 id="需要依赖的项目"><a href="#需要依赖的项目" class="headerlink" title="需要依赖的项目"></a>需要依赖的项目</h2><ol>
<li>依赖引入</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.sicheng<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sicheng-client-sdk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在Resource中填入需要的值，这里注意我们需要在SDK环境中引入<code>spring-boot-configuration-processor</code>,这样当我们使用依赖后，可在<code>application.yml</code>中看到提示</li>
</ol>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">sicheng</span><span class="token punctuation">:</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span>
    <span class="token key atrule">driver</span><span class="token punctuation">:</span> com.mysql.cj.jdbc.Driver
    <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>3306/sicheng
    <span class="token key atrule">username</span><span class="token punctuation">:</span> root
    <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>自动注入容器并使用</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Resource</span>
sqlSessionConfig sqlSessionConfig<span class="token punctuation">;</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testMySDK</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    sqlSessionFactory factory <span class="token operator">=</span> sqlSessionConfig<span class="token punctuation">.</span><span class="token function">getSqlSessionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 输出：创建并返回数据库Connection</span>
    <span class="token comment">// 输出：sqlSessionFactory(userName=root, password=123456, driver=com.mysql.cj.jdbc.Driver, url=jdbc:mysql://localhost:3306/sicheng)</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>SDK</tag>
      </tags>
  </entry>
  <entry>
    <title>手写Spring系列：IOC</title>
    <url>//post/Spring/%E6%89%8B%E5%86%99Spring.html</url>
    <content><![CDATA[<h1 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h1><p>​    我们学Java的基本上都会使用Spring进行开发，而Spring中最为核心的又是IOC和AOP，接下来的内容是在学习<code>手写Spring渐进式源码实践</code>这本书后的学习总结，看是否我们能开发出一个<code>mini-Spring</code>。因为后期代码会很多，而且基本上都是在前一版的基础上进行扩展。这里我只声明每一章的目标扩展点是啥，具体从Github上获取源码：<a href="https://github.com/fuzhengwei/book-small-spring">https://github.com/fuzhengwei/book-small-spring</a></p>
<h2 id="第一章：实现一个简单的Spring-Bean容器"><a href="#第一章：实现一个简单的Spring-Bean容器" class="headerlink" title="第一章：实现一个简单的Spring Bean容器"></a>第一章：实现一个简单的Spring Bean容器</h2><p>​    先不深究Spring源码，我就看自己平时使用Spring时的体会，使用Spring时，通过XML配置文件或者通过注解，声明哪些类是需要注入到容器中的，到自己使用时，可以从容器中获取该类对象。那这不就是我们基础中学的Collection或者Map就能实现的操作嘛，因为我需要频繁的从容器中获取指定类对象，所以查询返回的效率需要非常高，那就我们就用Map来实现，先不要想那么多。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// 用Map来存储Bean</span>
    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">></span></span> beanDefinitionMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 获取</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> beanDefinitionMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
		<span class="token comment">// 注册</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        beanDefinitionMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我们使用BeanDefinition来包裹实际的对象，因为我们知道一个Bean不仅拥有自己属性，还拥有一些通用属性，比如：单例模式还是原型模式，Bean内需要填充的属性，这里我们只做包裹，其余的后面实现。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实际填充的对象</span>
    <span class="token keyword">private</span> <span class="token class-name">Object</span> bean<span class="token punctuation">;</span>
 		<span class="token comment">// 省略 构造器 和 get方法。。</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们来测试一下：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 1.初始化 BeanFactory</span>
    <span class="token class-name">BeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.注入bean</span>
    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanDefinition</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">registerBeanDefinition</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.获取bean</span>
    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"userService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第二章：实现Bean对象的定义，注册和获取"><a href="#第二章：实现Bean对象的定义，注册和获取" class="headerlink" title="第二章：实现Bean对象的定义，注册和获取"></a>第二章：实现Bean对象的定义，注册和获取</h2><p>​    在上面我们可以看到我是创建好了的<code>UserService</code>放入容器中，这和我们之前学的依赖倒置并不符合，我们应只指定哪些Bean需要加载到容器中，具体的对象实例应又BeanFactory自己管理，所以我们修改BeanDefinition，在内只存放Bean的Class对象。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span> beanClass<span class="token punctuation">;</span>
  	<span class="token comment">// 构造器 get，set方法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    BeanFactory也修改为接口，定义获取Bean的方式，具体Bean存储与获取交给子类来实现，使职责单一。</p>
<p>​    我们在这里先假设每个Bean都是单例的，创建SingletonBeanRegistry接口，定义注册和获取单例对象的方式，剩下的交给子类具体实现。</p>
<p>​    现在系统中有两个容器，一个是<code>BeanDefinitionMap</code>负责存储加载到容器的Bean信息，一个是<code>singletonObjects</code>负责存储已经创建好的单例对象。具体可看下面的UML类图，关系还是很清楚的。BeanFactory在实例化对象时，通过BeanDefinitionMap中的类信息，通过反射直接创建对象，并放入容器中。</p>
<blockquote>
<p>​    Spring中有大量的接口与抽象类，我个人感觉是将职责划分清楚，容易未来系统的扩展性，有一点是通过抽象类去实现接口，并定义自己的抽象方法，而且可以实现一部分的接口方法，这样既可以扩容接口，又能保证自己可以只实现自己职责内的方法。</p>
</blockquote>
<p>![image-20221205195819447](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221205195819447.png)</p>
<h2 id="第三章：基于Cglib实现含有构造函数的类实例化策略"><a href="#第三章：基于Cglib实现含有构造函数的类实例化策略" class="headerlink" title="第三章：基于Cglib实现含有构造函数的类实例化策略"></a>第三章：基于Cglib实现含有构造函数的类实例化策略</h2><p>​    在第二章中我们在<code>AbstractAutowireCapableBeanFactory::createBean</code>中通过反射进行Bean的实例化，这一章我们引入了实例化策略：<code>InstantiationStrategy</code>，并通过JDK和Cglib两个种方式去实现。</p>
<blockquote>
<p>JDK 和 Cglib实例化对象有什么区别</p>
</blockquote>
<p>​    CGLib创建的动态代理对象性能比JDK创建的动态代理对象的性能高不少，但是CGLib在创建代理对象时所花费的时间却比JDK多得多，所以对于单例的对象，因为无需频繁创建对象，用CGLib合适，反之，使用JDK方式要更为合适一些。同时，由于CGLib由于是采用动态创建子类的方法，对于final方法，无法进行代理。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8taj51ws8j329d0u0jwj.jpg" alt="image-20221205221303651"></p>
<h2 id="第四章：注入属性与依赖对象"><a href="#第四章：注入属性与依赖对象" class="headerlink" title="第四章：注入属性与依赖对象"></a>第四章：注入属性与依赖对象</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v5c9aif4j30l10dn0u8.jpg" alt="image-20221207124432765"></p>
<p>​    比方说我UserService内需要注入UserDao来操作数据库，所以我在实例化Bean后，应将所需的属性和依赖注入到Bean中，而这部分信息通过PropertyValues记录，并封装到BeanDefinition中。在实例化后应通过对应BeanDefinition获取到需要哪些内容，并进行填充处理。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8tau0f34lj31ff0hrn18.jpg" alt="image-20221205222330790"></p>
<h2 id="第五章：资源加载器解析文件注册对象"><a href="#第五章：资源加载器解析文件注册对象" class="headerlink" title="第五章：资源加载器解析文件注册对象"></a>第五章：资源加载器解析文件注册对象</h2><p>​    <img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v6424hhbj30ou0ezabg.jpg" alt="image-20221207131117901" style="zoom:80%;" /></p>
<p>​    这里我们要加入XML解析，在上面我们都是手动将所有信息通过Java注册到BeanFactory的，这不利于维护，现实Spring中我们都是使用Xml进行配置或者注解开发，所以我们需要定义一个ResourceLoader去加载各种数据（XML文件，URL，Classpath）。</p>
<blockquote>
<p>资源加载，读取指定资源，转化为Resource，核心是获取文件的二进制流为后面解析</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8t7dhdqsvj31v60imtdo.jpg" alt="image-20221205202349968"></p>
<blockquote>
<p>资源解析：利用XML解析器解析<code>Spring.xml</code>文件,获取所有Bean信息定义，并将其封装为BeanDefinition并注册</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8t7l464y1j30bh0j9dhj.jpg" alt="image-20221205203109877"></p>
<blockquote>
<p>容器初始化：完成实例的实例化与属性填充</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8tbqnpo66j327k0u07a6.jpg" alt="image-20221205225453703"></p>
<p>​    这一章类扩展的很多，建议仔细读两遍源码，着重关注资源加载解析部分即可，其余流程大体不变。</p>
<h2 id="第六章：实现应用上下文"><a href="#第六章：实现应用上下文" class="headerlink" title="第六章：实现应用上下文"></a>第六章：实现应用上下文</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v67e34i4j30sc0ingop.jpg" alt="image-20221207131430244"></p>
<blockquote>
<p>重点：</p>
</blockquote>
<p>引入应用上下文，进行资源扫描与加载，为Bean对象实例化过程添加扩展机制，允许加载Bean对象和在其实例化前后进行修改和扩展。</p>
<blockquote>
<p>核心：</p>
</blockquote>
<p>增加BeanPostProcessor 和 BeanFactoryPostProcessor </p>
<blockquote>
<p>有啥用：</p>
</blockquote>
<p>比如说我们想在Bean的实例化之前，对BeanDefinition做出记录或修改，影响Bean的实例化，或者在Bean的初始化方法前后进行一系列操作，这是后面章节的基础部分，实现容器感知，AOP等技术的实现</p>
<p><code>AbstractApplicationContext::refresh() 刷新容器</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 创建 BeanFactory，并加载 BeanDefinition</span>
    <span class="token function">refreshBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 2. 获取 BeanFactory</span>
    <span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory <span class="token operator">=</span> <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 3. 在 Bean 实例化之前，执行 BeanFactoryPostProcessor ，这时候Bean还没有实例化，找到所有的BeanFactoryPostProcessor，进行处理，可以修改BeanDefinition ！！！</span>
    <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作，找到所有的BeanPostProcessor，添加到一个容器中，等对象实例化时进行处理  ！！！ </span>
    <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 5. 提前实例化单例Bean对象</span>
    beanFactory<span class="token punctuation">.</span><span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>加载出所有注册的BeanFactoryPostProcessor</code>，普通Bean实例化前操作</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeBeanFactoryPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">></span></span> beanFactoryPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanFactoryPostProcessor</span> beanFactoryPostProcessor <span class="token operator">:</span> beanFactoryPostProcessorMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        beanFactoryPostProcessor<span class="token punctuation">.</span><span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>加载出所有注册的BeanPostProcessor</code>，必须加载并注册，因为这些Bean是转为针对普通Bean实例化后操作的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">registerBeanPostProcessors</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">BeanPostProcessor</span><span class="token punctuation">></span></span> beanPostProcessorMap <span class="token operator">=</span> beanFactory<span class="token punctuation">.</span><span class="token function">getBeansOfType</span><span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">BeanPostProcessor</span> beanPostProcessor <span class="token operator">:</span> beanPostProcessorMap<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span>beanPostProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">preInstantiateSingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 实例化所有未实例化的Bean</span>
    beanDefinitionMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">getBean</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  			<span class="token comment">// 先从单例工厂找，有则直接返回，这样就不担心之前加载的Processor再被加载处理了</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> bean<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 获取Bean对应的定义信息</span>
        <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  			<span class="token comment">// 实例化Bean</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">createBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将 Bean 实例化，执行构造器方法</span>
            bean <span class="token operator">=</span> <span class="token function">createBeanInstance</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 给 Bean 填充属性</span>
            <span class="token function">applyPropertyValues</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法</span>
            bean <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
				<span class="token comment">// 将Bean注入单例容器中</span>
        <span class="token function">registerSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 执行 BeanPostProcessor Before 处理 ！！！</span>
        <span class="token class-name">Object</span> wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 待完成内容：invokeInitMethods(beanName, wrappedBean, beanDefinition);  这里就是未来init方法调用的地方</span>
        <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2. 执行 BeanPostProcessor After 处理 ！！！</span>
        wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第七章：Bean对象的初始化与销毁"><a href="#第七章：Bean对象的初始化与销毁" class="headerlink" title="第七章：Bean对象的初始化与销毁"></a>第七章：Bean对象的初始化与销毁</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v6o9qazhj30tp0kr0wm.jpg" alt="image-20221207133043317"></p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cn.bugstack.springframework.test.bean.UserDao<span class="token punctuation">"</span></span>
          <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>initDataMethod<span class="token punctuation">"</span></span>
          <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>destroyDataMethod<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在Bean定义信息中我们指定了初始化方法（和对象构造器方法无关）和销毁方法。加入了<code>init-method 和 destroy-method</code>。我们可以在Xml解析中，读取出该数据，并把该数据保存到BeanDefinition中。这里的销毁方法，我们利用JVM的Hook进行调用。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanDefinition</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Class</span> beanClass<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">PropertyValues</span> propertyValues<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> initMethodName<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> destroyMethodName<span class="token punctuation">;</span>
  
  <span class="token comment">// ...get/set/construct方法</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    除了在Xml中进行设置初始化和销毁方式外，我们也可以设计两个接口，让Bean来实现对应的方法，未来初始化时执行相应方法。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * Bean 处理了属性填充后调用
     */</span>
    <span class="token keyword">void</span> <span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>
  	<span class="token comment">/**
     * Bean 销毁时执行
     */</span>
    <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8tttuxvloj30fq09ydgf.jpg" alt="image-20221206092044863"></p>
<p>先说初始化方法：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">createBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      	<span class="token comment">// 前面的操作</span>
        <span class="token comment">// 执行 Bean 的初始化方法和 BeanPostProcessor 的前置和后置处理方法  ！！！ </span>
        bean <span class="token operator">=</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Instantiation of bean failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 注册实现了 DisposableBean 接口的 Bean 对象  ！！！ 这里需要保存起来哪些Bean是含有销毁时方法的，在最后需要执行</span>
    <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">registerSingleton</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 执行 BeanPostProcessor Before 处理</span>
    <span class="token class-name">Object</span> wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsBeforeInitialization</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 执行 Bean 对象的初始化方法，</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
      	<span class="token comment">// 本次的核心 !!!</span>
        <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> wrappedBean<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Invocation of init method of bean["</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"] failed"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 2. 执行 BeanPostProcessor After 处理</span>
    wrappedBean <span class="token operator">=</span> <span class="token function">applyBeanPostProcessorsAfterInitialization</span><span class="token punctuation">(</span>wrappedBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> wrappedBean<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>初始化方法调用</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">invokeInitMethods</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 实现接口 InitializingBean</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">InitializingBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 2. 注解配置 init-method &#123;判断是为了避免二次执行初始化&#125;</span>
    <span class="token class-name">String</span> initMethodName <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getInitMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">InitializingBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Method</span> initMethod <span class="token operator">=</span> beanDefinition<span class="token punctuation">.</span><span class="token function">getBeanClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>initMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> initMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Could not find an init method named '"</span> <span class="token operator">+</span> initMethodName <span class="token operator">+</span> <span class="token string">"' on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        initMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注册含有Destroy方法的Bean</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">registerDisposableBeanIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span> <span class="token operator">||</span> <span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>beanDefinition<span class="token punctuation">.</span><span class="token function">getDestroyMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">registerDisposableBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">DisposableBeanAdapter</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>那现在初始化方法已经执行完了，Destroy方法什么时候执行？ 这里我们用到了JVM的钩子函数，我们先定义接口</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationContext</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">DefaultResourceLoader</span> <span class="token keyword">implements</span> <span class="token class-name">ConfigurableApplicationContext</span> <span class="token punctuation">&#123;</span> 
<span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addShutdownHook</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroySingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>将DisposableBean封装为DisposableBeanAdapter，未来调用</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DisposableBeanAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">DisposableBean</span> <span class="token punctuation">&#123;</span>
    		<span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 1. 实现接口 DisposableBean</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">DisposableBean</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token comment">// 2. 注解配置 destroy-method &#123;判断是为了避免二次执行销毁&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotEmpty</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">DisposableBean</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"destroy"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Method</span> destroyMethod <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>destroyMethodName<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> destroyMethod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Couldn't find a destroy method named '"</span> <span class="token operator">+</span> destroyMethodName <span class="token operator">+</span> <span class="token string">"' on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                destroyMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Close() 时具体的操作</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">getBeanFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">destroySingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroySingletons</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> keySet <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disposableBeans<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> disposableBeanNames <span class="token operator">=</span> keySet<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> disposableBeanNames<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Object</span> beanName <span class="token operator">=</span> disposableBeanNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">// 从单例工厂中删除</span>
            <span class="token class-name">DisposableBean</span> disposableBean <span class="token operator">=</span> disposableBeans<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 调用的是DisposableBeanAdapter重载的Destroy，最终调用Bean自身定义的Destroy。</span>
                disposableBean<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"Destroy method on bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' threw an exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第八章：感知容器对象"><a href="#第八章：感知容器对象" class="headerlink" title="第八章：感知容器对象"></a>第八章：感知容器对象</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v6tflmplj30uf0gdn00.jpg" alt="image-20221207133541448"></p>
<blockquote>
<p>需求：在Bean初始化时，能够感知到容器对象，通过容器对象进行一系列操作</p>
</blockquote>
<p>定义Aware接口，表示是可感知的对象，具体由子类实现</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8tv19b89vj32480hsgoc.jpg" alt="image-20221206100227614"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">refresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 1. 创建 BeanFactory，并加载 BeanDefinition</span>
    <span class="token comment">// 2. 获取 BeanFactory</span>

    <span class="token comment">// 3. 添加 ApplicationContextAwareProcessor，让继承自 ApplicationContextAware 的 Bean 对象都能感知所属的 ApplicationContext !!! </span>
    beanFactory<span class="token punctuation">.</span><span class="token function">addBeanPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ApplicationContextAwareProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 4. 在 Bean 实例化之前，执行 BeanFactoryPostProcessor </span>
    <span class="token comment">// 5. BeanPostProcessor 需要提前于其他 Bean 对象实例化之前执行注册操作</span>
    <span class="token comment">// 6. 提前实例化单例Bean对象</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里的第三步，因为无法在Bean初始化时感知到ApplicationContext属性，所以将ApplicationContext写入一个BeanPostProcessor，这样在执行初始化前就可以获取并分配ApplicationContext了。</p>
<p><code>AbstractAutowireCapableBeanFactory:createBean()调用</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">initializeBean</span><span class="token punctuation">(</span><span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">BeanDefinition</span> beanDefinition<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// invokeAwareMethods  这里就是将所有内容进行注入的地方</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">Aware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanFactoryAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanFactory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanClassLoader</span><span class="token punctuation">(</span><span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">BeanNameAware</span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBeanName</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    总之当Bean实现Aware实现类后，当Bean被注入属性后，就会将对应的容器对象进行填充，得到一个完整的对象。</p>
<h2 id="第九章：对象作用域与FactoryBean"><a href="#第九章：对象作用域与FactoryBean" class="headerlink" title="第九章：对象作用域与FactoryBean"></a>第九章：对象作用域与FactoryBean</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8v6yr47ffj30nt0j5jtl.jpg" alt="image-20221207134048099"></p>
<blockquote>
<p>FactoryBean 和 BeanFactory有什么区别？</p>
</blockquote>
<p>​    BeanFactory是用来获取Bean的，FactoryBean它本身是一个Bean，但它本身也是一个工厂，可以内部通过动态代理，凝聚出一个功能更完善的Bean，未来这个获取Bean获取的就是FactoryBean内部代理的Bean，可对原本的方法做出调整，而不需要修改原先基本的代码。</p>
<blockquote>
<p>为什么需要FactoryBean？</p>
</blockquote>
<p>​    可以扩充自己的对象功能了。<em>MyBatis 就是实现了一个 MapperFactoryBean 类，在 getObject 方法中提供 SqlSession 对执行 CRUD 方法的操作</em> </p>
<blockquote>
<p>如何使用FactoryBean?</p>
</blockquote>
<p>​    定义一个类实现FactoryBean接口，实现内部的getObject()，然后注册到容器中即可。</p>
<p><code>AbstractBeanFactory::doGetBean</code></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">doGetBean</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Object</span> sharedInstance <span class="token operator">=</span> <span class="token function">getSingleton</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">!=</span> sharedInstance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 如果是 FactoryBean，则需要调用 FactoryBean#getObject,获取FactoryBean中定义的元素</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>sharedInstance<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">BeanDefinition</span> beanDefinition <span class="token operator">=</span> <span class="token function">getBeanDefinition</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> bean <span class="token operator">=</span> <span class="token function">createBean</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> beanDefinition<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">getObjectForBeanInstance</span><span class="token punctuation">(</span><span class="token class-name">Object</span> beanInstance<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 判断是否为FactoryBean，如果不是则直接返回</span>
  	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>beanInstance <span class="token keyword">instanceof</span> <span class="token class-name">FactoryBean</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> beanInstance<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
		<span class="token comment">// 缓存中找</span>
    <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token function">getCachedObjectForFactoryBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> factoryBean <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">FactoryBean</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> beanInstance<span class="token punctuation">;</span>
        <span class="token comment">// !!!  获取或创建FactoryBean内对象</span>
        object <span class="token operator">=</span> <span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span>factoryBean<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> object<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">getObjectFromFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">FactoryBean</span> factory<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">isSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            object <span class="token operator">=</span> <span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>factoryBeanObjectCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> object <span class="token operator">:</span> <span class="token constant">NULL_OBJECT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> <span class="token constant">NULL_OBJECT</span> <span class="token operator">?</span> object <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">doGetObjectFromFactoryBean</span><span class="token punctuation">(</span>factory<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第十章：容器事件与事件监听器"><a href="#第十章：容器事件与事件监听器" class="headerlink" title="第十章：容器事件与事件监听器"></a>第十章：容器事件与事件监听器</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8vaetjcdqj30rf0jvgob.jpg" alt="image-20221207154002811"></p>
<p>​    这里将用到观察者模式，比如说我们有一个注册用户的业务，注册业务成功后，需要发送短信通知，我们最初就是将注册代码与发送短信代码写在了一起，后来自己定义观察者与被观察者，实际上Spring为了更好的扩容性和灵活性，加入了事件监听机制，我们下面来自己设计如何控制事件：</p>
<blockquote>
<p>定义和实现事件</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8veaor9roj311e0u0acw.jpg" alt="image-20221207175427400" style="zoom:50%;" />

<blockquote>
<p>事件广播器: 可用于添加，删除监听，广播事件，通过对应的监听器进行通知</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8vef18dhyj317t0u0n30.jpg" alt="image-20221207175838126" style="zoom:50%;" />

<blockquote>
<p>事件监听器，自定义监听器，执行自定义事件触发方法</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8vehus93zj30um0jiabt.jpg" alt="image-20221207180120773" style="zoom:50%;" />

<blockquote>
<p>事件如何发送？并触发对应的事件相应方法？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_event</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">ClassPathXmlApplicationContext</span> applicationContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"classpath:spring.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送事件</span>
    applicationContext<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomEvent</span><span class="token punctuation">(</span>applicationContext<span class="token punctuation">,</span> <span class="token number">1019129009086763L</span><span class="token punctuation">,</span> <span class="token string">"成功了！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    applicationContext<span class="token punctuation">.</span><span class="token function">registerShutdownHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 通过事件广播器进行通知</span>
    applicationEventMulticaster<span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 找到事件对应的监听器，并执行方法</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">ApplicationListener</span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        listener<span class="token punctuation">.</span><span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 监听器是否对该事件感兴趣
 */</span>
<span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">supportsEvent</span><span class="token punctuation">(</span><span class="token class-name">ApplicationListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ApplicationEvent</span><span class="token punctuation">></span></span> applicationListener<span class="token punctuation">,</span> <span class="token class-name">ApplicationEvent</span> event<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationListener</span><span class="token punctuation">></span></span> listenerClass <span class="token operator">=</span> applicationListener<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 按照 CglibSubclassingInstantiationStrategy、SimpleInstantiationStrategy 不同的实例化类型，需要判断后获取目标 class</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass <span class="token operator">=</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isCglibProxyClass</span><span class="token punctuation">(</span>listenerClass<span class="token punctuation">)</span> <span class="token operator">?</span> listenerClass<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> listenerClass<span class="token punctuation">;</span>
    <span class="token class-name">Type</span> genericInterface <span class="token operator">=</span> targetClass<span class="token punctuation">.</span><span class="token function">getGenericInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token class-name">Type</span> actualTypeArgument <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ParameterizedType</span><span class="token punctuation">)</span> genericInterface<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getActualTypeArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> className <span class="token operator">=</span> actualTypeArgument<span class="token punctuation">.</span><span class="token function">getTypeName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> eventClassName<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
        eventClassName <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BeansException</span><span class="token punctuation">(</span><span class="token string">"wrong event class name: "</span> <span class="token operator">+</span> className<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 判定此 eventClassName 对象所表示的类或接口与指定的 event.getClass() 参数所表示的类或接口是否相同，或是否是其超类或超接口。</span>
    <span class="token comment">// isAssignableFrom是用来判断子类和父类的关系的，或者接口的实现类和接口的关系的，默认所有的类的终极父类都是Object。如果A.isAssignableFrom(B)结果是true，证明B可以转换成为A,也就是A可以由B转换而来。</span>
    <span class="token keyword">return</span> eventClassName<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><h2 id="第11章：基于JDK，Cglib实现AOP切面"><a href="#第11章：基于JDK，Cglib实现AOP切面" class="headerlink" title="第11章：基于JDK，Cglib实现AOP切面"></a>第11章：基于JDK，Cglib实现AOP切面</h2><p>![image-20221208093934125](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221208093934125.png)</p>
<p>AOP底层是用到了动态代理技术，其中实现方式有：JDK(需要代理类实现接口)，Cglib(可直接代理普通类)，我们先不使用Spring，使用这两个实现方式，完成测试。</p>
<blockquote>
<p>JDK</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_proxy_jdk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 被代理对象</span>
    <span class="token class-name">IUserService</span> targetObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 通过反射获取代理对象</span>
    <span class="token class-name">IUserService</span> proxyInstance <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContextClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            targetObj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// 拦截器</span>
            <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>targetObj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------代理执行-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method Name: "</span><span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxy: "</span><span class="token operator">+</span>proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> userInfo <span class="token operator">=</span> proxyInstance<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结果："</span><span class="token operator">+</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Cglib</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置要代理的类信息</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置回调拦截器</span>
    enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> proxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> proxy<span class="token punctuation">.</span><span class="token function">invokeSuper</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------代理执行-------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method Name: "</span><span class="token operator">+</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"args: "</span><span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"proxy: "</span><span class="token operator">+</span>proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建代理对象</span>
    <span class="token class-name">IUserService</span> userService<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span>enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> userInfo <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行结果："</span><span class="token operator">+</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>可以看到有两种方式可以实现动态代理，有什么区别呢？</p>
</blockquote>
<p>​        JDK: 通过反射，效率低，只能对实现接口的类进行代理，需要一个<code>InvocationHandler</code></p>
<p>​        Cglib：底层采用ASM字节码生成框架，对接口不受限制，但是无法对final方法进行代理，因为CGLib原理是动态生成被代理类的子类。需要一个<code>MethodInterceptor</code></p>
<blockquote>
<p>如何将这些内容整合起来，毕竟通常我们使用切入点表达式配合使用</p>
</blockquote>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221228151856540.png" alt="image-20221228151856540" style="zoom:80%;" />

<p>这里AspectJExpressionPointcut传入切入点表达式，并进行解析，提供类过滤器和方法匹配器函数</p>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221228152730604.png" alt="image-20221228152730604" style="zoom:67%;" />

<p>提供的动态代理方式，Cglib和JDK都实现了AopProxy接口，获取代理后对象，不过JDK代理还实现了InvocationHandler类，也就是它本身就是一个InvocationHandler。Cglib则定义内部类来完整<code>MethodInterceptor</code>,而他们的构造器都需要<code>AdbisedSupport</code></p>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221228214325035.png" alt="image-20221228214325035" style="zoom:50%;" />

<p>最终汇聚为AdvisedSupport，内部封装被代理对象，拦截器，过滤器。并传递到AopProxy获取代理对象</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test_dynamic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 目标对象</span>
    <span class="token class-name">IUserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 组装代理信息</span>
    <span class="token class-name">AdvisedSupport</span> advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    advisedSupport<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TargetSource</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserServiceInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    advisedSupport<span class="token punctuation">.</span><span class="token function">setMethodMatcher</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AspectJExpressionPointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* cn.bugstack.springframework.test.bean.IUserService.*(..))"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 代理对象(JdkDynamicAopProxy)</span>
    <span class="token class-name">IUserService</span> proxy_jdk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 测试调用</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试结果："</span> <span class="token operator">+</span> proxy_jdk<span class="token punctuation">.</span><span class="token function">queryUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 代理对象(Cglib2AopProxy)</span>
    <span class="token class-name">IUserService</span> proxy_cglib <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IUserService</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">Cglib2AopProxy</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 测试调用</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"测试结果："</span> <span class="token operator">+</span> proxy_cglib<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="第12章：把AOP融入Bean的生命周期"><a href="#第12章：把AOP融入Bean的生命周期" class="headerlink" title="第12章：把AOP融入Bean的生命周期"></a>第12章：把AOP融入Bean的生命周期</h2><p>​        上面我们已经可以通过<code>AopProxy</code>进行代理对象的创建，现在如何加入到Bean的生命周期？</p>
<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221208122149920.png" alt="image-20221208122149920" style="zoom:80%;" />

<img src="/Users/qinsicheng/Library/Application Support/typora-user-images/image-20221208122900579.png" alt="image-20221208122900579" style="zoom:50%;" />

<p>在前面学习<code>BeanPostProcessor</code>时说这是AOP的关键，</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>IOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 底层结构</title>
    <url>//post/Redis/Redis-%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84.html</url>
    <content><![CDATA[<h2 id="BigKey"><a href="#BigKey" class="headerlink" title="BigKey"></a>BigKey</h2><h3 id="是什么-？"><a href="#是什么-？" class="headerlink" title="是什么 ？"></a>是什么 ？</h3><p>BigKey通常以Key的大小和Key中成员的数量来综合判定，例如：</p>
<ol>
<li>Key本身的数据量过大：一个String类型的Key，它的值为5 MB。</li>
<li>Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个。</li>
<li>Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。</li>
</ol>
<p>推荐值：</p>
<ol>
<li>单个key的value小于10KB</li>
<li>对于集合类型的key，建议元素数量小于1000</li>
</ol>
<h3 id="有什么危害-？"><a href="#有什么危害-？" class="headerlink" title="有什么危害 ？"></a>有什么危害 ？</h3><ul>
<li>网络阻塞</li>
</ul>
<p>对BigKey执行读请求时，少量的QPS就可能导致带宽使用率被占满，导致Redis实例，乃至所在物理机变慢 </p>
<ul>
<li>数据倾斜</li>
</ul>
<p>BigKey所在的Redis实例内存使用率远超其他实例，无法使数据分片的内存资源达到均衡 </p>
<ul>
<li>Redis阻塞</li>
</ul>
<p>对元素较多的hash、list、zset等做运算会耗时较旧，使主线程被阻塞 </p>
<ul>
<li>CPU压力</li>
</ul>
<p>对BigKey的数据序列化和反序列化会导致CPU的使用率飙升，影响Redis实例和本机其它应用</p>
<h3 id="怎么识别-？"><a href="#怎么识别-？" class="headerlink" title="怎么识别 ？"></a>怎么识别 ？</h3><ul>
<li>redis-cli –bigkeys</li>
</ul>
<p>利用redis-cli提供的–bigkeys参数，可以遍历分析所有key，并返回Key的整体统计信息与每个数据的Top1的big key </p>
<ul>
<li>scan扫描</li>
</ul>
<p>自己编程，利用scan扫描Redis中的所有key，利用strlen、hlen等命令判断key的长度（此处不建议使用MEMORY USAGE） </p>
<ul>
<li>第三方工具</li>
</ul>
<p>利用第三方工具，如 Redis-Rdb-Tools 分析RDB快照文件，全面分析内存使用情况 </p>
<ul>
<li>网络监控</li>
</ul>
<p>自定义工具，监控进出Redis的网络数据，超出预警值时主动告警</p>
<h3 id="如何删除-？"><a href="#如何删除-？" class="headerlink" title="如何删除 ？"></a>如何删除 ？</h3><p>BigKey内存占用较多，即便时删除这样的key也需要耗费很长时间，导致Redis主线程阻塞，引发一系列问题。 </p>
<ul>
<li>redis 3.0 及以下版本</li>
</ul>
<p>如果是集合类型，则遍历BigKey的元素，先逐个删除子元素，最后删除BigKey </p>
<ul>
<li>Redis 4.0以后 </li>
</ul>
<p>Redis在4.0后提供了异步删除的命令：unlink</p>
<h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><h3 id="动态字符串SDS"><a href="#动态字符串SDS" class="headerlink" title="动态字符串SDS"></a>动态字符串SDS</h3><p>Redis并未使用C语言的字符串，因为存在一些问题：</p>
<ol>
<li>获取字符串长度需要运算</li>
<li>非二进制安全</li>
<li>不可修改</li>
</ol>
<p>因此Redis自己优化了字符串结构，为简单动态字符串（Simple Dynamic String），简称SDS。</p>
<p>我们在最初学习Redis时，会操作：<code>set key value</code>, 底层实际上创建了两个SDS，一个包含 key，一个包含 value。</p>
<p><img src="../../typora-user-images/image-20221126101355075.png" alt="image-20221126101355075"></p>
<p>​    我们看到它提到了动态字符串，那相应应该有动态扩容的能力，假如我们要给SDS追加一段字符串“,Amy”，这里首先会申请新内存空间：</p>
<ul>
<li>如果新字符串小于1M，则新空间为扩展后字符串长度的两倍+1；</li>
<li>如果新字符串大于1M，则新空间为扩展后字符串长度+1M+1。称为内存预分配。</li>
</ul>
<blockquote>
<p>优点：</p>
</blockquote>
<ol>
<li>获取字符串长度为 <code>O(1)</code></li>
<li>支持动态扩容</li>
<li>减少内存分配次数</li>
<li>二进制安全</li>
</ol>
<h3 id="IntSet"><a href="#IntSet" class="headerlink" title="IntSet"></a>IntSet</h3><p>IntSet 是Redis的Set结构的一种实现方式，基于<strong>整数数组</strong>来实现，并且<strong>长度可变</strong>，<strong>有序</strong>。</p>
<p><img src="../../typora-user-images/image-20221126101835593.png" alt="image-20221126101835593"></p>
<p>为了方便查找，本身按照整数进行<strong>升序存储</strong>保存到content[]内</p>
<p><img src="../../typora-user-images/image-20221126102206179.png" alt="image-20221126102206179"></p>
<p>假设最初存储元素：<code>&#123;5,10,20&#125;</code>采用的编码是INTSET_ENC_INT16，则每个整数占2字节。</p>
<p>我们向该其中添加一个数字：50000，这个数字超出了int16_t的范围，intset会自动升级编码方式到合适的大小。以当前案例来说流程如下：</p>
<ol>
<li><p>升级编码为INTSET_ENC_INT32, 每个整数占4字节，并按照新的编码方式及元素个数<strong>扩容数组</strong></p>
</li>
<li><p><strong>倒序</strong>依次将数组中的元素拷贝到扩容后的正确位置（倒序保证，之前节点不会被覆盖）</p>
</li>
</ol>
<h4 id="新增流程"><a href="#新增流程" class="headerlink" title="新增流程"></a>新增流程</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">intset *intsetAdd(intset *is, int64_t value, uint8_t *success) &#123;
    uint8_t valenc &#x3D; _intsetValueEncoding(value);&#x2F;&#x2F; 获取当前值编码
    uint32_t pos; &#x2F;&#x2F; 要插入的位置
    if (success) *success &#x3D; 1;
    &#x2F;&#x2F; 判断编码是不是超过了当前intset的编码
    if (valenc &gt; intrev32ifbe(is-&gt;encoding)) &#123;
        &#x2F;&#x2F; 超出编码，需要升级
        return intsetUpgradeAndAdd(is,value);
    &#125; else &#123;
        &#x2F;&#x2F; 在当前intset中查找值与value一样的元素的角标pos
        if (intsetSearch(is,value,&amp;pos)) &#123;
            if (success) *success &#x3D; 0; &#x2F;&#x2F;如果找到了，则无需插入，直接结束并返回失败
            return is;
        &#125;
        &#x2F;&#x2F; 数组扩容
        is &#x3D; intsetResize(is,intrev32ifbe(is-&gt;length)+1);
        &#x2F;&#x2F; 移动数组中pos之后的元素到pos+1，给新元素腾出空间
        if (pos &lt; intrev32ifbe(is-&gt;length)) intsetMoveTail(is,pos,pos+1);
    &#125;
    &#x2F;&#x2F; 插入新元素
    _intsetSet(is,pos,value);
    &#x2F;&#x2F; 重置元素长度
    is-&gt;length &#x3D; intrev32ifbe(intrev32ifbe(is-&gt;length)+1);
    return is;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="升级流程"><a href="#升级流程" class="headerlink" title="升级流程"></a>升级流程</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">static intset *intsetUpgradeAndAdd(intset *is, int64_t value) &#123;
    &#x2F;&#x2F; 获取当前intset编码
    uint8_t curenc &#x3D; intrev32ifbe(is-&gt;encoding);
    &#x2F;&#x2F; 获取新编码
    uint8_t newenc &#x3D; _intsetValueEncoding(value);
    &#x2F;&#x2F; 获取元素个数
    int length &#x3D; intrev32ifbe(is-&gt;length); 
    &#x2F;&#x2F; 判断新元素是大于0还是小于0 ，小于0插入队首、大于0插入队尾
    int prepend &#x3D; value &lt; 0 ? 1 : 0;
    &#x2F;&#x2F; 重置编码为新编码
    is-&gt;encoding &#x3D; intrev32ifbe(newenc);
    &#x2F;&#x2F; 重置数组大小
    is &#x3D; intsetResize(is,intrev32ifbe(is-&gt;length)+1);
    &#x2F;&#x2F; 倒序遍历，逐个搬运元素到新的位置，_intsetGetEncoded按照旧编码方式查找旧元素
    while(length--) &#x2F;&#x2F; _intsetSet按照新编码方式插入新元素
        _intsetSet(is,length+prepend,_intsetGetEncoded(is,length,curenc));
    &#x2F;* 插入新元素，prepend决定是队首还是队尾*&#x2F;
    if (prepend)
        _intsetSet(is,0,value);
    else
        _intsetSet(is,intrev32ifbe(is-&gt;length),value);
    &#x2F;&#x2F; 修改数组长度
    is-&gt;length &#x3D; intrev32ifbe(intrev32ifbe(is-&gt;length)+1);
    return is;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>总结：</p>
</blockquote>
<ol>
<li>底层为<strong>整数数组</strong>，也就是一块儿完整的内存</li>
<li>内部元素，<strong>唯一</strong>，<strong>有序</strong>。</li>
<li>具备类型升级（<strong>倒序扩容</strong>）。</li>
<li>底层采用二分查找。（因为有序）</li>
</ol>
<h3 id="Dict"><a href="#Dict" class="headerlink" title="Dict"></a>Dict</h3><p>​    我们知道Redis中是Key-Value结构，在Java中类似的也有Map结构，能够快速的进行增删改查，底层一定是有关系的映射。Redis正是基于Dict实现的。</p>
<p>​    Dict有三个部分：哈希表（DictHashTable）、哈希节点（DictEntry）、字典（Dict）</p>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct dictht &#123;
    &#x2F;&#x2F; entry数组
    &#x2F;&#x2F; 数组中保存的是指向entry的指针
    dictEntry **table; 
    &#x2F;&#x2F; 哈希表大小
    unsigned long size;     
    &#x2F;&#x2F; 哈希表大小的掩码，总等于size - 1
    unsigned long sizemask;     
    &#x2F;&#x2F; entry个数
    unsigned long used; 
&#125; dictht;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct dictEntry &#123;
    void *key; &#x2F;&#x2F; 键
    union &#123;
        void *val;
        uint64_t u64;
        int64_t s64;
        double d;
    &#125; v; &#x2F;&#x2F; 值
    &#x2F;&#x2F; 下一个Entry的指针
    struct dictEntry *next; 
&#125; dictEntry;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">&#123;</span>
    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span> <span class="token comment">// dict类型，内置不同的hash函数</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span>     <span class="token comment">// 私有数据，在做特殊hash运算时用</span>
    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 一个Dict包含两个哈希表，其中一个是当前数据，另一个一般是空，rehash时使用</span>
    <span class="token keyword">long</span> rehashidx<span class="token punctuation">;</span>   <span class="token comment">// rehash的进度，-1表示未进行</span>
    <span class="token class-name">int16_t</span> pauserehash<span class="token punctuation">;</span> <span class="token comment">// rehash是否暂停，1则暂停，0则继续</span>
<span class="token punctuation">&#125;</span> dict<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="../../typora-user-images/image-20221126103253031.png" alt="image-20221126103253031"></p>
<p>​    我们可以看到Dict中有两个dictht，第一个负责存储值，第二个负责reHash。也就是当节点个数过多时，需要进行扩容，在Java的Map中，当数组中一个链表的长度大于8，就会进行数组扩容，否则查找遍历太慢。这里的原理是类似的。</p>
<p>​    dictht内部是dictEntry数组，dictEntry含有指向下一个节点的指针。</p>
<h4 id="Dict扩容"><a href="#Dict扩容" class="headerlink" title="Dict扩容"></a>Dict扩容</h4><p>​    这里还是有Java中Map举例，HashMap默认还有加载因子为0.75，也就是说不等我们把空间使用完，底层就会判断如果<code>当前节点数/容量数</code>大于0.75，会频繁导致Hash碰撞，并且链表长度太长，所以需要扩容。</p>
<p>​    Dict在每次新增键值对时都会检查负载因子（LoadFactor = used/size） ，满足以下两种情况时会触发哈希表扩容：</p>
<ul>
<li>哈希表的 LoadFactor &gt;= 1，并且服务器没有执行 BGSAVE 或者 BGREWRITEAOF 等后台进程；</li>
<li>哈希表的 LoadFactor &gt; 5 ；</li>
</ul>
<pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">static int _dictExpandIfNeeded(dict *d)&#123;
    &#x2F;&#x2F; 如果正在rehash，则返回ok
    if (dictIsRehashing(d)) return DICT_OK;    &#x2F;&#x2F; 如果哈希表为空，则初始化哈希表为默认大小：4
    if (d-&gt;ht[0].size &#x3D;&#x3D; 0) return dictExpand(d, DICT_HT_INITIAL_SIZE);
    &#x2F;&#x2F; 当负载因子（used&#x2F;size）达到1以上，并且当前没有进行bgrewrite等子进程操作
    &#x2F;&#x2F; 或者负载因子超过5，则进行 dictExpand ，也就是扩容
    if (d-&gt;ht[0].used &gt;&#x3D; d-&gt;ht[0].size &amp;&amp;
        (dict_can_resize || d-&gt;ht[0].used&#x2F;d-&gt;ht[0].size &gt; dict_force_resize_ratio)&#123;
        &#x2F;&#x2F; 扩容大小为used + 1，底层会对扩容大小做判断，实际上找的是第一个大于等于 used+1 的 2^n
        return dictExpand(d, d-&gt;ht[0].used + 1);
    &#125;
    return DICT_OK;
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Dict收缩"><a href="#Dict收缩" class="headerlink" title="Dict收缩"></a>Dict收缩</h4><p>Dict除了扩容以外，每次删除元素时，也会对负载因子做检查，当LoadFactor &lt; 0.1 时，会做哈希表收缩：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// t_hash.c # hashTypeDeleted() </span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dictDelete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dict<span class="token operator">*</span><span class="token punctuation">)</span>o<span class="token operator">-></span>ptr<span class="token punctuation">,</span> field<span class="token punctuation">)</span> <span class="token operator">==</span> C_OK<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    deleted <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除成功后，检查是否需要重置Dict大小，如果需要则调用dictResize重置    /* Always check if the dictionary needs a resize after a delete. */</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">htNeedsResize</span><span class="token punctuation">(</span>o<span class="token operator">-></span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">dictResize</span><span class="token punctuation">(</span>o<span class="token operator">-></span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token comment">// server.c 文件</span>
<span class="token keyword">int</span> <span class="token function">htNeedsResize</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>dict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">long</span> <span class="token keyword">long</span> size<span class="token punctuation">,</span> used<span class="token punctuation">;</span>
    <span class="token comment">// 哈希表大小</span>
    size <span class="token operator">=</span> <span class="token function">dictSlots</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// entry数量</span>
    used <span class="token operator">=</span> <span class="token function">dictSize</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// size > 4（哈希表初识大小）并且 负载因子低于0.1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>size <span class="token operator">></span> DICT_HT_INITIAL_SIZE <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>used<span class="token operator">*</span><span class="token number">100</span><span class="token operator">/</span>size <span class="token operator">&lt;</span> HASHTABLE_MIN_FILL<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token keyword">int</span> <span class="token function">dictResize</span><span class="token punctuation">(</span>dict <span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> minimal<span class="token punctuation">;</span>
    <span class="token comment">// 如果正在做bgsave或bgrewriteof或rehash，则返回错误</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dict_can_resize <span class="token operator">||</span> <span class="token function">dictIsRehashing</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> DICT_ERR<span class="token punctuation">;</span>
    <span class="token comment">// 获取used，也就是entry个数</span>
    minimal <span class="token operator">=</span> d<span class="token operator">-></span>ht<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>used<span class="token punctuation">;</span>
    <span class="token comment">// 如果used小于4，则重置为4</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>minimal <span class="token operator">&lt;</span> DICT_HT_INITIAL_SIZE<span class="token punctuation">)</span>
        minimal <span class="token operator">=</span> DICT_HT_INITIAL_SIZE<span class="token punctuation">;</span>
    <span class="token comment">// 重置大小为minimal，其实是第一个大于等于minimal的2^n</span>
    <span class="token keyword">return</span> <span class="token function">dictExpand</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> minimal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Dict的ReHash"><a href="#Dict的ReHash" class="headerlink" title="Dict的ReHash"></a>Dict的ReHash</h4><p>​    不管是扩容还是收缩，必定会创建新的哈希表，导致哈希表的size和sizemask变化，而key的查询与sizemask有关。因此必须对哈希表中的每一个key重新计算索引，插入新的哈希表，这个过程称为rehash。过程是这样的：</p>
<ol>
<li>计算新hash表的realeSize，值取决于当前要做的是扩容还是收缩：</li>
</ol>
<ul>
<li>如果是扩容，则新size为第一个大于等于dict.ht[0].used + 1的2^n</li>
<li>如果是收缩，则新size为第一个大于等于dict.ht[0].used的2^n （不得小于4）</li>
</ul>
<ol start="2">
<li>按照新的realeSize申请内存空间，创建dictht，并赋值给dict.ht[1]</li>
<li>设置dict.rehashidx = 0，标示开始rehash</li>
<li>将dict.ht[0]中的每一个dictEntry都rehash到dict.ht[1]</li>
<li>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</li>
</ol>
<blockquote>
<p>如果Key中的节点过多，那一次性进行Rehash就有可能导致主线程阻塞，怎么解决？</p>
</blockquote>
<p>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</p>
<ol>
<li>计算新hash表的realeSize，值取决于当前要做的是扩容还是收缩：</li>
</ol>
<ul>
<li>如果是扩容，则新size为第一个大于等于dict.ht[0].used + 1的2^n</li>
<li>如果是收缩，则新size为第一个大于等于dict.ht[0].used的2^n （不得小于4）</li>
</ul>
<ol start="2">
<li>按照新的size申请内存空间，创建dictht，并赋值给dict.ht[1]</li>
<li>设置dict.rehashidx = 0，标示开始rehash</li>
<li><strong>每次执行新增、查询、修改、删除操作时，都检查一下dict.rehashidx是否大于-1，如果是则将dict.ht[0].table[rehashidx]的entry链表rehash到dict.ht[1]，并且将rehashidx++。直至dict.ht[0]的所有数据都rehash到dict.ht[1]</strong></li>
<li>将dict.ht[1]赋值给dict.ht[0]，给dict.ht[1]初始化为空哈希表，释放原来的dict.ht[0]的内存</li>
<li>将rehashidx赋值为-1，代表rehash结束</li>
<li>在rehash过程中，新增操作，则直接写入ht[1]，查询、修改和删除则会在dict.ht[0]和dict.ht[1]依次查找并执行。这样可以确保ht[0]的数据只减不增，随着rehash最终为空</li>
</ol>
<blockquote>
<p>总结：</p>
</blockquote>
<p>Dict的结构：</p>
<ul>
<li>类似java的HashTable，底层是数组加链表来解决哈希冲突</li>
<li>Dict包含两个哈希表，ht[0]平常用，ht[1]用来rehash</li>
</ul>
<p>Dict的伸缩：</p>
<ul>
<li>当LoadFactor大于5或者LoadFactor大于1并且没有子进程任务时，Dict扩容</li>
<li>当LoadFactor小于0.1时，Dict收缩</li>
<li>扩容大小为第一个大于等于used + 1的2^n</li>
<li>收缩大小为第一个大于等于used 的2^nDict采用渐进式rehash，每次访问Dict时执行一次rehash</li>
<li>rehash时ht[0]只减不增，新增操作只在ht[1]执行，其它操作在两个哈希表</li>
</ul>
<h3 id="ZipList"><a href="#ZipList" class="headerlink" title="ZipList"></a>ZipList</h3><p>​    ZipList 是一种<strong>特殊的“双端链表”</strong> ，由一系列特殊编码的<strong>连续内存</strong>块组成。可以在<strong>任意一端进行压入/弹出</strong>操作, 并且该操作的时间复杂度为 **O(1)**。</p>
<p><img src="../../typora-user-images/image-20221126105002059.png" alt="image-20221126105002059"></p>
<p><img src="../../typora-user-images/image-20221126105045389.png" alt="image-20221126105045389"></p>
<p>​    ZipList说是特殊的来链表，但实际上并不是通过指针连接的，因为占用内存，所以Entry的结构是：</p>
<p><img src="../../typora-user-images/image-20221126105310737.png" alt="image-20221126105310737"></p>
<p>​    因为是一块儿内存，每个节点记录了前一个节点的长度，就可以计算出各个节点的位置。</p>
<blockquote>
<p>这里有一个<strong>连锁更新</strong>（Cascade Update）的问题，但作者并未修改，因为发生的概率极低、</p>
</blockquote>
<p>​    假设我们有N个连续的、长度为250~253字节之间的entry，因此entry的previous_entry_length属性用1个字节即可表示，如图所示：</p>
<p><img src="../../typora-user-images/image-20221126115032201.png" alt="image-20221126115032201"></p>
<p>​    现在在头位置插入一个新的节点，长度为254，则原先的头结点的<code>previous_entry_length</code>就会用5个字节来存储，那么该节点本身的长度就超过了254，则后续所有节点都必须更新。</p>
<p><img src="../../typora-user-images/image-20221126115247739.png" alt="image-20221126115247739"></p>
<p><img src="../../typora-user-images/image-20221126115312608.png" alt="image-20221126115312608"></p>
<blockquote>
<p>总结：</p>
</blockquote>
<ol>
<li>压缩列表的可以看做一种<strong>连续内存</strong>空间的”双向链表”</li>
<li>列表的节点之间不是通过指针连接，而是记录上一节点和本节点<strong>长度来寻址</strong>，内存占用较低</li>
<li>如果列表数据过多，导致链表过长，可能影响查询性能</li>
<li>增或删较大数据时有可能发生<strong>连续更新</strong>问题</li>
</ol>
<h3 id="QuickList"><a href="#QuickList" class="headerlink" title="QuickList"></a>QuickList</h3><blockquote>
<p>​    上面我们学习了ZipList，虽然好操作，但因为是连续的空间，所以如果长度太长，也会影响效率，并且申请更多的连续空间，</p>
</blockquote>
<p>所以我们必须限制ZipList的长度和entry大小。</p>
<blockquote>
<p>如果ZipList超出上线怎么办？</p>
</blockquote>
<p>​    利用分片思想，形成多个ZipList，但分散后又不方便管理，则推出了：QuickList。它是一个双端链表，只不过链表中的每个节点都是一个ZipList。</p>
<p><img src="../../typora-user-images/image-20221126120010880.png" alt="image-20221126120010880"></p>
<p>​    为了避免QuickList中的每个ZipList中entry过多，Redis提供了一个配置项：list-max-ziplist-size来限制。</p>
<ul>
<li>如果值为正，则代表ZipList的允许的entry个数的最大值</li>
<li>如果值为负，则代表ZipList的最大内存大小，分5种情况：<ul>
<li>-1：每个ZipList的内存占用不能超过4kb</li>
<li>-2：每个ZipList的内存占用不能超过8kb</li>
<li>-3：每个ZipList的内存占用不能超过16kb</li>
<li>-4：每个ZipList的内存占用不能超过32kb</li>
<li>-5：每个ZipList的内存占用不能超过64kb</li>
</ul>
</li>
</ul>
<p>默认值：<code>config get list-max-ziplist-size</code></p>
<p>​    除了控制ZipList的大小，QuickList还可以对节点的ZipList做<strong>压缩</strong>。通过配置项list-compress-depth来控制。因为链表一般都是从首尾访问较多，所以首尾是不压缩的。这个参数是控制首尾不压缩的节点个数：</p>
<ul>
<li>0：特殊值，代表不压缩</li>
<li>1：标示QuickList的首尾各有1个节点不压缩，中间节点压缩</li>
<li>2：标示QuickList的首尾各有2个节点不压缩，中间节点压缩</li>
<li>以此类推</li>
</ul>
<p>默认值：<code>config get list-compress-depth</code></p>
<blockquote>
<p>源码：</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221126120353527.png" alt="image-20221126120353527"></p>
<p><img src="../../typora-user-images/image-20221126120419505.png" alt="image-20221126120419505"></p>
<blockquote>
<p>特点：</p>
</blockquote>
<ol>
<li>是一个节点为ZipList的双端链表</li>
<li>节点采用ZipList，解决了传统链表的内存占用问题</li>
<li>控制了ZipList大小，解决连续内存空间申请效率问题</li>
<li>中间节点可以压缩，进一步节省了内存</li>
</ol>
<h3 id="kipList"><a href="#kipList" class="headerlink" title="kipList"></a>kipList</h3><blockquote>
<p>​    原有链表的一个问题，就是查找元素时，需要一个个遍历，每个节点有一个指针指向下一个元素，那能不能多加几个指针？</p>
</blockquote>
<p>跳表的结构图：</p>
<p><img src="../../typora-user-images/image-20221126120643605.png" alt="image-20221126120643605"></p>
<p>可以看到跳表的一个特性就是有序，如果无序，则多出来的指针没有意义。</p>
<p><img src="../../typora-user-images/image-20221126120833282.png" alt="image-20221126120833282"></p>
<blockquote>
<p>总结：</p>
</blockquote>
<ol>
<li>跳跃表是一个双向链表，每个节点都包含score和ele值</li>
<li>节点按照score值排序，score值一样则按照ele字典排序</li>
<li>每个节点都可以包含多层指针，层数是1到32之间的随机数</li>
<li>不同层指针到下一个节点的跨度不同，层级越高，跨度越大</li>
<li>增删改查效率与红黑树基本一致，实现却更简单</li>
</ol>
<h3 id="RedisObject"><a href="#RedisObject" class="headerlink" title="RedisObject"></a>RedisObject</h3><p>Redis中的任意数据类型<code>(String,List,Set,Hash,ZSet)</code>都会被封装为RedisObject对象。</p>
<p><img src="../../typora-user-images/image-20221126121217400.png" alt="image-20221126121217400"></p>
<h4 id="底层编码方式"><a href="#底层编码方式" class="headerlink" title="底层编码方式"></a>底层编码方式</h4><p>Redis中会根据存储的数据类型不同，选择不同的编码方式，共包含11种不同类型：</p>
<p><img src="../../typora-user-images/image-20221126121318276.png" alt="image-20221126121318276"></p>
<h4 id="五种数据类型的底层类型："><a href="#五种数据类型的底层类型：" class="headerlink" title="五种数据类型的底层类型："></a>五种数据类型的底层类型：</h4><table>
<thead>
<tr>
<th align="left"><strong>数据类型</strong></th>
<th><strong>编码方式</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="left">OBJ_STRING</td>
<td>int、embstr、raw</td>
</tr>
<tr>
<td align="left">OBJ_LIST</td>
<td>LinkedList和ZipList(3.2以前)、QuickList（3.2以后）</td>
</tr>
<tr>
<td align="left">OBJ_SET</td>
<td>intset、HT</td>
</tr>
<tr>
<td align="left">OBJ_ZSET</td>
<td>ZipList、HT、SkipList</td>
</tr>
<tr>
<td align="left">OBJ_HASH</td>
<td>ZipList、HT</td>
</tr>
</tbody></table>
<h2 id="五种数据类型"><a href="#五种数据类型" class="headerlink" title="五种数据类型"></a>五种数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>我们知道底层是通过SDS结构，但不同的SDS长度会使用不同的编码。</p>
<p>如果存储的是字符串是整数值，大小在Long_MAX范围内，则会使用INT编码，直接将数据保存在RedisObject的ptr指针位置（刚好8字节），<strong>不再需要SDS了</strong>。</p>
<p><img src="../../typora-user-images/image-20221126121746597.png" alt="image-20221126121746597"></p>
<p>如果存储的SDS长度小于44字节，则会采用EMBSTR编码，此时object head与SDS是一段连续空间。申请内存时只需要调用一次内存分配函数，效率更高。</p>
<p><img src="../../typora-user-images/image-20221126121826644.png" alt="image-20221126121826644"></p>
<p>否则用的就是raw编码了，SDS单独占一个内存，RedisObject用指针连接</p>
<p><img src="../../typora-user-images/image-20221126121919607.png" alt="image-20221126121919607"></p>
<h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><blockquote>
<p>我们可以自己想一想，底层结构中哪个合适?</p>
</blockquote>
<p>List操作需要可以从两端插入或弹出，范围读取。</p>
<p>SDS是字符串（❎），intSet是完整的内存，支持有序，唯一（❎），Dict无法双端操作（❎）</p>
<p>ZipList：完整内存，双端操作，范围读取（✅）</p>
<p>QuickList：LinkedList + ZipList，可以从双端访问，内存占用较低，包含多个ZipList，存储上限高（✅）</p>
<ul>
<li>在3.2版本之前，Redis采用ZipList和LinkedList来实现List，当元素数量小于512并且元素大小小于64字节时采用ZipList编码，超过则采用LinkedList编码。</li>
<li>在3.2版本之后，Redis统一采用QuickList来实现List</li>
</ul>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>Set需要元素唯一（可判断是否元素存在），不保证有序，求交集，并集，差集，也就是对查询效率要求很高</p>
<p>我们能想到Java中，利用Map实现Set结构，Value存Null，那在Redis中应该也可以，所以Dict(✅)</p>
<p>IntSet内部是整数数组，不过可以保证唯一，且有序，二分查询也快。当存储的所有数据都是整数，并且元素数量不超过set-max-intset-entries时，Set会采用IntSet编码，以节省内存，IntSet(✅)</p>
<h3 id="ZSet"><a href="#ZSet" class="headerlink" title="ZSet"></a>ZSet</h3><p>ZSet也就是SortedSet，其中每一个元素都需要指定一个score值和member值。要求：</p>
<p>可以根据score值排序，member必须唯一，可以根据member查询分数</p>
<ol>
<li>那想到第一个应该是Dict结构，key为member，value为score，可以保证member唯一，✅</li>
<li>然后有分数的就是SkipList，可以排序，并且可以同时存储score和ele值（member）✅</li>
<li>当元素数量不多时，HT和SkipList的优势不明显，而且更耗内存。因此zset还会采用ZipList结构来节省内存，不过需要同时满足两个条件：✅<ol>
<li>元素数量小于zset_max_ziplist_entries，默认值128</li>
<li>每个元素都小于zset_max_ziplist_value字节，默认值64</li>
</ol>
</li>
</ol>
<blockquote>
<p>ziplist本身没有排序功能，而且没有键值对的概念，因此需要有zset通过编码实现：</p>
</blockquote>
<ol>
<li>ZipList是连续内存，因此score和element是紧挨在一起的两个entry， element在前，score在后</li>
<li>score越小越接近队首，score越大越接近队尾，按照score值升序排列</li>
</ol>
<p><img src="../../typora-user-images/image-20221126123840996.png" alt="image-20221126123840996"></p>
<h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>需求：</p>
<ol>
<li>键值存储</li>
<li>根据键获取值</li>
<li>键唯一</li>
</ol>
<p>我们发现与Zset需求很相似</p>
<ol>
<li>zset的键是member，值是score；hash的键和值都是任意值</li>
<li>zset要根据score排序；hash则无需排序</li>
</ol>
<p>因此，Hash底层采用的编码与Zset也基本一致，只需要把排序有关的SkipList去掉即可。也就是剩下ZipList和Dict</p>
<ul>
<li><p>Hash结构默认采用ZipList编码，用以节省内存。 ZipList中相邻的两个entry 分别保存field和value ✅</p>
</li>
<li><p>当数据量较大时，Hash结构会转为HT编码，也就是Dict，触发条件有两个： ✅</p>
<ul>
<li>ZipList中的元素数量超过了hash-max-ziplist-entries（默认512）</li>
<li>ZipList中的任意entry大小超过了hash-max-ziplist-value（默认64字节）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>拦截器与过滤器的区别</title>
    <url>//post/Web/%E6%8B%A6%E6%88%AA%E5%99%A8%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content><![CDATA[<h1 id="拦截器与过滤器的区别"><a href="#拦截器与过滤器的区别" class="headerlink" title="拦截器与过滤器的区别"></a>拦截器与过滤器的区别</h1><blockquote>
<p> 底层思想是什么？</p>
</blockquote>
<p>拦截器与过滤器都是基于AOP面向切面编程的思想来实现的。</p>
<blockquote>
<p>两者有什么相同，有什么不同？</p>
</blockquote>
<p>相同点：都可以对请求做出统一的处理，例如在方法调用前进行一些操作，在方法调后后处理一些操作</p>
<p>不同点：</p>
<ol>
<li>拦截器是Spring提供的（<code>org.springframework.web.servlet.HandlerInterceptor</code>），而过滤器是Servlet提供的（<code>java.servlet.*</code>）</li>
<li>触发时机不同，过滤器在请求到达Servlet前被拦截开始执行，拦截器在到达Controller前被拦截开始执行</li>
<li>实现不同，过滤器<strong>基于方法回调实现</strong>，而拦截器是<strong>基于动态代理（底层反射）实现</strong></li>
<li>支持的项目不同，过滤器只能在Web项目中用，拦截器可以在Swing，Application中都能用</li>
<li>使用场景不同，因为拦截器更接近业务系统，所以<strong>拦截器主要用来实现项目中的业务判断的</strong>，比如：登录判断、权限判断、日志记录等业务。而<strong>过滤器通常是用来实现通用功能过滤的</strong>，比如：敏感词过滤、字符集编码设置、响应数据压缩等功能。</li>
</ol>
<blockquote>
<p> 为什么使用他们？</p>
</blockquote>
<p>​    在我们的日常业务中，我们总有一些通用但又不涉及核心业务的需求，比如日志管理，权限管理，敏感信息排查等，如何将这部分内容抽取出来，而不侵入核心代码，并可以做到灵活的扩展。就可以使用拦截器或者过滤器，但他们应用场景是不同的。</p>
<h3 id="FIlter"><a href="#FIlter" class="headerlink" title="FIlter"></a>FIlter</h3><blockquote>
<p>如何进行使用？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span>urlPatterns <span class="token operator">=</span> <span class="token string">"/*"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> filter <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">FilterConfig</span> filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：执行 init 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Filter</span><span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：开始执行 doFilter 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 请求放行</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span> servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：结束执行 doFilter 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"过滤器：执行 destroy 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>生命周期是怎么样的？</p>
</blockquote>
<p>Filter有三个需要实现的方法：<code>init,doFilter,destroy</code></p>
<p>​    当Web服务启动时，就会调用 init 方法，</p>
<p>​    当请求进入时，在进入Controller之前就会被 doFilter 拦截到，然后判断是否后面还有拦截器，如果没有了，则执行业务方法，执行完业务方法，返回后，会回到 doFilter方法，再进行其他操作。<strong>这里需要注意</strong>：当最后一个Filter的 <code>filterChain.doFilter(servletRequest, servletResponse);</code> 被调用完后，数据已经被渲染到页面了，然后才操作的下面的处理。</p>
<p>​    Web服务结束时，<code>destroy()</code> 被调用。</p>
<blockquote>
<p>如何控制Filter的拦截顺序，以及doFilter() 方法先后是如何执行的？</p>
</blockquote>
<p>方法1：在web.xml中控制filter-mapping的位置来控制的，放在上面的会比放在下面的先执行，如下“用户登录检查过滤器”会比“接口日志过滤器”先执行</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 用户登录检测过滤器 --></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
	 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>UserLoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
		 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>net.tfgzs.demo.filter.UserLoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
		 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>UserLoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
		 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>
	<span class="token comment">&lt;!--接口日志过滤器--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>ApiLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>net.tfgzs.demo.filter.ApiLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>ApiLog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法2：在@WebFilter中并未找到排序的方法，可以通过Filter的文件名来控制，比如：</p>
<ol>
<li>在同一个包下，aFilter &gt; bFilter</li>
<li>在不同包下，a/a.Filter &gt; a/b.Filter &gt; b/a.Filter</li>
</ol>
<p>当请求经过多个Filter时，在操作<code>filterChain.doFilter(servletRequest, servletResponse);</code>前后调用的顺序</p>
<p><img src="/Users/qinsicheng/Library/Application%20Support/typora-user-images/image-20221124161334593.png" alt="image-20221124161334593"></p>
<p>​    <strong>这里需注意</strong>：在最后一个Filter的doFilter的filterChain.doFilter(servletRequest, servletResponse);调用完后数据就返回页面了，然后才开始操作后面的操作。</p>
<h3 id="Interceptor"><a href="#Interceptor" class="headerlink" title="Interceptor"></a>Interceptor</h3><blockquote>
<p>如何使用？</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Interceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ Interceptor ]：执行 preHandle 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">ModelAndView</span> modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ Interceptor ]：执行 postHandle 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">,</span> <span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[ Interceptor ]：执行 afterCompletion 方法。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Interceptor</span> interceptor<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Interceptor1</span> interceptor1<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">Interceptor2</span> interceptor2<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor1<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor2<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>生命周期</p>
</blockquote>
<p>​    和Filter 是类似的，先顺序执行preHandle，再逆序执行postHandle，所有执行完后，逆序执行afterCompletion方法。</p>
<p>​    这里注意：最后一个preHandle处理完后，开始执行业务，在执行postHandler前， 页面就已经被渲染了。也就是Controller返回数据后执行：<code>this.returnValueHandlers.handleReturnValue(returnValue, this.getReturnValueType(returnValue), mavContainer, webRequest);</code>。</p>
<blockquote>
<p>如何控制拦截器的执行顺序</p>
</blockquote>
<p>​    在WebMvcConfigurer配置类中，按照注册的顺序执行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>当同时使用拦截器与过滤器时，请求模型：</li>
</ol>
<p><img src="../../typora-user-images/image-20221124165341727.png" alt="image-20221124165341727"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Filter</tag>
        <tag>Interceptor</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语句： where 和 having 的区别</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/SQL%E8%AF%AD%E5%8F%A5%EF%BC%9A%20where%20%E5%92%8C%20having%20%E7%9A%84%E5%8C%BA%E5%88%AB.html</url>
    <content><![CDATA[<h1 id="SQL语句：-where-和-having-的区别"><a href="#SQL语句：-where-和-having-的区别" class="headerlink" title="SQL语句： where 和 having 的区别"></a>SQL语句： where 和 having 的区别</h1><blockquote>
<p>分组查询时，select的字段（不包含聚合函数的字段）是否一定要都在group by的字段中?</p>
</blockquote>
<p>​        在Mysql5.7之后：<code>sql_mode=only_full_group_by</code> 情况下适用，可以通过 <code>select @@sql_mode;</code>查询自己的<code>sql_mode</code></p>
<p>​        解决方案：</p>
<ol>
<li>修改sql_mode，删除：<code>SET @@sql_mode = sys.list_drop(@@sql_mode, &#39;ONLY_FULL_GROUP_BY&#39;);</code>（不推荐）</li>
<li>group by 主键字段</li>
<li>group by 唯一非空字段</li>
<li>select 字段集合 from table group by 相同字段集合</li>
</ol>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> @<span class="token variable">@sql_mode</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_add<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">'ONLY_FULL_GROUP_BY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">SET</span> @<span class="token variable">@sql_mode</span> <span class="token operator">=</span> sys<span class="token punctuation">.</span>list_drop<span class="token punctuation">(</span>@<span class="token variable">@sql_mode</span><span class="token punctuation">,</span> <span class="token string">'ONLY_FULL_GROUP_BY'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>为什么在Mysql5.7版本后开启了：ONLY_FULL_GROUP_BY ？</p>
</blockquote>
<p>​        主要是为了避免查询selelct语句当中出现语义不明确的列，对于一些比较严谨的语义来说它的作用相当重要，这是一个规范。</p>
<p>​        简单的说一旦设置ONLY_FULL_GROUP_BY启用，那么使用group by 语句时，你的输出语句当中只能是使用了聚合函数的字段和group by的字段，若有其他不明确的字段则报错。</p>
<blockquote>
<p>group by having 与 where 的区别？</p>
</blockquote>
<p>​    这里我们必须明确sql语句的执行过程：</p>
<p><code>from --&gt; where --&gt; group by --&gt; having -- &gt; order by --&gt; select;</code></p>
<p>​    而where 是在分组前进行的条件筛选</p>
<p>​    having 是对分组后的数据进行条件筛选，保存符合条件的组数据，下面举个栗子：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 创建学生信息表</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>student1<span class="token punctuation">`</span></span>
<span class="token punctuation">(</span>
    <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span>    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'学号'</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span>  <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'姓名'</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>birth<span class="token punctuation">`</span></span> <span class="token keyword">date</span>        <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'出生日期'</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>sex<span class="token punctuation">`</span></span>   <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span>   <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token identifier"><span class="token punctuation">`</span>score<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span>     <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment"># 插入数据</span>
<span class="token keyword">insert</span> <span class="token keyword">into</span> student1
<span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Tom'</span><span class="token punctuation">,</span> <span class="token string">'1998-10-01'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Jim'</span><span class="token punctuation">,</span> <span class="token string">'1997-07-04'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Lily'</span><span class="token punctuation">,</span> <span class="token string">'1999-11-12'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'Lilei'</span><span class="token punctuation">,</span> <span class="token string">'1996-09-21'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Lucy'</span><span class="token punctuation">,</span> <span class="token string">'1999-12-02'</span><span class="token punctuation">,</span> <span class="token string">'女'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token string">'1988-04-27'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
       <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Liam'</span><span class="token punctuation">,</span> <span class="token string">'1991-09-08'</span><span class="token punctuation">,</span> <span class="token string">'男'</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       
<span class="token comment"># 查询数据</span>
<span class="token comment">## 1. 看男女各自的最高分</span>
<span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> maxScore
<span class="token keyword">from</span> student1
<span class="token keyword">group</span> <span class="token keyword">by</span> sex<span class="token punctuation">;</span>

<span class="token comment">## 2. 查看男女最高分中大于99的组数据（需要先分组，再从分组后的数据中挑选合适的）</span>
<span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> maxScore
<span class="token keyword">from</span> student1
<span class="token keyword">group</span> <span class="token keyword">by</span> sex
<span class="token keyword">having</span> maxScore <span class="token operator">></span> <span class="token number">99</span>

<span class="token comment">## 3. 在年龄小于25岁的学生里，看男女最高分中大于88的组数据 (先按照where条件筛选，然后进行分组，分组后再按照having筛选)</span>
<span class="token keyword">select</span> sex<span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">as</span> maxScore
<span class="token keyword">from</span> student1
<span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">25</span>
<span class="token keyword">group</span> <span class="token keyword">by</span> sex
<span class="token keyword">having</span> maxScore <span class="token operator">></span> <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql的事务与索引</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/Mysql%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%B8%8E%E7%B4%A2%E5%BC%95.html</url>
    <content><![CDATA[<h1 id="Mysql事务与索引"><a href="#Mysql事务与索引" class="headerlink" title="Mysql事务与索引"></a>Mysql事务与索引</h1><blockquote>
<p>​    需求：先从数据库中读取摸一个字段的值，然后在该字段上的基础上进行修改，由于操作不是原子性，无法保证线程安全，也就是当A线程读取到1时，想+1，赋值为2。而B线程已经将数据修改为2了，那么A线程应该是在2的基础上+1，赋值为3。但实际中可能该值都到8了，A又给人家改回2了。所以我们该如何解决数据安全问题？</p>
</blockquote>
<ol>
<li>本能想到利用JVM层面的锁机制，保证每次只有一个线程进行操作，但这个性能太差，而且JVM锁无法在分布式中生效。</li>
<li>利用数据库事务操作，下文我们主要讲Mysql事务的知识。</li>
</ol>
<h2 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h2><p>​        在讲事务之前，我们需要明确Mysql中只有<code>Inndb存储引擎</code>支持事务，如果是其他存储引擎则无法使用事务，所以我们应先检查自己的存储引擎是否正确。</p>
<ol>
<li>查看数据库支持的存储引擎：<code>show engines</code></li>
<li>查看自己的表使用的引擎：<code>show table status from 数据库名 where name = &#39;表名&#39;;</code></li>
<li>修改表的存储引擎：<code>ALTER TABLE 表名 ENGINE=引擎名称;</code></li>
<li>查看是否是自动提交：<code>show variables like &#39;autocommit&#39;;</code></li>
<li>关闭自动提交: <code>SET AUTOCOMMIT = 0;</code> </li>
<li>打开自动提交：<code>set AUTOCOMMIT = 1;</code></li>
<li>事务的隔离级别有哪些：<ol>
<li><code>Read Uncommitted</code>（读取未提交内容）<ul>
<li>别人开启事务，修改数据，但还未提交，你这边就读取到了修改的数据，存在脏读现象</li>
</ul>
</li>
<li><code>Read Committed</code>（读取提交内容）<ul>
<li>存在不可重复读现象，意思就是当A在开启事务后，先查询了一次数据，在这期间B也开启事务，并commit了一条数据，当A再查询的时候数据发现查询到的数据不一致了，</li>
</ul>
</li>
<li><code>Repeatable Read</code>（可重读）<ul>
<li>当A开启一个事务后，读取的数据是锁死的，不会因为外界的修改而读取到不同的内容。但会有幻读的可能</li>
</ul>
</li>
<li><code>Serializable</code>（可串行化）<ul>
<li>隔离级别最高，事务必须一个个进行，相当于Java中的synchronize，但是效率很低。安全性最高</li>
</ul>
</li>
</ol>
</li>
<li>查看数据库支持的事务隔离级别：<code>SELECT @@global.tx_isolation;</code></li>
<li>修改事务的隔离级别：（seesion表示当前作用域下（立刻生效），如果想改变全局作用域使用：global（需要从新建立Session生效），这里修改只是临时操作，要永久操作需要在配置文件中修改）<ol>
<li><code>set session transaction isolation level repeatable read;</code> 设置会话隔离级别为可重复读</li>
<li><code>set session transaction isolation level read uncommitted;</code> 设置会话隔离级别为读未提交</li>
<li><code>set session transaction isolation level read committed;</code> 设置会话隔离级别为读已提交</li>
<li><code>set session transaction isolation level serializable;</code> 设置会话隔离级别为可串行化</li>
</ol>
</li>
</ol>
<h3 id="各个隔离级别存在问题的概念"><a href="#各个隔离级别存在问题的概念" class="headerlink" title="各个隔离级别存在问题的概念"></a>各个隔离级别存在问题的概念</h3><ol>
<li>脏读：好比我们写作文打草稿，写好了再上传提交，应只能看到最后提交的作品，现在是你打草稿我们都能看到了。</li>
<li>不可重复读：写作文，我们打草稿的时候，实在不会写，上网翻翻别人提交上传的优秀作文，抄一会儿不小心刷新页面了，发现尼玛怎么和之前不一样了。原来是别人又修改了一下，然后从新上传了。不可重复读重点在update和delete操作，官网写的</li>
<li>可重复读：与上面相对应，当我打草稿抄作文的时候，不管原作者怎么提交修改，我这边只能看到最初我打草稿那时看到的。相当于我为了保证数据不变，我截了个图。只看这张图。</li>
<li>幻读：侧重点在于数据的增加，比方说作文上传后，需要单独放在一张桌子上，我在打草稿前看了一眼，发现桌子上是空的，等我写的差不多了，我再看一眼桌子还是空的，但等我去放作文的时候，发现明明我看不到有东西，但显示已经有一个别人的作文了。仿佛自己出现了幻觉。幻读侧重于insert语句</li>
</ol>
<h2 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h2><h3 id="共享锁："><a href="#共享锁：" class="headerlink" title="共享锁："></a>共享锁：</h3><p>​        也称为读锁，多个事务间可共享读锁，都可以获取到数据，但不能修改数据，否则可能造成死锁问题。</p>
<p>加锁：<code>select * from student where id = 1 lock in share mode</code></p>
<p>释放锁：<code>commit/rollback</code></p>
<h3 id="排他锁"><a href="#排他锁" class="headerlink" title="排他锁"></a>排他锁</h3><p>​        也叫做写锁，写锁与其他锁并不能共存，也就是说与共享锁，和其他排他锁都是互斥的。如果一个事务获取了一个数据行的排他锁，其他事务就也不能再获取这行的锁了，获取到锁的事务可以进行读和写</p>
<p>加锁：</p>
<p>​    自动：在<code>delete/update/insert</code>中默认加锁</p>
<p>​    手动：<code>select * from student where id = 1 for update;</code></p>
<p>释放锁：<code>commit/rollback</code></p>
<h3 id="意向锁（表级锁）"><a href="#意向锁（表级锁）" class="headerlink" title="意向锁（表级锁）"></a>意向锁（表级锁）</h3><p>​        意向锁是由数据引擎自己维护的，用户无法自己操作意向锁，</p>
<h4 id="IS意向共享锁"><a href="#IS意向共享锁" class="headerlink" title="IS意向共享锁"></a>IS意向共享锁</h4><p>​        一个数据行加入共享锁之前必须先获取到该表的IS锁</p>
<h4 id="IX意向排他锁"><a href="#IX意向排他锁" class="headerlink" title="IX意向排他锁"></a>IX意向排他锁</h4><p>​        一个事务在一个数据行加他排他锁之前需要获取到IX锁</p>
<blockquote>
<p>上面的意向锁到底有什么用？</p>
<blockquote>
<p>一个事务成功给一个表加上表锁的前提是什么？</p>
</blockquote>
</blockquote>
<p>​        肯定是这个表中任意数据行没有加上别的锁，那我当想给一个表加表锁时，难倒一行一行去判断有没有加锁操作？效率太低，且当你判断完第一个没问题，去判断第二个时，第一个被一个事务加锁了，你也不知道啊，所以使用意向锁，可以提高加表锁的效率，只要某个数据行有了意向排它锁，就说明不能加表锁    </p>
<blockquote>
<p>提问环节：</p>
<ol>
<li>行锁锁的是什么？ 是一行数据？是一个字段？还是索引？</li>
<li>当我们不给表加索引时，表是否含有主键索引？</li>
</ol>
<p>这里有现成的实验：<a href="https://blog.csdn.net/weixin_43935927/article/details/109438506">https://blog.csdn.net/weixin_43935927/article/details/109438506</a></p>
</blockquote>
<p>​        结论： 锁锁住的是索引，当表中没有设定主键索引时，会默认找一个非空唯一的字段加主键索引，如果没有这个字段会使用一个隐藏字段加入主键索引。</p>
<hr>
<p><img src="../../typora-user-images/image-20220810182237613.png" alt="image-20220810182237613"></p>
<h3 id="Record-Lock：记录锁"><a href="#Record-Lock：记录锁" class="headerlink" title="Record Lock：记录锁"></a>Record Lock：记录锁</h3><p>条件：唯一性索引（唯一、主键）等值查询，精准匹配到一个索引。</p>
<p><code>select * from t2 where id = 4 for update;</code> 锁住id = 4的数据</p>
<h3 id="Gap-Lock：间隙锁"><a href="#Gap-Lock：间隙锁" class="headerlink" title="Gap Lock：间隙锁"></a>Gap Lock：间隙锁</h3><p>条件：记录不存在，当我查询并加锁时，发现并没有击中索引，而是落入在一个索引的区间内，那么就会加一个间隙锁。那既然没数据我加间隙锁能干嘛？</p>
<p>防止插入，当你有一个间隙锁的时候，就不能再给这个间隙加数据，等等。。那这不就保证了不会在我看不见的情况下，别人突然insert一条数据了嘛。。。幻读的解决似乎在这里能找到解决的办法</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h89d8poknbj30k0059mxg.jpg" alt="image-20220810182800083"><img src="../../typora-user-images/image-20220810182800083.png" alt="image-20220810182800083"></p>
<h3 id="Next-Key-Lock：临键锁"><a href="#Next-Key-Lock：临键锁" class="headerlink" title="Next-Key Lock：临键锁"></a>Next-Key Lock：临键锁</h3><p>条件：范围查询，包含记录和区间。这里要注意临键是左开右闭的，(x,y]</p>
<p><img src="../../typora-user-images/image-20220810183202191.png" alt="image-20220810183202191"></p>
<p>​        所以当有这几个锁的时候解决了什么问题呢？那就是解决了在<code>repeatable Read</code>事务隔离级别下，幻读的影响，当有了间隙锁，这个区间虽然你看不到，但你相当于已经对这个范围都加锁了，其他数据无法进行insert，所以最后的结论是下图：</p>
<p><img src="../../typora-user-images/image-20220810183658382.png" alt="image-20220810183658382"></p>
<blockquote>
<p>当前读与快照读的底层分析</p>
</blockquote>
<p><img src="../../typora-user-images/mysqlMvcc.drawio.png" alt="mysqlMvcc.drawio"></p>
<hr>
<h2 id="ACID的实现原理"><a href="#ACID的实现原理" class="headerlink" title="ACID的实现原理"></a>ACID的实现原理</h2><h3 id="atomicity原子性"><a href="#atomicity原子性" class="headerlink" title="atomicity原子性"></a>atomicity原子性</h3><blockquote>
<p>定义我们都知道，一个事务操作内，要么都成功，要么都失败，那Mysql是如何保证的？</p>
</blockquote>
<p>​        维护了一个<code>undo.log</code>文件，也就是我们在事务操作前都会记录一条反向操作SQL，当<code>commit</code>时，则<code>undo.log</code>标志该事务已经结束。如果出现异常，则进行<code>rollback</code>操作，通过<code>undo.log</code>文件执行反向操作，进行数据回滚。比如：</p>
<p>当我们执行：<code>update user set name = &quot;李四&quot; where id = 1;   *修改之前name=张三*</code></p>
<p>undo文件记录：<code>update user set name = &quot;张三&quot; where id = 1;</code></p>
<h3 id="durability持久性"><a href="#durability持久性" class="headerlink" title="durability持久性"></a>durability持久性</h3><blockquote>
<p>定义：如果一个事务提交后，数据的修改是永久性的。</p>
</blockquote>
<p>​        维护一个<code>redo.log</code>文件，背景是我们知道磁盘IO是一个很慢的操作，所以Mysql也维护了一份Buffer缓冲区，操作都会先到缓冲区，最后同步到磁盘中。但缓冲区最大的问题就是数据的不安全，所以引入了<code>redo.log</code>文件，数据会先同步到<code>redo log buffer</code>中，<code>redo log buffer</code> 也是redo.log文件的缓冲区，然后事务提交后按照我们的约定再刷盘到redo.log文件中。</p>
<p><img src="../../typora-user-images/image-20230130213820352.png" alt="image-20230130213820352"></p>
<blockquote>
<p>那这里也会存在问题：</p>
</blockquote>
<ol>
<li> redo log buffer 文件能否保证数据不丢失?</li>
</ol>
<p>​        Mysql中数据操作单元是一个数据页，16k，<code>redo.log</code>中则记录的是对磁盘上的某个表空间的某个数据页的某一行数据的某个字段做了修改，修改后的值为多少，它记录的是对物理磁盘上数据的修改，因此称之为物理日志。类似于Redis中的AOF操作追加</p>
<p>​        <code>redo log buffer</code>是在commit之前就记录了，如果在commit之后再记录就不可能保证数据安全，因为commit后一瞬间挂机不就完了。所以当commit时，我们可以根据<code>innodb_flush_log_at_trx_commit</code> 来决定将<code>redo log buffer</code>什么时候刷盘到<code>redo.log</code>文件中。</p>
<ul>
<li><strong>设置为0的时候，表示每次事务提交时不进行刷盘操作，等待主线程每秒刷盘</strong></li>
<li><strong>设置为1的时候，表示每次事务提交时都同步进行刷盘操作（默认值，因为够安全）</strong></li>
<li><strong>设置为2的时候，表示每次事务提交时都异步，只把redo log buffer内容写入page cache</strong></li>
</ul>
<ol start="2">
<li>为什么宁可写到<code>redo.log</code>文件中，而不是直接写到数据库文件中？</li>
</ol>
<p>redo.log使用的顺序IO，只追加修改的数据，而<code>Mysql的Buffer</code>为随机IO，写入数据文件，是按照一个数据页(16k)写入的。</p>
<h3 id="isolation隔离性"><a href="#isolation隔离性" class="headerlink" title="isolation隔离性"></a>isolation隔离性</h3><p>隔离性保证有两种：</p>
<ol>
<li>像Java中一样加入锁，每个事务在操作时，只有一个事务获取到锁并操作，效率低</li>
<li>MVCC多版本并发控制（Mysql中对RC和RR的默认管理）</li>
</ol>
<h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><p><code>select</code>读取分为：快照读和当前读</p>
<p>快照读就好像是照了张相，数据是以前了，不一定准确。</p>
<p>当前读表示读取到的就是最新的数据，比如：update，insert，delete就是当前读，会先获取最新数据，加入行锁。如果想让<code>select</code>也为当前读：<code>select * from table for update || select * from table lock in share mode </code></p>
<blockquote>
<p>MVCC是基于快照读的。但又有不同，我们下面来看一下RC和RR底层到底有什么不同？</p>
</blockquote>
<p>首先MVCC的关键在于<code>版本链，ReadView视图，事务ID</code>来区分。可以看这里的图：</p>
<p><img src="../../typora-user-images/mysqlMvcc.drawio.png" alt="mysqlMvcc.drawio"></p>
<p>至于RC与RR的区别则在于生成ReadView时机不同，在RC中每次select 都会生成一个readView，所以数据也在不断更新</p>
<p>而RR则是以事务为单位，当第一个select时生成ReadView，后面再次select就共用一个。所以叫可重复读</p>
<blockquote>
<p>为什么说幻读可被解决：这里分为当前读与快照读</p>
</blockquote>
<p>当前读：默认加入了间隙锁，保证这一段区间内读的时候也加锁了，别人无法操作</p>
<p>快照读：则是外界的修改，事务内只读取一次，所以也不影响。</p>
<p>​        外界对幻读的定义也并不是统一的。这里我的理解是，幻读是当事务执行后，虽然读取不到该数据，但是却可以修改或删除该数据，就像幻觉一样，而修改与删除是因为使用的当前读所以可以获取到最新的数据</p>
<h3 id="consistency一致性"><a href="#consistency一致性" class="headerlink" title="consistency一致性"></a>consistency一致性</h3><p><code>ADI</code>特性是为了保证<code>D</code>数据的一致性。</p>
<h2 id="索引底层：B-树"><a href="#索引底层：B-树" class="headerlink" title="索引底层：B+树"></a>索引底层：B+树</h2><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a> 动态图显示</p>
<p>我们都知道Mysql索引底层是B+树，那为什么使用B+数呢？能不能像<code>HashMap或红黑树</code>使用索引？</p>
<ol>
<li>Hash结构</li>
</ol>
<p>​        元素插入与访问都非常的快，如果Hash值碰撞，也可以使用链表。但当数据量太多就查询太慢了，就好像HashMap超过边界变为红黑树。所以Hash的缺点有两个：</p>
<ul>
<li>在数据量大时，哈希碰撞后转为顺序查找，查询效率太低</li>
<li><code>Hash</code>值无序，在我们使用索引时经常遇到范围查找，Hash没法优化</li>
</ul>
<ol start="2">
<li>平衡二叉树</li>
</ol>
<p>​        平衡二叉树的特点就是二叉树结构，左右高度不会超过1层，会有自平衡。但随着树高度的增加，查找就越慢，而且如果我们查找范围数据时，需要不断回旋搜索。比如说<code>select * from table where id &gt;= 10</code>,当我们在树中找到10这个节点，剩下节点需要回旋搜索</p>
<ol start="3">
<li>B树</li>
</ol>
<p>​        多个节点合在一起，这样树的高度就降低了，查询速度是要比平衡二叉树解决了，但仍然存在回旋查找的问题</p>
<ol start="4">
<li>B+树</li>
</ol>
<p>​        解决了回旋查找的问题，整体结构相当于B树的形成，然后每个节点形成一个链表的关系，这样就没有了回旋查找的问题</p>
<blockquote>
<p>这里我是看了上面动态图插入流程体会到的，可能有些错误，还是需要有时间了解具体实现。</p>
</blockquote>
<h2 id="索引失效问题"><a href="#索引失效问题" class="headerlink" title="索引失效问题"></a>索引失效问题</h2><blockquote>
<p>select 前加入 explain 可显示是否使用了索引，其中属性值：</p>
<blockquote>
<p>id:选择标识符<br>select_type:表示查询的类型。<br>table:输出结果集的表<br>partitions:匹配的分区<br>type:表示表的连接类型（ ALL、index、range、 ref、eq_ref、const、system、NULL（从左到右，性能从差到好））<br>possible_keys:表示查询时，可能使用的索引<br>key:表示实际使用的索引<br>key_len:索引字段的长度<br>ref:列与索引的比较<br>rows:扫描出的行数(估算的行数)<br>filtered:按表条件过滤的行百分比<br>Extra:执行情况的描述和说明</p>
</blockquote>
</blockquote>
<p>索引失效的情况网上有许多测试数据，可以直接查找，我们这里从底层说明为什么索引会失效。下图是对<code>a字段和b字段加入联合索引，索引底层B+树的样子</code></p>
<p><img src="../../typora-user-images/image-20221116173602058.png" alt="image-20221116173602058"></p>
<p>通过上面的图我们能发现几个规则：</p>
<ol>
<li>a的值是有序的，b的值是无序的</li>
<li>当a相同时，b是有序的，这在我们多个排序条件时，如果第一个相同，再排第二个是一致的</li>
</ol>
<blockquote>
<p>分析情况来说明</p>
</blockquote>
<p>​    <code>like &quot;%i&quot; || like &quot;i%&quot; || like &quot;%i%&quot;</code> 之间的不同</p>
<ul>
<li>like ‘%i’ 表示前面什么都可以，以i结尾，根据上图，当a不同时，b是无序的，所以无法使用索引</li>
<li>like ‘i%’ 表示以i开头，根据上图a相同时，b是有序的，所以可以用到索引</li>
<li>like ‘%i%’ 和情况1一样，无法使用索引</li>
</ul>
<blockquote>
<p>​    索引失效的最本质原因就是：B+索引在底层的存储是有序的，如果要使用索引也应该有序，当使用联合索引时，应保证索引从左至右。这条规则对普通索引也适用。比如说对<code>name</code>加索引，有三个值，<code>abc,acb,aaa</code>，在添加索引时先看第一位，发现都是a，再看第二位，发现不一样了，这时也是按顺序排序的，最终一定是<code>aaa,abc,acb</code>,这里最简单的方式：我们已经知道索引的结构是B+树，通过上面的网址自己插入这几个值，看是怎么排序的。</p>
</blockquote>
<h2 id="MyISAM-和-Innodb的索引区别"><a href="#MyISAM-和-Innodb的索引区别" class="headerlink" title="MyISAM 和 Innodb的索引区别"></a>MyISAM 和 Innodb的索引区别</h2><blockquote>
<p>MyIsam 数据和索引是分为两个文件存储的，左边的图为索引，右边为数据，索引的key为主键id，value为数据的地址，</p>
<p>不管是主键索引还是普通索引都是通过地址去查找数据</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221116181734434.png" alt="image-20221116181734434"></p>
<blockquote>
<p>Innodb 的索引，也叫聚簇索引，索引与数据是在一起的</p>
<blockquote>
<p>​    左边的图，每个节点上的key是唯一主键ID，值就是这一整行的数据，当通过主键查询时速度最快</p>
<p>​    右边的图，以name为索引，每个节点的key是name，value则是主键ID，再通过ID去主键索引中获取数据（这里如果我们没有设置主键索引，Innodb会找唯一自增索引去当做主键索引，如果这个也没有，会使用隐藏字段生成一个主键）</p>
<p>​    索引：分为主键索引和普通索引，主键索引直接拿数据，普通索引找主键索引找数据（性能相对比MyISAM低），</p>
</blockquote>
</blockquote>
<p><img src="../../typora-user-images/image-20221116181403045.png" alt="image-20221116181403045"></p>
<hr>
<h2 id="百万级数据索引优化"><a href="#百万级数据索引优化" class="headerlink" title="百万级数据索引优化"></a>百万级数据索引优化</h2><ol>
<li><p>索引失效：</p>
<ul>
<li>计算：如：<code>+ ,- ,* ,/ ,!= ,&lt;&gt; ,is null ,is not null, or</code></li>
<li>函数：如：<code>sum(),round()等等</code></li>
<li>手动/自动类型转化，如: id = “1”，id本身是数字，给写成字符串了（这里我用mysql8发现也可以使用索引）</li>
</ul>
</li>
<li><p>尽量少使用<code>select * 因为这会导致无法使用覆盖索引</code>，覆盖索引的意思是 <code>select name where name = &#39;&#39; and  age = &#39;&#39;</code>，name在查询条件的覆盖范围内，select * 也会查询到许多不必要的字段，导致网络传输的性能损耗。</p>
</li>
<li><p><code>like %</code>操作应注意，应避免%开头，但如果是覆盖索引的话，是可以用到索引的！！！, 也就是说使用%i,在使用覆盖索引的情况下，是可以使用索引查询到的</p>
</li>
<li><p><code>Order by</code>如果使用覆盖索引的话也可以被优化用索引，否则数据会被存入内存中的一个空间，再进行排序，而不是利用索引进行排序</p>
</li>
<li><p>用Java操作，要比数据库本身操作快的多</p>
</li>
</ol>
<blockquote>
<p>联合索引与单个索引的区别</p>
</blockquote>
<p>​    联合索引遵从最左前缀法则，当我们给<code>a,b,c</code>加入联合索引时，在<code>a || a,b || a,b,c</code>查询时都会使用到索引，联合索引相当于对多个列建索引，并且只建一次。</p>
<p>​    单个索引时，给<code>a ,b ,c</code>单独加入索引时，当查询<code>a,b,c</code>时，只有最前面的索引被使用或者被索引联合合并优化（<code>and 和 or 时</code>），而且如果多个字段添加独立索引，也会导致资源的浪费。</p>
<h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><p>​        根据存储器读取与索引的底层结构，我们知道索引字段应尽可能小，因为过长会导致二级索引也会很大。当我们需要对<code>varchar,text</code>等文本加索引时，可以只截取一部分进行索引。那到底该如何选择呢？</p>
<p>​        使前缀的选择性与完整的选择性越近越好。也就是说一个索引能匹配到越少的值说明越优秀。比如说：一个索引就能匹配到一个值  和  一个索引匹配到五个值，再从这五个值中找到自己需要那个， 那肯定是前者的性能更好。那该如何确定选择多长作为前缀索引呢？</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> city<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token comment"># 计算完整列的选择性</span>

<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel3<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel4<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel5<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel6<span class="token punctuation">,</span>
			 <span class="token function">count</span><span class="token punctuation">(</span><span class="token keyword">distinct</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sel7
			 <span class="token keyword">from</span> city_demo<span class="token punctuation">;</span> 
<span class="token comment"># 看哪种情况的值越靠近上面的完整列的选择性</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        仅仅看平均选择性是不够的，可能会出现数据不平衡的情况： 这里最常出现的前缀出现的次数比最常出现的城市出现的次数要多的多，就属于不平衡。</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span> <span class="token keyword">left</span><span class="token punctuation">(</span>city<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pref
<span class="token keyword">from</span> city_demo <span class="token keyword">group</span> <span class="token keyword">by</span> pref <span class="token keyword">order</span> <span class="token keyword">by</span> c <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">,</span> city <span class="token keyword">as</span> city
<span class="token keyword">from</span> city_demo <span class="token keyword">group</span> <span class="token keyword">by</span> city <span class="token keyword">order</span> <span class="token keyword">by</span> c <span class="token keyword">desc</span> <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><p>​        也就是我们上面说的联合索引，多列形成一个索引，这里遵从最左前缀原则，需要注意索引建立的顺序。</p>
<p>如果给 <code>a,b,c</code>列加联合索引，索引生效的情况：</p>
<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> b <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">where</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> b <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">)</span> <span class="token operator">and</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment"># 这里仅限 b 的字段很少</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>联合索引 与 每列加索引的区别：</p>
<p>​    联合索引只建立一次，多列索引每列建立一个</p>
<p>​    查询是联合索引性能更好，多列索引可能会用到索引合并(性能低)</p>
</blockquote>
<h3 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h3><p>也就是InnDB中的主键索引，因为主键索引的数据结构是索引与完整数据在一起，所以访问速度极快，</p>
<p>需要注意：一般情况下，主键用递增最好，因为是顺序插入B+树，但在高并发下可能导致锁竞争。</p>
<h3 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h3><h3 id="索引扫描做排序"><a href="#索引扫描做排序" class="headerlink" title="索引扫描做排序"></a>索引扫描做排序</h3><h3 id="冗余和重复索引"><a href="#冗余和重复索引" class="headerlink" title="冗余和重复索引"></a>冗余和重复索引</h3>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>第三章：二叉树问题</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%89%E7%AB%A0%EF%BC%9A%E4%BA%8C%E5%8F%89%E6%A0%91%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="树形dp套路"><a href="#树形dp套路" class="headerlink" title="树形dp套路"></a>树形dp套路</h1><p><strong>在做树结构的题目中，如果求解规则可以分为，以某个节点为子树，先向左要数据，再向右要数据，最后返回总数据，我们就可以使用该套路。</strong></p>
<ol>
<li><p><strong>递归进行遍历</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">QTraverse2</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"先序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">QTraverse2</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">QTraverse2</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后续"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>非递归进行遍历</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//非递归前序遍历  使用栈</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">QTraverse1</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//非递归中序遍历</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">ZTraverse1</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token keyword">while</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
               tree <span class="token operator">=</span> tree<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
               tree <span class="token operator">=</span> pop<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span>

   <span class="token comment">//非递归后序遍历</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">HTraverse1</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           stack1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack1<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stack1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span>
   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>宽度遍历</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//宽度遍历  也就是将二叉树一行一行的遍历</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">WideTraverse</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//关键就是我们需要知道我们遍历节点的层数  我们可以使用LinkedList(Java提供的队列 先进先出)</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> pop <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>求二叉树的宽度</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//求二叉树的宽度  也就是求出整棵树哪一行的节点最多  使用map和栈（不灵活）</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">GetWid</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> flor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//从栈中pop出的元素的层数</span>
            <span class="token class-name">Integer</span> num <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>value <span class="token operator">+</span> <span class="token string">" 层数："</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> flor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                flor <span class="token operator">=</span> num<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//所有层的元素个数已经统计出  也知道有多少层了</span>
        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>flor <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ints<span class="token punctuation">[</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> ints<span class="token punctuation">[</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> anInt <span class="token operator">:</span> ints<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>anInt <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                max <span class="token operator">=</span> anInt<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大节点数："</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token punctuation">&#125;</span>

    <span class="token comment">//求二叉树的宽度  使用队列和map</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">GetWidByLinkedList</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//当前所在行</span>
        <span class="token keyword">int</span> curLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">//所在行节点数</span>
        <span class="token keyword">int</span> curNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">//整棵树最多节点</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Point</span> pop <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> level <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> curLevel<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                curNum<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
                curNum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                curLevel <span class="token operator">=</span> level<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最多节点数："</span> <span class="token operator">+</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> curNum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>判断是否为搜索二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断二叉树为搜索二叉树   左子节点的值 &lt;= 当前节点的值 &lt;= 右子节点的值</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isSearchTree</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//使用中序遍历</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">.</span>value <span class="token operator">>=</span> tree<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">isSearchTree</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tree<span class="token punctuation">.</span>value <span class="token operator">&lt;=</span> tree<span class="token punctuation">.</span>right<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">isSearchTree</span><span class="token punctuation">(</span>tree<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>判断是否为完整二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//判断是否为完全二叉树  也就是要树是完整拥有左右子节点的 ，要么从左至右 填补叶节点</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isCompleteBinaryTree</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//1.只要有右不左子节点 就是说明不是</span>
    <span class="token comment">//2.满足1条件后，如果遇到只有左子节点的，则同层节点后面必须没有子节点</span>
    <span class="token comment">//需要宽度遍历  使用队列</span>
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Point</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> finPoint <span class="token operator">=</span> test<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Point</span> pop <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop <span class="token operator">==</span> finPoint<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>list<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>test <span class="token operator">==</span> finPoint <span class="token operator">&amp;&amp;</span> pop<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                finPoint <span class="token operator">=</span> pop<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pop<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>套路判断是否为搜索二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用二叉树套路解决是否为搜索二叉树</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isSearchTreeByMethod</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//左边为搜索二叉树</span>
        <span class="token comment">//右边为搜索二叉树</span>
        <span class="token comment">//左边值&lt;当前值&lt;右边值  所以我们需要知道左右两边的值  使用后序遍历</span>
        <span class="token keyword">boolean</span> isSearch <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">.</span>isSearch<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isSearch<span class="token operator">?</span><span class="token string">"是搜索二叉树"</span><span class="token operator">:</span><span class="token string">"不是搜索二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnType</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> min<span class="token punctuation">;</span>
        <span class="token keyword">int</span> max<span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isSearch<span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span><span class="token keyword">int</span> min<span class="token punctuation">,</span><span class="token keyword">int</span> max<span class="token punctuation">,</span><span class="token keyword">boolean</span> isSearch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>min <span class="token operator">=</span> min<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>max <span class="token operator">=</span> max<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isSearch <span class="token operator">=</span> isSearch<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnType</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Point</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">ReturnType</span> <span class="token class-name">LeftData</span> <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReturnType</span> <span class="token class-name">RightData</span> <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> min <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">int</span> max <span class="token operator">=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//当前值  与  左节点的最小值  比较</span>
            min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span><span class="token class-name">LeftData</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//当前值  与  左节点的最大值  比较</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token class-name">LeftData</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//最小值  与  右节点的最小值  比较</span>
            min <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>min<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//最大值  与  右节点的最大值  比较</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">boolean</span> isSearch <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">LeftData</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">LeftData</span><span class="token punctuation">.</span>isSearch<span class="token operator">||</span><span class="token class-name">LeftData</span><span class="token punctuation">.</span>max <span class="token operator">>=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            isSearch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">RightData</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>isSearch<span class="token operator">||</span><span class="token class-name">RightData</span><span class="token punctuation">.</span>min<span class="token operator">&lt;=</span> head<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            isSearch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>max<span class="token punctuation">,</span>isSearch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>套路判断是否为完全二叉树</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//用套路解决是否为完全二叉树</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">isCBT</span><span class="token punctuation">(</span><span class="token class-name">Point</span> tree<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ReturnType</span> process <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>isCBT<span class="token operator">?</span><span class="token string">"是完全二叉树"</span><span class="token operator">:</span><span class="token string">"不是完全二叉树"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnType</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//节点高度</span>
        <span class="token keyword">int</span> high<span class="token punctuation">;</span>
        <span class="token comment">//节点个数</span>
        <span class="token keyword">int</span> <span class="token class-name">Num</span><span class="token punctuation">;</span>
        <span class="token comment">//是否为完全二叉树</span>
        <span class="token keyword">boolean</span> isCBT<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span><span class="token keyword">int</span> high<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isCBT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>high <span class="token operator">=</span> high<span class="token punctuation">;</span>
            <span class="token class-name">Num</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isCBT <span class="token operator">=</span> isCBT<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnType</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Point</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">ReturnType</span> leftData <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>
        <span class="token class-name">ReturnType</span> rightData <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>
        <span class="token keyword">int</span> high <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isCBT <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            leftData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
            rightData <span class="token operator">=</span> <span class="token function">process</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
            high <span class="token operator">=</span> leftData<span class="token punctuation">.</span>high<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            num <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">leftData<span class="token punctuation">.</span></span>Num</span><span class="token operator">+</span> <span class="token class-name"><span class="token namespace">rightData<span class="token punctuation">.</span></span>Num</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>leftData<span class="token punctuation">.</span>isCBT<span class="token operator">||</span><span class="token operator">!</span>rightData<span class="token punctuation">.</span>isCBT<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span>high<span class="token punctuation">,</span>num<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//层数  与  节点个数呈  N=2^L - 1</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span>high<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                isCBT <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnType</span><span class="token punctuation">(</span>high<span class="token punctuation">,</span> num<span class="token punctuation">,</span> isCBT<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>套路寻找两个节点的交汇处，也就是给出一个树，给两个点，寻找点的共同交汇处</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//寻找两个节点的交会点</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Point</span> <span class="token class-name">FindCommon</span> <span class="token punctuation">(</span><span class="token class-name">Point</span> head<span class="token punctuation">,</span><span class="token class-name">Point</span> node1<span class="token punctuation">,</span><span class="token class-name">Point</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token operator">||</span>head <span class="token operator">==</span> node1<span class="token operator">||</span>head <span class="token operator">==</span> node2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Point</span> left <span class="token operator">=</span> <span class="token class-name">FindCommon</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>left<span class="token punctuation">,</span> node1<span class="token punctuation">,</span> node2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Point</span> right <span class="token operator">=</span> <span class="token class-name">FindCommon</span><span class="token punctuation">(</span>head<span class="token punctuation">.</span>right<span class="token punctuation">,</span> node1<span class="token punctuation">,</span> node2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> left<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">?</span>right<span class="token operator">:</span>left<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>二叉树节点间的最大距离（从树上某个点到另一个点最大距离，一个点到相邻一个点的距离为1）</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//二叉树节点间最大距离</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnTypeByMaxLen</span> <span class="token function">maxLength</span><span class="token punctuation">(</span><span class="token class-name">Point</span> hear<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hear <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxLen</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">ReturnTypeByMaxLen</span> left <span class="token operator">=</span> <span class="token function">maxLength</span><span class="token punctuation">(</span>hear<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ReturnTypeByMaxLen</span> right <span class="token operator">=</span> <span class="token function">maxLength</span><span class="token punctuation">(</span>hear<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//当前节点不参与  左节点最大距离  与  右节点最大距离比较</span>
        <span class="token keyword">int</span> maxDistance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>maxConnect<span class="token punctuation">,</span> right<span class="token punctuation">.</span>maxConnect<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//最大距离值与当前节点参与时  进行比较</span>
        maxDistance <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxDistance<span class="token punctuation">,</span> left<span class="token punctuation">.</span>maxDeepLen<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span> right<span class="token punctuation">.</span>maxDeepLen<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//向上一层  深度+1</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxLen</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>maxDeepLen<span class="token punctuation">,</span> right<span class="token punctuation">.</span>maxDeepLen<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>maxDistance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnTypeByMaxLen</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//最大深度</span>
        <span class="token keyword">int</span> maxDeepLen<span class="token punctuation">;</span>
        <span class="token comment">//节点最大距离</span>
        <span class="token keyword">int</span> maxConnect<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ReturnTypeByMaxLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxDeepLen<span class="token punctuation">,</span> <span class="token keyword">int</span> maxConnect<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxDeepLen <span class="token operator">=</span> maxDeepLen<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>maxConnect <span class="token operator">=</span> maxConnect<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li><p><strong>派顿最大快乐值（多叉树）</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//派顿最大快乐值（多叉树）</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ReturnTypeByMaxHappy</span> <span class="token class-name">MaxHappy</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> employee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span>subordinates<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span>happy<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">//如果当前节点来 返回值</span>
        <span class="token keyword">int</span> lai <span class="token operator">=</span> employee<span class="token punctuation">.</span>happy<span class="token punctuation">;</span>
        <span class="token comment">//不来</span>
        <span class="token keyword">int</span> bu <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Employee</span> subordinate <span class="token operator">:</span> employee<span class="token punctuation">.</span>subordinates<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ReturnTypeByMaxHappy</span> ret <span class="token operator">=</span> <span class="token class-name">MaxHappy</span><span class="token punctuation">(</span>subordinate<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//如果我来  底下人不能来</span>
            lai <span class="token operator">+=</span> ret<span class="token punctuation">.</span>buMaxHappy<span class="token punctuation">;</span>
            <span class="token comment">//如果我不来  底下人可以来可以不来  取最大值</span>
            bu <span class="token operator">+=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>laiMaxHappy<span class="token punctuation">,</span> ret<span class="token punctuation">.</span>buMaxHappy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">(</span>lai<span class="token punctuation">,</span>bu<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> laiMaxHappy<span class="token punctuation">;</span>
        <span class="token keyword">int</span> buMaxHappy<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">ReturnTypeByMaxHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> laiMaxHappy<span class="token punctuation">,</span> <span class="token keyword">int</span> buMaxHappy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>laiMaxHappy <span class="token operator">=</span> laiMaxHappy<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>buMaxHappy <span class="token operator">=</span> buMaxHappy<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Employee</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> happy<span class="token punctuation">;</span>  <span class="token comment">//该员工的快乐值</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> subordinates<span class="token punctuation">;</span>  <span class="token comment">//直接下级</span>

    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token keyword">int</span> happy<span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">></span></span> subordinates<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>happy <span class="token operator">=</span> happy<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>subordinates <span class="token operator">=</span> subordinates<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a name="lhcRd"></a></p>
<h1 id="树结构Morris遍历"><a href="#树结构Morris遍历" class="headerlink" title="树结构Morris遍历"></a>树结构Morris遍历</h1><p><a name="TbFyW"></a></p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2></li>
</ol>
<p><strong>我们能不能做到遍历整棵树，时间复杂度为o(n)，空间复杂度为o(1),利用原树种大量空闲指针</strong><br /><strong>很多关于树结构的题，以morris为基础求出最优解。（笔试还是用正常的遍历就好，错误率低）</strong><br /><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hd7yc2vwj30st0iitbo.jpg" alt="image-20221125143908385"></p>
<ol>
<li><p><strong>利用morris进行遍历树结构</strong></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//Morris先序遍历</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Morris_F</span><span class="token punctuation">(</span>tree node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tree cur <span class="token operator">=</span> node<span class="token punctuation">;</span>
        tree mostRight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">//这里说明是遍历到cur第一次</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>
                    cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">//这里说明是最底层节点  没有左节点 在右转前输出一次</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//Morris中序遍历</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">Morris_M</span><span class="token punctuation">(</span>tree node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tree cur <span class="token operator">=</span> node<span class="token punctuation">;</span>
        tree mostRight <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">.</span>left<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                 mostRight <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                 <span class="token keyword">while</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span><span class="token keyword">null</span><span class="token operator">&amp;&amp;</span>mostRight<span class="token punctuation">.</span>right<span class="token operator">!=</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                     mostRight <span class="token operator">=</span> mostRight<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span>
                 <span class="token keyword">if</span> <span class="token punctuation">(</span>mostRight<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                     mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> cur<span class="token punctuation">;</span>
                     cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>left<span class="token punctuation">;</span>
                     <span class="token keyword">continue</span><span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                     mostRight<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                 <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>right<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a name="zwEgb"></a></p>
<h1 id="dp套路与Morris套路什么时候使用"><a href="#dp套路与Morris套路什么时候使用" class="headerlink" title="dp套路与Morris套路什么时候使用"></a>dp套路与Morris套路什么时候使用</h1></li>
<li><p><strong>当我们的方法必须做第三次信息的强整合，也就是说我最后的决策必须依赖于左右两边的信息，我们使用dp套路，因为Morris每个点只返回两次。</strong></p>
</li>
<li><p><strong>如果不需要则就可以使用Morris。</strong></p>
</li>
</ol>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>第一章：栈与队列</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E6%A0%88%E4%B8%8E%E9%98%9F%E5%88%97.html</url>
    <content><![CDATA[<h1 id="第一章：栈与队列"><a href="#第一章：栈与队列" class="headerlink" title="第一章：栈与队列"></a>第一章：栈与队列</h1><h2 id="设计一个有getMin功能的栈"><a href="#设计一个有getMin功能的栈" class="headerlink" title="设计一个有getMin功能的栈"></a>设计一个有getMin功能的栈</h2><blockquote>
<p>要求：pop，push，getMin的时间复杂度为：O(1)</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> stackTemplate <span class="token punctuation">&#123;</span>
    <span class="token comment">// 记录插入值</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录插入值的最小值</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果最小值栈的栈顶元素 大于 当前元素，则说明有新的最小值了，</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>minStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Integer</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>pop <span class="token operator">&lt;=</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> pop<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> minStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="由两个栈组成的队列"><a href="#由两个栈组成的队列" class="headerlink" title="由两个栈组成的队列"></a>由两个栈组成的队列</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> myQueue <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> inStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> outStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        inStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">pushToPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">pushToPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> outStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pushToPop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>outStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>inStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                outStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>inStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="如何仅用递归函数和栈操作逆序一个栈"><a href="#如何仅用递归函数和栈操作逆序一个栈" class="headerlink" title="如何仅用递归函数和栈操作逆序一个栈"></a>如何仅用递归函数和栈操作逆序一个栈</h2><blockquote>
<p>通过递归函数实现栈中元素的逆序，比如放入：1,2,3,4. 逆序后：4,3,2,1</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 递归逆序栈  其实底层利用了栈帧的局部变量表去存储临时变量</span>
<span class="token comment">// 1. 每次pop()，返回栈底元素</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAndRemoveLastElement</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Integer</span> pop <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> pop<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> lastElement <span class="token operator">=</span> <span class="token function">getAndRemoveLastElement</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> lastElement<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 2. 逆序栈</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 如果为空，说明已经到底了，栈内没元素了</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 我们可以理解为，每次我就去取栈底的值，</span>
    <span class="token keyword">int</span> element <span class="token operator">=</span> <span class="token function">getAndRemoveLastElement</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 剩下的每一次递归都会去取栈底元素，直到为空</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将栈底元素放到栈顶</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="用一个栈实现另一个栈的排序"><a href="#用一个栈实现另一个栈的排序" class="headerlink" title="用一个栈实现另一个栈的排序"></a>用一个栈实现另一个栈的排序</h2><p>方法1（利用栈帧）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> helpStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> helpStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        helpStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Integer</span> pop <span class="token operator">=</span> helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">reverse</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    helpStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>pop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseByStack</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 将stack内所有元素有序放入helpStack，所有元素访问后，helpStack有序，则导入stack，保证stack有序</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">reverse</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法2（利用栈本身，更省空间）</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 通过一个栈来帮另一个栈做排序， 将多余的值直接放入stack，性能更好，也更节省空间</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reverseByStackPlus</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> helpStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> cur <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> helpStack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        helpStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>helpStack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>helpStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="生成窗口最大值数组-双端队列"><a href="#生成窗口最大值数组-双端队列" class="headerlink" title="生成窗口最大值数组(双端队列)"></a>生成窗口最大值数组(双端队列)</h2><p>输入：整形数组arr，窗口大小w。</p>
<p>输出：一个长度为n-w+1的数组res，res[i]表示每一种窗口状态下最大值</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 生窗口最大值数组，本题的关键在于利用双端队列，来记录滑动窗口的最大值
 * 为啥用双端队列？ 因为我们需要动态的从队列的头和尾更新值
 * @param arr 输入数组
 * @param w   窗口大小
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getMaxWindow</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> w <span class="token operator">||</span> w<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// arr.length - w + 1 表示窗口大小w时，最终能获取到多少个最大值</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> w <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 双端队列，记录窗口内最大值，并进行数据的更新，</span>
    <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 插入策略</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>queue<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 队列中记录的是最大值的下标，方便更新时，判断是否过期</span>
            queue<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        queue<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 弹出策略 i-w 表示过期值，比如i=5，w=3,i-w=2, 当前遍历到i=5的点，窗口长度为3，那当前窗口内有效值应该是&#123;3,4,5&#125;，2已经过期了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token operator">-</span>w<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            queue<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> w <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>queue<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="单调栈结构"><a href="#单调栈结构" class="headerlink" title="单调栈结构"></a>单调栈结构</h2><blockquote>
<p>给定一个不含有重复值的数组arr，找到每个i位置左边和右边离i位置最近且值比arr[i]小的位置，返回所有位置的相应信息</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 单调栈结构-找到每个节点离自己最近且比自己小的节点位置
 * 这里默认arr内无重复值
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rightWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 栈内存储节点位置</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 策略：遍历数组，并将值放入栈中，</span>
    <span class="token comment">// 如果比栈顶值大，则直接放入，下面的值就是离自己最近的最小值点</span>
    <span class="token comment">// 如果比栈顶值小，则将栈中比自己大的都弹出，确认对应的坐标</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 最后如果栈中还有数据，则一定是升序，也就是说栈内的每个节点都是左边有比自己小的，右边没有。</span>
    <span class="token comment">// 这里需要注意栈底的点，这个点是左边也没有，右边也没有</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        res<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 单调栈结构-找到每个节点离自己最近且比自己小的节点位置
 * 这里默认数组内有重复值
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">rightWay</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// 栈内存储节点位置，节点用List，来存储多个相同的值，List内部存储的也是坐标</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 策略：遍历数组，并将值放入栈中</span>
    <span class="token comment">// 如果比栈顶值大，则直接放入，下面的值就是离自己最近的最小值点</span>
    <span class="token comment">// 如果和栈顶值一样，则加入栈顶的元素集合中</span>
    <span class="token comment">// 如果比栈顶值小，则将栈中比自己大的都弹出，确认对应的坐标</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> popList <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> popi <span class="token operator">:</span> popList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>
                res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> popList <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> leftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> popi <span class="token operator">:</span> popList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> leftIndex<span class="token punctuation">;</span>
            res<span class="token punctuation">[</span>popi<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="求最大子矩阵的大小（单调栈应用）"><a href="#求最大子矩阵的大小（单调栈应用）" class="headerlink" title="求最大子矩阵的大小（单调栈应用）"></a>求最大子矩阵的大小（单调栈应用）</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 求最大子矩阵的大小 -》 单调栈
 * @param arr
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">maxRecSize</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录切分后每个位置的高度</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// 步骤1：将二维数组切割为一维数组，record[i] 表示i位置上有多高</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> curList <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> curList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> curList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 步骤2：利用单调栈找出每个点左右两侧，离自己最近且比自己小的</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> record<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> record<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> record<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果当前值小于栈顶元素，说明栈顶元素列的最大面积已经能计算出来了</span>
            <span class="token keyword">int</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> popLeftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 面积值:(i-popLeftIndex-1)*record[popIndex]</span>
            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> popLeftIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> record<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 栈内可能还有剩余元素</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> popIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> popLeftIndex <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 面积值: 左边肯定比自己小，但右边都是比自己大的</span>
        max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span><span class="token punctuation">(</span>record<span class="token punctuation">.</span>length<span class="token operator">-</span>popLeftIndex<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>record<span class="token punctuation">[</span>popIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> max<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="最大值减去最小值小于或等于num的子数组的数量（Max-Min-lt-Num-）（双端队列应用）"><a href="#最大值减去最小值小于或等于num的子数组的数量（Max-Min-lt-Num-）（双端队列应用）" class="headerlink" title="最大值减去最小值小于或等于num的子数组的数量（Max - Min &lt;= Num ）（双端队列应用）"></a>最大值减去最小值小于或等于num的子数组的数量（Max - Min &lt;= Num ）（双端队列应用）</h2><blockquote>
<p>如果数组长度为N，请实现O(N)的算法</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
   * 最大值减去最小值小于或等于num的子数组的数量
   *
   * @param arr
   * @param num
   * @return
   * 思路：子数组是多个，当在不断变化时，最大值与最小值也在不断的更新，所以我们应该用一种结构可以实时记录和更新数组中最大值和最小值
   * 这里我们可以想到上面的滑动窗口问题，当时是记录窗口内的最大值。所以这里我们使用两个滑动窗口，一个记录最大值，一个记录最小值
   * max(arr[i..j]) - min(arr[i...j]) &lt;= num ，如果从i-j每种子集都计算一遍，时间复杂度太高，我们可以找找特定的规律
   * - 如果max(arr[i..j]) - min(arr[i...j]) &lt;= num 成立，则arr[i...j]中每一个数组都满足条件,即arr[k...l] (i&lt;=k&lt;=l&lt;=j)
   * 我们用arr[i...j-1]举例， max[arr[i...j]] >= max[arr[i...j-1]]， 因为j如果j比i-(j-1)都大，则=成立，如果不是，则> 成立
   * - 如果上面情况不成立，则arr[k...l](k&lt;=i&lt;=j&lt;=l) 都不满足条件，这样我们就可以排除许多的可能
   */</span>
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 记录最大值</span>
      <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> maxList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token comment">// 记录最小值</span>
      <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> minList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              <span class="token comment">// 这里if(false)的唯一可能就是，j在某点时，已经不能继续向前了，所以i开始向右偏移，看是否可以让条件重新满足</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span>minList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> minList<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token comment">// 更新最小值</span>
                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>minList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>minList<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">>=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      minList<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
                  minList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token comment">// 更新最大值</span>
                  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>maxList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>maxList<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                      maxList<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                  <span class="token punctuation">&#125;</span>
                  maxList<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              <span class="token comment">// 判断当前结果是否满足条件</span>
              <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>maxList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>minList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                  <span class="token keyword">break</span><span class="token punctuation">;</span>
              <span class="token punctuation">&#125;</span>
              j<span class="token operator">++</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          result <span class="token operator">+=</span> j <span class="token operator">-</span> i<span class="token punctuation">;</span>
          <span class="token comment">// 检查最大值和最小值是否过期，需要更新的</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>maxList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              maxList<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>minList<span class="token punctuation">.</span><span class="token function">peekFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
              minList<span class="token punctuation">.</span><span class="token function">pollFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
          i<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token punctuation">&#125;</span>
      <span class="token keyword">return</span> result<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>队列</tag>
      </tags>
  </entry>
  <entry>
    <title>从 JDBC 到 ORM（例：Mybatis）的演化过程</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/%E4%BB%8E%20JDBC%20%E5%88%B0%20ORM%EF%BC%88%E4%BE%8B%EF%BC%9AMybatis%EF%BC%89%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="从-JDBC-到-ORM（例：Mybatis）的演化过程"><a href="#从-JDBC-到-ORM（例：Mybatis）的演化过程" class="headerlink" title="从 JDBC 到 ORM（例：Mybatis）的演化过程"></a>从 JDBC 到 ORM（例：Mybatis）的演化过程</h1><p>​    下面我将介绍Java操作Mysql数据的方式的演化过程，从最基本的JDBC到ORM框架的实现，每一次演化都是为了解决现有存在的问题。</p>
<h2 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h2><p>这里需要加入Mysql驱动包或者依赖.</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 注册驱动</span>
    <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置配置</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/orm"</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取连接</span>
    <span class="token class-name">Connection</span> connect <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行SQL</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>
    <span class="token class-name">Statement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回结果</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 结束资源</span>
    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以看到我们是通过<code>Statement</code>去执行的SQL语句，这里是存在SQL注入风险的，简单来说就是SQL是字符串拼接的，如果有恶意参数，会影响整个SQL的意思，所以后面我们使用<code>PreparedStatement </code>，也叫做预处理，执行SQL语句的参数用<code>(?)</code>来表示,使用set方法插入值。好处：1. 防止SQL注入 2. 减少编译次数，效率高 3. 不在使用SQL拼接，减少语法错误。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 注册驱动</span>
    <span class="token class-name">Driver</span> driver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置配置</span>
    <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/orm"</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取连接</span>
    <span class="token class-name">Connection</span> connect <span class="token operator">=</span> driver<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行SQL</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where username =?"</span><span class="token punctuation">;</span>
    <span class="token class-name">PreparedStatement</span> statement <span class="token operator">=</span> connect<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    statement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"steak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回结果</span>
    <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 结束资源</span>
    resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    statement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    connect<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="封装JDBC工具类"><a href="#封装JDBC工具类" class="headerlink" title="封装JDBC工具类"></a>封装JDBC工具类</h2><p>​    上面的操作，其中资源配置都是固定操作，所以我们可以直接写一个工具类来每次获取连接，进行操作，释放资源。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> url<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> driver<span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将配置写入配置文件，更加灵活</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            username <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            driver <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> set<span class="token punctuation">,</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="使用连接池"><a href="#使用连接池" class="headerlink" title="使用连接池"></a>使用连接池</h2><p>​    在上面我们每次操作数据库时，都是获取连接，操作，断开连接。</p>
<p>​    传统的JDBC操作会频繁的请求和验证，占用很多系统资源，导致服务崩溃，如果程序出现问题未能正常关闭，将导致数据库内存泄露，组织共导致重启数据库。</p>
<p>​    而且不能控制连接的数量，如果连接过多，可能导致Mysql崩溃。所以我们引入了连接池，让连接复用。这里我使用德鲁伊连接池，只用引入先关依赖即可：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里我直接把原先的获取连接方式，改为使用连接池获取。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span><span class="token class-name">DruidDataSourceFactory</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">DataSource</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Properties</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
    
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 将配置写入配置文件</span>
            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"src\\mysql.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            dataSource <span class="token operator">=</span> <span class="token class-name">DruidDataSourceFactory</span><span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> set<span class="token punctuation">,</span> <span class="token class-name">Statement</span> statement<span class="token punctuation">,</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>set <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>statement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            set<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 在数据库连接池技术中，close 不是真的断掉连接，而是把使用的 Connection 对象放回连接池</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Apache—DBUtils"><a href="#Apache—DBUtils" class="headerlink" title="Apache—DBUtils"></a>Apache—DBUtils</h2><p>​    上面的操作存在一个问题，关闭connection之后，resultSet结果集无法使用，且resultSet不利于数据的管理，所以每次我们查询了数据，可以手动的添加到List，Map等容器使用。还存在一个问题，每次查询返回的都是ResultSet，能不能通过泛型和反射，直接将数据封装成对象或者到List中。这些操作就被<code>Apache—DBUtils</code>完成了，是Apache提供的开源JDBC工具类库，且内部对SQL执行进行了线程安全保证。</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-dbutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">QueryRunner</span> queryRunner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"select * from user where id >= ?"</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> queryRunner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="DAO与增删改查通用方法-BasicDao"><a href="#DAO与增删改查通用方法-BasicDao" class="headerlink" title="DAO与增删改查通用方法-BasicDao"></a>DAO与增删改查通用方法-BasicDao</h2><blockquote>
<p>Dao : data access object 数据访问对象</p>
</blockquote>
<p>​    我们希望将增删改查一些公共的方法抽取出来，BasicDao是专门和数据库交互的，在BasicDao的基础上，实现一张表对应一个Dao，更好的完成功能，比如Customer表对应就是CustomerDao。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span></span><span class="token class-name">QueryRunner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">BeanListHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>dbutils<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span></span><span class="token class-name">ScalarHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">QueryRunner</span> qr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 增删改操作</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> update <span class="token operator">=</span> qr<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> update<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将编译异常->运行异常 ,抛出</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 查询并封装多个对象</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">queryMulti</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 查询并封装单个对象</span>
    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">querySingle</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>clazz<span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">//将编译异常->运行异常 ,抛出</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 查询一个值</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">queryScalar</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> qr<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>connection<span class="token punctuation">,</span> sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ScalarHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">JDBCUtils</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">CustomerDao</span> <span class="token keyword">extends</span> <span class="token class-name">BasicDAO</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomerDao</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 封装自己的方法，并且由于是BasicDao的子类，可直接使用其定义的方法
     * 由于指定了泛型，也可以直接返回封装好的对象
     */</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h2><blockquote>
<p>是什么？</p>
</blockquote>
<p>​    对象关系映射（Object Relational Mapping，简称ORM）模式是一种<code>为了解决面向对象与关系数据库存在的互不匹配的现象的技术</code>。简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p>
<p>​    也就是说我们能不能不写死SQL，将一个模型类与数据库中一张表做映射关系。我们只面向对象操作，比如<code>save(new User)</code>表示保存User对象到数据库中，一般我们会把User类与数据库中User表进行匹配与映射。这样我们也不用<strong>直接</strong>写SQL了。</p>
<blockquote>
<p>ORM的优缺点 </p>
</blockquote>
<p>优点：简单，直接，面向对象操作</p>
<p>缺点：会牺牲程序的执行效率和会固定思维模式。 （用多了，SQL可能都不会写了，而且提供的方法是有限的，但你的需求是无限的，我深有体会，这里感谢鱼皮对我的帮助）。</p>
<blockquote>
<p>常见ORM框架</p>
</blockquote>
<ol>
<li>Mybatis 、Mybatis-plus（常用，直接看官方文档操作）</li>
<li>Hibernate</li>
</ol>
<p>​    </p>
<p>​    上面就是Java对数据库操作的演化过程，各个阶段的代码只做了简单的演示，感兴趣可以再深入学习，我现在是常用Mybatis-plus，但由于傻瓜式操作，我更想了解一下底层，所以在想我们能不能自己写一个简单的ORM，不需要很完善，可以表达思想即可，这里我看了一篇文章写的很棒，下面的代码也是基于该作者的。</p>
<p>详情链接：<a href="https://cloud.tencent.com/developer/article/2057369?from=article.detail.1803564">https://cloud.tencent.com/developer/article/2057369?from=article.detail.1803564</a></p>
<p>​    这里我们先声明一点，不管是什么操作，Mysql都是只认SQL，既然现在我们是面向对象操作，不去自己写SQL，那ORM底层就一定会通过某些操作，将我们的对象操作转写为SQL语句，最后执行。底层实际上还是基础的部分，只不过我们套了个壳子，让使用更方便了而已，这里需要的基本知识：<code>注解，反射，JDBC基础</code>。</p>
<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><blockquote>
<p>我们既然要将实体类与数据库表做映射，那我们就应该在类上声明，它对应的哪个表。我们使用@Table 来声明</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">// 加在类上，标识哪张表</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Table</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Inherited</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token comment">// 加在属性上，标识主键</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">PrimaryKey</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>对应的实体类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// lombok注解，简化代码</span>
<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span>
<span class="token comment">// 自定义注解，表示对应的user表</span>
<span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@PrimaryKey</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>底层还是需要获取连接，这里我们使用Druid连接池</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 注册驱动
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyDataSource</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">&#123;</span>
        <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span></span>DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://1.14.74.242:3306/orm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        dataSource<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>创建JdbcTemplate，利用DataSource与数据库直接交互，实现通用方法</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">Connection</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">PreparedStatement</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">ResultSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token class-name">SQLException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>

<span class="token comment">/**
 * 根据资源获取连接，执行SQL，结果集
 */</span>
<span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">JdbcTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">MyDataSource</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> connection<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token class-name">PreparedStatement</span> preparedStatement<span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">;</span>

    <span class="token comment">//查询</span>
    <span class="token keyword">protected</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql <span class="token punctuation">,</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rowMapper<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        preparedStatement <span class="token operator">=</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token function">resultSet</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">,</span> rowMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//更新</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> <span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        preparedStatement <span class="token operator">=</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> i <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            preparedStatement <span class="token operator">=</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
            preparedStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//close();</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token comment">//获取链接</span>
    <span class="token keyword">private</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            connection <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> connection<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//预执行sql</span>
    <span class="token keyword">private</span> <span class="token class-name">PreparedStatement</span> <span class="token function">preparedStatement</span><span class="token punctuation">(</span><span class="token class-name">String</span> sql<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">&#123;</span>
        connection <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> preparedStatement<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//结果集</span>
    <span class="token keyword">private</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">resultSet</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet <span class="token punctuation">,</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> rowMapper<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rowMapper<span class="token punctuation">.</span><span class="token function">mapRow</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//关闭</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>connection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>preparedStatement <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                preparedStatement<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resultSet <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>resultSet<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>其中结果集的映射：RowMapper，这里写的接口，当使用的时候，使用匿名内部类操作</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">T</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>用户面向对象编程，不写SQL，所以我们底层需要反射获取对象的参数，然后解析拼接为SQL</p>
</blockquote>
<p>这里我们将反射对象的通用操作封装</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseSQLBuilder</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> tableName<span class="token punctuation">;</span> <span class="token comment">//表名</span>
    <span class="token keyword">protected</span> <span class="token class-name">String</span> primaryKeyName<span class="token punctuation">;</span> <span class="token comment">//主键名</span>

    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SELECT</span> <span class="token operator">=</span> <span class="token string">"select "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FROM</span> <span class="token operator">=</span> <span class="token string">" from "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">WHERE</span> <span class="token operator">=</span> <span class="token string">" where "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AND</span> <span class="token operator">=</span> <span class="token string">" and "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">IN</span> <span class="token operator">=</span> <span class="token string">" IN "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">UPDATE</span> <span class="token operator">=</span> <span class="token string">" UPDATE "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SET</span> <span class="token operator">=</span> <span class="token string">" SET "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">VALUES</span> <span class="token operator">=</span> <span class="token string">" VALUES "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">OR</span> <span class="token operator">=</span> <span class="token string">" OR "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">DELETE</span> <span class="token operator">=</span> <span class="token string">" DELETE "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INSERT</span> <span class="token operator">=</span> <span class="token string">" INSERT "</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">INTO</span> <span class="token operator">=</span> <span class="token string">" INTO "</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token class-name">StringBuilder</span> sqlBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getTableName</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Table</span> table <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        tableName <span class="token operator">=</span> table<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>tableName<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 全类名拆分</span>
            tableName <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">getPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PrimaryKey</span> primaryKey <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PrimaryKey</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        primaryKeyName <span class="token operator">=</span> primaryKey<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>primaryKeyName<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            primaryKeyName <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">hasPrimaryKey</span><span class="token punctuation">(</span><span class="token class-name">Field</span> field<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">PrimaryKey</span> primaryKey <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">PrimaryKey</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> primaryKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token class-name">String</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">String</span> fieldStr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"get"</span> <span class="token operator">+</span> fieldStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> fieldStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getFields</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们只以查询为例</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuerySQLBuilder</span> <span class="token keyword">extends</span> <span class="token class-name">BaseSQLBuilder</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">querySql</span><span class="token punctuation">(</span><span class="token class-name">Object</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取操作表名</span>
        <span class="token function">getTableName</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// SQL拼接</span>
        sqlBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">SELECT</span> <span class="token operator">+</span> <span class="token string">"*"</span> <span class="token operator">+</span> <span class="token constant">FROM</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">WHERE</span> <span class="token operator">+</span> <span class="token string">" 1=1 "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> <span class="token function">getFields</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">String</span> fieldStr <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> value <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token function">getField</span><span class="token punctuation">(</span>fieldStr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span> <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                sqlBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token constant">AND</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fieldStr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sqlBuilder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我们将QuerySQLBuilder。。。其他Builder封装到一个工厂类中，进行获取</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SQLBuilderInstanceFactory</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token class-name">QuerySQLBuilder</span> queryBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">SaveSQLBuilder</span> saveBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">UpdateSQLBuilder</span> updateBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token class-name">DeleteSQLBuilder</span> deleteSQLBuilder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">QuerySQLBuilder</span> <span class="token function">getQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>queryBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            queryBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuerySQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> queryBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">SaveSQLBuilder</span> <span class="token function">getSaveBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>saveBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            saveBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SaveSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> saveBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">UpdateSQLBuilder</span> <span class="token function">getUpdateBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>updateBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            updateBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpdateSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> updateBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DeleteSQLBuilder</span> <span class="token function">getDeleteSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deleteSQLBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            deleteSQLBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DeleteSQLBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> deleteSQLBuilder<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>定义查询接口</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>查询具体实现类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">JdbcTemplate</span> <span class="token keyword">implements</span> <span class="token class-name">IQuery</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 解析出的SQL</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token class-name">SQLBuilderInstanceFactory</span><span class="token punctuation">.</span><span class="token function">getQueryBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">querySql</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sql  "</span><span class="token operator">+</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行SQL</span>
        <span class="token keyword">return</span> <span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">String</span> getField <span class="token operator">=</span> <span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getSetMethod</span><span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Object</span> object <span class="token operator">=</span> resultSet<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token class-name">StringUtil</span><span class="token punctuation">.</span><span class="token function">getLastStr</span><span class="token punctuation">(</span>field<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>getField<span class="token punctuation">,</span>field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">return</span> t<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>现在大体上的代码都已经实现了，我们测试一下</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"china"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查询操作</span>
        <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userQuery <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> userQuery<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到这期间用户在使用的过程中，没有写一句SQL，但可以正常操作数据库了。剩下的细节就等着我们去完善。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    本文中，我大概总结了一下，Java操作Mysql的演化过程，从最基本的JDBC到自动化的ORM操作，可以看到操作是越来越简单，也越来越灵活了，但底层大致的原理我们还是应该了解的。</p>
<p>​    本文我参考了韩顺平老师的Mysql基础文章和小四的技术之旅文章。十分感谢！！！原作者的文章中的内容更加详细，具体可在网上查询。</p>
<p>​    这里想推一下我的博客，虽然现在还很简陋，里面会分享我的学习所得，也希望能帮助到大家，<a href="http://1.14.74.242/">http://1.14.74.242</a></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>jdbc</tag>
        <tag>orm</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>第二章：链表问题</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98.html</url>
    <content><![CDATA[<h1 id="第二章：链表问题"><a href="#第二章：链表问题" class="headerlink" title="第二章：链表问题"></a>第二章：链表问题</h1><h2 id="打印两个有序链表的公共部分"><a href="#打印两个有序链表的公共部分" class="headerlink" title="打印两个有序链表的公共部分"></a>打印两个有序链表的公共部分</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 给定两个有序链表的头指针head1和head2,打印两个链表的公共部分
 * @param head1
 * @param head2
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printCommonPart</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head1<span class="token punctuation">,</span><span class="token class-name">Node</span> head2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 有序 则说明，我们可以用双指针思想，找到相同的点</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> head2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>value <span class="token operator">></span> head2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            head1 <span class="token operator">=</span> head1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>head1<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> head2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            head2 <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果相等，说明到达了公共节点</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>head1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            head1 <span class="token operator">=</span> head1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            head2 <span class="token operator">=</span> head2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="在单链表和双链表中删除倒数第K个节点"><a href="#在单链表和双链表中删除倒数第K个节点" class="headerlink" title="在单链表和双链表中删除倒数第K个节点"></a>在单链表和双链表中删除倒数第K个节点</h2><blockquote>
<p>单链表</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 单链表删除倒数第k个节点
 * 假如链表长度为N，则删除倒数第K个点，就需要找到倒数K点的前一个点，也就是N-K位置
 * 我们每遍历一个点，k-1
 * 这里需要想一下，比如：
 * 1->2->3 k=4 : 3 2 1 ,发现最终k>0 说明倒数第K个点，已经超出范围了
 * 1->2->3 k=3 : 2 1 0 ,发现k=0, 说明删除的就是头结点，返回头结点下一个
 * 1->2->3 k=2 : 1 0 -1,k&lt;0, 说明删除的点在中间 这时候我们从头遍历，K+1，则第一遍遍历为K-N,则第二遍当K=0时，则就是遍历到N-K的位置
 * @param head
 * @param lastKth
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">removeLastKthNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span><span class="token keyword">int</span> lastKth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> lastKth <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入参数有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 这里用一个指针遍历，因为第二遍我们还需要找到头结点</span>
    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        lastKth<span class="token operator">--</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"删除结点超出范围"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 这里就剩下 K &lt; 0 情况</span>
    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>lastKth <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        lastKth<span class="token operator">++</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>双链表</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 双链表结构与单链表就是多了个前指针，我们在删除时需要注意
 *
 * @param head
 * @param lastKth
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">removeLastKthNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> lastKth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> lastKth <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">Node</span> cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        lastKth<span class="token operator">--</span><span class="token punctuation">;</span>
        cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>before <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastKth <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        cur <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>lastKth <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            lastKth<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 当前就找到了要删除的点</span>
        cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token class-name">Node</span> tmp <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            tmp<span class="token punctuation">.</span>before <span class="token operator">=</span> cur<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="删除链表的中间节点"><a href="#删除链表的中间节点" class="headerlink" title="删除链表的中间节点"></a>删除链表的中间节点</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 删除中间节点：
 * 1->2 删除 1
 * 1->2->3 删除 2
 * 问题的关键就是要找到中间这个点，通过前一个点进行删除
 * @param head
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">removeMidNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> head<span class="token punctuation">.</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 利用快慢指针，快指针一次走两步，慢指针一次走一步</span>
  	<span class="token comment">// 这里快指针先走一步，则最终slow的下一个点就是中间点</span>
    <span class="token class-name">Node</span> fast <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> head<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="反转单向和双向链表"><a href="#反转单向和双向链表" class="headerlink" title="反转单向和双向链表"></a>反转单向和双向链表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 反转单向链表
 *
 * @param head
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        next<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> next<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 反转双向链表
 *
 * @param head
 * @return
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Node</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
        head<span class="token punctuation">.</span>before <span class="token operator">=</span> next<span class="token punctuation">;</span>
        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
        head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="反转部分单向链表"><a href="#反转部分单向链表" class="headerlink" title="反转部分单向链表"></a>反转部分单向链表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 反转部分链表
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Node</span> <span class="token function">reverseFromToNode</span><span class="token punctuation">(</span><span class="token class-name">Node</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> from<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token keyword">to</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 统计链表长度</span>
    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> node1 <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// 记录from 和 to的前后节点</span>
    <span class="token class-name">Node</span> fPre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">Node</span> tPos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        len<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 确定from前一个节点</span>
        fPre <span class="token operator">=</span> len <span class="token operator">==</span> from <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">?</span> node1 <span class="token operator">:</span> fPre<span class="token punctuation">;</span>
        <span class="token comment">// 确定to后一个节点</span>
        tPos <span class="token operator">=</span> len <span class="token operator">==</span> <span class="token keyword">to</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">?</span> node1 <span class="token operator">:</span> tPos<span class="token punctuation">;</span>
        node1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>from <span class="token operator">></span> <span class="token keyword">to</span> <span class="token operator">||</span> from <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token keyword">to</span> <span class="token operator">></span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 判断from是不是在头结点，确定需要反转的头结点</span>
    node1 <span class="token operator">=</span> fPre <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> head <span class="token operator">:</span> fPre<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> node2 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    node1<span class="token punctuation">.</span>next <span class="token operator">=</span> tPos<span class="token punctuation">;</span>
    <span class="token class-name">Node</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 反转</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node2 <span class="token operator">!=</span> tPos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        next <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">;</span>
        node1 <span class="token operator">=</span> node2<span class="token punctuation">;</span>
        node2 <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>fPre <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// node1 现在就反转前的to节点</span>
        fPre<span class="token punctuation">.</span>next <span class="token operator">=</span> node1<span class="token punctuation">;</span>
        <span class="token keyword">return</span> head<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> node1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式事务</title>
    <url>//post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​        我们在过去总是使用本地事务，也就是数据库提供的事务操作，其中具有ACID的特性，但在如今我们的各个模块儿被拆分，服务与服务间相互调用，简单来说就是需要跨进程的事务，我们来想一下现有的本地事务是否能解决分布式事务。<br /><strong>情况1</strong>：跨JVM，跨数据库产生分布式事务<br /></p>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    用户下订单<span class="token arrow operator">--></span>订单模块<span class="token punctuation">;</span>
    订单模块<span class="token arrow operator">--></span>物流模块<span class="token punctuation">;</span>
    订单模块<span class="token arrow operator">--></span>订单表<span class="token punctuation">;</span>
    物流模块<span class="token arrow operator">--></span>物流表<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><br />        用户直接调用订单模块儿，开启事务，然后在订单表中存入数据，然后再远程调用物流模块儿，去操作物流模块儿，我们可以想到如果物流模块儿出现问题，订单模块儿远程调用发生错误，是会进行事务回滚的。应该是没问题的。那如果物流模块儿确实修改成功了，但网络传输出现了问题，订单模块儿就进行回滚了，则就导致了物流模块儿有数据，订单模块儿没数据的问题。我们再考虑下面的问题：<br /></p>
<p><strong>情况二</strong>：跨数据库实例产生分布式事务<br /></p>
<pre class="line-numbers language-mermaid" data-language="mermaid"><code class="language-mermaid"><span class="token keyword">graph</span> TD<span class="token punctuation">;</span>
    人员管理模块儿<span class="token arrow operator">--></span>用户数据库<span class="token punctuation">;</span>
    人员管理模块儿<span class="token arrow operator">--></span>订单数据库<span class="token punctuation">;</span>
    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="前置理论"><a href="#前置理论" class="headerlink" title="前置理论"></a>前置理论</h2><p><a name="fbcqR"></a></p>
<h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><p>​        CAP表示一致性，可用性，分区容忍性。下面我们用数据库读写分离来演示</p>
<blockquote>
<p>整体执行流程如下： </p>
</blockquote>
<p>1、商品服务向主数据库写入商品信息（添加商品、修改商品、删除商品） <br />2、主数据库向商品服务响应写入成功。 <br />3、商品服务请求从数据库读取商品信息。 </p>
<h4 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h4><p>​        表示写操作如果成功，各个节点上的读操作，应能读到最新的数据。</p>
<blockquote>
<p>那么应如何保证？</p>
</blockquote>
<ol>
<li>在写入主数据库后应立刻将数据同步到从数据库中</li>
<li>在同步期间应对从数据库加锁，以防止读取到过期的数据</li>
</ol>
<p>那这就存在一定的问题：比如加锁后的性能损耗。</p>
<h4 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h4><p>指的是任何事务操作都能得到响应结果，不会出现响应超时，响应错误的问题。允许我读到之前的数据，但不允许接收不到数据</p>
<blockquote>
<p>如何保证？</p>
</blockquote>
<ol>
<li>数据还是应从主数据库同步到从数据库</li>
<li>不能将资源锁定</li>
<li>可以返回旧数据，甚至是默认数据，但不能返回错误数据或响应超时</li>
</ol>
<h4 id="分区容忍性"><a href="#分区容忍性" class="headerlink" title="分区容忍性"></a>分区容忍性</h4><p>在微服务中数据分布到各个节点中，在网络分区中，允许因为网络问题导致的节点通信失败，但该节点应能继续对外提供服务，举例：1. 主数据库向从数据库同步失败，不能影响节点的读写操作 2. 其中一个节点挂了不能影响另一个。</p>
<blockquote>
<p>如何操作</p>
</blockquote>
<ol>
<li>尽量使用异步操作同步数据，让节点松耦合</li>
<li>多添加从节点，保证备份节点</li>
</ol>
<p>分区容忍性应该是分布式下最重要的特性。</p>
<blockquote>
<p>在CAP理论中，是否三个特性能同时满足？</p>
</blockquote>
<p>​        不能，在分区容忍性必备的情况下，一致性与可用性间存在矛盾，所以应看情况保证CP或者AP的特性。<br /><strong>AP特性</strong>：放弃一致性，比如订单退款，并不是瞬间让钱到账，而是允许二十四小时内到账。<br /><strong>CP特性</strong>：保证一致性，数据必须同步到最新状态，比如跨行转账，必须双方都完后事务才算完成。<br />一般情况下，使用的是AP特性，保证服务的可用。</p>
<h3 id="BASE理论"><a href="#BASE理论" class="headerlink" title="BASE理论"></a>BASE理论</h3><p>​        BASE 是 Basically Available(<strong>基本可用</strong>)、Soft state(<strong>软状态</strong>)和 Eventually consistent (<strong>最终一致性</strong>)三个短语的缩写。BASE理论是对<strong>CAP中AP的一个扩展</strong>，通过牺牲强一致性来获得可用性，<code>当出现故障，允许部分功能不可用，但要保证核心功能可用，允许数据在一段时间内是不一致的，但最终要达到一致状态</code>。满足BASE理论的事务，我们称之为“<strong>柔性事务</strong>”。</p>
<ol>
<li>基本可用：分布式系统中允许损失部分可用功能，来保证核心功能的可用</li>
<li>软状态：因为不要求强一致性，存在过渡状态，比如订单的支付中，数据同步中等状态，最后改为成功状态。</li>
<li>最终一致性：就是从中间状态最终一定达到数据一致。<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="分布式事务解决方案—2PC（两阶段提交）"><a href="#分布式事务解决方案—2PC（两阶段提交）" class="headerlink" title="分布式事务解决方案—2PC（两阶段提交）"></a>分布式事务解决方案—2PC（两阶段提交）</h3>2PC也称为两阶段提交，顾名思义是将事务分为两个阶段，准备阶段（Prepare），提交阶段（Commit）。举个栗子：</li>
</ol>
<blockquote>
<p>张三和李四好久不见，老友约起聚餐，饭店老板要求先买单，才能出票。这时张三和李四分别抱怨近况不如 意，囊中羞涩，都不愿意请客，这时只能AA。只有张三和李四都付款，老板才能出票安排就餐。</p>
<ol>
<li>准备阶段：老板要求张三付款，张三付款。老板要求李四付款，李四付款。 </li>
<li>提交阶段：老板出票，两人拿票纷纷落座就餐。 </li>
</ol>
</blockquote>
<p>​        例子中形成了一个事务，若张三或李四其中一人拒绝付款，或钱不够，店老板都不会给出票，并且会把已收款退回。<br />        整个事务过程由事务管理器和参与者组成，店老板就是事务管理器，张三、李四就是事务参与者，事务管理器负责决策整个分布式事务的提交和回滚，事务参与者负责自己本地事务的提交和回滚。 </p>
<p>而在一些关系型数据库中（Oracle，Mysql）都是支持两阶段提交协议</p>
<ol>
<li> 准备阶段（Prepare phase）：事务管理器给每个参与者发送Prepare消息，每个数据库参与者在本地执行事务，并写本地的Undo/Redo日志，此时事务没有提交。（Undo日志是记录修改前的数据，用于数据库回滚，Redo日志是记录修改后的数据，用于提交事务后写入数据文件)，这时候资源是被锁定的。</li>
<li>提交阶段（commit phase）：如果事务管理器收到了参与者的执行失败或者超时消息时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据事务管理器的指令执行提交或者回滚操作，并释放事务处理过程中使用的锁资源。注意:必须在最后阶段释放锁资源。 <blockquote>
<p>成功情况：</p>
</blockquote>
</li>
</ol>
<p><img src="../../typora-user-images/image-20221202172257629.png" alt="image-20221202172257629"></p>
<blockquote>
<p>失败情况：</p>
</blockquote>
<p><img src="../../typora-user-images/image-20221202172314630.png" alt="image-20221202172314630"></p>
<h4 id="XA方案"><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4><blockquote>
<p>DTP模型定义如下角色：<br><strong>AP</strong>(Application Program)：即应用程序，可以理解为使用DTP分布式事务的程序。<br><strong>RM</strong>(Resource Manager)：即资源管理器，可以理解为事务的参与者，一般情况下是指一个数据库实例，通过资源管理器对该数据库进行控制，资源管理器控制着分支事务。<br><strong>TM</strong>(Transaction Manager)：事务管理器，负责协调和管理事务，事务管理器控制着全局事务，管理事务生命周期，并协调各个RM。<strong>全局事务</strong>是指分布式事务处理环境中，需要操作多个数据库共同完成一个工作，这个工作即是一个全局事务。<br>DTP模型定义TM和RM之间通讯的接口规范叫<strong>XA</strong>，简单理解为数据库提供的2PC接口协议，<strong>基于数据库的XA 协议来实现2PC又称为XA方案</strong>。<br>以上三个角色之间的交互方式如下： </p>
<ol>
<li>TM向AP提供 应用程序编程接口，AP通过TM提交及回滚事务。 </li>
<li>TM交易中间件通过XA接口来通知RM数据库事务的开始、结束以及提交、回滚等。 </li>
</ol>
<p>总结：<br>整个2PC的事务流程涉及到三个角色AP、RM、TM。AP指的是使用2PC分布式事务的应用程序；RM指的是资源管理器，它控制着分支事务；TM指的是事务管理器，它控制着整个全局事务。 </p>
</blockquote>
<p>XA方案的问题：</p>
<ol>
<li>需要数据库支持XA协议</li>
<li>资源锁需要等两个阶段结束才释放，性能差，会导致锁等待</li>
</ol>
<h4 id="Seata"><a href="#Seata" class="headerlink" title="Seata"></a><a href="https://seata.io/zh-cn/docs/overview/what-is-seata.html">Seata</a></h4><p>​        阿里开源的分布式事务框架，传统2PC的问题在Seata中得到了解决，它通过对本地关系数据库的分支事务的协调来驱动完成全局事务，是工作在应用层的中间件。主要优点是<strong>性能较好</strong>，且<strong>不长时间占用连接资源</strong>，它以高效并且对<strong>业务0侵入</strong>的方式解决微服务场景下面临的<strong>分布式事务问题</strong>，它目前提供AT（2PC）、TCC、SAGA 和 XA 事务模式。<br /></p>
<p>​        第一阶段就将本地事务提交了（提交前需要获取全局事务锁），全局事务管理器统计所有分支事务的结果，如果某个分支出现了异常，在本地事务中有一个<code>UNDO_LOG Table</code>的数据表，记录了之前的数据，修改SQL，修改后的数据。可通过它进行事务的回滚，这里不会产生脏数据就是因为本地事务的提交需要先获取全局事务锁。<br />        第二阶段，如果分支事务都成功，则根据事务ID删除<code>undo_log</code>的记录，如果失败，则找到记录进行回滚。<br /></p>
<p>这里业务说明官网已经写的很详细了，这里我不再赘述。<br />Seata的核心就是通过undo log文件让已经提交的事务，仍能回滚。这样就不用长期占用资源了</p>
<blockquote>
<p>小结：</p>
</blockquote>
<p>这里我们介绍了传统的2PC（基于数据库XA协议）和Seata实现2PC的方案。<br />Seata实现的要点：</p>
<ol>
<li>全局事务开始使用 @GlobalTransactional标识 。 </li>
<li>每个本地事务方案仍然使用@Transactional标识。 </li>
<li>每个数据都需要创建undo_log表，此表是seata保证本地事务一致性的关键。</li>
<li>TM获取到的XID会通过远程调用时传入。</li>
</ol>
<p><a name="V9PXj"></a></p>
<h3 id="分布式事务解决方案—TCC"><a href="#分布式事务解决方案—TCC" class="headerlink" title="分布式事务解决方案—TCC"></a>分布式事务解决方案—TCC</h3><blockquote>
<p>TCC与2PC有啥区别？ 为啥使用？</p>
</blockquote>
<p>​        2PC是定义在<code>数据层</code>的，而且有全局锁的存在，也会有一定的性能消耗。TCC是在业务层定义的，更加灵活，但复杂度也会上升，TCC是<code>try，conform，console</code>三个方法的简写。也就是想实现分布式事务，需要实现这三个方法。下面我们使用框架进行演示<br><a name="a5atC"></a></p>
<h4 id="hmily"><a href="#hmily" class="headerlink" title="hmily"></a><a href="https://gitee.com/dromara/hmily">hmily</a></h4><blockquote>
<p>TCC需要注意三种异常处理分别是空回滚、幂等、悬挂:** **</p>
</blockquote>
<p>这里是指TCC中的<code>try，conform，console</code>是三个独立的线程去完成的，且分布式调用具体网络延迟的可能性。</p>
<ol>
<li>空回滚：try还没执行时，执行console。<ol>
<li>解决思路：我们记录TM生成的全局事务ID，来判断try是否已经执行，如果未执行则不执行console。</li>
</ol>
</li>
<li>悬挂：conform或console已经执行了，才开始执行try<ol>
<li>解决思路：在conform和console执行时将执行记录插入数据，当执行try时进行判断</li>
</ol>
</li>
<li>幂等性：conform和console都是默认成功的，当执行失败时，会不断重试，这就需要保证代码代码幂等性<ol>
<li>解决思路：执行前，先通过全局唯一事务ID，查看自己之前是否执行过。</li>
</ol>
</li>
</ol>
<blockquote>
<p>这里有一个拓宽的思路，就是在本地事务中，记录一张记录表，来判断操作是否执行过，由于是在同一本地事务内，所以可以保证该记录的准确性。</p>
</blockquote>
<p><strong>Try，Console，Conform需要严格处理上面的三个问题，下面我们用业务来说明：</strong><br />**场景为 A 转账 30 元给 B，A和B账户在不同的服务。 **</p>
<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 账户A 
try：检查余额是否够30元 扣减30元  （操作是直接提交本地事务的）

confirm： 空 

cancel：增加30元

&#x2F;&#x2F; 账户B
try：增加30元 

confirm： 空 

cancel：减少30元<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><strong>存在问题：</strong><br />1）如果账户A的try没有执行，执行cancel则就多加了30元。 <br />2）由于try，cancel、confifirm都是由单独的线程去调用，且会出现重复调用，所以都需要实现幂等。 <br />3）账号B在try中增加30元，当try执行完成后可能会其它线程给消费了。 <br />4）如果账户B的try没有执行在cancel则就多减了30元。    <br />**问题解决： **<br />1）账户A的cancel方法需要判断try方法是否执行，正常执行try后方可执行cancel。 <br />2）try，cancel、confifirm方法实现幂等。 <br />3）账号B在try方法中不允许更新账户金额，在confirm中更新账户金额。 <br />4）账户B的cancel方法需要判断try方法是否执行，正常执行try后方可执行cancel。 </p>
<pre class="line-numbers language-latex" data-language="latex"><code class="language-latex">// 账户A
try：
	try幂等校验，判断之前执行过没
  try悬挂处理，判断conform和cancel执行过没
	检查余额是否够30元
	扣减30元 

confirm： 空 

cancel：
	cancel幂等校验 
	cancel空回滚处理 
	增加可用余额30元

// 账户B
try：空 

confirm： 
	confirm幂等校验 
	正式增加30元 

cancel：空<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p><a name="ObLOT"></a></p>
<h3 id="分布式事务解决方案—可靠消息最终一致性"><a href="#分布式事务解决方案—可靠消息最终一致性" class="headerlink" title="分布式事务解决方案—可靠消息最终一致性"></a><strong>分布式事务解决方案—可靠消息最终一致性</strong></h3><p>​        也算是Base理论的实现<br />可靠消息：张三给李四发钱，张三的账户先减少钱，然后发送一条消息到消息队列，李四进行接收消息增加钱，保证整个过程的可靠性。</p>
<p>最终一致性：张三发钱后，是不能再回滚的，李四就必须获取并消费消息，保证的最终数据是一致的。**</p>
<blockquote>
<p>这中间有什么问题？</p>
</blockquote>
<p>​        张三向消息队列发送消息就一定会出现网络问题，比如：事务内，张三钱减少了，然后发送数据到消息队列，如果发送错误张三的钱也可以回滚，但是可能消息已经到队列了，但返回时网络延迟发生错误，导致数据回滚，则队列中数据是仍然存在的，所以一定要保证数据操作与消息发送保证<code>原子性</code>。<br />        李四需要必须接收并完成消息，但可能出现问题导致不断的重试，所以有<code>幂等性</code>的问题<br><a name="CQSMK"></a></p>
<h4 id="RocketMq"><a href="#RocketMq" class="headerlink" title="RocketMq"></a><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">RocketMq</a></h4><p><img src="../../typora-user-images/image-20221202172349710.png" alt="image-20221202172349710"></p>
<blockquote>
<p>这是大概的一个流程，我们现在分析可能存在哪些问题：<br /></p>
</blockquote>
<p>​        张三向消息队列成功发送事务消息后,有一个rockmq监听本地事务方法的返回。这时候事务消息并不能被消费，如果张三正常提交本地事务，则该事务消息可被消费，如果本地事务没有提交成功，返回Rollback则事务消息删除，如果返回UnKnown(比如出现某些异常)，则过一段时间，消息队列会再次监听本地事务执行情况。从而保证张三本地事务与事务消息的原子性。<br />李四从消息队列获取消息后，应该进行本地事务并确认该事务消息，如果没有确认，消息队列会不断发给消费者，最终也可人工处理。<br />        可靠消息最终一致性的优点就是如果李四那边要执行很久，张三这边是不用等的，只要最终确认该事务消息即可。进行了异步解耦。<br><a name="NYbFr"></a></p>
<h3 id="分布式事务解决方案—最大努力通知"><a href="#分布式事务解决方案—最大努力通知" class="headerlink" title="分布式事务解决方案—最大努力通知"></a>分布式事务解决方案—最大努力通知</h3><p><a name="wrMQP"></a></p>
<h4 id="RocketMq-1"><a href="#RocketMq-1" class="headerlink" title="RocketMq"></a><a href="https://rocketmq.apache.org/zh/docs/featureBehavior/04transactionmessage">RocketMq</a></h4><p>我们以支付业务为例<br><img src="../../typora-user-images/image-20221202172428011.png" alt="image-20221202172428011"></p>
<p>这里的账户系统就是等待通知的</p>
<p>充值系统当充值完毕后发起通知</p>
<blockquote>
<p>​        这里我们看出最大努力通知的目标：发起通知方通过一定的机制最大努力将业务处理结果通知到接收方。重点在于结果的可知性，自己会主动推送结果，也提供对方来查询的功能，也就是说结果我一定得让你知道。</p>
</blockquote>
<p>具体包括：</p>
<ol>
<li><p>有一定的消息重复通知机制</p>
<ol>
<li>因为接收通知方可能没有接收到通知，此时要有一定的机制对消息重复通知</li>
</ol>
</li>
<li><p>消息校验机制</p>
<ol>
<li>如果尽最大努力也没有通知到接收方，或者接收方消费消息后要再次消费，此时可由接收方主动向通知方查询信息来满足需求。<blockquote>
<p>最大努力通知与可靠消息一致性有什么不同？</p>
</blockquote>
</li>
</ol>
</li>
<li><p>解决思想不同</p>
</li>
</ol>
<p>可靠消息一致性主要保证消息发送方保证把消息发送出去，并消息接收方成功获取并消费该消息，关键在发起方。<br />最大努力通知则侧重消息能被消息接受者收到，或者可以消息接收方主动来查询消息状态，关键在于接收方。</p>
<ol start="2">
<li>业务应用场景不同</li>
</ol>
<p>可靠消息一致性关注的是交易过程的事务一致，以异步的方式完成交易。 <br />最大努力通知关注的是交易后的通知事务，即将交易结果可靠的通知出去。</p>
<ol start="3">
<li>技术解决方向不同</li>
</ol>
<p>可靠消息一致性要解决消息从发出到接收的一致性，即消息发出并且被接收到。<br />最大努力通知无法保证消息从发出到接收的一致性，只提供消息接收的可靠性机制。可靠机制是，最大努力的将消 息通知给接收方，当消息无法被接收方接收时，由接收方主动查询消息（业务处理结果）。</p>
<p><a name="RmZfj"></a></p>
<h4 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h4><p>消息接收方直接监听消息队列<br /></p>
<p><img src="../../typora-user-images/image-20221202172446775.png" alt="image-20221202172446775"></p>
<p>由消息通知系统监听消息队列，然后再通知消息接收方<br /></p>
<p><img src="../../typora-user-images/image-20221202172502997.png" alt="image-20221202172502997"></p>
<blockquote>
<p>这两者有啥不同？</p>
</blockquote>
<p>第一种只适用于内部网络系统，也就是发起方和接收方都归你管理。但如果说消息发送方是第三方系统，人家就不能让你监听人家的消息队列吧，只能说加入一个中间通知系统，然后通过网络请求来通知你。</p>
<p><a name="VCrLJ"></a></p>
<h3 id="分布式事务综合案例分析"><a href="#分布式事务综合案例分析" class="headerlink" title="分布式事务综合案例分析"></a>分布式事务综合案例分析</h3><p>在上面我们已经学习了四种不同的分布式事务解决方案，我们需要进行区分，哪种业务场景需要哪种实现，各个方案有什么区别。<br><a name="qXtwu"></a></p>
<h4 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h4><p><img src="../../typora-user-images/image-20221202172515706.png" alt="image-20221202172515706"></p>
<p>用户向用户中心发起注册请求，用户中心保存用户业务信息，然后通知统一账号服务新建该用户所对应登录账号。<br />针对注册业务，如果用户与账号信息不一致，则会导致严重问题，因此该业务对<strong>一致性要求较为严格</strong>，即当用户服务和账号服务任意一方出现问题都需要<strong>回滚事务</strong>。</p>
<blockquote>
<p>业务分析</p>
</blockquote>
<ol>
<li>使用最大努力通知<ol>
<li>不可以，用户服务注册好后，通知账户服务，这里只能说不断通知，没法做到回滚</li>
</ol>
</li>
<li>使用可靠消息一致性<ol>
<li>不可以，用户发送事务消息，然后进行本地事务，如果成功了，也无法保证账户服务成功消费，无法回滚</li>
</ol>
</li>
<li>TCC方案<ol>
<li>可行，支持事务回滚，性能好，但实现复杂</li>
</ol>
</li>
<li>2PC方案<ol>
<li>可行，支持事务回滚，有性能损耗，但简单<br><a name="TURmk"></a><h4 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h4><img src="../../typora-user-images/image-20221202172528108.png" alt="image-20221202172528108"></li>
</ol>
</li>
</ol>
<p><br />        用户向用户中心提交开户资料，用户中心生成开户请求号并重定向至银行存管系统开户页面。用户设置存管密码并确认开户后，银行存管立即返回“请求已受理”。在某一时刻，银行存管系统处理完该开户请求后，将调用回调地址通知处理结果，若通知失败，则按一定策略重试通知。同时，银行存管系统应提供开户结果查询的接口，供用户中心校对结果。</p>
<blockquote>
<p>业务分析</p>
</blockquote>
<ol>
<li>Seata方案<ol>
<li>不可行，银行存管系统不能让你去编写业务代码吧</li>
</ol>
</li>
<li>TCC方案<ol>
<li>不可行，银行存管系统不会让你写try，conform，console吧</li>
</ol>
</li>
<li>可靠消息最终一致性<ol>
<li>不可行，银行系统不会和用户系统直接通过MQ交互</li>
</ol>
</li>
<li>最大努力通知<ol>
<li>可行，我们发送请求给银行系统，银行系统最终给我返回结果，或者我们也可主动查询<br><a name="gnVFt"></a><h4 id="场景三"><a href="#场景三" class="headerlink" title="场景三"></a>场景三</h4><img src="../../typora-user-images/image-20221202172553120.png" alt="image-20221202172553120"></li>
</ol>
</li>
</ol>
<p>管理员对某标的满标审批通过，交易中心修改标的状态为“还款中”，同时要通知还款服务生成还款计划。</p>
<blockquote>
<p>业务分析</p>
</blockquote>
<ol>
<li>使用Seata<ol>
<li>不行，生成计划如果过久，Seata锁定资源</li>
</ol>
</li>
<li>使用TCC<ol>
<li>本需求对业务一致性要求较低，因为生成还款计划的时长较长，所以不要求交易中心修改标的状态为“还款中”就立 即生成还款计划  ，所以本方案不适用。</li>
</ol>
</li>
<li>使用努力通知<ol>
<li>满标审批通过后由交易中心向还款服务发送通知要求生成还款计划，还款服务并且对外提供还款计划生成结果校对接口供其它服务查询，最大努力  通知方案也适用本场景  。</li>
</ol>
</li>
<li>使用消息一致性<ol>
<li>满标审批通过后由交易中心修改标的状态为“还款中”并且向还款服务发送消息，还款服务接收到消息开始生成还款计划，基本于MQ的可靠消息一致性方案适用此场景  。</li>
</ol>
</li>
</ol>
<p><a name="WqaJQ"></a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>分布式事务对比分析</strong>:<br /><strong>2PC</strong> 最大的诟病是一个阻塞协议。RM在执行分支事务后需要等待TM的决定，此时服务会阻塞并锁定资源。由于其 阻塞机制和最差时间复杂度高， 因此，这种设计不能适应随着事务涉及的服务数量增加而扩展的需要，很难用于并 发较高以及子事务生命周期较长 (long-running transactions) 的分布式服务中。</p>
<p>如果拿<strong>TCC</strong>事务的处理流程与2PC两阶段提交做比较，2PC通常都是在跨库的DB层面，而TCC则在应用层面的处 理，需要通过业务逻辑来实现。这种分布式事务的实现方式的优势在于，可以让应用自己定义数据操作的粒度，使 得降低锁冲突、提高吞吐量成为可能。而不足之处则在于对应用的侵入性非常强，业务逻辑的每个分支都需要实现 try、conﬁrm、cancel三个操作。此外，其实现难度也比较大，需要按照网络状态、系统故障等不同的失败原因实 现不同的回滚策略。典型的使用场景：满，登录送优惠券等。</p>
<p><strong>可靠消息最终一致性</strong>事务适合执行周期长且实时性要求不高的场景。引入消息机制后，同步的事务操作变为基于消 息执行的异步操作, 避免了分布式事务中的同步阻塞操作的影响，并实现了两个服务的解耦。典型的使用场景：注 册送积分，登录送优惠券等。</p>
<p><strong>最大努力通知</strong>是分布式事务中要求最低的一种,适用于一些最终一致性时间敏感度低的业务；允许发起通知方处理业 务失败，在接收通知方收到通知后积极进行失败处理，无论发起通知方如何处理结果都会不影响到接收通知方的后 续处理；发起通知方需提供查询执行情况接口，用于接收通知方校对结果。典型的使用场景：银行通知、支付结果 通知等。<br /></p>
<p><img src="../../typora-user-images/image-20221202172607739.png" alt="image-20221202172607739"><br /><strong>总结</strong>：</p>
<p>​        在条件允许的情况下，我们<strong>尽可能选择本地事务</strong>单数据源，因为它减少了网络交互带来的性能损耗，且避免了数据 弱一致性带来的种种问题。<strong>若某系统频繁且不合理的使用分布式事务</strong>，应首先从整体设计角度观察服务的拆分是否 合理，是否高内聚低耦合？是否粒度太小？分布式事务一直是业界难题，因为网络的不确定性，而且我们习惯于拿 分布式事务与单机事务ACID做对比。无论是数据库层的XA、还是应用层TCC、可靠消息、最大努力通知等方案，都没有完美解决分布式事务问题，它们 不过是各自在性能、一致性、可用性等方面做取舍，寻求某些场景偏好下的权衡。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>后端风云</title>
    <url>//post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%90%8E%E7%AB%AF%E9%A3%8E%E4%BA%91.html</url>
    <content><![CDATA[<h1 id="后端风云"><a href="#后端风云" class="headerlink" title="后端风云"></a>后端风云</h1><p>​        本文简单概况了一下刘欣老师的《码农翻身》的后端风云章，这本书强烈推荐给大家，每看一遍都有不同的感觉，通俗易懂且知识面大而全。居家旅行，必备良药！！！</p>
<h2 id="早期初级阶段："><a href="#早期初级阶段：" class="headerlink" title="早期初级阶段："></a>早期初级阶段：</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek1qz02j30ly0bcaal.jpg" alt="image-20220820220959059"></p>
<p>​        在我们早期学习 <code>javaWeb</code>阶段，将订单模块儿，购物车模块儿，支付模块儿都写在了一个项目中，并访问一个Mysql数据库，这在自己练手项目中是没问题的，但如果系统上线，有大量的用户同时访问该系统，Tomcat服务器首先需要考虑能不能支撑住大的并发量（默认150，当超过250时，就应该考虑的服务器的集群），其次是Mysql数据库,在高并发两三千也就差不多了，要知道Mysql数据库读取数据是很慢的操作，它本质是从硬盘中读取文件的。</p>
<h2 id="优化点1-使用缓存"><a href="#优化点1-使用缓存" class="headerlink" title="优化点1:使用缓存"></a>优化点1:使用缓存</h2><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejxz2vfj30kn06raaf.jpg" alt="image-20220820120628253"></p>
<p>可以看到我们给中间加了一个Redis中间件作为缓存，现在服务器需要获取数据，先到缓存中找数据，如果找不到再去Mysql中找数据，找到数据后再写回Redis中，这样下次请求数据可以直接在缓存中获取数据，那缓存的好处是啥，缓存是加载在内存中的，读取数据那肯定是快的多。这样就减轻Mysql数据库的压力。但是如果用户每次请求先去缓存找，如果都没找到，那请求还是落在了Mysql上，这个可能导致缓存击穿，缓存雪崩。</p>
<blockquote>
<p>提问：如果数据库中数据修改了，但是缓存中还是之前的数据该怎么办？</p>
<p>为了保证数据的一致性下面的方案是否可行？</p>
<ol>
<li>先更新数据库中，再更新缓存</li>
<li>先删除缓存，再更新数据库</li>
<li>先更新数据库，再删缓存</li>
<li>数据设置过期时间</li>
</ol>
<p>这里参考文章：<a href="https://blog.csdn.net/diweikang/article/details/94406186">https://blog.csdn.net/diweikang/article/details/94406186</a></p>
</blockquote>
<h2 id="优化点2-多台缓存"><a href="#优化点2-多台缓存" class="headerlink" title="优化点2:多台缓存"></a>优化点2:多台缓存</h2><p>之前我们在服务器与数据库中间加上一个缓存，来减轻数据库的压力，和提高数据读取速度，但如果只有一台缓存，后期也会因为内存用完而耗尽，缓存要是挂机了，又是数据库直面大量请求了，那我们多部署几个缓存服务器来分摊一下压力。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek34irtj30pc09ugmh.jpg" alt="image-20220820131146797"></p>
<p>当部署多个缓存服务器时，又出现问题了，我读取和存放数据的时候，我用哪个服务器啊，我们先不说具体用啥算法，我们先想想我们需要啥？</p>
<ol>
<li>我存的地方和我找的地方得一致，不能我存在缓存1，结果去缓存3找，那肯定是没数据</li>
<li>我存放数据的均匀的落在这三个缓存上，不能说饿的饿死，撑得撑死。</li>
</ol>
<h3 id="余数算法"><a href="#余数算法" class="headerlink" title="余数算法"></a>余数算法</h3><p>最简单：在找数据或者写数据时，先求Hash值，然后对Hash值进行取余，这样可以均匀的将请求落在三个缓存中。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek0ropij30i007z74w.jpg" alt="image-20220820162701218"></p>
<p>​        缺点也很明显：之前我用三个缓存好好的，数据存储的也没问题，现在要再加一个缓存，那现在读数据和写数据取余可就变成4了，之前的数据可就都访问不到了，请求一下子又干到数据库了</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejv7pnhj30n507qgmi.jpg" alt="image-20220820162729067"></p>
<h3 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h3><p>一致性Hash算法不能完全的解决这个问题，但是可以做到大部分数据可以照常工作</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek2n3qfj30j70c174f.jpg" alt="image-20220820163202097"></p>
<p>​        比方说我们在这个圆上标注 <code>0-2^32-1</code>个点，三台redis服务器均匀的落在这个图上，当有数据要查找或插入时，还是先取Hash值，使落在这个圆的范围上，如果超出了那就取余。比方说这是插入的这个点落在了A到B之前的位置，那就让它顺时针找它最近的那个服务器点，数据存放在那里，这时候就找到了B，如果是落在了C到A的范围，那还是顺时针走，走到A的位置。</p>
<p>​        假如说突然又添加了一个服务器D，假如插在了B和C之间。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek18qiqj30i70c374j.jpg" alt="image-20220820163842694"></p>
<p>​        那么现在要查询数据时，点位落在了B到C之前，原来是到C去读取数据，现在就看是不是在B和D之间了，如果在这之间那就去D找，如果落在了D到C之间，那还是去C找。这时候就发现到D找的数据肯定是找不到的，但是其他区域的数据都不会被影响到啊，这样就避免了全部缓存穿透导致的缓存雪崩。</p>
<blockquote>
<p>这里的一个前提条件就是服务器经过Hash计算后需要均匀的落在这个区间内，否则就会有部分的缓存负责过高，有的负载过低，也就是<code>数据倾斜</code></p>
</blockquote>
<p>​        比方说我们个人开发的小项目，就用两个缓存服务器，那这么大的一个圆就放两个点，可能导致数据都集中到了一个服务器上，导致压力过大</p>
<blockquote>
<p>解决这个问题的办法有：<code>虚拟服务器（虚拟节点映射）</code></p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejvpj1aj30lg0iemys.jpg" alt="image-20220820165011054"></p>
<p>就是将一个真实服务器看做成多态虚拟的服务器，均匀的分布到圆上。</p>
<p>保证数据均匀的存放在真实的缓存服务器上</p>
<h3 id="Hash槽算法"><a href="#Hash槽算法" class="headerlink" title="Hash槽算法"></a>Hash槽算法</h3><p>槽可以理解为分区，数据都是存放在分区中的，然后分区与机器进行动态绑定。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejyvqptj30m906sgm7.jpg" alt="image-20220820200524038"></p>
<p>​        比方说现在要存储(Key,Value),先对Key求Hash值，然后对16384求余数，看到余数落在那个槽位，就放到哪个服务器。是不是感觉第三种算法和余数算法和一致性Hash算法都有点儿像，类似于一个综合的算法</p>
<p>​        那假如我现在要新增一个节点怎么办，现在有三个服务器，假如再来一个服务器4，就从服务器1，服务器2，服务器3中各取出一部分槽和数据。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejyfi27j30ml0b5759.jpg" alt="image-20220820201220590"></p>
<p>​        那相应的我请求请求的时候选择哪个节点，这里客户端可以向任意一个节点发送请求，例如：get(key1)这个请求我发送给了服务器1，但是数据是在服务器2，则服务器会将请求重定向到服务器2。这也叫做<code>Redis Cluster</code></p>
<blockquote>
<p>为什么redis集群不采用一致性哈希算法？</p>
</blockquote>
<p>​        一个直观的区别就是一致性Hash，无法很好的控制数据的分布，比方说我是有几个服务器，但是各个硬件条件并不一样，想让配置比较好的多放一些数据，配置差点儿的就少部署一些，可以做到精确控制。</p>
<h2 id="优化点3-故障转移"><a href="#优化点3-故障转移" class="headerlink" title="优化点3:故障转移"></a>优化点3:故障转移</h2><p>​        比方说我原先有三个缓存服务器，每个服务器负责一部分Hash槽，假如这时候一个服务器挂了，那这部分数据就算丢失了，这部分的请求也就又干到数据库了，现在我们利用Redis提供的 <code>master-slave</code>功能，就是一个大哥带几个小弟，如果大哥被干掉了，小弟中一个人就去当大哥管事儿。大哥与小弟之前的数据是同步的，以确保小弟可以顺利的继位</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek4j9zfj30n50f00u4.jpg" alt="image-20220820205141078"></p>
<h2 id="优化点4-高可用的Tomcat"><a href="#优化点4-高可用的Tomcat" class="headerlink" title="优化点4:高可用的Tomcat"></a>优化点4:高可用的Tomcat</h2><p>​        在文章的最开始我们就说了Tomcat默认支持的并发量并不大，且如果它挂掉了，那完蛋了，服务直接用不了了，所以索性我们学习一下Redis，多部署几个Tomcat服务器，让请求均摊到各个Tomcat服务器之间，这样就可以有效的降压，如果有一个服务器挂了，其他的服务器还能继续干。</p>
<blockquote>
<p>问题：Tomcat的Session信息是不能服务共享的，假如用户A在Tomcat服务器1上进行登陆了，并将登陆信息保存在Session中，现在用户又请求了，被轮训到了服务器2上，但是服务器2是没有该用户的Session信息的，这又得让用户去登陆</p>
</blockquote>
<p>可以使用Redis缓存来处理。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejzumt3j30f80a574n.jpg" alt="image-20220820211730816"></p>
<h2 id="优化点5-使用Nginx"><a href="#优化点5-使用Nginx" class="headerlink" title="优化点5:使用Nginx"></a>优化点5:使用Nginx</h2><p>其实在之前我一直对Nginx都是懵逼状态，明明可以直接访问Tomcat，为啥要中间加一个Nginx。我对Nginx最直观的使用就是通过端口去访问服务器静态文件，去做个人博客，但现在按照我们优化点4所说的部署多个Tomcat服务器，那前端到底访问哪个Tomcat呢？总不能写死到前端代码里去轮询吧，如果我们在中间加一个Nginx去做代理，就会舒服的多。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejx1jhgj30s00agdgt.jpg" alt="image-20220820212437837"></p>
<p>这里我就不说文绉绉的定义了，可以去官网上查</p>
<h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejw7k9mj30jm0eujsa.jpg" alt="image-20220820212745193"></p>
<p>​        这里说一个例子就行了，VPN翻墙，你想访问国外网址，但是电脑受国内管控，无法访问，那就需要一个代理，你请求代理，代理请求国外服务器，然后数据返回。</p>
<h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek2729wj30jt0dmab1.jpg" alt="image-20220820213214154"></p>
<p>比方说我们现在上网搜索<a href="http://www.baidu.com,我们只知道这个域名,但实际上它可能只是一个代理,真实的请求是转发到内部的其他服务,这样也可以保护真实的服务器.和正向代理的区别是,正向代理是知道我要找谁,反向代理是我也不知道谁真实的服务./">www.baidu.com,我们只知道这个域名，但实际上它可能只是一个代理，真实的请求是转发到内部的其他服务，这样也可以保护真实的服务器。和正向代理的区别是，正向代理是知道我要找谁，反向代理是我也不知道谁真实的服务。</a></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>就是将请求均匀的发送到各个服务器间</p>
<p>其中有轮训方式</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek50a64j30h70by3z5.jpg" alt="image-20220820213520428"></p>
<p>有权重方式</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek3l5l8j30jx0d9dgq.jpg" alt="image-20220820213640770"></p>
<h3 id="动静分离"><a href="#动静分离" class="headerlink" title="动静分离"></a>动静分离</h3><p>很直观的，我们可以通过Nginx直接访问静态文件。那Tomcat也可以访问静态文件啊，但是低，且一般Tomcat是作为业务逻辑服务器的，如果将动态资源和静态资源都放在Tomcat中，就会消耗额外的一部分性能，</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejxhy9fj30k80c9mxr.jpg" alt="image-20220820214118620"></p>
<h3 id="高可用的Nginx"><a href="#高可用的Nginx" class="headerlink" title="高可用的Nginx"></a>高可用的Nginx</h3><p>​        我们已经发现如果一条链路中如果某个地方只有一个工作的，那一旦它挂机了，后续工作都无法进行了。所以按照之前的设计我们再部署一个Nginx服务器，但是与Tomcat不同的是，Nginx是直面客户端的，所以即使是多个服务，对外也只能暴露一个Ip地址，从外面看就只有一个服务，通过 <code>Keepalived</code>将多个Nginx服务形成<code>master-slave</code>关系，一个挂了，另一个补上，那我们的结构图又得更新了。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejut0lgj30sm09ejsf.jpg" alt="image-20220820214735780"></p>
<h2 id="优化点6-数据库的读写分离"><a href="#优化点6-数据库的读写分离" class="headerlink" title="优化点6:数据库的读写分离"></a>优化点6:数据库的读写分离</h2><p>​        我们看上面的系统架构图后发现似乎就剩数据库是孤家寡人了，但如果把数据多部署几个，如果每个都可以进行读写操作，那服务之间的数据一致性就很难再确定了，而对数据库的大部分操作都是读操作，写操作相比要少的多。而且我们都知道数据库的共享锁和写锁互斥，这也是影响效率的，如果能分开的话，速度方面，安全方面肯定更稳健。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek0a4fcj30cu0c3gm3.jpg" alt="image-20220820215503380"></p>
<p>假如有一天master挂掉了，那在剩余的slave中选一个，是不是就发现，多服务部署的思想很多都是一样的。就是为了保证高可用性。</p>
<blockquote>
<p>但是Tomcat可就犯难了，难倒我每次请求前都判断一下是读操作还是写操作，再根据不同的类型，发送不同的数据库吗？</p>
</blockquote>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejwlg47j30gs09i3z1.jpg" alt="image-20220820215954215"></p>
<h3 id="使用MySQL-Proxy"><a href="#使用MySQL-Proxy" class="headerlink" title="使用MySQL Proxy"></a>使用MySQL Proxy</h3><p>发挥我们抽象的大脑，只要有这种不属于我们应该管的事，我们就把活儿抛出去，我们再增加一个抽象层。将这些脏活累活统一交给Mysql Proxy去管理</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hejzd2b8j30h60dzt9l.jpg" alt="image-20220820220324413"></p>
<h2 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h2><p>我们的系统已经可见性的复杂的多了，但为了保证服务不会突然挂掉了，这些也是必须的。至于后期还有更多的优化，例如ES，MQ，熔断降级，分布式注册中心，配合中心，等各种骚操作后面再不断加呗，一口吃不成胖子。</p>
<p><img src="https://tva1.sinaimg.cn/large/008vxvgGly1h8hek414svj30jr0f4gmy.jpg" alt="image-20220820220832414"></p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
  </entry>
  <entry>
    <title>手写线程池</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E6%89%8B%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0.html</url>
    <content><![CDATA[<h1 id="手写线程池"><a href="#手写线程池" class="headerlink" title="手写线程池"></a>手写线程池</h1><blockquote>
<p>​    我们从初级阶段自己创建线程去异步执行任务，到后期使用线程池不断执行任务，原理书上都有，但都是字面意思，无法深入理解，所以打算自己进行实现。</p>
</blockquote>
<ol>
<li>阶段一：</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"异步任务执行。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>阶段二:</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽离出一个统一接口，具体实现由子类完成</span>
<span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 定义各自的子类去实现execute方法</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 底层还是执行的 new Thread(r)，虽然现在看起来是有点儿麻烦，但更方便我们进行扩展了</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>阶段三：上面我们执行一次方法就创建一个线程，先不说会不会OOM，就线程的创建与销毁都够损耗性能的。我们能不能只使用一个异步线程，但是执行多个任务呢?</li>
</ol>
<blockquote>
<p>这里我之前有一个小疑惑，一般任务都是在<code>new Thead(这里就指定好需要完成的任务).start()</code>，那假如这个线程执行完了后，我还能不能再指定一个新的任务，让它再启动，后来发现不行，执行完的线程就已经挂了，不能再进行复用，那大家平时说的线程复用是啥意思呢？ 所以转化一些思路，是线程一直在运行，在这期间不断读取一个任务表，第一个任务完成后，马上干第二个任务。以此类推，让一个线程完成多个任务。</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 抽离出一个统一接口，具体实现由子类完成</span>
<span class="token keyword">interface</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个阻塞任务队列</span>
    <span class="token keyword">static</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 使用一个线程不断从任务队列中读取数据，然后执行，达到复用的效果</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"异步线程开始不断读取任务。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 因为无限循环，所以线程会一致运行，后期我们会再升级，让它优雅的结束</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// take方法是阻塞方法，当队列中无任务时，线程阻塞</span>
                    <span class="token class-name">Runnable</span> poll <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">// 当读取到任务时，就开始执行。</span>
                    poll<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 新来的任务直接添加到队列中</span>
        task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li><p>阶段四：上面仍有许多潜在的问题</p>
<ol>
<li>其中一个任务报错且未处理，后面的任务别想执行了。</li>
<li>其中一个任务耗时过久，新来的任务迟迟不能处理，任务会不断挤压，造成OOM。</li>
<li>未利用多核CPU的优势</li>
</ol>
<p>那这里很简单，不是嫌少嘛，我多安排几个线程去不断监控任务队列，这里一定注意队列需要有锁保护，不能一个任务多个线程都处理一遍</p>
</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个阻塞任务队列</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 需要指定多少个线程去执行</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 新来的任务直接添加到队列中</span>
        task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token function">myExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>
        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 初始化制定线程数去不断监控队列</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 使用一个线程不断从任务队列中读取数据，然后执行，达到复用的效果</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"异步线程开始不断读取任务。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">THREAD_SIZE</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    <span class="token comment">// 因为无限循环，所以线程会一致运行</span>
                    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token comment">// take方法是阻塞方法，当队列中无任务时，线程阻塞</span>
                        <span class="token class-name">Runnable</span> poll <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token comment">// 当读取到任务时，就开始执行。</span>
                        poll<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="5">
<li><p>阶段五：上面有哪些问题呢？</p>
<ol>
<li>我们初始化时直接创建了<code>corePoolSize</code>个数量的线程，如果一直没任务不就浪费了嘛，还占内存，我们能不能指定<code>corePoolSize</code>后，暂时不创建线程，每次执行任务时，判断当前工作线程数，是否小于<code>corePoolSize</code>,如果小于，我就创建新的线程，否则我就不创建线程了。</li>
<li>传入RejectedExecutionHandler对象，任务队列不能无限放置吧，所以当我们判定任务队列已经满了的时候，就需要使用用户传来的RejectedExecutionHandler进行处理，也就是决定这些任务该怎么处理。</li>
<li>传入ThreadFactory对象，对线程进行统一的管理，如线程名，需要执行额外的逻辑，而不直接new Thread()。</li>
<li>线程自我摧毁装置，当一定时间内都没有获取到任务，就默认线程池不需要太多的线程了，则进行销毁</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">class</span> myExecutor <span class="token keyword">implements</span> <span class="token class-name">Executor</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建一个阻塞任务队列</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">BlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定制任务队列长度，当队列长度溢出，触发溢出策略</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> queueSize<span class="token punctuation">;</span>

    <span class="token comment">// 需要指定多个线程去执行</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">;</span>

    <span class="token comment">// 任务溢出策略</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">;</span>

    <span class="token comment">// 利用工厂模式统一管理线程的创建，例如线程名等信息</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ThreadFactory</span> factory<span class="token punctuation">;</span>

    <span class="token comment">// 检查在线线程数量</span>
    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> workThreadSize <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      	<span class="token comment">// 这里应该进行同步，因为判断与添加是两个操作</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果线程数不到核心线程数，没进入一个任务，就添加一个线程</span>
            <span class="token function">addThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">taskAdd</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        factory<span class="token punctuation">.</span><span class="token function">newThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
          <span class="token punctuation">&#125;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token class-name">Runnable</span> poll <span class="token operator">=</span> task<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>poll <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token comment">//但当我们任务量可能已经渐渐平缓了，就不再需要那么多线程监听了,这里我们默认可以只剩5个，当然也可以作为参数调整</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Executor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                    <span class="token comment">// 让线程结束</span>
                                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                    workThreadSize<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">&#125;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token comment">// 当读取到任务时，就开始执行。</span>
                    poll<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 通过一个自旋锁，来保证在线线程数准确</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> workThreadSize<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>workThreadSize<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>size<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">taskAdd</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>task<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span>queueSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 这里可以定义不同的任务溢出策略</span>
            handler<span class="token punctuation">.</span><span class="token function">rejectedExecution</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        task<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token function">myExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> thread_size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queueSize <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> thread_size<span class="token punctuation">;</span>
        <span class="token comment">// 如果线程池队列满了丢掉这个任务并且抛出RejectedExecutionException异常。</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token function">myExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> queueSize<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">,</span> <span class="token class-name">RejectedExecutionHandler</span> handler<span class="token punctuation">,</span> <span class="token class-name">ThreadFactory</span> factory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>queueSize <span class="token operator">=</span> queueSize<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token constant">CORE_POOL_SIZE</span> <span class="token operator">=</span> <span class="token constant">CORE_POOL_SIZE</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ol>
<p>这里JUC包下定义的参数<img src="../../typora-user-images/image-20221028210505748.png" alt="image-20221028210505748"></p>
<p>这里是我们，自己定义的，唯一不一样就是少了<code>maximumPoolSize</code>,也就是再对线程数量进行控制，这里感兴趣的朋友可以自己试着去做。</p>
<p><img src="../../typora-user-images/image-20221028210704145.png" alt="image-20221028210704145"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    如果你能跟随着思路完成到这里，我觉得这块儿知识点，你应该是没问题了，具体代码细节，或者是组件如何使用，就靠你们自己去查询和实验。我感觉我的代码还是通俗易懂的。这里再次感谢<code>低并发编程</code>公众号，我感觉干活满满，推荐大家读一读。</p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>线程池</tag>
      </tags>
  </entry>
  <entry>
    <title>并发编程</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<h2 id="基础的概念"><a href="#基础的概念" class="headerlink" title="基础的概念"></a>基础的概念</h2><h3 id="什么是并发操作？"><a href="#什么是并发操作？" class="headerlink" title="什么是并发操作？"></a>什么是并发操作？</h3><p>利用多核CPU去完成任务，类似于使用影分身去完成不同的作业，这肯定比我一个人一个个写要快的多</p>
<h3 id="什么时候可以使用并发？"><a href="#什么时候可以使用并发？" class="headerlink" title="什么时候可以使用并发？"></a>什么时候可以使用并发？</h3><p>当有多核CPU时。如果只有一个CPU，那并发实际上只是线程的不断切换，好比我在数学作业上先写点儿，再到语文上再写点儿，因为处理的很快，给人的感觉是同时操作的。但实际上只会比原来更慢(因为有线程切换的损耗)。</p>
<h3 id="如何使用并发编程？"><a href="#如何使用并发编程？" class="headerlink" title="如何使用并发编程？"></a>如何使用并发编程？</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BasicLearn</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 无返回值</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 有返回值</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">" a "</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li>实现Runnable或Callable接口，从写run方法。</li>
<li>继承Thread类，从写run方法</li>
</ol>
<h3 id="实现Runnable-和-继承Thread有什么区别"><a href="#实现Runnable-和-继承Thread有什么区别" class="headerlink" title="实现Runnable 和 继承Thread有什么区别"></a>实现Runnable 和 继承Thread有什么区别</h3><ol>
<li>Java是单继承结构，如果继承Thread，无法继承其他的类，接口更灵活</li>
<li>继承Thread开销会大一些，如果我们只要求可运行</li>
</ol>
<h3 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h3><ol>
<li><p>普通线程，就是我们上面所讲的内容</p>
</li>
<li><p>守护线程，也叫做<code>Daemon</code>，当所有非守护线程结束后，守护线程就会被回收。比如说垃圾回收就是守护线程</p>
<ol>
<li>注意守护线程不能操作重要的数据，因为无法保证可以执行完后，守护线程才停止。</li>
</ol>
</li>
</ol>
<h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><ol>
<li>New ：创建好，但还未启动</li>
<li>Runable ：Runable本身是两个状态，一个是Runable表示等待CPU时间片的线程，一个是Running表示正在使用时间片的线程</li>
<li>Blocked ：阻塞住的线程 </li>
<li>Waiting  ：一直等待线程，直到被唤醒</li>
<li>Time Waiting ：有时间的等待，到时间自己醒了</li>
<li>terminted ：线程结束</li>
</ol>
<h3 id="线程的中断"><a href="#线程的中断" class="headerlink" title="线程的中断"></a>线程的中断</h3><p>​    听起来线程的中断有点儿像人家正好好干活，你突然把人家赶走了。但实际上是这个线程在 Blocked 或 Waiting 时，我们将其打断，让他别等了。</p>
<p>​    我们常用：<code>interrupt() </code> 来打断线程，打断后会抛出 InterruptedException，从而提前结束该线程。但是<strong>不能中断 I/O 阻塞和 synchronized 锁阻塞</strong>。也是比较好判断的就是你看方法的调用是否有InterruptedException,如果有说明可以被打断。</p>
<p>​    如果该线程好好干活，我们是无法将其打断的。调用 <code>interrupt()</code>，只会是将其内部状态作为修改，通过 <code>interrupted()</code> 我们可以看这个线程是否被打断过，在 <code>while（true）中我们可以通过使用 interrupted() 来判断是否跳出循环 </code></p>
<p>​    在使用 Executor 去管理多个线程任务时，有方法 <code>shutdown() 和 shutdownNow()</code>，区别是 shutdown() 是等所有线程执行完后进行结束。而shutdownNow()表示现在就可以结束了。</p>
<h3 id="多线程的缺点"><a href="#多线程的缺点" class="headerlink" title="多线程的缺点"></a>多线程的缺点</h3><p>​    一旦涉及到多线程，总是面临着数据安全的问题，如果一组操作没有原子性，那在多线程的情况下就会出现数据安全的问题。所以为了数据的安全性，我们引出了锁的概念，线程去抢同一把锁，谁抢到了谁去操作数据，其他人就在外面等着（阻塞），直到锁被之前持有的线程释放。锁的实现分为很多种，我们下面会介绍。</p>
<h3 id="线程各个操作导致的状态"><a href="#线程各个操作导致的状态" class="headerlink" title="线程各个操作导致的状态"></a>线程各个操作导致的状态</h3><p>​    这里我们常在使用锁的情况下来描述，比方说多个线程抢同一把锁，如果使用 <code>Thread.sleep() 或 Thread.yield() </code>是否会放回锁。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 线程进入Runable，但未释放锁资源</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 线程进入TIMED_WAITING，但未释放锁资源</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 线程进入Waiting状态，释放锁资源</span>
objectLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 底层实际用的wait(), 释放锁资源</span>
<span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里有个小问题：<code>objectLock.notify() 与 objectLock.notifyall() </code> 有什么区别？</p>
</blockquote>
<p>notify是释放一个线程去抢锁，notifyall是释放所有等待的去抢锁，但只有一个能抢到。这看起来感觉不到区别。</p>
<p>实际上每个对象底层有两个池：锁池 和 等待池</p>
<ol>
<li>在锁池的是阻塞状态，当锁被释放，所有在锁池的对象都有机会获得锁</li>
<li>在等待池的是等待状态，是没有资格去抢锁的，只能被人唤醒</li>
</ol>
<p>​    当A线程抢到锁后，B线程没抢到就进入了锁池，A线程虽然抢到了，但如果是需要的资源没到位，使用了wait，进入的是等待池。这时候B就可以获取锁，并执行业务了，但A因为在等待池，所以即便是锁没被占用，自己仍无法操作，直到被唤醒。</p>
<p>​    notify() 是将等待池的一个线程加入锁池，而notifyall() 是将等待池中的所有线程加入锁池。</p>
<h3 id="当一个线程需要等待另一个线程的资源"><a href="#当一个线程需要等待另一个线程的资源" class="headerlink" title="当一个线程需要等待另一个线程的资源"></a>当一个线程需要等待另一个线程的资源</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> start <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> objectLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectLock<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        objectLock<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ReentrantLock</span> reentrantLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Condition</span> condition <span class="token operator">=</span> reentrantLock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        condition<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        condition<span class="token punctuation">.</span><span class="token function">signalAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LockSupport</span><span class="token punctuation">.</span><span class="token function">unpark</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我们主线程需要等待一个启动线程返回的结果，我们可以直接使用<code>Thread.join()</code>,等待该线程将资源返回，但这种方式必须要等到线程结束，主线程才能去获取，非常不灵活。因此我们常使用 <code>Object.wait() 与 Object.notify()</code>  方法可以更加主动的去等待与被通知。但有什么缺陷呢？</p>
<ol>
<li> 必须在静态代码块儿中使用，负责会抛出异常，这一点在 <code>condition.wait() 与condition.signal() </code>也存在</li>
<li>必须先<code>wait() 再 notify()</code> 否则会报错，因此我们常用：<code>LockSupport.park();</code></li>
</ol>
<p>LockSupport.park(); 底层使用的Unsafe类，它是可以操作线程和内存的，所以说不安全，要规范使用，在Atomic类中底层调用的也是它。而且它不能被直接获取，只能通过反射来获取。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">UnsafeAccessor</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> unsafe<span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Field</span> theUnsafe <span class="token operator">=</span> <span class="token class-name">Unsafe</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"theUnsafe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            theUnsafe<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            unsafe <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span> theUnsafe<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token class-name">Unsafe</span> <span class="token function">getUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> unsafe<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a>Volatile</h3><p>​        这里设计线程的工作内存与主内存数据的交互，为什么有工作内存，就是因为CPU对寄存器的操作远远超出了对内存的操作，所以线程是工作内存拷贝主内存，来使得CPU操作工作内存更快速，</p>
<h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>​        多个线程操作同一份数据，如果在A线程中对被Volatile修饰的对象做修改后，其他线程是可以立刻知道的。</p>
<h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>​        禁止指令重排，指令重排是一种计算机运行代码的优化手段，但可能造成奇怪的bug</p>
<h4 id="原子性（具有误导性）"><a href="#原子性（具有误导性）" class="headerlink" title="原子性（具有误导性）"></a>原子性（具有误导性）</h4><p>​        Java 内存模型保证了 read、load、use、assign、store、write、lock 和 unlock 操作具有原子性，例如对一个 int 类型的变量执行 assign 赋值操作，这个操作就是原子性的。 Java 内存模型允许虚拟机将没有被 volatile 修饰的 64 位数据（long，double）的读写操作划分为两次 32 位的操作来进行，即 load、store、read 和 write 操作可以不具备原子性。</p>
<p>​        被Volatile修饰过的对象，在多线程下只能保证可见性，但不保证操作的原子性</p>
<p><img src="../../typora-user-images/image-20221123193040531.png" alt="image-20221123193040531"></p>
<h3 id="活锁，死锁，哲学家问题"><a href="#活锁，死锁，哲学家问题" class="headerlink" title="活锁，死锁，哲学家问题"></a>活锁，死锁，哲学家问题</h3><p>活锁： 两个线程互相影响彼此依赖的变量</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestLiveLock</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 期望减到 0 退出循环</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">--</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"count: &#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 期望超过 20 退出循环</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"count: &#123;&#125;"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>死锁：程序需要获取两把锁才能向下执行，两个线程各拿到了一把锁，等待另一把，导致双方都进入阻塞。</p>
<p>哲学家问题就是死锁问题的一种形式。</p>
<h2 id="进阶知识"><a href="#进阶知识" class="headerlink" title="进阶知识"></a>进阶知识</h2><h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>Java对象头</p>
<p>普通对象：</p>
<p><img src="../../typora-user-images/image-20220610232552374.png" alt="image-test"></p>
<p><img src="../../typora-user-images/image-20221123194620216.png" alt="image-20221123194620216"></p>
<p>数组对象：</p>
<p><img src="../../typora-user-images/image-20221123194636687.png" alt="image-20221123194636687"></p>
<p>其中Mark Wordd的内部结构（32位虚拟机）</p>
<p><img src="../../typora-user-images/image-20221123194704096.png" alt="image-20221123194704096"></p>
<p>64位虚拟机</p>
<p><img src="../../typora-user-images/image-20221123194741408.png" alt="image-20221123194741408"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>当<code>synchronized 对对象加入重量级锁时，Mark Work中就会有指向Monitor对象的指针</code>，下面我们看看Monitor的结构</p>
<p><img src="../../typora-user-images/image-20221123195851860.png" alt="image-20221123195851860"></p>
<p>WaitSet 就是等待队列</p>
<p>EntryList 就是阻塞队列</p>
<p>Owner 就是当前获取锁的线程</p>
<h3 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h3><h4 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h4><p>​    以前线程没有抢到锁，就会直接进入阻塞队列，但这代价太大了，所以JDK1.6后，因为了自旋锁，也就是抢不到锁后，没立刻阻塞，而是继续尝试获取锁，最后实在不行，就阻塞，因为也占用CPU资源。尝试几次是看之前获取几次来判断的，这也是自适应自旋锁的一个特点。</p>
<p>​    自旋会占用CPU，所以单核CPU自旋就是浪费，只有多核CPU才能提高性能</p>
<h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>​    通过逃逸分析，发现一个虽然加锁了，但实际上数据是无法被外界影响的，就会把锁消除。</p>
<h4 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h4><p>​    对一个对象反复的加锁解锁，性能影响很大，如果虚拟机探测到由这样的一串零碎的操作都对同一个对象加锁，将会把加锁的范围扩展（粗化）到整个操作序列的外部。</p>
<h4 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h4><ol>
<li>对使用者透明：<code>synchronized</code></li>
<li>多线程访问的时间是错开的，可用轻量级锁来优化</li>
</ol>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 同步块 A</span>
 <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token keyword">synchronized</span><span class="token punctuation">(</span> obj <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// 同步块 B</span>
 <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>当遇到加锁操作时，线程的栈帧中会创建一个（Lock Record）对象，每个线程的栈帧都会包含一个锁记录的解耦，内部存放锁定对象的Mark Word</li>
</ul>
<p><img src="../../typora-user-images/image-20221124102353283.png" alt="image-20221124102353283"></p>
<ul>
<li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录。</p>
<ul>
<li>如果成功说明，锁当前没有被占用，01 代表无锁，00代表轻量级锁，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁</li>
<li>如果失败说明，有竞争，进入锁膨胀过程</li>
<li>如果发现有竞争，但是可以通过Mark Word 判断加锁的线程是不是自己，如果是自己，则再添加一个Lock Record作为重入计数</li>
</ul>
<p><img src="../../typora-user-images/image-20221124102736732.png" alt="image-20221124102736732"></p>
</li>
</ul>
<p><img src="../../typora-user-images/image-20221124103008743.png" alt="image-20221124103008743"></p>
<p>​    当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一。</p>
<p>​    当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头</p>
<ul>
<li><p>成功，则解锁成功</p>
</li>
<li><p>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</p>
</li>
</ul>
<h4 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h4><p>​    当发现线程竞争发生了直接冲突时，就会将Object中MarkWork指向Monitor，并且将状态改为10。10就是重量级锁。阻塞线程就进入Monitor的EntryList进行阻塞。</p>
<p>​    当持有轻量级锁的线程进行cas操作时，发现失败了，就说明现在已经是重量级锁了，则通过Monitor地址找到Monitor对象，将Owner设置为空，表示锁释放，然后通知EntryList阻塞线程唤醒。</p>
<p><img src="../../typora-user-images/image-20221124103939951.png" alt="image-20221124103939951"></p>
<h4 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h4><p>偏向锁是对轻量级锁的再次优化，之前使用轻量级锁方案时，每次获取锁都要和Object的对象头做CAS操作，即便是重入锁，也需要该操作。现在希望Object对象头上直接写占有锁的线程ID，这样只要比较，不进行CAS操作。</p>
<p><img src="../../typora-user-images/image-20221124105155494.png" alt="image-20221124105155494"></p>
<p><img src="../../typora-user-images/image-20221124105207495.png" alt="image-20221124105207495"></p>
<p>查看对象头的信息</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jol<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jol-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    // 这里需要注意，不用provided
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="../../typora-user-images/image-20221124111220643.png" alt="image-20221124111220643"></p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> start <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span>  <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        0x0000000000000001</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        延迟显示，不延迟：-XX:BiasedLockingStartupDelay=0</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">ClassLayout</span><span class="token punctuation">.</span><span class="token function">parseInstance</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPrintable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>适用范围：锁竞争少。</p>
<p>如果是多线程竞争，可以设置关闭偏向锁，默认是开启的，适用：<code>-XX:-UseBiasedLocking</code></p>
<blockquote>
<p>需要注意：当使用了对象的.hashcode()方法会变为不可偏向</p>
</blockquote>
<p>因为在偏向锁中对象头没有位置存储HashCode，所以转为轻量级锁或者重量级锁。每个对象最初的HashCode为0，第一次使用时，进行赋值。</p>
<h3 id="线程安全的集合类"><a href="#线程安全的集合类" class="headerlink" title="线程安全的集合类"></a>线程安全的集合类</h3><p><img src="../../typora-user-images/image-20221124112756210.png" alt="image-20221124112756210"></p>
<p>这里分为三类</p>
<ol>
<li><p>遗留的：HashTable（Map），Vector（List）</p>
</li>
<li><p>使用 Collections 装饰的线程安全集合，如：Collections.synchronizedCollection，可以将线程不安全的集合包装为线程安全的，底层实际上就是方法调用时包装类对原先方法加锁。  </p>
</li>
<li><p>JUC包下的类</p>
</li>
</ol>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>查找算法的演化过程</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="查找算法的演化过程"><a href="#查找算法的演化过程" class="headerlink" title="查找算法的演化过程"></a>查找算法的演化过程</h1><h2 id="顺序查找"><a href="#顺序查找" class="headerlink" title="顺序查找"></a>顺序查找</h2><p>​        字面意思，一个个节点查找判断，对数据条件没什么要求，最简单，也最慢。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 顺序查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 记录比较多少次找到目标值</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"顺序查找次数："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>​        如果我们能让数据有序，我们先找中间数，如果目标值大于中间数，则从中位数往后找，这一下子筛去一半的数据，如果刚好一样，则可以直接返回坐标。速度大幅提升。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 二分查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndexBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> right <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> midVal <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二分查找次数："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>midVal <span class="token operator">></span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            right <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h2><p>​        如果我的目标值很大，要查找的数组又很长，我知道目标值大概率是在数组的后面，但二分查找只能定位到中间位置，再往后筛选，能不能说我根据目标值的大小，推算出它的位置大概在哪里？如果不是再在剩下的范围找，比二分查找智能点儿。例如：我的数组存储从1到100，我要查询数组中是否有98这个数字。中间大概率是50左右，98肯定是在最后的区间内。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 插值查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">interpolationSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high <span class="token operator">&amp;&amp;</span> target <span class="token operator">>=</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 与二分查找不同点在于中间点的确认 这里牵扯到了数学推理</span>
        <span class="token keyword">int</span> pos <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>target <span class="token operator">-</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">-</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插值查找的次数："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> pos<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            low <span class="token operator">=</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            high <span class="token operator">=</span> pos <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="二分优化查找"><a href="#二分优化查找" class="headerlink" title="二分优化查找"></a>二分优化查找</h2><p>​        其实二分查找向左向右查找是不平衡的，也是说一边判断的次数要比另一边多，我们看图示例。</p>
<img src="https://img-blog.csdnimg.cn/20200422192747133.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FDTV9Ob3ZpY2U=,size_16,color_FFFFFF,t_70" alt="img" style="zoom:80%;" />

<p>​        上图中第一行是所有的待查询的节点，然后不断二分查找，最后每个节点旁边灰色的数字就是找到该点时，判断过几次，下面是相应判断的代码。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>   <span class="token comment">//每步迭代可能都要做两次比较判断，有三个分支</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//以中点为轴点</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> <span class="token class-name">A</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>
            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//深入前半段[low, mid-1]继续查找,这里只需要判断一次</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//深入后半段[mid+1, high]继续查找,这里需要判断了两次</span>
        <span class="token keyword">else</span> 
            <span class="token keyword">return</span> mid<span class="token punctuation">;</span> <span class="token comment">//在mid处命中</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//查找失败，返回-1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        可以看到如果不断向右查找，每次判断的次数都要比向左查找多一次判断。那能不能让向右向左都只判断一次。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 二分查找优化版本
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getIndexBinaryPlus</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;</span> high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        index<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//以中点为轴点，经比较后确定深入</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            low <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"二分查找优化："</span><span class="token operator">+</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> low <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//返回命中元素所在的位置或-1</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        我们再看一下查找的过程图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200422193153347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0FDTV9Ob3ZpY2U=,size_16,color_FFFFFF,t_70" alt="img"></p>
<p>​        我们将之前二分查找比作方案A，现在版本比作方案B，我们可以看到对于最好情况，也就是中间数刚好是要找到数时，方案A可直接返回，方案B只能最后返回，但在方案B最好的情况下，要比方案A好，因为左右判断的次数是平衡的。</p>
<h2 id="斐波那契查找"><a href="#斐波那契查找" class="headerlink" title="斐波那契查找"></a>斐波那契查找</h2><p>​        我在学习斐波那契查找算法时，一直不理解，为啥按照黄金分割点做定点效果会更好，其中看到的一篇文章说，因为标准二分查找，向左向右查找并不平衡，所以如果每次定点向右偏移一些，这样可以让整体处于均衡的状态。也就是说我每次都向右偏移一些，这样向右查询的次数就会减少，像左查询次数增加，这样动态的形成一种均衡。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 斐波那契查找
 * @param arr    数组
 * @param target 目标值
 * @return 下标
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fibonacciSearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid<span class="token punctuation">;</span>
    <span class="token keyword">int</span> f<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 找到扩容长度</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>high <span class="token operator">></span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        k<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// 扩容</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 最后一位填充</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        mid <span class="token operator">=</span> low <span class="token operator">+</span> f<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&lt;</span> temp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
            k<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">></span> temp<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            k <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> mid<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> high<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="索引查找"><a href="#索引查找" class="headerlink" title="索引查找"></a>索引查找</h2><p>​        除了顺序查找，上面所有的查找算法的潜在条件就是数组有序，那如果数据本身无序，我们又想保证高性能的查询，我们可以为数据加上索引，每本书都有一个目录页，记录每个章节的页码，这样我想看具体的某一章，可以根据页码迅速定位。</p>
<blockquote>
<p>但这样做又需要注意：</p>
</blockquote>
<ol>
<li>索引不能重复，这里牵扯到哈希碰撞的解决方案</li>
<li>相比原数据，我们需要维护一个索引数据，空间换时间思路</li>
<li>索引的更新</li>
</ol>
<blockquote>
<p>这里又有了不同的选择，顺序索引和哈希索引</p>
</blockquote>
<p>​        其实数组中我们通过下标去直接访问数据，下标不就是一种索引嘛。我们可以顺着第一个下标，一直找到最大下标值所指的数据。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        如果我们顺序的插入数据，第一个数插入index=0的位置，第二个数插入index=1的位置。那么可以理解下标index为顺序索引，它不仅指向实际的数据，索引与索引间存在顺序关系，arr[i-1] 在 arr[i] 之前插入。这样做的好处有什么呢？我们可以一次性找到某个索引后所有的数据，但是顺序索引的缺点就是我们需要顺序比较判断，就像顺序查找一样，不过可做二分优化。</p>
<p>​        这里我们可以想想Mysql中Innodb中使用B+树结构作为索引，该结构就有索引有序的特点。方便我们进行索引筛选的功能。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'b'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'c'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'d'</span><span class="token punctuation">;</span>
    arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'e'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        还有一种实现是Hash索引，这里不对Hash计算深究，比方说第一个数，我们进行对Key进行Hash计算结果为1002，我们底层通过数组来实现存储，数组长度为5，则将1002余5，等于2，则我们不插入到0位置，而是直接插入到2位置，下一次可能插入4位置，这样索引与索引间不再存在顺序关系，但好处是，可以在常数时间内查找到对应的数据，</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        每种算法都在原有算法的基础上对其进行一方面的优化，每种算法都有自己适用的范围，没有最好的，只有最合适的，这需要我们对每个算法的底层实现有着清晰的认识，从而根据具体的场景进行选择。</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
  </entry>
  <entry>
    <title>Ruby元编程</title>
    <url>//post/Ruby/Ruby%E5%85%83%E7%BC%96%E7%A8%8B.html</url>
    <content><![CDATA[<pre><code>本文需要在了解Ruby基本语法的前提下，进行学习
</code></pre>
<h2 id="元编程是什么？"><a href="#元编程是什么？" class="headerlink" title="元编程是什么？"></a>元编程是什么？</h2><p>​    元编程是编写能在运行时操作语言构件的代码</p>
<p>​    在我们使用编辑器编写代码后，代码按照我们所写的内容进行编译，运行。在启动后我们无权再对代码进行干涉，而在一些业务场景中，我们想在不修改源代码的前提下，对一个类进行增强，这在Java中也是一个成熟的技术，例如反射，动态代理。但是Java所能给予的操作相比Ruby，就显得格外的严格且复杂。</p>
<p>​    Ruby是一门可以在运行时操作语言构建的工具。语言构建就是我们代码中的各个成员（对象，类，模块儿，实例变量等）。通俗来说可以使用Ruby在运行时对已有的类进行灵活的修改，例如修改一个方法的定义。实例变量的定义，甚至我们可以在运行时创建一个没有的类。下面我们使用一些伪代码来进行演示。</p>
<p>​    我们想对数据库进行操作，最初我们的想法就是写一个Entity基类，然后由子类继承</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Entity</span>
  <span class="token comment"># 提供访问器</span>
	attr_accessor <span class="token symbol">:table</span><span class="token punctuation">,</span><span class="token symbol">:id</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span> table<span class="token punctuation">,</span>id
		<span class="token variable">@table</span> <span class="token operator">=</span> table
		<span class="token variable">@id</span> <span class="token operator">=</span> id
		Database<span class="token punctuation">.</span>sql <span class="token string-literal"><span class="token string">"insert into </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@able</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> 'id' values </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@id</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">&#125;"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">set</span></span><span class="token punctuation">(</span>col<span class="token punctuation">,</span>val<span class="token punctuation">)</span>
		Database<span class="token punctuation">.</span>sql <span class="token string-literal"><span class="token string">"update </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@table</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> set </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">col</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> = </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">val</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> where id = </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@id</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get</span></span><span class="token punctuation">(</span>col<span class="token punctuation">)</span>
		Database<span class="token punctuation">.</span>sql <span class="token string-literal"><span class="token string">"select </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">col</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@table</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> where id = </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@id</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token operator">&lt;</span> Entity
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span> id
		<span class="token keyword">super</span> <span class="token string-literal"><span class="token string">'movies'</span></span><span class="token punctuation">,</span>id
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">title</span></span>
		get <span class="token string-literal"><span class="token string">"title"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">title</span></span><span class="token operator">=</span> value
		set <span class="token string-literal"><span class="token string">"title"</span></span><span class="token punctuation">,</span>value
	<span class="token keyword">end</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">article</span></span>
		get <span class="token string-literal"><span class="token string">"article"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">article</span></span><span class="token operator">=</span> value
		set <span class="token string-literal"><span class="token string">"article"</span></span><span class="token punctuation">,</span>value
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># --------------------------------</span>
<span class="token comment"># 插入一条数据，简单且方便</span>
movie <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
movie<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"猫捉老鼠"</span></span>
movie<span class="token punctuation">.</span>article <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"相当不错"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    上面的代码看起来是可以解决问题，但如果一张表的字段特别多，我都需要定义到Movie类中吗？能不能用更少的代码解决问题？我们使用<code>Active Record</code>类库操作：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Movie</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Base
<span class="token keyword">end</span>
<span class="token comment"># --------------------------------</span>
<span class="token comment"># 插入一条数据，简单且方便</span>
movie <span class="token operator">=</span> <span class="token class-name">Movie</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
movie<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"猫捉老鼠"</span></span>
movie<span class="token punctuation">.</span>article <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"相当不错"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们看到这次在Movie继承<code>ActiveRecord::Base</code>后，没有指定是哪个数据表，没有写SQL，没有定义像上面一样的操作方法，我们就可以轻松插入数据。这底层到底是干了什么？</p>
<p>​    实际上是ActiveRecord在运行期，通过内省机制查看类的名字，通过Movies推断出表名为<code>movies</code>,并在在读取数据表时，发现有title,article两个字段，动态的定义了两个同名的属性和相应的访问器。也是就动态的生成了 <code>Movie#title 和 Movie#title=</code> 这样的方法。</p>
<p>​    这就是Ruby的特点，也是我们要学习的元编程的一种表现形式，我们后面将试着分析和学习它。</p>
<h2 id="对象模型"><a href="#对象模型" class="headerlink" title="对象模型"></a>对象模型</h2><p>​    现在我们有一个需求，将给定的字符串，添加一个后缀，我们可以定义一个函数</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">appendTxt</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> 
	content <span class="token operator">=</span> content <span class="token operator">+</span> <span class="token string-literal"><span class="token string">".txt"</span></span>
<span class="token keyword">end</span>

p appendTxt <span class="token string-literal"><span class="token string">"alibaba"</span></span>  <span class="token comment"># => "alibaba.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    但这不填符合我们面向对象的方法，应该将这个函数封装到一个具体类中，定义它的职责。如果我们因此封装一个<code>ApendTxtString</code>类，会不会导致类太多了，能不能让原本Ruby中的String具有新的行为,答案是可以的。我们可以直接修改Ruby原先定义的标准类。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里相当于从新打开String的上下文，添加一个新的方法</span>
<span class="token keyword">class</span> <span class="token class-name">String</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">appendTxt</span></span>
		to_s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">".txt"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span> 
<span class="token comment"># 我们使原先的String具有了新的行为</span>
p <span class="token string-literal"><span class="token string">"alibaba"</span></span><span class="token punctuation">.</span>appendTxt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    class更像是一个作用域操作符，当你第一次使用class时，会判断是否有这个类，如果没有进行创建，如果有则带回到类的上下文中，可以修改以往的方法，实例等等，这带给开发者很大的灵活性。</p>
<p>​    但如果使用不当，也会导致很大的问题，比如原本String拥有appendTxt方法，而很多地方都应用这个函数，而你一旦从新定义，就会导致全局的bug，而且不容易排查，所以使用前一定要检查是否有重名方法。这种简单粗暴的修改在Ruby中也称为：<code>猴子补丁：Monkeypatch</code>，后面我们也有一些其他办法来替代猴子补丁，如<code>细化（Refinement）</code>，来将发生bug的可能降到最低</p>
<h3 id="类的真相"><a href="#类的真相" class="headerlink" title="类的真相"></a>类的真相</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 我们定义了一个类</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    <span class="token comment"># 定义实例变量</span>
		<span class="token variable">@v</span> <span class="token operator">=</span> <span class="token number">10</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 创建实例</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
<span class="token comment"># 输出当前对象是哪个类的实例</span>
obj<span class="token punctuation">.</span><span class="token keyword">class</span>   <span class="token comment"># => MyClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    如果可以用Ruby解释器查看obj对象内部，我们可以发现什么？ 内部只有一个@v实例变量，而且仅属于obj对象</p>
<h4 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">obj<span class="token punctuation">.</span>my_method
p obj<span class="token punctuation">.</span>instance_variables <span class="token comment"># => [:@v]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    与Java不同，Ruby中对象所属类和对象的实例变量没有任何关系，当你赋值创建一个实例变量时，它就出现了，如果你不使用<code>obj.my_method</code>，这个对象就没有<code>@v</code>这个实例变量</p>
<h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 查看实例拥有哪些方法，因为每个类实例都是继承了Object类，所以会继承很多的方法</span>
p obj<span class="token punctuation">.</span>methods
<span class="token comment"># 这里用正则筛选一下</span>
p obj<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token regex-literal"><span class="token regex">/my/</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    一个对象内部其实只包含了自身的实例变量和对自身类的引用，方法并不在对象中，而在类中。这就是同一类的实例共享方法，但不共享实例变量的原因。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># String实例的方法</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span>instance_methods
<span class="token comment"># String实例方法+类方法</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span>methods
<span class="token comment"># String忽略继承的方法</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在上面，我们先查看对象拥有的实例方法：<code>obj.instance_methods</code>，后面我们又查看了类的实例方法：<code>String.instance_methods</code>,发现并没有报错，那看来对象和类都拥有自己的实例方法，那能不能推断：<code>类本身也是一个对象</code></p>
<h4 id="类的真相-1"><a href="#类的真相-1" class="headerlink" title="类的真相"></a>类的真相</h4><p>​    在Ruby中类本身其实也是对象，是另一个类的实例。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># String类实际上是Class类的一个实例</span>
p <span class="token builtin">String</span><span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => Class</span>
<span class="token comment"># 而Class类还是Class的实例</span>
p <span class="token builtin">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span>   <span class="token comment"># => Class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这确实是挺绕的。不过这么看来一个类所拥有的方法就是Class类的实例方法。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token builtin">Class</span><span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment"># => [:allocate, :superclass, :subclasses, :new]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    这里看到Class的实例方法有四个，其中new是我们最常用的，allocate是new方法的支撑方法，而superclass与我们Java中熟悉的继承有关，找到他的父类是谁？</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token builtin">String</span><span class="token punctuation">.</span>superclass  <span class="token comment"># String的父类：Object</span>
p <span class="token builtin">Object</span><span class="token punctuation">.</span>superclass  <span class="token comment"># Object的父类：BasicObject</span>
p BasicObject<span class="token punctuation">.</span>superclass <span class="token comment"># BasicObject的父类：nil 空  到头了</span>

p <span class="token builtin">Class</span><span class="token punctuation">.</span>superclass   <span class="token comment"># Class的父类是 Module</span>
p <span class="token builtin">Module</span><span class="token punctuation">.</span>superclass  <span class="token comment"># Module的父类是 Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以看到Class是继承了Module，并自身定义了实例化的操作。所以类和模块儿使用上看起来那么像。</p>
<p>​    每个类最终继承于BasicObject，而每个类又是Class类的实例。</p>
<p><img src="../../typora-user-images/image-20230124214842752.png" alt="image-20230124214842752"></p>
<h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><p>​    任何大写字母开头的引用，都代表着常量，而常量一般指不会修改的东西，在Ruby中常亮也可以看做是变量，而当你修改，编译器会发出警告，但仍然会进行修改。常量与变量最大的区别在于作用域的不同。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
  <span class="token comment"># 外部的MyConstant</span>
	MyConstant <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Outer constant"</span></span>
	<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
    <span class="token comment"># 内部的MyConstant</span>
		MyConstant <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Inner constant"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p MyModule<span class="token double-colon punctuation">::</span>MyConstant
p MyModule<span class="token double-colon punctuation">::</span>MyClass<span class="token double-colon punctuation">::</span>MyConstant<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们以树形结构为例：</p>
<p><img src="../../typora-user-images/image-20230124220328845.png" alt="image-20230124220328845">    </p>
<p>​    这里内部的MyConstant和外部的MyConstant实际上处于两个作用域中，是完全不同的东西，而我们可以通过<code>::</code>来访问他们</p>
<p>​    如果处于模块儿较深的位置，想用绝对路径来访问外部的常量，可以使用 :: 表示路径的根位置。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token constant">Y</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a root-level constant"</span></span>
<span class="token keyword">module</span> <span class="token class-name">M</span>
	<span class="token constant">Y</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a constant in M"</span></span>
	<span class="token double-colon punctuation">::</span><span class="token constant">Y</span>  <span class="token comment"># => "a root-level constant"</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    <code>Module.constants</code>会返回当前范围内所有常量，这里需要注意一点，Module中定义class，其类名也是一个常量。如果想知道当前代码所在路径，则可以知道<code>Module.nesting</code>方法。</p>
<p>​    而我们一般会利用常量域的不同，作为名称空间，这样避免类名冲突</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M</span>
	<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
			puts <span class="token string-literal"><span class="token string">"hello"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
mc <span class="token operator">=</span> <span class="token constant">M</span><span class="token double-colon punctuation">::</span><span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
mc<span class="token punctuation">.</span>hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="对象和类的小结"><a href="#对象和类的小结" class="headerlink" title="对象和类的小结"></a>对象和类的小结</h3><blockquote>
<p>什么是对象？</p>
</blockquote>
<p>对象就是一组实例变量外加一个指向其类的引用</p>
<blockquote>
<p>什么是类？</p>
</blockquote>
<p>类就是一个对象（Class类的一个实例），外加一组实例方法和对其超类的引用。</p>
<h3 id="使用名称空间"><a href="#使用名称空间" class="headerlink" title="使用名称空间"></a>使用名称空间</h3><p>​    当我们自定义一个类时，如果在一个复杂系统中，很有可能发生命名冲突，最好使用一个业务模块儿将自定义的类进行封装，这样发生命名冲突的概率也就降低了。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 可能导致bug</span>
<span class="token keyword">class</span> <span class="token class-name">Test</span>
<span class="token keyword">end</span>

<span class="token comment"># 通过 MyField::Test 来使用类，发生冲突的概率就降低了</span>
<span class="token keyword">module</span> <span class="token class-name">MyField</span>
  <span class="token keyword">class</span> <span class="token class-name">Test</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="调用方法时发生了什么？"><a href="#调用方法时发生了什么？" class="headerlink" title="调用方法时发生了什么？"></a>调用方法时发生了什么？</h3><ol>
<li>找到这个方法定义</li>
<li>执行这个方法，Ruby中需要借助<code>self</code>的东西</li>
</ol>
<h4 id="方法查找"><a href="#方法查找" class="headerlink" title="方法查找"></a>方法查找</h4><p>​    这里有两个概念：接收者和祖先链</p>
<p>​    比如说上面的代码 <code>mc.hi()</code> ,其中mc就是方法的接受者，在执行这个方法前需要先找到这个方法的定义，所以先到接收者中去找该方法，如果没有则找他的父类或者是引入的Module中寻找。而接收者，接受者内引入模块儿，父类共同构成了该对象的祖先链。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M1</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">m1_method</span></span>
		<span class="token string-literal"><span class="token string">"m1.method"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">module</span> <span class="token class-name">M2</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">m2_method</span></span>
		<span class="token string-literal"><span class="token string">"m2.method"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 引入M1，模块儿在祖先链中位置为自身类上面</span>
	<span class="token keyword">include</span> <span class="token constant">M1</span>  
	<span class="token comment"># 引入M2，模块儿在祖先链中位置为自身类下面</span>
	<span class="token keyword">prepend</span> <span class="token constant">M2</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">AC</span> <span class="token operator">&lt;</span> MyClass
<span class="token keyword">end</span>

<span class="token comment"># [AC, M2, MyClass, M1, Object, Kernel, BasicObject]</span>
p <span class="token constant">AC</span><span class="token punctuation">.</span>ancestors <span class="token comment"># 查看他的祖先链</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果在祖先链中多次引入一个module，会怎么样？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M1</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
p <span class="token constant">M1</span><span class="token punctuation">.</span>ancestors  <span class="token comment"># => [M1]</span>
<span class="token keyword">module</span> <span class="token class-name">M2</span>
	<span class="token keyword">include</span> <span class="token constant">M1</span>
<span class="token keyword">end</span>
p <span class="token constant">M2</span><span class="token punctuation">.</span>ancestors  <span class="token comment"># => [M2, M1]</span>
<span class="token keyword">module</span> <span class="token class-name">M3</span>
	<span class="token keyword">prepend</span> <span class="token constant">M1</span>
	<span class="token keyword">include</span> <span class="token constant">M2</span>
<span class="token keyword">end</span>
p <span class="token constant">M3</span><span class="token punctuation">.</span>ancestors  <span class="token comment"># => [M1, M3, M2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Kernel模块儿"><a href="#Kernel模块儿" class="headerlink" title="Kernel模块儿"></a>Kernel模块儿</h4><p>​    在Ruby中我们常常使用<code>print</code>，就好像所有对象都有print方法一样。但实际上这些方法来着<code>Kernel</code>模块儿私有实例方法，因为Object引入了Kernel，所以每个对象都可以调用Kernel方法，也叫做内核方法，我们当然也可以加入自己的方法，这样所有的对象都拥有了新的方法 </p>
<h4 id="执行方法"><a href="#执行方法" class="headerlink" title="执行方法"></a>执行方法</h4><blockquote>
<p>当我们找到了该方法，如何去执行呢？</p>
</blockquote>
<p>比如我们现在找到了该方法：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
	  p <span class="token keyword">self</span>   <span class="token comment"># => #&lt;MyClass:0x000000010dcdb320 @x=1> self为obj</span>
	  temp <span class="token operator">=</span> <span class="token variable">@x</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 这里实例变量@x 也是访问self内定义的</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>my_method  <span class="token comment"># obj调用my_method时，obj为当前对象self</span>
p <span class="token keyword">self</span>         <span class="token comment"># => main , 在顶级作用域下，调用 p ,接受者为main对象，main为self</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>请问：@x是属于哪个对象的，my_method属于哪个对象？</p>
</blockquote>
<p>​    一般情况下，会将最初方法的接收者作为当前对象，也就是作为self，所有实例变量和方法都属于self，如果没有明确指定接受者的实际上都指向self，除非转而调用其他对象的方法，则self就会转为这个对象。</p>
<blockquote>
<p>​    Ruby中 private 修饰的方法，不能明确指定接受者来调用私有方法，只能通过隐性的接受者self调用。这与Java中对私有方法的定义是不同的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
		p <span class="token string-literal"><span class="token string">"Hi "</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">Hello</span></span>
		<span class="token comment"># 这里Hello 调用 私有方法hello ，使用的隐藏当前对象,也就是下面的obj</span>
		hello
	<span class="token keyword">end</span>

	<span class="token keyword">private</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hello</span></span> 
		p <span class="token string-literal"><span class="token string">"hello"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>hi     <span class="token comment"># 正常调用</span>
obj<span class="token punctuation">.</span>Hello  <span class="token comment"># 正常调用</span>
obj<span class="token punctuation">.</span>hello  <span class="token comment"># 无法调用，因为private方法不能指定接收者调用，只能隐性调用，也就是内部调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="顶层上下文"><a href="#顶层上下文" class="headerlink" title="顶层上下文"></a>顶层上下文</h4><blockquote>
<p>如果没有调用任何方法，那这时谁是self呢？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># main</span>
p <span class="token keyword">self</span>
<span class="token comment"># Object</span>
p <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token keyword">class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>在Ruby程序运行时，Ruby解释器创建一个名为main对象作为当前对象，这个对象有时被称为顶层上下文。此时处于调用堆栈的顶层</p>
<h3 id="类定于与self"><a href="#类定于与self" class="headerlink" title="类定于与self"></a>类定于与self</h3><p>​    在定义类或模块儿时（且在任何方法定义之外），self对象由这个类或模块儿本身担任</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">self</span>  <span class="token comment"># => MyClass</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h4 id="细化"><a href="#细化" class="headerlink" title="细化"></a>细化</h4><p>​    在前面我们使用了猴子补丁对原有的类进行修改，但这一操作是全局性的，如果把控不好，会导致许多隐性的Bug，所以Ruby又引入了<code>细化(refinement)</code>,起到同样的作用，但是可以限制作用域。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">StringAppend</span>
  <span class="token comment"># 细化 String 标准类库，传入一个Block</span>
	refine <span class="token builtin">String</span> <span class="token keyword">do</span>
    <span class="token comment"># 在Block内，定义一个append_txt方法，现在self转为String，相当于给String定义实例方法</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">append_txt</span></span>
			to_s <span class="token operator">+</span> <span class="token string-literal"><span class="token string">".txt"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">module</span> <span class="token class-name">StringStuff</span>
	<span class="token comment"># 上面定义好，并未生效，需要主动启动 using</span>
	using StringAppend
	<span class="token comment"># 这里正常执行</span>
	p <span class="token string-literal"><span class="token string">"alibaba"</span></span><span class="token punctuation">.</span>append_txt
<span class="token keyword">end</span>
<span class="token comment"># 这里就会报错，因为跳回了顶层上下文，这里没有引入对String细化，</span>
<span class="token comment"># 所以通过细化，可以控制修改的访问范围，不会使全局都看到这个修改</span>
p <span class="token string-literal"><span class="token string">"taobao"</span></span><span class="token punctuation">.</span>append_txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    细化只在两种场合有效：</p>
<ol>
<li><code>refine</code>代码块内部</li>
<li><code>using</code>语句位置到模块儿结束，或者到文件结束（在顶层上下文使用using）</li>
</ol>
<h5 id="细化的陷阱"><a href="#细化的陷阱" class="headerlink" title="细化的陷阱"></a>细化的陷阱</h5><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		p <span class="token string-literal"><span class="token string">"old method"</span></span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">other_method</span></span>
		my_method
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">module</span> <span class="token class-name">MyClassRefinement</span>
	refine MyClass <span class="token keyword">do</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
			p <span class="token string-literal"><span class="token string">"new method"</span></span>
		<span class="token keyword">end</span>	
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token comment"># 在顶级上下文中使用using</span>
using MyClassRefinement

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
<span class="token comment"># 这里已经更新为细化后修改的内容</span>
obj<span class="token punctuation">.</span>my_method  <span class="token comment"># => new method</span>
<span class="token comment"># 这里仍维持原先的内容</span>
obj<span class="token punctuation">.</span>other_method <span class="token comment"># => old method</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里虽然使用了细化，但当其他实例方法调用细化方法，还是会调用之前定义的代码，如果直接调用细化方法，则修改为细化内容。需要注意：Ruby规定虽然可以在一个普通的模块儿中调用refine方法，但不能在类中调用这个方法</p>
<h3 id="对象模型总结"><a href="#对象模型总结" class="headerlink" title="对象模型总结"></a>对象模型总结</h3><ul>
<li>对象由一组实例变量和类的引用组成</li>
<li>对象的方法存在于对象所属的类中（对类来说是实例方法）</li>
<li>类本身是Class类的对象，类的名字只是一个常量</li>
<li>Class类是Module的子类，一个模块儿基本上就是由一组方法组成的包，类除了具有模块儿的特性以外，还可以被实例化（使用new方法），或者按照一定的层次结构来组织（使用superclass方法）</li>
<li>常量像文件系统一样，是按照树形结构组织的，其中模块儿和类的名字扮演目录的校色，其他普通常量扮演文件的校色</li>
<li>每个类都有一个祖先链，这个链从每个类自己开始（pretend Module会在类本身之前），向上直到BasicObject类结束</li>
<li>调用方法时，Ruby首先向右找到接受者所属的类，然后向上查找祖先链，直到找到该方法或达到链的顶端</li>
<li>在类中包含一个模块儿，使用<code>include</code>方法时，模块插入祖先链中，位置在类的正上方，使用prepend方法包含一个模块儿时，这个模块儿也会被插入祖先链中，位置在类的正下方</li>
<li>调用一个方法时，接受者会扮演self的对象</li>
<li>定义一个模块儿（或类）时，该模块儿扮演self对象</li>
<li>实例变量永远被认定为self的实例变量</li>
<li>没有明确指定接收者的方法调用，都被当做是调用self的方法</li>
<li>细化像是在原有的类上添加了一块儿补丁，并且会覆盖正常方法的方法查找，并且细化只在部分区域生效。 </li>
</ul>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><p>​    在Ruby这种动态语言中，方法的调用是极为灵活的，并不会在编译器就爆出各种错误，比方说我定义一个User类，我想调用hi方法，我并没有定义hi方法，但这并不妨碍我编写代码，运行期我去找hi方法，如果发现没有这个方法，最终我可以向这个类中添加我想要的方法在运行期间。这给了我们更多的操作空间，这将是我们要学习的。</p>
<blockquote>
<p>现在我们有一个老的系统需要我们重构，老板要求系统自动为超过99美金的开销天添加标记</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">DS</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token comment"># 连接数据源</span>

  <span class="token comment"># 原先设计的访问方法</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_cpu_info</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_cpu_price</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_mouse_info</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_mouse_price</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_keyBoard_info</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_keyBoard_price</span></span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
ds <span class="token operator">=</span> <span class="token class-name">DS</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 获取信息</span>
ds<span class="token punctuation">.</span>get_cpu_info<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 获取价格</span>
ds<span class="token punctuation">.</span>get_cpu_price<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们现在需要将数据源封装起来，每个computer为一个对象，并为每个组件定义通用的方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
  <span class="token comment"># data_source 就是上面的DS对象</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mouse</span></span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_mouse_info<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_mouse_price<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Mouse: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">cpu</span></span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_cpu_info<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>get_cpu_price<span class="token punctuation">(</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Cpu: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>

	<span class="token comment"># ... 类似操作</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们可以看到 mouse 和 cpu 就有大量的代码重复，如果后面还需要加其他的，则会让代码臃肿且冗余。</p>
<p>​    我们有两种办法进行重构优化：<code>动态方法 和 method_missing</code></p>
<h3 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h3><h4 id="动态调用方法"><a href="#动态调用方法" class="headerlink" title="动态调用方法"></a>动态调用方法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method</span></span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>method <span class="token string-literal"><span class="token string">"Hello World"</span></span>
<span class="token comment"># 动态派发和上面普通调用的结果是一样的, 将 obj.method 替换为 obj.send(:method)</span>
obj<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token symbol">:method</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"Hello World"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>为什么使用动态派发？</p>
</blockquote>
<p>​    因为可以在运行最后才决定具体调用哪个方法。而不是硬编码决定</p>
<blockquote>
<p>这里使用<code>:method</code>，而不是”method”，实际上是一样的</p>
</blockquote>
<p><code>obj.send(&quot;method&quot;,&quot;Hello World&quot;)</code></p>
<p>​    :method 表示的是一个Symbol符号</p>
<p>​    “method”则是一个String字符串，一般在元编程我们常常使用Symbol，因为Symbol是不可变的。字符串是可变的。</p>
<blockquote>
<p>符号与字符串是很容易相互转化的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token string-literal"><span class="token string">"abc"</span></span><span class="token punctuation">.</span>to_sym <span class="token comment"># => :abc</span>
<span class="token symbol">:abc</span><span class="token punctuation">.</span>to_s    <span class="token comment"># => "abc"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="动态定义方法"><a href="#动态定义方法" class="headerlink" title="动态定义方法"></a>动态定义方法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里就是定义了一个实例方法 将 def my_method 替换为 define_method :my_method，参数部分，通过Block传递</span>
	<span class="token keyword">define_method</span> <span class="token symbol">:my_method</span> <span class="token keyword">do</span> <span class="token operator">|</span>my_arg<span class="token operator">|</span>
		my_arg <span class="token operator">*</span> <span class="token number">3</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>my_method <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在运行时定义方法的技术称为<strong>动态方法</strong>。<code>Module#define_method</code></p>
<blockquote>
<p>为什么使用动态方法，而不是直接定义：def</p>
</blockquote>
<p>​    因为这样可以在运行最后决定方法名叫什么，和上面动态调用方法类似，我们想在运行期间再决定一些事情</p>
<h4 id="重构Computer类"><a href="#重构Computer类" class="headerlink" title="重构Computer类"></a>重构Computer类</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">mouse</span></span>
		companent <span class="token symbol">:mouse</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">cpu</span></span>
		companent <span class="token symbol">:cpu</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">companent</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
    <span class="token comment"># 这里使用了动态调用方法</span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>
	<span class="token comment"># ... 类似操作</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们使用动态派发的方式，抽离出一个公共组件，其他配件可以直接使用，代码量减少的多</p>
<p>​    我们再用<strong>动态定义方法</strong>去试着重构一下代码    </p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>

	<span class="token comment"># 这里定义一个类方法，这里的self指向的是Computer类常量</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">define_companent</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> 
		<span class="token comment"># 根据传入的Symbol，创建相应的方法</span>
		<span class="token keyword">define_method</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span>
			info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
			<span class="token keyword">return</span> result
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
	<span class="token comment">## 这里主动调用 并动态创建对应的方法</span>
	define_companent <span class="token symbol">:mouse</span>
	define_companent <span class="token symbol">:cpu</span>
	define_companent <span class="token symbol">:keyboard</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>现在Computer已经剩不了多少代码了，我们使用内省方式缩减代码</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
    <span class="token comment"># 主动根据DS中给定的访问方法，创建访问方法，而不需要我们再去手动控制</span>
		data_source<span class="token punctuation">.</span>methods<span class="token punctuation">.</span>grep<span class="token punctuation">(</span><span class="token operator">/</span><span class="token operator">^</span>get_<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">)</span>_info$<span class="token operator">/</span> <span class="token operator">|</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token comment"># 被正则表达式匹配到的方法，会依次调用这里传递的块儿，并将内容封装到 $1 全局变量中</span>
			Computer<span class="token punctuation">.</span>define_companent $<span class="token number">1</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">define_companent</span></span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
		<span class="token keyword">define_method</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">do</span>
			info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
			result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
			<span class="token keyword">return</span> result
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们在初始化方法中加入几场代码就可以让代码更加简洁。</p>
<h3 id="method-missing方法"><a href="#method-missing方法" class="headerlink" title="method_missing方法"></a>method_missing方法</h3><blockquote>
<p>你将学习幽灵方法和动态代理</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>method<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		puts <span class="token string-literal"><span class="token string">"You called: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">args<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">','</span></span><span class="token punctuation">)</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
    puts <span class="token string-literal"><span class="token string">"(You alse passed it a block)"</span></span> <span class="token keyword">if</span> block_given<span class="token operator">?</span>
    
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    在Ruby中我们可以随意调用一个方法，而这个方法可能根本不存在，当运行时在当前对象的继承链上都没有找到这个方法时，会去找当前对象的 method_missing 方法，它就好像每个无家可归的人最终的点，method_missing是<code>BasicObject</code>中定义的私有实例方法，所以每个子类都可以使用这个方法，而BasicObject中是直接抛出这个异常，所以需要我们自己去重写。<code>method_missing</code>也叫做幽灵方法。</p>
<blockquote>
<p>现在我们通过method_missing来重构我们的Computer类</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span><span class="token punctuation">(</span>computer_id<span class="token punctuation">,</span>data_source<span class="token punctuation">)</span>
		<span class="token variable">@id</span> <span class="token operator">=</span> computer_id
		<span class="token variable">@data_source</span> <span class="token operator">=</span> data_source
	<span class="token keyword">end</span>
	<span class="token comment"># name 为 调用的方法名，args 表示参数 ，*表示接受所有的参数,封装为一个数组</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_miss</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		<span class="token comment"># 判断@data_source是否有这个方法？如果没有则调用super.method_miss,也就是未找到该方法</span>
		<span class="token keyword">super</span> <span class="token keyword">if</span> <span class="token operator">!</span><span class="token variable">@data_source</span><span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">)</span>
		<span class="token comment"># 如果有这个方法</span>
		info <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		price <span class="token operator">=</span> <span class="token variable">@data_source</span><span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_price"</span></span><span class="token punctuation">,</span><span class="token variable">@id</span><span class="token punctuation">)</span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">info</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> : (</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">price</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">)"</span></span>
		result <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"*"</span></span> <span class="token operator">+</span> result <span class="token keyword">if</span> price <span class="token operator">></span> <span class="token number">99</span>
		<span class="token keyword">return</span> result
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    现在发现我们不需要再定义额外的方法了，直接通过幽灵方法来做判断与返回，这里方法：<code>respond_to?</code>表示该实例是否有目标方法，</p>
<p>​    如果方法返回值为Boolean，一般会在方法名定义时使用<code>?</code>,如：<code>def is_black?()</code>表示。</p>
<h4 id="respond-to-missing方法"><a href="#respond-to-missing方法" class="headerlink" title="respond_to_missing方法"></a>respond_to_missing方法</h4><blockquote>
<p>如何问Computer对象是否响应幽灵方法？ </p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">cmp <span class="token operator">=</span> <span class="token class-name">Computer</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">DS</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span>
cmp<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:mouse</span><span class="token punctuation">)</span>   <span class="token comment"># => false </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    无法响应到，因为 :mouse是一个幽灵方法，我们需要重新定义<code>respond_to_missing()</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Computer</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">respond_to_missing</span></span><span class="token operator">?</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span>include_private<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>
    <span class="token variable">@data_source</span><span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"get_</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">_info"</span></span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">super</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

cmp <span class="token operator">=</span> <span class="token class-name">Computer</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token class-name">DS</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">)</span>
cmp<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:mouse</span><span class="token punctuation">)</span>   <span class="token comment"># => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    所以正确的做法是每次覆写<code>method_missing</code>时，同时也覆写<code>respond_to_missing?</code>方法</p>
<h4 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h4><p>​    通常，幽灵方法都是锦上添花的左右，不过有些对象的功能，几乎完全依赖于他，这些对象通常是一些封装对象，他们封装的可以是另一个对象，web服务或者其他语言写成的代码，这些对象通过method_missing方法收集方法调用，并把这些调用转发到被封装的对象上</p>
<h4 id="const-missing方法"><a href="#const-missing方法" class="headerlink" title="const_missing方法"></a>const_missing方法</h4><p>​    如果对于一个常量的引用发现找不到，则会默认调用<code>const_missing</code>方法，将常量名作为一个符号进行传递。</p>
<p>​    在Rake中就有使用，为了兼容老版本的Task和新版本的Rake::Task。 </p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">Rake</span>
  <span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
  <span class="token keyword">class</span> <span class="token class-name">FileTask</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Module</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">const_missing</span></span><span class="token punctuation">(</span>const_name<span class="token punctuation">)</span>
    <span class="token keyword">case</span> const_name
    <span class="token keyword">when</span> <span class="token symbol">:Task</span>
      p <span class="token string-literal"><span class="token string">"提示：原有的Task，已经移入，Rake名称空间，请使用 Rake::Task"</span></span>
      Rake<span class="token double-colon punctuation">::</span>Task
    <span class="token keyword">when</span> <span class="token symbol">:FileTask</span>
      p <span class="token string-literal"><span class="token string">"提示：原有的Task，已经移入，Rake名称空间，请使用 Rake::FileTask"</span></span>
      Rake<span class="token double-colon punctuation">::</span>FileTask
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># main是Object的实例，Object是Class的实例，Class的父类是Module，所以当我们使用猴子补丁修改</span>
<span class="token comment"># Module#const_missing时，main对象是继承到这个方法的。</span>
<span class="token comment"># 我们想要访问Task常量，发现并不存在，则触发了const_missing(const_name)</span>
p <span class="token class-name">Task</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p <span class="token class-name">FileTask</span><span class="token punctuation">.</span><span class="token keyword">new</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="method-missing隐藏Bug"><a href="#method-missing隐藏Bug" class="headerlink" title="method_missing隐藏Bug"></a>method_missing隐藏Bug</h4><blockquote>
<p>我们设计一个按照人名，抽号码的小程序</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Roulette</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		person <span class="token operator">=</span> name<span class="token punctuation">.</span>to_s<span class="token punctuation">.</span>capitalize
		<span class="token number">3.</span>times <span class="token keyword">do</span>
      <span class="token comment"># 这里在块儿内定义了number</span>
			number <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
			puts <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">..."</span></span>
		<span class="token keyword">end</span>
    <span class="token comment"># 这里又使用了number，因为作用域的不同，运行时找不到这个变量，所以默认会找 number这个方法，因为也没有这个方法，所以调用了method_missing方法，导致不断的重入</span>
		<span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> got </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
number_of <span class="token operator">=</span> <span class="token class-name">Roulette</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
p number_of<span class="token punctuation">.</span>bob	
p number_of<span class="token punctuation">.</span>Jack	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>不知道你是否可以看出来？当程序运行时会不断方法重入，直到栈溢出。所以我们需要进行改良。</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Roulette</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">method_missing</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
		person <span class="token operator">=</span> name<span class="token punctuation">.</span>to_s<span class="token punctuation">.</span>capitalize
		<span class="token comment"># 判断是否名字是否存在，如果不存在，直接报错</span>
		<span class="token keyword">super</span> <span class="token keyword">unless</span> <span class="token string-literal"><span class="token string">%w[Bob Frank Bill]</span></span><span class="token punctuation">.</span><span class="token keyword">include</span><span class="token operator">?</span> person
    <span class="token comment"># 将局部变量作用域移出</span>
		number <span class="token operator">=</span> <span class="token number">0</span>
		<span class="token number">3.</span>times <span class="token keyword">do</span>
			number <span class="token operator">=</span> rand<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>
			puts <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">..."</span></span>
		<span class="token keyword">end</span>
		<span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">name</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> got </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">number</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
number_of <span class="token operator">=</span> <span class="token class-name">Roulette</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
p number_of<span class="token punctuation">.</span>Bob	
p number_of<span class="token punctuation">.</span>Frank	<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="白板类"><a href="#白板类" class="headerlink" title="白板类"></a>白板类</h3><blockquote>
<p>​    比如说上面的 number_of.display 我们希望实际调用 method_missing 方法，但实际上可能调用了Object.display方法，这是因为我们从Object类中继承了大量的方法，所以时常导致<strong>幽灵方法与继承方法的重复</strong>。</p>
</blockquote>
<p>​    如果实例存在继承方法，则幽灵方法是失效的。我们有两个办法：</p>
<ol>
<li>删除继承来的方法</li>
<li>写一个白板类，也就是很干净了的类，没有继承的方法</li>
</ol>
<h4 id="白班类-：-BasicObject"><a href="#白班类-：-BasicObject" class="headerlink" title="白班类 ： BasicObject"></a>白班类 ： BasicObject</h4><p>​    BasicObject是Object的父类，其中定义的实例方法很少，所以我们可以让现有的类继承BasicObject，从而可以避免继承Object类的方法，这是最简单的白板类实现方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># [:__send__, :!, :instance_eval, :==, :instance_exec, :!=, :equal?, :__id__]</span>
p BasicObject<span class="token punctuation">.</span>instance_methods<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="删除方法"><a href="#删除方法" class="headerlink" title="删除方法"></a>删除方法</h4><ol>
<li>Module#undef_method  删除所有的方法，包括继承的</li>
<li>Module#remove_method 只删除接受者自己的方法</li>
</ol>
<p>所以我们最终可以选择让<code>Roulette 继承 BasicObject</code>，或者删除指定方法</p>
<h4 id="对比动态方法与幽灵方法"><a href="#对比动态方法与幽灵方法" class="headerlink" title="对比动态方法与幽灵方法"></a>对比动态方法与幽灵方法</h4><p>​    幽灵方法更容易出现隐性Bug，所以能使用动态方法，尽量使用动态方法，除非不得不使用时，才去使用，记住如果重写 response_to? ，也要重新 response_to_missing?</p>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><blockquote>
<p>学习路线</p>
</blockquote>
<ul>
<li>代码块的基础知识</li>
<li>作用域的基础知识：用代码块携带变量穿越作用域</li>
<li>通过传递块给<code>instance_eval</code>方法来控制作用域</li>
<li>怎么把块转换为Proc和Lambda这样的可调用对象，供以后调用</li>
</ul>
<h3 id="代码块基础知识"><a href="#代码块基础知识" class="headerlink" title="代码块基础知识"></a>代码块基础知识</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">a_method</span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span> 
  a<span class="token operator">+</span> <span class="token keyword">yield</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span>
<span class="token keyword">end</span>
a_method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token punctuation">,</span>y<span class="token operator">|</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    代码块可以用大括号定义，也可以使用<code>do...end</code>关键字定义，通常如果一行的块使用大括号，而多行的块使用<code>do...end</code></p>
<p>​    块可以有自己的参数，比如上面的例子中的x和y，可以像调用方法那样为块提供参数，</p>
<p>​    可以通过<code>Kernel#block_given?</code>查看是否传达快，如果没有，调用yield则会报错</p>
<h3 id="代码块是闭包"><a href="#代码块是闭包" class="headerlink" title="代码块是闭包"></a>代码块是闭包</h3><blockquote>
<p>代码块可以把变量带出原来的作用域</p>
<p>代码块不能孤立的运行，它需要一个执行环境：局部变量，实例变量，self等</p>
<p>可以运行的代码由两部分组成：代码本身  和   一组绑定</p>
<p>当我们定义一个block时，它将获取到环境中的绑定，当block被传给一个方法时，他会带着这些绑定一起进入该方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
  x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Good"</span></span>
  <span class="token keyword">yield</span> <span class="token string-literal"><span class="token string">"cruel"</span></span>
<span class="token keyword">end</span>

x <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Bad"</span></span>
my_method <span class="token punctuation">&#123;</span><span class="token operator">|</span>y<span class="token operator">|</span> p <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">x</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">y</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> World"</span></span><span class="token punctuation">&#125;</span>  <span class="token comment"># => "Bad , cruel World"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里我们调用my_method时，创建了一个block，并获取顶层上下文中的x变量，而my_method中定义的x变量对于block是不可见的，也可以在block中定义额外的绑定，但这些绑定在block结束时就消失了。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">just_yield</span></span>
  <span class="token keyword">yield</span>
<span class="token keyword">end</span>

top_leval_var <span class="token operator">=</span> <span class="token number">1</span>

just_yield <span class="token keyword">do</span>
  top_leval_var <span class="token operator">+=</span> <span class="token number">1</span>
  local_to_block <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

p top_leval_var     <span class="token comment"># => 2</span>
p local_to_block    <span class="token comment"># => error!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    基于这些特性，人们喜欢把代码块称为<strong>闭包</strong>，换句话说：代码块可以获取局部绑定，并一直带着他们</p>
<blockquote>
<p>如何使用闭包呢？</p>
</blockquote>
<p>​    这里我们需要了解绑定寄居的地方——作用域，需要判断程序在哪里切换了作用域，作用域的作用有哪些？</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><p>​    不论是Java，Python，Ruby都会有作用域的概念，就好像是单独的一个作用空间，一个领地，在这里有专属的局部变量</p>
<h3 id="切换作用域"><a href="#切换作用域" class="headerlink" title="切换作用域"></a>切换作用域</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">v1 <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 顶层作用域</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>  <span class="token comment"># 类作用域</span>
	v2 <span class="token operator">=</span> <span class="token number">2</span>
	p local_variables  <span class="token comment"># => [:v2]</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>  <span class="token comment"># 方法作用域</span>
		v3 <span class="token operator">=</span> <span class="token number">3</span>
		p local_variables  <span class="token comment"># => [:v3]</span>
	<span class="token keyword">end</span>
	p local_variables  <span class="token comment"># => [:v2]</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>my_method
obj<span class="token punctuation">.</span>my_method
p local_variables  <span class="token comment"># => [:v1, :obj]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最初在顶层作用域 定义 v1 = 1</p>
<p>定义class MyClass，切换作用域，一旦切换作用域，绑定也会修改，v1对于MyClass内部域是不可见的，在其内部定义了一个方法和变量，当执行到实例方法内部，作用域再次切换</p>
<p>当MyClass定义完毕，再次切换回顶级作用域。</p>
<blockquote>
<p>全局变量与顶级实例变量</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">incre</span></span>
		<span class="token variable">$var</span> <span class="token operator">+=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token variable">$var</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obj<span class="token punctuation">.</span>incre
p <span class="token variable">$var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里定义了全局变量var，发现在所有作用域都可以访问并操作到，所以一旦出现问题，很难排查。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
	<span class="token variable">@var</span> <span class="token operator">+=</span> <span class="token number">1</span>
<span class="token keyword">end</span>
p <span class="token variable">@var</span>
my_method
p <span class="token variable">@var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里定义一个顶级上下文中的实例变量，当main对象扮演self的角色，就可以访问到顶级实例变量，但如果进入其他对象作为self，则无法访问到</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
    <span class="token variable">@var</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"this is not top level @var"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span> 
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p obj<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>顶级实例变量 要比 全局变量 有限的安全</p>
<p>这里我们想弄清楚作用域是如何切换，绑定是如何切换的，需要了解作用域门</p>
<h3 id="作用域门"><a href="#作用域门" class="headerlink" title="作用域门"></a>作用域门</h3><p>程序一般会在三个地方，关闭之前的作用域，打开新的作用域，分别为：</p>
<ol>
<li>方法 def</li>
<li>类定义 class</li>
<li>模块儿定义 module</li>
</ol>
<p>每个关键字对应一个作用域门，各个作用域中的变量相互隔离</p>
<blockquote>
<p>现在看到每个作用域有独立的空间，如果想要变量在作用域之间传递，该如何操作？</p>
</blockquote>
<h3 id="扁平化作用域"><a href="#扁平化作用域" class="headerlink" title="扁平化作用域"></a>扁平化作用域</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">var <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Success"</span></span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里想访问到var</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token comment"># 这里想访问到var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p> 一旦切换作用域局部变量就会失效，如何能让var穿越两个作用域被访问到？</p>
</blockquote>
<p>Ruby是非常灵活的，它为一种实现提供了多种方法，上面知道了<code>class module def</code>三个关键字为作用域门，那我们使用其他方式来实现相同的结果，这样就可以避免切换作用域了</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">var <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"Success"</span></span>
<span class="token comment"># 使用Class.new 切换 class关键字，避免切换作用域</span>
MyClass <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token keyword">do</span> 
	p var
  <span class="token comment"># 使用动态定义方法，替换def关键字，避免切换作用域</span>
	<span class="token keyword">define_method</span> <span class="token symbol">:my_method</span> <span class="token keyword">do</span>
		p var
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obg <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
obg<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    如果两个作用域挤压在一起，我们通常简称为 扁平作用域</p>
<h3 id="共享作用域"><a href="#共享作用域" class="headerlink" title="共享作用域"></a>共享作用域</h3><blockquote>
<p>​    如果想在一组方法之间共享一个变量，但又不想别的方法访问到这个变量，就可以把这些方法定义在该变量所在的扁平作用域</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
  <span class="token comment"># 这里是一个局部变量，希望仅被几个方法访问到</span>
	share <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token comment"># 使用内核方法，调用 define_method 来定义函数，而又不用切换域，这样这几个方法就可以访问到变量</span>
  <span class="token comment"># 也可以只用 define_method :counter do</span>
	Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:counter</span> <span class="token keyword">do</span>
		share
	<span class="token keyword">end</span>
	Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:inc</span> <span class="token keyword">do</span> <span class="token operator">|</span>x<span class="token operator">|</span>
		share <span class="token operator">+=</span> x
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">other_method</span></span>
  <span class="token comment"># 这里则无法再访问到share</span>
  share
<span class="token keyword">end</span>
my_method
p counter   <span class="token comment"># => 0</span>
inc <span class="token number">4</span>
p counter   <span class="token comment"># => 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="上下文探针（instance-eval）"><a href="#上下文探针（instance-eval）" class="headerlink" title="上下文探针（instance_eval）"></a>上下文探针（instance_eval）</h3><p>这里我们学习一个新的方法：<code>BasicObject#instance_eval</code>,它在一个对象的上下文中执行block，运行时，代码块的接收者将会成为self</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@v</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 这里self切换为obj</span>
obj<span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>
	p <span class="token keyword">self</span>
  <span class="token comment"># 输出的实例变量也是属于self的</span>
	p <span class="token variable">@v</span>
<span class="token keyword">end</span>
<span class="token comment"># 上下文探针结束后，self又变回了 main </span>
<span class="token comment"># 这里 下面三行代码都处在扁平作用域，所以Block可以使用局部变量v，并访问到obj中的实例变量</span>
v <span class="token operator">=</span> <span class="token number">2</span>
obj<span class="token punctuation">.</span>instance_eval <span class="token punctuation">&#123;</span><span class="token variable">@v</span> <span class="token operator">=</span> v<span class="token punctuation">&#125;</span>
obj<span class="token punctuation">.</span>instance_eval <span class="token punctuation">&#123;</span>p <span class="token variable">@v</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里需要注意一个点：instance_eval会将接收者变为当前对象self。而调用者的<strong>实例变量</strong>就落在作用域范围外，如果不了解，就会出现Bug，例如：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">C</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">D</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">twisted_method</span></span>
    <span class="token comment"># 如果这里 @y 改为 y ，即可被访问到</span>
		<span class="token variable">@y</span> <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token comment"># 在执行下面代码之前，self为D.new，一旦执行下面的代码，C.new为self，@x在C.new中定义了，@y则没有</span>
		<span class="token class-name">C</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>instance_eval <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"@x : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@x</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , @y : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@y</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>twisted_method  <span class="token comment"># => "@x : 1 , @y : "</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里输出发现，@y并未访问到， 可是上面的调用代码在同一个扁平作用域，原来是因为instance_eval将C.new对象变为当前对象self，调用者的实例变量就落在了作用域外了，所以访问不到为：nil。</p>
<blockquote>
<p>这里使用 instance_exec 来解决传递参数的问题</p>
</blockquote>
<h4 id="instance-exec"><a href="#instance-exec" class="headerlink" title="instance_exec"></a>instance_exec</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">D</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">twisted_method</span></span>
		<span class="token variable">@y</span> <span class="token operator">=</span> <span class="token number">2</span>
    <span class="token comment"># 这里主动将 @y传递到块儿中</span>
		<span class="token class-name">C</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>instance_exec<span class="token punctuation">(</span><span class="token variable">@y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>y<span class="token operator">|</span><span class="token string-literal"><span class="token string">"@x : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token variable">@x</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , @y : </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">y</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">&#125;</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="洁净室"><a href="#洁净室" class="headerlink" title="洁净室"></a>洁净室</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">CleanRoom</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">current_temp</span></span>
    <span class="token number">18</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
clean_room <span class="token operator">=</span> <span class="token class-name">CleanRoom</span><span class="token punctuation">.</span><span class="token keyword">new</span>
clean_room<span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>
  <span class="token keyword">if</span> current_temp <span class="token operator">&lt;</span> <span class="token number">20</span>
    p <span class="token string-literal"><span class="token string">"wear a jacket"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    洁净室只是一个用来执行块的环境，它提供若干有用的方法供代码块调用，比如本例中的<code>current_temperature</code>方法，然而一个理想的洁净室应该是没有实例变量和方法的，因为这可能与block从环境中带来的名字冲突，因此BasicObject的实例往往用来充当洁净室，因为它是白板类，几乎没什么方法。</p>
<h3 id="可调用对象"><a href="#可调用对象" class="headerlink" title="可调用对象"></a>可调用对象</h3><p>​    目前我们使用的Block是直接执行的，我们需要让Block变为对象，可以进行打包传递，调用，我们看一下有哪些打包代码的方式。</p>
<ol>
<li>proc , 将Block转为Proc对象</li>
<li>lambda ，属于proc的变种</li>
<li>使用方法</li>
</ol>
<h4 id="Proc对象"><a href="#Proc对象" class="headerlink" title="Proc对象"></a>Proc对象</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 将Block打包为Proc</span>
inc <span class="token operator">=</span> <span class="token class-name">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token operator">|</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token comment"># 主动调用Block</span>
p inc<span class="token punctuation">.</span>call <span class="token number">2</span>

inc_ <span class="token operator">=</span> proc <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token operator">|</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
p inc<span class="token punctuation">.</span>call <span class="token number">2</span>

obj <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span><span class="token operator">|</span>x<span class="token operator">|</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
p obj<span class="token punctuation">.</span>call <span class="token number">2</span>

obj_ <span class="token operator">=</span> <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
p obj_<span class="token punctuation">.</span>call <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="amp-操作符"><a href="#amp-操作符" class="headerlink" title="&amp;操作符"></a>&amp;操作符</h4><p>​    在调用方法时，我们为其传递一个Block，可通过yield进行执行，但是如果我们想将这个Block封装起来，延迟调用，该如何操作</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里&amp;block将Block封装为Proc</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
	p name
  <span class="token comment"># 这里对其调用</span>
	block<span class="token punctuation">.</span>call
<span class="token keyword">end</span>
<span class="token comment"># 传递Block时，不需要再参数后面加 , </span>
my_method <span class="token string-literal"><span class="token string">"qsc"</span></span> <span class="token keyword">do</span> p <span class="token string-literal"><span class="token string">"Hello World"</span></span> <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果想把 Proc 再转为 Block 该怎么操作</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span>
	p <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">greeting</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> , </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">yield</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">&#125;"</span></span>
<span class="token keyword">end</span>
my_proc <span class="token operator">=</span> proc <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"Bill"</span></span><span class="token punctuation">&#125;</span>
my_method<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Hello"</span></span><span class="token punctuation">,</span><span class="token operator">&amp;</span>my_proc<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    现在就可以将Block与Proc相互转化了</p>
<h4 id="Lambda-和-Proc的区别"><a href="#Lambda-和-Proc的区别" class="headerlink" title="Lambda 和 Proc的区别"></a>Lambda 和 Proc的区别</h4><ol>
<li>参数校验不同</li>
<li>return定义不同</li>
</ol>
<p>​    参数校验是指：Lambda中定义两个入参，如果你没传递，或者传递多了，则会报错，如果是Proc定义两个入参，如果没传递，则变量为nil，如果传递多了，多余部分也不会使用。Lambda更严格一些</p>
<p>​    return定义不同：Lambda中使用return，表示从Lambda表达式中返回，而Proc表示从定义Proc的作用域中返回</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
  <span class="token comment"># 这里block在my_method中定义，一旦执行return就会从my_method中退出</span>
	p <span class="token operator">=</span> <span class="token class-name">Proc</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>
	result <span class="token operator">=</span> p<span class="token punctuation">.</span>call  <span class="token comment"># 这里调用完，就退出定义p的作用域，所以下面执行不到</span>
	<span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span>  <span class="token comment"># 这里实际上是不可到达的</span>
<span class="token keyword">end</span>

p my_method <span class="token comment"># => 10 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
	p <span class="token operator">=</span> lambda <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">10</span><span class="token punctuation">&#125;</span>
	result <span class="token operator">=</span> p<span class="token punctuation">.</span>call
	<span class="token keyword">return</span> result <span class="token operator">*</span> <span class="token number">2</span>  
<span class="token keyword">end</span>

p my_method <span class="token comment"># => 20 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="Lambda和Proc对比"><a href="#Lambda和Proc对比" class="headerlink" title="Lambda和Proc对比"></a>Lambda和Proc对比</h4><p>​    整体而言，Lambda更直观，它更像一个方法，对参数数量校验严格，在调用return时，只是从代码中返回。</p>
<h4 id="Method对象"><a href="#Method对象" class="headerlink" title="Method对象"></a>Method对象</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">initialize</span></span>
		<span class="token variable">@v</span> <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token variable">@v</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 通过Kernel#method方法，将obj中的方法转为一个Method对象 ！！！ </span>
mobj <span class="token operator">=</span> obj<span class="token punctuation">.</span>method <span class="token symbol">:my_method</span>

p mobj<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => Method</span>
<span class="token comment"># 主动调用</span>
p mobj<span class="token punctuation">.</span>call
mobj<span class="token punctuation">.</span>to_proc  <span class="token comment"># 将Method转为Proc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Method和Proc有什么区别？</p>
</blockquote>
<p>lambda 在定义它的作用域执行，block是一个闭包</p>
<p>Method 对象会在自身所在的对象的作用域执行，因为Method是所属对象的</p>
<h4 id="自由方法"><a href="#自由方法" class="headerlink" title="自由方法"></a>自由方法</h4><p>​    听名字感觉是一个脱离类，模块儿的一个方法，可以使用<code>Module#unbind</code>将一个方法转为自由方法，也可以使用<code>Module#instance_method</code>获取一个自由方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token number">42</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
unbound <span class="token operator">=</span> MyModule<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token symbol">:my_method</span><span class="token punctuation">)</span>
p unbound<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => UnboundMethod</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    自由方法并不能脱离对象执行，所以我们可以把他再绑定到一个对象中，使之再次成为Method对象，可以使用<code>UnboundMethod#bind</code>进行绑定，从某个类中分离出来的UnboundMethod，只能绑定在该类或者子类的对象上，模块儿中分离的自由方法则可以自由处置。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span>
		<span class="token number">42</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
unbound <span class="token operator">=</span> MyModule<span class="token punctuation">.</span>instance_method<span class="token punctuation">(</span><span class="token symbol">:my_method</span><span class="token punctuation">)</span>
p unbound<span class="token punctuation">.</span><span class="token keyword">class</span>  <span class="token comment"># => UnboundMethod</span>
<span class="token comment"># 这里在String中定义新的方法，以前我们会传递一个Block，这里我们直接像参数一眼进行传递</span>
<span class="token builtin">String</span><span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:another_method</span><span class="token punctuation">,</span>unbound
p <span class="token string-literal"><span class="token string">"abc"</span></span><span class="token punctuation">.</span>another_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="编写领域专属语言（DSL）"><a href="#编写领域专属语言（DSL）" class="headerlink" title="编写领域专属语言（DSL）"></a>编写领域专属语言（DSL）</h3><blockquote>
<p>编写一个监视工具，如果发生不正常状况，进行消息通知，比如：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 定义一个事件，传达一个事件描述，如果传递的代码块为true，则进行事件描述通知，如果为false，则不通知</span>
event <span class="token string-literal"><span class="token string">"we're earning wade of money"</span></span> <span class="token keyword">do</span>
    <span class="token comment"># 这里从数据库中获取数据</span>
    recent_orders <span class="token operator">=</span> <span class="token number">10000</span>
    recent_orders <span class="token operator">></span> <span class="token number">5000</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="第一个领域专用语言"><a href="#第一个领域专用语言" class="headerlink" title="第一个领域专用语言"></a>第一个领域专用语言</h4><blockquote>
<p>我们进行第一版的设计，只要让这个程序每隔几分钟运行一次</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里需要将加载路径添加，否则load会报错</span>
<span class="token variable">$LOAD_PATH</span><span class="token punctuation">.</span>unshift<span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span> 

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">event</span></span><span class="token punctuation">(</span>description<span class="token punctuation">)</span>
    p description <span class="token keyword">if</span> <span class="token keyword">yield</span>
<span class="token keyword">end</span>
<span class="token comment"># 加载后，所有事件将会执行</span>
load <span class="token string-literal"><span class="token string">'events.rb'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这个文件就定义所有的事件</span>
event <span class="token string-literal"><span class="token string">"i am test can i get the right result: false"</span></span> <span class="token keyword">do</span>
    <span class="token boolean">false</span>
<span class="token keyword">end</span>
event <span class="token string-literal"><span class="token string">"i am test can i get the right result: true"</span></span> <span class="token keyword">do</span>
    <span class="token boolean">true</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="共享事件"><a href="#共享事件" class="headerlink" title="共享事件"></a>共享事件</h4><blockquote>
<p>共享事件：是否能让两个独立的事件访问同一个变量？ （使用<strong>扁平作用域</strong>）</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">monthly_sales</span></span>
    <span class="token number">100</span>  <span class="token comment"># 从数据库获取的</span>
<span class="token keyword">end</span>

target_sales <span class="token operator">=</span> <span class="token number">101</span> 

event <span class="token string-literal"><span class="token string">"monthly sales are suspiciously"</span></span> <span class="token keyword">do</span>
    monthly_sales <span class="token operator">></span> target_sales
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"monthly sales are abysmally low"</span></span> <span class="token keyword">do</span>
    monthly_sales <span class="token operator">&lt;</span> target_sales
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="改良的DSL"><a href="#改良的DSL" class="headerlink" title="改良的DSL"></a>改良的DSL</h4><blockquote>
<p>这里我们将方法和临时变量直接定义在顶级作用域中，这是不合适的，应该进行封装与优化，希望是下面的效果</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
    <span class="token variable">@sky_height</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">end</span>

setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>
    <span class="token variable">@mountains_height</span> <span class="token operator">=</span> <span class="token number">200</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"the sky is falling"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@sky_height</span> <span class="token operator">&lt;</span> <span class="token number">200</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"its getting closer"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@sky_height</span> <span class="token operator">&lt;</span> <span class="token variable">@mountains_height</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"whoops ... too late"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@sky_height</span> <span class="token operator">&lt;</span> <span class="token number">0</span>
<span class="token keyword">end</span>

<span class="token comment"># 我们可以自由的混合事件和setup代码块，DSL还是会检测事件，在每次执行事件前都会运行所有的setup，我们希望运行后的结果为：</span>
<span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
<span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>

<span class="token string-literal"><span class="token string">"the sky is falling"</span></span>

<span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
<span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>

<span class="token string-literal"><span class="token string">"its getting closer"</span></span>

<span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
<span class="token string-literal"><span class="token string">"Setting up mountains"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>setup应该给@开头的变量赋值，事件可以读取这些变量，这样后面写代码就会干净的多</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token string-literal"><span class="token string">"main对象的实例变量：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span>instance_variables</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>

<span class="token variable">$LOAD_PATH</span><span class="token punctuation">.</span>unshift<span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">event</span></span><span class="token punctuation">(</span>description<span class="token punctuation">)</span>
    <span class="token comment"># 每次执行block前，先load数据获取文件，我们在其中定义一些实例变量，当加载后，该实例变量归属于main对象，这里是扁平作用域，所以可以被事件感知到</span>
    load <span class="token string-literal"><span class="token string">'setup.rb'</span></span>
    p description <span class="token keyword">if</span> <span class="token keyword">yield</span>
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">setup</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">yield</span>
<span class="token keyword">end</span>

load <span class="token string-literal"><span class="token string">'events.rb'</span></span>
<span class="token comment"># 在 load 后，加载文件中</span>
p <span class="token string-literal"><span class="token string">"main对象的实例变量：</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">self</span><span class="token punctuation">.</span>instance_variables</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>专门在一个文件中定义实例数据</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up sky"</span></span>
    <span class="token variable">@sky_height</span> <span class="token operator">=</span> <span class="token number">100</span>
<span class="token keyword">end</span>

setup <span class="token keyword">do</span>
    puts <span class="token string-literal"><span class="token string">"Setting up mountains"</span></span>
    <span class="token variable">@mountains_height</span> <span class="token operator">=</span> <span class="token number">200</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>新需求：要求按照特定的顺序执行块和事件</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">$LOAD_PATH</span><span class="token punctuation">.</span>unshift<span class="token punctuation">(</span><span class="token builtin">File</span><span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>__FILE__<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">setup</span></span><span class="token punctuation">(</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
    <span class="token variable">@setups</span> <span class="token operator">&lt;&lt;</span> block
<span class="token keyword">end</span>

<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">event</span></span><span class="token punctuation">(</span>description<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
    <span class="token variable">@events</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">&#123;</span><span class="token symbol">:description</span><span class="token operator">=></span>description<span class="token punctuation">,</span><span class="token symbol">:condition</span><span class="token operator">=></span>block<span class="token punctuation">&#125;</span>
<span class="token keyword">end</span>

<span class="token variable">@setups</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token variable">@events</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment"># 这里所有的event已经被保存，所有的setup也保存好了</span>
load <span class="token string-literal"><span class="token string">'events.rb'</span></span>

<span class="token variable">@events</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
    <span class="token variable">@setups</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
        setup<span class="token punctuation">.</span>call
    <span class="token keyword">end</span>
    puts <span class="token string-literal"><span class="token string">"ALERT: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">event<span class="token punctuation">[</span><span class="token symbol">:description</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">if</span> event<span class="token punctuation">[</span><span class="token symbol">:condition</span><span class="token punctuation">]</span><span class="token punctuation">.</span>call
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="消除全局变量"><a href="#消除全局变量" class="headerlink" title="消除全局变量"></a>消除<strong>全局</strong>变量</h4><blockquote>
<p>新需求：@events 和 @setups 为顶级实例变量，但其实也是全局变量的变形，安全性有限，我们能不能消除他们，这里我们使用共享作用域</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">lambda <span class="token punctuation">&#123;</span>
    setups <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    events <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:setup</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        setups <span class="token operator">&lt;&lt;</span> block
    <span class="token keyword">end</span>

    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:event</span> <span class="token keyword">do</span> <span class="token operator">|</span>description<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        events <span class="token operator">&lt;&lt;</span> <span class="token punctuation">&#123;</span><span class="token symbol">:description</span><span class="token operator">=></span>description<span class="token punctuation">,</span><span class="token symbol">:condition</span><span class="token operator">=></span>block<span class="token punctuation">&#125;</span>
    <span class="token keyword">end</span>

    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:each_setup</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        setups<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
            block<span class="token punctuation">.</span>call setup
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    Kernel<span class="token punctuation">.</span>send <span class="token symbol">:define_method</span><span class="token punctuation">,</span><span class="token symbol">:each_event</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
        events<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
            block<span class="token punctuation">.</span>call event
        <span class="token keyword">end</span>
    <span class="token keyword">end</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">.</span>call

load <span class="token string-literal"><span class="token string">"events.rb"</span></span>

each_event <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
    each_setup <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
        setup<span class="token punctuation">.</span>call
    <span class="token keyword">end</span>
    puts <span class="token string-literal"><span class="token string">"ALERT: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">event<span class="token punctuation">[</span><span class="token symbol">:description</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">if</span> event<span class="token punctuation">[</span><span class="token symbol">:condition</span><span class="token punctuation">]</span><span class="token punctuation">.</span>call
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我们使用lambda来定义一个block，在内部定义setups 和 events，在Kernel中定义方法，这些方法能访问到block中的代码块，而其他方法则无法访问到，这样就可以保证，消除全局变量，但代码看起来更复杂了似乎</p>
<h4 id="添加一个洁净室"><a href="#添加一个洁净室" class="headerlink" title="添加一个洁净室"></a>添加一个洁净室</h4><blockquote>
<p>在目前的版本中，事件可以修改其他事件共享的顶层实例变量，我们需要在setup中定义共享变量，而不是在事件中</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">event <span class="token string-literal"><span class="token string">"define a shared variable"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

event <span class="token string-literal"><span class="token string">"define a shared variable"</span></span> <span class="token keyword">do</span>
    <span class="token variable">@x</span> <span class="token operator">=</span> <span class="token variable">@x</span> <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>改进方案，使用Object作为白板类，使用上线文探针执行block，这样每个event都是独立的，这里我们没有使用BasicObject充当白板类，因为里面缺少一些基本的方法：puts</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">each_event <span class="token keyword">do</span> <span class="token operator">|</span>event<span class="token operator">|</span>
    env <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">new</span>
    each_setup <span class="token keyword">do</span> <span class="token operator">|</span>setup<span class="token operator">|</span>
        env<span class="token punctuation">.</span>instance_eval <span class="token operator">&amp;</span>setup
    <span class="token keyword">end</span>
    puts <span class="token string-literal"><span class="token string">"ALERT: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">event<span class="token punctuation">[</span><span class="token symbol">:description</span><span class="token punctuation">]</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">if</span> env<span class="token punctuation">.</span>instance_eval <span class="token operator">&amp;</span><span class="token punctuation">(</span>event<span class="token punctuation">[</span><span class="token symbol">:condition</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>作用域门 和 Ruby管理作用域的方式</li>
<li>利用扁平作用域 和共享作用域 让绑定穿越作用域</li>
<li>在对象的作用域中执行代码（通过instance_eval 或者 instance_exec） ，在洁净室中执行代码</li>
<li>在代码块和对象之间相互转化</li>
<li>在方法和对象之间相互转换</li>
<li>可调用对象（代码块，Proc，Lambda及普通方法）的区别</li>
<li>编写自己的领域专属语言</li>
</ul>
<h2 id="类定义"><a href="#类定义" class="headerlink" title="类定义"></a>类定义</h2><p>​    在类定义中，Java与Ruby有着极大的不同，在Java中类定义就好像你对编译器说：这是我希望对象的行为，但在对象创建前或者使用方法前，什么也不会发生。而Ruby的类定义不仅仅是规定对象的行为方式，实际上也是运行代码。</p>
<p>​    这种思想催生出两种法术：<strong>类宏</strong>可以来修改类，<strong>环绕别名</strong>可以在其他方法前后封装额外的代码，为了最大程度使用这些法术，我们将介绍<strong>单件类</strong></p>
<p>​    学习之前我们需要提醒，类不过是增强的模块，所有关于类定义的，对模块也同样适用</p>
<h3 id="深入类定义"><a href="#深入类定义" class="headerlink" title="深入类定义"></a>深入类定义</h3><blockquote>
<p>​    类中不仅能定义方法，也可以放入任何代码进行执行</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  puts <span class="token string-literal"><span class="token string">"Hello"</span></span>  <span class="token comment"># => Hello</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>和方法和块类似，类定义也会返回最后一条语句的值</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">result <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">self</span>
<span class="token keyword">end</span>
p result  <span class="token comment"># => MyClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    定义类或模块儿时，类本身充当当前对象self的角色，因为类和模块儿也是对象，所以可以充当self，这里我们引入一个相关的概念：<strong>当前类</strong></p>
<h3 id="当前类"><a href="#当前类" class="headerlink" title="当前类"></a>当前类</h3><blockquote>
<p>至今为止，有几个概念混杂在一起，当前对象，当前类，当前作用域</p>
</blockquote>
<p>​    无论程序在哪个位置，都会有一个当前对象self，同样也总是有一个当前类或模块儿的存在，定义一个方法时，这个方法将成为当前类的一个实例方法。</p>
<p>​    self可以获取当前对象，但是Ruby中并没有相应的方法获取当前类的引用，我们这里有几个规则</p>
<ol>
<li>在程序的顶层，当前类为Object，这是main对象所属的类(这就是在顶层定义方法会成为Object实例方法的原因)</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里定义的是private实例方法，当前类为Object，所以子类也会继承到这个方法</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">say_hello</span></span>
	p <span class="token string-literal"><span class="token string">"Hello World"</span></span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
		say_hello
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 这里是可以调用成功的</span>
obj<span class="token punctuation">.</span>hi  
say_hello
obj<span class="token punctuation">.</span>send <span class="token symbol">:say_hello</span>
<span class="token comment"># 这里无法调用</span>
obj<span class="token punctuation">.</span>say_hello  <span class="token comment"># 因为say_hello是一个私有方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>在一个方法中，当前类就是当前对象的类，比如我们在一个函数中定义另一个函数，这个内部定义的函数属于当前对象的类</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token comment"># 这里一旦执行，当前类为User</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span> 
		<span class="token comment"># 这里定义的函数生效，并属于User，</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">two</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>one
p User<span class="token punctuation">.</span>instance_methods<span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>  <span class="token comment"># => [:one, :two]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>当使用class或者module打开一个类时，这个类成为当前类</li>
</ol>
<blockquote>
<p>如果我们想将类为参数，动态的给类添加一个实例方法，我们该如何操作</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_method_to</span></span><span class="token punctuation">(</span>a_class<span class="token punctuation">)</span>
  <span class="token comment"># TODO : 在 a_class上定义方法 m()</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>这里我们引入class_eval方法</p>
<h4 id="class-eval方法"><a href="#class-eval方法" class="headerlink" title="class_eval方法"></a>class_eval方法</h4><p><strong>Module#class_eval</strong>方法会在一个已存在类的上下文中执行一个块儿。这听起来和<code>obj.instance_eval</code>很像。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_method_to</span></span><span class="token punctuation">(</span>a_class<span class="token punctuation">)</span>
  a_class<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">m</span></span><span class="token punctuation">;</span> <span class="token string-literal"><span class="token string">'Hello'</span></span><span class="token punctuation">;</span> <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
add_method_to <span class="token builtin">String</span>
<span class="token string-literal"><span class="token string">"abc"</span></span><span class="token punctuation">.</span>m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol>
<li><p>Module#class_eval 会同时修改self和当前类，所以可以定义类的实例方法</p>
</li>
<li><p>Object#instance_eval 只修改self（这并不绝对的，我们后面会讲）</p>
</li>
</ol>
<p>​    <code>Module#class_eval</code>功能和<code>class关键字</code>类似，但更强大，因为class关键字传入 常量，而Module#class_eval，只要是代表类的变量即可使用。比我们想在运行期决定具体的类</p>
<p>​    <code>class</code>也是作用域门，会切换作用域，而<code>Module#class_eval</code>则是扁平作用域可以引入外部变量</p>
<blockquote>
<p>Module#class_eval 也有 class_exec 可以接收额外的代码块作为参数</p>
</blockquote>
<h4 id="instance-eval-和-class-eval-方法该如何选择"><a href="#instance-eval-和-class-eval-方法该如何选择" class="headerlink" title="instance_eval 和 class_eval 方法该如何选择"></a>instance_eval 和 class_eval 方法该如何选择</h4><p>​    这取决于两者的特点，instance_eval 方法打开非类的对象，而用 class_eval 方法打开类的定义，然后使用def定义方法</p>
<h3 id="类实例变量"><a href="#类实例变量" class="headerlink" title="类实例变量"></a>类实例变量</h3><blockquote>
<p>Ruby解释器假定所有的实例变量都属于当前对象self，在类定义时也是这样</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token variable">@my_var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>​    这里在MyClass中定义@my_var，self为MyClass，所以@my_var归属MyClass，也就是<strong>类实例变量</strong></p>
<blockquote>
<p>这里需要声明，类实例变量 和 类实例化对象的实例变量是不同的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里当前类为MyClass，self也为MyClass，这里定义@my_var实例变量，所属MyClass</span>
	<span class="token variable">@my_var</span> <span class="token operator">=</span> <span class="token number">100</span>
	<span class="token comment"># 定义MyClass的read方法，一个指向MyClass的类方法，访问@my_var是可以的</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">read</span></span><span class="token punctuation">;</span> <span class="token variable">@my_var</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token comment"># 定义MyClass的实例方法write，这里的@my_var 和 外面的@my_var 并不是一个变量，作用域不同</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">write</span></span><span class="token punctuation">;</span> <span class="token variable">@my_var</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
	<span class="token comment"># 这里一样，是访问不到外部的@my_var,除非调用write方法，给类的对象创建一个@my_var</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">read</span></span><span class="token punctuation">;</span> <span class="token variable">@my_var</span><span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span> 
p obj<span class="token punctuation">.</span>read  <span class="token comment"># nil</span>
obj<span class="token punctuation">.</span>write <span class="token comment"># 定义 @my_var = 2</span>
p obj<span class="token punctuation">.</span>read  <span class="token comment"># @my_var = 2</span>
p MyClass<span class="token punctuation">.</span>read <span class="token comment"># @my_var = 100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    Ruby解释器假定所有的实例变量都属于当前对象self，在类定义时也如此。</p>
<blockquote>
<p>一个类实例变量只可以被类本身所访问，而不能被类的实例或子类所访问到</p>
</blockquote>
<h4 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h4><p>​    如果想在类中定义变量，可被子类或者实例对象访问到，可以使用类变量，它更像是Java中的静态变量.</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">C</span>
	<span class="token variable">@@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">&lt;</span> <span class="token constant">C</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">hi</span></span>
	 	<span class="token variable">@@var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p obj<span class="token punctuation">.</span>hi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>需要注意一点，盲目的使用类变量也会有问题</p>
</blockquote>
<p>​    不允许在顶级上下文中定义类变量，因为main对象所属Object类，定义类变量，则所有Object子类都会继承这个类变量，也就有修改类变量的可能，在最新的Ruby编译器中已经对这个行为禁止，并爆出错误</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token variable">@@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">class</span> <span class="token class-name">User</span>
	<span class="token variable">@@var</span> <span class="token operator">=</span> <span class="token number">2</span>
<span class="token keyword">end</span>
p <span class="token variable">@@var</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>这里再回顾一下Ruby中的操作符</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">p <span class="token boolean">false</span> <span class="token operator">||</span> <span class="token boolean">true</span>  <span class="token comment"># 一个为真则为真</span>
p <span class="token boolean">false</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span>  <span class="token comment"># 一个为假都为假</span>
p <span class="token keyword">nil</span> <span class="token operator">||</span> <span class="token string-literal"><span class="token string">"a"</span></span>     <span class="token comment"># 除了 nil 和 false，其他都为真</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">||</span> <span class="token keyword">nil</span>     <span class="token comment"># || 遇到真则返回</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">||</span> <span class="token string-literal"><span class="token string">'b'</span></span>

p <span class="token keyword">nil</span> <span class="token operator">&amp;&amp;</span> <span class="token string-literal"><span class="token string">"a"</span></span>     <span class="token comment"># &amp;&amp; 遇到假则返回</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">nil</span>
p <span class="token string-literal"><span class="token string">"a"</span></span> <span class="token operator">&amp;&amp;</span> <span class="token string-literal"><span class="token string">"b"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>类对象是否可以访问到类实例变量？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token comment"># 这里@var 属于 MyClass，因为MyClass也是一个对象</span>
	<span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get</span></span>
		<span class="token comment"># 这里访问，self为MyClass.new，作用域分离</span>
		<span class="token variable">@var</span>
	<span class="token keyword">end</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get</span></span>
		<span class="token variable">@var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>get  <span class="token comment"># 无法访问到</span>
p MyClass<span class="token punctuation">.</span>get      <span class="token comment"># 正常输出 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>obj.instance.eval 改变obj为self，如果在Block内定义实例变量，则该实例变量属于obj</p>
<p>Class.class_eval 改变Class为self，同时改变当前类，定义实例变量属于这个类</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">get</span></span>
		<span class="token variable">@var</span> 
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get</span></span>
		<span class="token variable">@var</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span> 
	<span class="token variable">@var</span> <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">end</span>

p MyClass<span class="token punctuation">.</span>get  <span class="token comment"># => 1</span>
p <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>get  <span class="token comment"># => nil</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单件方法"><a href="#单件方法" class="headerlink" title="单件方法"></a>单件方法</h3><blockquote>
<p>我们现在想要修改一个类的实例方法有三种办法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
<span class="token comment"># 1.0 猴子补丁</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 2.0 细化</span>
<span class="token keyword">module</span> <span class="token class-name">MyClass_Plus</span>
  refine MyClass <span class="token keyword">do</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">two</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 3.0 单件方法</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token class-name">obj</span><span class="token punctuation">.</span><span class="token function">tree</span></span>
  <span class="token comment"># 方法体</span>
<span class="token keyword">end</span>
obj<span class="token punctuation">.</span>tree<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    单件方法我们可以看到是在对象上操作， 定义的函数也只针对这个对象，其他对象并没有这个方法，所以叫做单件方法，语法：<code>def obj.method_name</code></p>
<h4 id="类方法的真相"><a href="#类方法的真相" class="headerlink" title="类方法的真相"></a>类方法的真相</h4><p>​    类方法的实质是一个类的单件方法，因为类也是一个对象，给类定义单件方法，就是类方法。</p>
<h4 id="类宏"><a href="#类宏" class="headerlink" title="类宏"></a>类宏</h4><p>​    Ruby中的对象是没有属性的，对外只提供方法。所以在最初我们访问对象的实例变量时，可以写get，set方法，但是这会很麻烦，所以我们使用<code>Module#attr_accessor :var</code>访问器，这也叫做<strong>类宏</strong>，所属于<code>Module#attr_*</code>，类宏看起来很像关键字，实际上只是普通的方法，只不过可以在类定义中使用</p>
<h3 id="使用类宏"><a href="#使用类宏" class="headerlink" title="使用类宏"></a>使用类宏</h3><blockquote>
<p>我们原有的Book类中有名为：<code>GetTitle , title2 , LEND_TO_USER</code>，但是按照Ruby的惯例，他们应该分别命名为：<code>get_title,title.lend_to_user</code>，不过其他项目也在使用Book类，而我们不能修改那些项目，如果简单修改方法名，就会破坏其他的调用者</p>
<p>我们可以使用类宏声明这些旧方法名已被弃用，这样就可以修改方法名了</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Book</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">title</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">subtitle</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">deprecate</span></span><span class="token punctuation">(</span>old_method<span class="token punctuation">,</span>new_method<span class="token punctuation">)</span>
    <span class="token keyword">define_method</span><span class="token punctuation">(</span>old_method<span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token operator">|</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token operator">|</span>
      warn <span class="token string-literal"><span class="token string">"Warning: </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">old_method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> is deprecated , Use </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">new_method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
      send<span class="token punctuation">(</span>new_method<span class="token punctuation">,</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">&amp;</span>block<span class="token punctuation">)</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>

  deprecate <span class="token symbol">:GetTitle</span><span class="token punctuation">,</span> <span class="token symbol">:title</span>
  deprecate <span class="token symbol">:LENT_TO_USER</span><span class="token punctuation">,</span> <span class="token symbol">:lent_to</span>
  deprecate <span class="token symbol">:title2</span><span class="token punctuation">,</span> <span class="token symbol">:subtitle</span>
<span class="token keyword">end</span>

b <span class="token operator">=</span> <span class="token class-name">Book</span><span class="token punctuation">.</span><span class="token keyword">new</span>
b<span class="token punctuation">.</span><span class="token constant">LENT_TO_USER</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Bill"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="单件类"><a href="#单件类" class="headerlink" title="单件类"></a>单件类</h3><blockquote>
<p>提问：单件方法，类方法的信息是保存在哪里？</p>
</blockquote>
<p>​    首先不在对象中，因为只有类和模块儿可以定义方法</p>
<p>​    其次也不在类中，因为无法在类的对象中共享，它们就好像是一个独立个体，存在与某个与当前类有关的地方，这个地方就是<strong>单件类</strong>，负责存储单件方法。</p>
<blockquote>
<p>那我们该如何访问到单间类内？如何看到它？</p>
</blockquote>
<p>两种方式：</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
single_class <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> obj
	<span class="token comment"># 返回单件类</span>
	<span class="token keyword">self</span>
<span class="token keyword">end</span>
p single_class  <span class="token comment"># => #&lt;Class:#&lt;MyClass:0x0000000108beb5c8>></span>
p single_class<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token comment"># => Class</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># 访问对象所属单件类，每个对象的单件类都不同</span>
<span class="token comment"># #&lt;Class:#&lt;MyClass:0x00000001051f3a78>></span>
p obj<span class="token punctuation">.</span>singleton_class
other <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># #&lt;Class:#&lt;MyClass:0x00000001051f3578>></span>
p other<span class="token punctuation">.</span>singleton_class<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    单件类只有一个实例，且无法被继承，单件方法就定义在单件类中</p>
<h3 id="补充方法查找"><a href="#补充方法查找" class="headerlink" title="补充方法查找"></a>补充方法查找</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">C</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">a_method</span></span>
    <span class="token string-literal"><span class="token string">'C#a_method'</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token operator">&lt;</span> <span class="token constant">C</span> <span class="token punctuation">;</span> <span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">D</span><span class="token punctuation">.</span><span class="token keyword">new</span>
p obj<span class="token punctuation">.</span>a_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们画出obj一起祖先链的图，先不考虑单件类和模块</p>
<img src="../../typora-user-images/image-20230127215743350.png" alt="image-20230127215743350" style="zoom:67%;" />

<h4 id="单件类-和-方法查找"><a href="#单件类-和-方法查找" class="headerlink" title="单件类 和 方法查找"></a>单件类 和 方法查找</h4><blockquote>
<p>单件类的超类是什么？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token comment"># #&lt;Class:#&lt;MyClass:0x00000001051f3a78>></span>
p obj<span class="token punctuation">.</span>singleton_class
<span class="token comment"># 对象的单件类的超类 就是 对象的所属类</span>
p obj<span class="token punctuation">.</span>singleton_class<span class="token punctuation">.</span>superclass  <span class="token comment"># => MyClass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>单件类是否在祖先链中，因为这涉及到方法的查找</p>
</blockquote>
<p>​    单件类是存在于祖先链中的，而且单件类的超类为对象的所属类，所以在祖先链中排在当前类之右边。方法查找也是按照这个顺序进行查找的。所以对象访问方法时，是先在单件类中访问，然后再去当前类中访问。</p>
<blockquote>
<p>类的单件类的超类就是超类的单件类</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">D</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">E</span> <span class="token operator">&lt;</span> <span class="token constant">D</span>
<span class="token keyword">end</span>

p <span class="token constant">D</span><span class="token punctuation">.</span>singleton_class   <span class="token comment"># => #&lt;Class:D></span>
p <span class="token constant">E</span><span class="token punctuation">.</span>singleton_class   <span class="token comment"># => #&lt;Class:E></span>
p <span class="token constant">D</span><span class="token punctuation">.</span>singleton_class<span class="token punctuation">.</span>superclass  <span class="token comment"># => #&lt;Class:Object></span>
p <span class="token constant">E</span><span class="token punctuation">.</span>singleton_class<span class="token punctuation">.</span>superclass  <span class="token comment"># => #&lt;Class:D></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>上面的定义看起来有点儿绕，Ruby为何这样设计？</p>
</blockquote>
<p>​    因为这样就可以在子类中调用父类的类方法</p>
<p>​    <img src="../../typora-user-images/image-20230103164540176.png" alt="image-20230103164540176" style="zoom:80%;" /></p>
<blockquote>
<p>我们再来画一下有了单件类后的祖先链和方法查找</p>
</blockquote>
<img src="../../typora-user-images/image-20230127220319776.png" alt="image-20230127220319776" style="zoom:67%;" />

<h4 id="七条规则"><a href="#七条规则" class="headerlink" title="七条规则"></a>七条规则</h4><ol>
<li>对象：要么是普通对象，要么是模块儿</li>
<li>模块：可以是普通模块，一个类或一个单件类</li>
<li>方法：存在与一个模块中，通常定义在类中</li>
<li>对象都有自己真正的类，要么是普通类，要么是单件类</li>
<li>除了BasicObject没有超类，其他的类都有一个祖先</li>
<li>一个对象的单件类的超类，就是这对象的类</li>
<li>一个类的单件类的超类，就是这个类的超类的单件类</li>
<li>调用一个方法时，Ruby先找到接收者真的类，再向上进入祖先链</li>
</ol>
<h4 id="类方法的语法"><a href="#类方法的语法" class="headerlink" title="类方法的语法"></a>类方法的语法</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
<span class="token comment"># 1</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token function">one</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token comment"># 2</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">two</span></span> <span class="token punctuation">;</span> <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 3</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">self</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">three</span></span> <span class="token punctuation">;</span><span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="单件类-和-instance-eval-方法"><a href="#单件类-和-instance-eval-方法" class="headerlink" title="单件类 和 instance_eval 方法"></a>单件类 和 instance_eval 方法</h4><p>​    之前我们说<code>instance_eval</code>修改self，实际上也修改当前类为接收者的单件类。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">s1 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"abc"</span></span>

s1<span class="token punctuation">.</span>instance_eval <span class="token keyword">do</span>
  <span class="token comment"># 这里的swooh！self对象为“abc”的单件方法</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">swoosh</span></span><span class="token operator">!</span>
		reverse
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

p s1<span class="token punctuation">.</span>swoosh<span class="token operator">!</span>   <span class="token comment"># => cba</span>
s2 <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'qsc'</span></span>  
p s2<span class="token punctuation">.</span>respond_to<span class="token operator">?</span><span class="token punctuation">(</span><span class="token symbol">:swoosh!</span><span class="token punctuation">)</span>  <span class="token comment"># => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="类属性"><a href="#类属性" class="headerlink" title="类属性"></a>类属性</h3><blockquote>
<p>我们知道，使用<code>Module#attr_accessor</code>可以为对象创建属性</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	attr_accessor <span class="token symbol">:name</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"张三"</span></span>
p obj<span class="token punctuation">.</span>name <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果我们想给类创建对象怎么办？可以在Class中定义类宏，每个类实际上是Class的实例对象，这样也就拥有了自己的属性</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">Class</span>
	attr_accessor <span class="token symbol">:name</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"张三"</span></span>
p MyClass<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>但是这样每个类都拥有了属性，我们只希望MyClass中拥有属性</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">self</span>
		attr_accessor <span class="token symbol">:name</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"张三"</span></span>
p MyClass<span class="token punctuation">.</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="模块儿的麻烦"><a href="#模块儿的麻烦" class="headerlink" title="模块儿的麻烦"></a>模块儿的麻烦</h3><blockquote>
<p>我们试图在模块中定义模块的类方法，然后在一个类中引用该模块，试图将模块的类方法转为类的类方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">my_method</span></span><span class="token punctuation">;</span> <span class="token string-literal"><span class="token string">"Hello"</span></span> <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">include</span> MyModule
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>my_method  <span class="token comment"># => 报错，因为MyModule中的my_method为一个单件方法，不能被触碰</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我们看看我们能解决这个问题吗？将模块中的方法，转为类的类方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">;</span> <span class="token string-literal"><span class="token string">"Hello"</span></span> <span class="token keyword">end</span>
<span class="token keyword">end</span>

<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">self</span>
		<span class="token keyword">include</span> MyModule
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

MyClass<span class="token punctuation">.</span>my_method  <span class="token comment"># => "Hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    my_method方法是MyClass的单件类的一个实例方法，这样也就是MyClass的类方法，这种技巧叫做<strong>类扩展</strong>，同样的技巧也适用于对象，毕竟类也是一个对象</p>
<h4 id="对象扩展"><a href="#对象扩展" class="headerlink" title="对象扩展"></a>对象扩展</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		p <span class="token string-literal"><span class="token string">"Hello World"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
<span class="token keyword">class</span> <span class="token operator">&lt;&lt;</span> obj
	<span class="token comment"># 单件类所属obj，所以引入的方法，会作为对象的单件方法</span>
	<span class="token keyword">include</span> MyModule
<span class="token keyword">end</span>
obj<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这称为<strong>对象扩展</strong></p>
<h4 id="Object-extend"><a href="#Object-extend" class="headerlink" title="Object#extend"></a>Object#extend</h4><blockquote>
<p>类扩展，对象扩展 因为用的很多，所以Ruby提供了<code>Object#extend</code>方法</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">MyModule</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
		p <span class="token string-literal"><span class="token string">"Hello World"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">extend</span> MyModule
<span class="token keyword">end</span>
MyClass<span class="token punctuation">.</span>my_method

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span><span class="token keyword">extend</span> MyModule
obj<span class="token punctuation">.</span>my_method<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="方法包装器"><a href="#方法包装器" class="headerlink" title="方法包装器"></a>方法包装器</h3><blockquote>
<p>如何在原有函数不修改的前提下，对方法做增强，在此之前我们介绍一些新的东西</p>
</blockquote>
<h4 id="方法别名"><a href="#方法别名" class="headerlink" title="方法别名"></a>方法别名</h4><p>​    <code>alias_method :new_method_name , :old_method_name</code> 对方法起一个别名</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
		p <span class="token string-literal"><span class="token string">"Hello one"</span></span>
	<span class="token keyword">end</span>
	alias_method <span class="token symbol">:two</span><span class="token punctuation">,</span><span class="token symbol">:one</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>one  <span class="token comment"># => “Hello one”</span>
obj<span class="token punctuation">.</span>two  <span class="token comment"># => “Hello one”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    别名在Ruby中几乎随处可见，例如<code>String#size 就是 String#length</code>方法的别名，Inteager 有一个方法有至少五种别名</p>
<blockquote>
<p>如果先给一个方法起别名，又重新定义这个方法，我们看看会发生什么？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
		p <span class="token string-literal"><span class="token string">"Hello one"</span></span>
	<span class="token keyword">end</span>
	alias_method <span class="token symbol">:two</span><span class="token punctuation">,</span><span class="token symbol">:one</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">one</span></span>
		p <span class="token string-literal"><span class="token string">"good morning"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>one  <span class="token comment"># => "good morning"</span>
obj<span class="token punctuation">.</span>two  <span class="token comment"># => "Hello one"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        重定义方法时，并不是修改这个方法，而是定义一个新的方法，并将之前存在的方法名从新绑定，只要老方法还存在一个绑定，就仍可调用，这种先定义别名再重新定义方法的思想是一种有趣技巧的基础，我们举例说明</p>
<h4 id="环绕别名-类似于动态代理的效果"><a href="#环绕别名-类似于动态代理的效果" class="headerlink" title="环绕别名(类似于动态代理的效果)"></a>环绕别名(类似于动态代理的效果)</h4><ol>
<li>给方法定义一个别名</li>
<li>重定义这个方法</li>
<li>新方法中调用老的方法</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"从数据库中获取数据"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 现在我们想对 MyClass#get_users做一些增强处理</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	alias_method <span class="token symbol">:get_users_origin</span><span class="token punctuation">,</span><span class="token symbol">:get_users</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"检查用户权限"</span></span>
		p <span class="token string-literal"><span class="token string">"开启事务"</span></span>
		get_users_origin
		p <span class="token string-literal"><span class="token string">"提交事务"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>get_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>环绕别名的一个缺点在于它污染了你的类，添加了一个额外的名字，如果想解决这个问题，可以在添加别名之后，想办法把老版本的方法变成私有的，Ruby中 公有 和 私有 实际上是针对的方法名，而不是方法本身</p>
<p>环绕别名的另一个缺点与加载有关，不要尝试加载（load）两次环绕别名，这里留给你自己思考</p>
<p>环绕别名的最主要的问题在于它是一种猴子补丁，它有可能破坏已有的代码，Ruby2.0增加了两种额外的方式来为已有方法保证新的功能</p>
</blockquote>
<h4 id="更多方法包装器"><a href="#更多方法包装器" class="headerlink" title="更多方法包装器"></a>更多方法包装器</h4><blockquote>
<p> 细化：使用细化，可以从新定义方法，如果定义重名方法，使用super则可调用到原先的内容，叫做：<strong>细化封装器</strong></p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"从数据库中获取数据"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 现在我们想对 MyClass#get_users做一些增强处理</span>
<span class="token keyword">module</span> <span class="token class-name">MyClassRefinement</span>
	refine MyClass <span class="token keyword">do</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
			p <span class="token string-literal"><span class="token string">"检查用户权限"</span></span>
			p <span class="token string-literal"><span class="token string">"开启事务"</span></span>
			<span class="token keyword">super</span>
			p <span class="token string-literal"><span class="token string">"提交事务"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>

using MyClassRefinement

obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>get_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Module#prepend：因为会将引入module放入当前类的祖父链位置的前面，所以也会覆盖掉当前类中定义的方法，使用super则可调用到原先的内容，这种技术称为：<strong>下包含包装器</strong></p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"从数据库中获取数据"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 现在我们想对 MyClass#get_users做一些增强处理</span>
<span class="token keyword">module</span> <span class="token class-name">ExplicitMyClass</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">get_users</span></span>
		p <span class="token string-literal"><span class="token string">"检查用户权限"</span></span>
		p <span class="token string-literal"><span class="token string">"开启事务"</span></span>
		<span class="token keyword">super</span>
		p <span class="token string-literal"><span class="token string">"提交事务"</span></span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">MyClass</span>
	<span class="token keyword">prepend</span> ExplicitMyClass
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span>
obj<span class="token punctuation">.</span>get_users<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="测试：打破数据规律"><a href="#测试：打破数据规律" class="headerlink" title="测试：打破数据规律"></a>测试：打破数据规律</h3><blockquote>
<p>让 1 + 1 = 3</p>
</blockquote>
<p>绝大部分Ruby操作符实际上是方法， 例如整数的+只是名为Fixnum#+方法的语法糖，编写1+1时。实际上为：<code>1.+(1)</code>。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Fixnum</span>
	alias_method <span class="token symbol">:old_plus</span> <span class="token punctuation">,</span> <span class="token operator">:</span><span class="token operator">+</span>

	<span class="token keyword">def</span> <span class="token operator">+</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
		<span class="token keyword">self</span><span class="token punctuation">.</span>old_plus<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>old_plus<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
p <span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>务必要慎用这种能力，实际上我们发现Ruby中的规则简单，小巧，易操作</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><ul>
<li>类定义对self和当前类的影响</li>
<li>熟悉<strong>单件方法</strong>和<strong>单件类</strong>，重新认识对象模型和方法查找</li>
<li>学习了类实例变量，类宏和下包含包装器</li>
</ul>
<p>这些规则同时适用于类和模块</p>
<h2 id="编写代码的代码"><a href="#编写代码的代码" class="headerlink" title="编写代码的代码"></a>编写代码的代码</h2><h3 id="Kernel-eval"><a href="#Kernel-eval" class="headerlink" title="Kernel#eval"></a>Kernel#eval</h3><p>​    前面我们学习了：<code>instance_eval , class_eval</code>,现在我要学习<code>Kernel#eval</code>方法，它的作用是执行一段<strong>代码字符串</strong></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 执行 "p 123" 这段字符串，p 123表示输出 123 </span>
eval <span class="token string-literal"><span class="token string">"p 123"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    代码字符串也可以访问局部变量</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">var <span class="token operator">=</span> <span class="token number">1</span>
eval <span class="token string-literal"><span class="token string">"p var"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h3 id="Binding-绑定对象"><a href="#Binding-绑定对象" class="headerlink" title="Binding 绑定对象"></a>Binding 绑定对象</h3><p>​    Binding是用一个对象表示完整的作用域，可以使用eval方法在这个Binding对象所携带的作用域中执行代码，Kernel#binding方法可以用来常见Binding对象</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">MyClass</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_thod</span></span>
    <span class="token variable">@x</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token comment"># 返回binding</span>
    binding
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
obj <span class="token operator">=</span> <span class="token class-name">MyClass</span><span class="token punctuation">.</span><span class="token keyword">new</span><span class="token punctuation">.</span>my_thod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以把Binding对象看作是一个闭包，它只包含作用域而不包含代码，对于eval方法，可以传递一个Binding对象作为额外参数，代码可以在这个Binding对象所携带的作用域中执行</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">eval <span class="token string-literal"><span class="token string">"p @x"</span></span> <span class="token punctuation">,</span> obj<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    Ruby还定义了一个预定义常量<code>TOPLEVEL_BINDING</code>,它表示顶级作用域的Binding对象。可以在程序任务地方访问到。</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">eval <span class="token string-literal"><span class="token string">"self"</span></span><span class="token punctuation">,</span><span class="token constant">TOPLEVEL_BINDING</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    其中在我们最早使用Ruby时都使用过<code>irb</code>,其实就是解析控制台或者文件输入，再把每一行代码传递给eval方法执行，这种类型的程序有时被称为<code>代码处理器</code></p>
<p>​    eval方法后面三个为可选参数，statement代表执行语句，@binding表示所在作用域，file表示文件，line表示执行行号,这对于查找问题时比较方便</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">eval<span class="token punctuation">(</span>statement<span class="token punctuation">,</span><span class="token variable">@binding</span><span class="token punctuation">,</span>file<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="对比代码字符串-与-块"><a href="#对比代码字符串-与-块" class="headerlink" title="对比代码字符串 与 块"></a>对比代码字符串 与 块</h3><p>eval 只能执行代码字符串</p>
<p>Instance_eval，class_eval 可以执行Block，也能执行代码字符串</p>
<p>一般能使用Block，就使用Block</p>
<h4 id="eval麻烦"><a href="#eval麻烦" class="headerlink" title="eval麻烦"></a>eval麻烦</h4><ol>
<li>不能利用编辑器的功能特性，例如高亮</li>
<li>难以阅读与修改</li>
<li>错误隐藏到执行期</li>
<li>安全性！！！</li>
</ol>
<h4 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h4><p>​    这里用Java操作SQL时，遇到的SQL注入问题为例，就是我们在执行SQL前，如果SQL使用字符串拼接，如果用户传递恶意参数，就会导致SQL注入问题，代码注入也是类似的。</p>
<h4 id="防止代码注入"><a href="#防止代码注入" class="headerlink" title="防止代码注入"></a>防止代码注入</h4><p>​    有些人会禁用eval方法，毕竟可以找到替换的方式，Ruby也提供了更安全的方法</p>
<h4 id="污染对象和安全级别"><a href="#污染对象和安全级别" class="headerlink" title="污染对象和安全级别"></a>污染对象和安全级别</h4><p>​    Ruby会自动把不安全对象标记为污染对象，比如：Web表单，文件，命令行读取，可以通过<code>obj.tainted?</code> 来判断</p>
<h4 id="安全级别"><a href="#安全级别" class="headerlink" title="安全级别"></a>安全级别</h4><p>​    可以通过给$SAFE全局变量赋值来实现，一共有四个级别</p>
<p>0 ： 随意操作</p>
<p>1 ： 拒绝执行污染字符串</p>
<p>2 ： 禁止绝大多数与文件相关的操作</p>
<p>3 ： 每个创建对象都为被污染</p>
<p>​    为了谨慎使用安全级别，可以为eval方法创建一个可控环境，也称为<strong>沙盒</strong>，比如在一个块儿内，执行eval方法。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>​    写一个attr_accessor类宏类似的方法，attr_checked，与访问器类似，但是会对属性进行校验，attr_checked 可以接受属性名和代码块，代码块用来进行校验，如果是对属性赋值，判断Block中是否为true，如果为false则报错。需求通过一组代码进行展示</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里是一个测试gem ，使用 gem install test-unit</span>
<span class="token keyword">require</span> <span class="token string-literal"><span class="token string">"test/unit"</span></span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">TestCheckedAttribute</span> <span class="token operator">&lt;</span> Test<span class="token double-colon punctuation">::</span>Unit<span class="token double-colon punctuation">::</span>TestCase
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">setup</span></span>
    <span class="token comment"># 在Person类中，加入 age 的读写方法，并对age的写操作进行校验</span>
		add_checked_attribute<span class="token punctuation">(</span>Person<span class="token punctuation">,</span><span class="token symbol">:age</span><span class="token punctuation">)</span>
		<span class="token variable">@bob</span> <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">new</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_accept_vaild_values</span></span>
		<span class="token variable">@bob</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>
		assert_equal <span class="token number">20</span><span class="token punctuation">,</span><span class="token variable">@bob</span><span class="token punctuation">.</span>age
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_refuses_nil_values</span></span>
		assert_raises RuntimeError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">do</span>
			<span class="token variable">@bob</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token keyword">nil</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>

	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">test_refuses_false_values</span></span>
		assert_raises RuntimeError<span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">do</span>
			<span class="token variable">@bob</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token boolean">false</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token comment"># 这里是我们负责编写的代码 ， klass表示一个类对象，attribute表示需要给该类加入属性</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">)</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<ol>
<li>使用eval进行快速的单元测试</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 先定义一个函数，利用eval方法执行字符串代码</span>
<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">)</span>
	eval "
	  <span class="token comment"># 打开类</span>
		<span class="token keyword">class</span> <span class="token comment">#&#123;klass&#125;</span>
			<span class="token comment"># 根据参数生成，get，set方法</span>
			<span class="token keyword">def</span> <span class="token comment">#&#123;attribute&#125;=(value)</span>
				<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">'Invalid attribute'</span></span> <span class="token keyword">unless</span> value
				@<span class="token comment">#&#123;attribute&#125; = value</span>
			<span class="token keyword">end</span>

			<span class="token keyword">def</span> <span class="token comment">#&#123;attribute&#125;()</span>
				@<span class="token comment">#&#123;attribute&#125;</span>
			<span class="token keyword">end</span>
		<span class="token keyword">end</span>
	"
<span class="token keyword">end</span>
<span class="token comment"># 这里对String添加属性my_attr</span>
add_checked_attribute<span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token symbol">:my_attr</span><span class="token punctuation">)</span>
obj <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a"</span></span>
obj<span class="token punctuation">.</span>my_attr <span class="token operator">=</span> <span class="token number">123</span>
p obj<span class="token punctuation">.</span>my_attr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>重构add_checked_attribute方法，把eval方法使用Ruby方法替换掉</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">)</span>
	<span class="token comment"># 这里使用class_eval打开类的作用域，替换eval，因为替换后无法使用class，因为class关键字无法接受使用参数作为类名</span>
	klass<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
		<span class="token comment"># 使用扁平作用域，使用define_method 替换 def，因为这里方法名也是动态的</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">="</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
			<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> value
      <span class="token comment"># 这里通过Object#instance_variable_* 方法来操作实例比变量</span>
			instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
		<span class="token keyword">end</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
			instance_variable_get<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span>
add_checked_attribute<span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token symbol">:my_attr</span><span class="token punctuation">)</span>
obj <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"a"</span></span>
obj<span class="token punctuation">.</span>my_attr <span class="token operator">=</span> <span class="token number">123</span>
p obj<span class="token punctuation">.</span>my_attr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>完成通过一个Block来校验属性，</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">add_checked_attribute</span></span><span class="token punctuation">(</span>klass<span class="token punctuation">,</span>attribute<span class="token punctuation">,</span><span class="token operator">&amp;</span>validation<span class="token punctuation">)</span>
	klass<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">=&#125;"</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
			<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> validation<span class="token punctuation">.</span>call<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
			instance_variable_set <span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value
		<span class="token keyword">end</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> <span class="token keyword">do</span>
			instance_variable_get <span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>内核方法改造成一个类宏，让它对所有的类定义中都可用，我们试着在class或module中定义，并且我们不需要再指类对象，通过self即可读取到</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Class</span>
  <span class="token comment"># 这样所有对象都有拥有这个方法了</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">attr_checked</span></span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span><span class="token operator">&amp;</span>validation<span class="token punctuation">)</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">="</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
			<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> validation<span class="token punctuation">.</span>call<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
			instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
		<span class="token keyword">end</span>
		<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> 
			instance_variable_get<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h4><p>​    也就是在代码运行中，有各种事件，我们可以利用事件进行操作，这个就叫做钩子方法</p>
<ol>
<li>类被继承时触犯</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">String</span>
  <span class="token comment"># inherited方法为Class的实例方法，我们可以进行覆写操作</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">inherited</span></span><span class="token punctuation">(</span>subclass<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content"><span class="token keyword">self</span></span><span class="token delimiter punctuation">&#125;</span></span><span class="token string"> was inherited by </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">subclass</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="2">
<li>模块儿被引入</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M1</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">included</span></span><span class="token punctuation">(</span>othermod<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"M1 was included into </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">othermod</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">module</span> <span class="token class-name">M2</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">prepended</span></span><span class="token punctuation">(</span>othermod<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"M2 was prepended to </span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">othermod</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>
<span class="token keyword">class</span> <span class="token class-name">C</span>
  <span class="token keyword">include</span> <span class="token constant">M1</span>
  <span class="token keyword">prepend</span> <span class="token constant">M2</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>模块儿新增方法事件</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">M</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">method_added</span></span><span class="token punctuation">(</span>method<span class="token punctuation">)</span>
    p <span class="token string-literal"><span class="token string">"New method: M#</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">method</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span>
  <span class="token keyword">end</span>
  
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">my_method</span></span><span class="token punctuation">;</span><span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>我们现在需要保证，引入CheckedAttributes的类才运行使用<code>attr_checked</code></p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">CheckedAttributes</span>
	<span class="token comment"># 当类include CheckedAttributes 时被触发</span>
	<span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">included</span></span><span class="token punctuation">(</span>base<span class="token punctuation">)</span>
		<span class="token comment"># 将类extend ClassMethods，也就是转为base类的类方法</span>
		base<span class="token punctuation">.</span><span class="token keyword">extend</span> ClassMethods
	<span class="token keyword">end</span>

	<span class="token keyword">module</span> <span class="token class-name">ClassMethods</span>
		<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">attr_checked</span></span><span class="token punctuation">(</span>attribute<span class="token punctuation">,</span><span class="token operator">&amp;</span>validation<span class="token punctuation">)</span>
			<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">="</span></span> <span class="token keyword">do</span> <span class="token operator">|</span>value<span class="token operator">|</span>
				<span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">"Invalid attribute"</span></span> <span class="token keyword">unless</span> validation<span class="token punctuation">.</span>call<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
				instance_variable_set<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>
			<span class="token keyword">end</span>
			<span class="token keyword">define_method</span> <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span> 
				instance_variable_get<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"@</span><span class="token interpolation"><span class="token delimiter punctuation">#&#123;</span><span class="token content">attribute</span><span class="token delimiter punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>
			<span class="token keyword">end</span>
		<span class="token keyword">end</span>
	<span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>​    这里我们编写了自己的类宏，并使用了钩子方法。我们已经可以所使用的对象为所欲为，剩下的就交给我们不断的实践。后面我们将开启Rails之旅。</p>
]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>元编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell的常规使用</title>
    <url>//post/Linux/shell%E7%9A%84%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<h2 id="shell的分类"><a href="#shell的分类" class="headerlink" title="shell的分类"></a>shell的分类</h2><ol>
<li>/bin/bash  是我们在linux或者Mac下常用的shell</li>
<li>zsh 是一种增强shell，在Mac和Linux中可使用，Mac基本自带</li>
</ol>
<h2 id="日常文件操作"><a href="#日常文件操作" class="headerlink" title="日常文件操作"></a>日常文件操作</h2><ul>
<li>ls   ：显示文件</li>
<li>cd  ：进入文件夹</li>
<li>cp  ：拷贝文件</li>
<li>mv  ：重命名或迁移文件</li>
<li>cat  ：查看文件内容，并在控制台打印</li>
<li>head：查看文件头部信息，可指定多少行</li>
<li>tail  ：查看文件尾部信息，可指定行数，并且可跟踪日志文件</li>
<li>grep：查找过滤，一般用在 <code>操作 | grep</code> ， | 表示管道符，将操作的返回的数据，通过grep进行过滤<ul>
<li>fgrep  ： 无正则查询，普通查询快</li>
<li>egrep ：有正则查看</li>
</ul>
</li>
</ul>
<h2 id="shell的快捷键"><a href="#shell的快捷键" class="headerlink" title="shell的快捷键"></a>shell的快捷键</h2><ul>
<li>↑ ↓ 会回显之前执行的代码。默认记录500条</li>
<li>ctrl + R , 快速查看之前执行的命令</li>
<li>ctrl + W，将已输入的命令，以空格划分，每次向前删除一部分</li>
<li>ctrl + U，删除已输入命令所有部分</li>
<li>ctrl + A，将光标移动到最前(已输入内容)</li>
<li>ctrl + E,   将光标移动到最后</li>
<li>ctrl + K，向右删除所有</li>
<li>ctrl + D，向右删除一位</li>
<li>ctrl + L / clear ，清空页面显示，但是可以向上查看</li>
<li>Command + K , reset , 删除页面显示内容</li>
</ul>
<h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><ul>
<li>ctrl + c 退出进程</li>
<li>ctrl + z 将当前进程在后台挂起</li>
<li>fg         将挂起进程再在页面显示，使用&amp;操作</li>
<li>kill -9 pid  删除进程，可能导致数据库脏数据</li>
<li>ps  查看进程状态</li>
<li>ps  aux  查看 所有进程信息</li>
<li>ps aux | grep ruby 查看Ruby进程信息</li>
</ul>
<h2 id="网络调用"><a href="#网络调用" class="headerlink" title="网络调用"></a>网络调用</h2><ul>
<li>ifconfig ： 网卡信息</li>
<li>netstat  ： 网络连接 ： netstat -an | grep LISTEN  查看开启的端口</li>
<li>dig        ： 查看域名对应的ip信息</li>
<li>curl       ： 模拟HTTP请求，查看请求头，请求体</li>
<li>wget     ： 从远程下载文件</li>
</ul>
<h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul>
<li>du 查看文件占用大小</li>
<li>df -h 显示磁盘大小，-h表示已人类友好显示  1024k  -  1m</li>
<li>chmod  修改文件权限</li>
<li>chown   修改文件所属</li>
</ul>
<h2 id="自定义命令"><a href="#自定义命令" class="headerlink" title="自定义命令"></a>自定义命令</h2><ul>
<li><code>vim ~/.profile</code>  在打开终端时会自动执行一遍，可定义函数，参数按照 $1,$2来获取，保存后，如果想在当前session生效，需要使用：<code>source ~/.profile</code></li>
<li>alias 将之前的命名重命名 ：alias la=”ls -a”</li>
<li>如果想在全局生效：需要修改环境变量配置：</li>
</ul>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 我们在 ~/.profile 中定义或修改函数后，进入环境变量配置</span>
<span class="token function">vim</span> ~/.bash_profile 
<span class="token comment"># 加载 ~/.profile</span>
<span class="token builtin class-name">source</span> ~/.profile  
<span class="token comment"># 保存退出 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Rails</title>
    <url>//post/Ruby/Rails.html</url>
    <content><![CDATA[<h1 id="Ruby-On-Rails"><a href="#Ruby-On-Rails" class="headerlink" title="Ruby On Rails"></a>Ruby On Rails</h1><h2 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h2><p>​    一般如果电脑内存够，我们通常会使用RubyMine来进行开发，里面有各类辅助功能帮助我们编码，但用久了后发现，这类重型的编辑器，过于占用内存，而且加载时间长，所以也推荐使用更轻量型的编辑器：</p>
<ol>
<li>sublime text   一个老款的编辑器，插件库丰富，使用方便</li>
<li>vscode  微软出品编辑器，需要的功能也可以通过插件和快捷键完成</li>
</ol>
<blockquote>
<p>Ruby语法提示与调试功能</p>
</blockquote>
<ol>
<li>下载插件：Ruby</li>
</ol>
<blockquote>
<p>这里我将介绍如何vscode 使用代码整理功能：</p>
</blockquote>
<ol>
<li>下载插件：Rufo - Ruby formatter</li>
<li>打开<code>setting.json</code>设置：</li>
</ol>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"rufo.exe"</span><span class="token operator">:</span> <span class="token string">"rufo"</span><span class="token punctuation">,</span>  <span class="token comment">// can be an absolute path</span>
<span class="token property">"rufo.useBundler"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    如果你才使用Ruby没多久，建议还是使用RubyMine，毕竟方便</p>
<h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p>​    Rails可以理解为一个快速构建Web应用的框架，本身基于Ruby开发，拥有很强的灵活性。</p>
<blockquote>
<p>如何下载与使用Rails？      这里的前提是你已经下载好了Ruby</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">install</span> rails    <span class="token comment"># 通过ruby工具 下载 rails</span>
rails <span class="token parameter variable">-v</span>             <span class="token comment"># 如果正常下载则显示Rails版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>​    这里我在Mac上下载好rails并使用时，遇到了报错显示，显示rails还没有立刻被下载成功，需要再执行上面下载命令（但是并没什么用，至少我是这样，有的人说是有一个延迟时间）：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Rails is not currently installed on this system. To get the latest version, simply type:

    $ <span class="token function">sudo</span> gem <span class="token function">install</span> rails

You can <span class="token keyword">then</span> rerun your <span class="token string">"rails"</span> command.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我的解决方式为：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">env</span>   <span class="token comment"># 显示gem 环境变量</span>

RubyGems Environment:
   <span class="token parameter variable">-RUBYGEMS</span> VERSION: <span class="token number">3.1</span>.2
   <span class="token parameter variable">-RUBY</span> VERSION: <span class="token number">2.7</span>.1 <span class="token punctuation">(</span><span class="token number">2020</span>-03-31 patchlevel <span class="token number">83</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>x86_64-darwin19<span class="token punctuation">]</span>
   <span class="token parameter variable">-INSTALLATION</span> DIRECTORY: /usr/local/lib/ruby/gems/2.7.0  <span class="token comment"># 这里是重点 ！！！</span>
   <span class="token parameter variable">-USER</span> INSTALLATION DIRECTORY: /Users/xxx/.gem/ruby/2.7.0
<span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    我们按照显示的<code>INSTALLATION DIRECTORY</code>,访问并进入bin目录，查看是否有<code>rails</code>命令, 如果有就说明安装的没问题，并使用这个<code>rails</code>,看是否能正常使用。如果都OK，则把这里的地址添加到环境变量即可。</p>
<blockquote>
<p><code>Ruby,rvm,gem,gems,bundle,gemfile</code> 的区别?</p>
</blockquote>
<ul>
<li>Ruby 是一种面向对象的脚本语言</li>
<li>rvm 是一个命令行工具，提供多版本的Ruby环境管理与切换</li>
<li>gem 是使用ruby写的软件包，每个gem都有名称，版本和平台，每个gem都有规范的格式，Rails就是一个gem</li>
<li>RubyGems简称gems，允许下载，安装，使用系统上的gem</li>
<li>ruby项目依赖一系列的ruby gems，<strong>bundler</strong>是一个管理构建工具，bundle本身也是一个gem，可以理解为Maven</li>
<li>gemfile是描述gem之间依赖的文件，定义从哪个源找到这些gem，使用哪个版本</li>
</ul>
<blockquote>
<p>快速创建一个博客项目：</p>
</blockquote>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 自动生成一个叫blog的Rails项目，你也可以通过使用 rails new --help 查看可以使用的参数</span>
rails new blog
<span class="token comment"># 生成一个只提供API的后端接口项目</span>
rails new blog <span class="token parameter variable">--api</span>
<span class="token comment"># 生成一个最小，干净的Rails项目（第一种方式创建的Rails项目会自动设定许多内容，例如路由，建议初学者使用这个命令）</span>
rails new blog <span class="token parameter variable">--minimal</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里可能会报错，显示：<code>infind_spec_for_exe&#39;: can&#39;t find gem bundler (= 2.4.1) with executable bundle</code> 错误信息。</p>
<p>​    这里我们可以查看gem内部是否有合格的bundler</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem list <span class="token parameter variable">--local</span>   <span class="token comment"># 查看本地gem 管理集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>​    如果发现bundler的版本与报错信息不符合，我们可以下载一个新的版本的bundler。</p>
<p>​    一切OK后，就可以从新执行：<code>rails new blog</code>创建一个新的项目。</p>
<blockquote>
<p>国内情况下，bundler install会很慢，我们可以修改源，可以查看网上的文章进行修改</p>
</blockquote>
<p>​    剩下的请自行查看Ruby中国社区的文章，简单的创建一个博客项目，该项目内容为：熟悉Rails文件目录，如果操作数据进行crud操作，如果开发对应的视图。Rails本身其实是一个全栈开发项目。但也可以做前后端分类，只提供基本的接口</p>
<p>​    博客创建地址：<a href="https://ruby-china.github.io/rails-guides/getting_started.html">https://ruby-china.github.io/rails-guides/getting_started.html</a></p>
<h2 id="引入Bootstrap"><a href="#引入Bootstrap" class="headerlink" title="引入Bootstrap"></a>引入Bootstrap</h2><p>​    方便我们定义页面布局和组件，如果你是做前后端分离这里可以不看了。</p>
<p>官网：<a href="https://getbootstrap.com/docs/5.3/getting-started/download/#rubygems">https://getbootstrap.com/docs/5.3/getting-started/download/#rubygems</a></p>
<p>文档说明：<a href="https://blog.csdn.net/chunyanquan1444/article/details/101030667">https://blog.csdn.net/chunyanquan1444/article/details/101030667</a></p>
<blockquote>
<p>当然我们也可以引入一些更轻量型的CSS库</p>
</blockquote>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token comment">&lt;!--引入简单的css样式,application.html.erb文件中--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.simplecss.org/simple.min.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="引入数据库"><a href="#引入数据库" class="headerlink" title="引入数据库"></a>引入数据库</h2><p>​    这里我们以操作Mysql为例，因为Rails本身对常用的数据库都有支持，我们只修改配置信息，对象基本操作其实都是不变的，这样我们可以很容易的迁移到其他的数据库，而不需要修改我们的业务代码</p>
<ol>
<li>Gemfile 引入： <code>gem &quot;mysql2&quot;</code></li>
<li>bundle 下载依赖，记住每次下载新的依赖后，都需要重启应用刷新</li>
<li>修改<code>config/database.yml</code>文件</li>
</ol>
<pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">default</span><span class="token punctuation">:</span> <span class="token important">&amp;default</span>
  <span class="token key atrule">adapter</span><span class="token punctuation">:</span> mysql2
  <span class="token key atrule">encoding</span><span class="token punctuation">:</span> utf8
  <span class="token key atrule">pool</span><span class="token punctuation">:</span> &lt;%= ENV.fetch("RAILS_MAX_THREADS") <span class="token punctuation">&#123;</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span> %<span class="token punctuation">></span>
  <span class="token key atrule">host</span><span class="token punctuation">:</span> 127.0.0.1
  <span class="token key atrule">username</span><span class="token punctuation">:</span> root
  <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>
  <span class="token key atrule">timeout</span><span class="token punctuation">:</span> <span class="token number">5000</span>

<span class="token key atrule">development</span><span class="token punctuation">:</span>
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> ruby_development

<span class="token key atrule">test</span><span class="token punctuation">:</span>
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> ruby_test

<span class="token key atrule">production</span><span class="token punctuation">:</span>
  <span class="token key atrule">&lt;&lt;</span><span class="token punctuation">:</span> <span class="token important">*default</span>
  <span class="token key atrule">database</span><span class="token punctuation">:</span> ruby_production<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型"></a>创建模型</h2><p>​    这里我们将数据库中的一张表与一个模型相对应，和Java的Spring中Model是一样的</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails g model User  <span class="token comment"># 自动创建User模型</span>
      <span class="token comment"># 以下是该命令生成的文件</span>
      invoke  active_record
        <span class="token comment"># 创建的可移植文件</span>
        create    db/migrate/20230106005931_create_users.rb
        <span class="token comment"># 自动创建的models文件</span>
        create    app/models/user.rb
      invoke    test_unit
      	<span class="token comment"># 测试文件</span>
        create      test/models/user_test.rb
        create      test/fixtures/users.yml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>​    这是一个迁移文件，也就是说我们现在Rails中定义整张表的结构，等完成后，通过指令在数据库中创建会修改这张表，这里我们看到文件的前面有一个时间戳，也就说Rails操作数据库是有版本控制的</p>
</blockquote>
<p>修改<code>db/migrate/20221228104215_create_users.rb</code></p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">CreateUsers</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Migration<span class="token punctuation">[</span><span class="token number">7.0</span><span class="token punctuation">]</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">change</span></span>
    <span class="token comment"># users 是表名</span>
    create_table <span class="token symbol">:users</span> <span class="token keyword">do</span> <span class="token operator">|</span>t<span class="token operator">|</span>
      <span class="token comment"># users表的字段</span>
      t<span class="token punctuation">.</span>string <span class="token symbol">:username</span>  <span class="token comment"># string 代表就是 数据库中的varchar</span>
      t<span class="token punctuation">.</span>string <span class="token symbol">:password</span>
      <span class="token comment"># 自动生成时间戳：create_at , update_at</span>
      t<span class="token punctuation">.</span>timestamps
      <span class="token comment"># 额外的还会生成 主键id</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>移植到数据库，也就是根据上面的文件，在数据库中创建对应的表</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rake db:create   <span class="token comment"># 创建对应的数据库表</span>
rake db:migrate  <span class="token comment"># 会将上面的定义的users表结构创建到数据库中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>在routes文件中定义资源，使用<code>resources :users</code>,会自动生成该资源的各种访问规则</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">resources :users  <span class="token comment"># 这里使用模型的复数</span>

<span class="token comment">###############  下面是使用 rails routes 显示自动生成的路由匹配</span>

Prefix       Verb    URI Pattern                     Controller<span class="token comment">#Action</span>
<span class="token function">users</span>        GET     /users<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>                <span class="token function">users</span><span class="token comment">#index</span>
             POST    /users<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>                <span class="token function">users</span><span class="token comment">#create</span>
new_user     GET     /users/new<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#new</span>
edit_user    GET     /users/:id/edit<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>       <span class="token function">users</span><span class="token comment">#edit</span>
user         GET     /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#show</span>
             PATCH   /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#update</span>
             PUT     /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#update</span>
             DELETE  /users/:id<span class="token punctuation">(</span>.:format<span class="token punctuation">)</span>            <span class="token function">users</span><span class="token comment">#destroy</span>


<span class="token comment">###############  在资源使用时，会对资源加入后缀 _path 或者 _url</span>
path 是相对路径
url  是绝对路径

如对于user而言：
<span class="token punctuation">(</span>prefix_path/url<span class="token punctuation">)</span>  请求路径
users_url     <span class="token comment"># => http://localhost:3000/users</span>
users_path    <span class="token comment"># => /users</span>
user_path<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># => /users/1</span>
user_url<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># => http://localhost:3000/users/1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>启动rails运行时环境控制台，我们可以直接像irb一样直接输入命令</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rails c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>按照定义的模型可以进行增删改查，这里以User为例</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">User<span class="token punctuation">.</span>create username<span class="token operator">:</span> <span class="token string-literal"><span class="token string">'qsc'</span></span><span class="token punctuation">,</span><span class="token symbol">password</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'123456'</span></span>   <span class="token comment"># 创建一条数据</span>

User<span class="token punctuation">.</span>all<span class="token punctuation">.</span>to_a   <span class="token comment"># 查看数据</span>

user <span class="token operator">=</span> User<span class="token punctuation">.</span>first   <span class="token comment"># 获取第一条数据，并赋值给user变量</span>

user<span class="token punctuation">.</span>username  <span class="token comment"># 输出name</span>
user<span class="token punctuation">.</span>password  <span class="token comment"># 输出password</span>

user<span class="token punctuation">.</span>username <span class="token operator">=</span> <span class="token string-literal"><span class="token string">'TLL'</span></span>  <span class="token comment"># 修改变量值</span>

user<span class="token punctuation">.</span>save  <span class="token comment"># 修改改数据</span>

user<span class="token punctuation">.</span>destory  <span class="token comment"># 删除该数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="用户注册与登录"><a href="#用户注册与登录" class="headerlink" title="用户注册与登录"></a>用户注册与登录</h2><blockquote>
<p>页面跳转</p>
</blockquote>
<p><code>Flash[:notice]</code> 可以理解为一个共享的Hash结构，并且是一次性使用的，我们在Flash结构中存入key为notic的值，view中可以读取到，但是第二次就读取不到了</p>
<p><code>redirect_to pathPre</code> 302重定向</p>
<p><code>render action: :new</code> 回显到<code>new</code>的视图中，好处就是可以继续使用之前的实例变量，这是同一个请求，这里没有指定Controller，则默认访问当前的Controller</p>
<p><code>linke_to &quot;登陆&quot; pathPre</code>  相当于a标签，后面的就是<code>href=pathPre</code> ，标签显示名：登录</p>
<blockquote>
<p>我遇到了一个问题，link_to 中使用delete方式失效，并采用下面方式解决了问题</p>
</blockquote>
<ol>
<li>Gemfile 引入：<code>gem &#39;jquery-rails&#39;</code>, 在控制台输出 bundle 下载依赖</li>
<li>控制台输入</li>
</ol>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ bundle
$ rails importmap:install
$ rails turbo:install stimulus:install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>在<code>app/javascript/application.js</code>加入：</li>
</ol>
<pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//= require jquery</span>
<span class="token comment">//= require jquery_ujs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="Session-使用"><a href="#Session-使用" class="headerlink" title="Session 使用"></a>Session 使用</h2><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 这里是将当前用户的id报错到session中</span>
session<span class="token punctuation">[</span><span class="token symbol">:user_id</span><span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h2 id="Filter-过滤器"><a href="#Filter-过滤器" class="headerlink" title="Filter 过滤器"></a>Filter 过滤器</h2><p>​    在一般用户登陆操作，或者用户请求追踪，可以使用</p>
<ul>
<li>before_filter       在action之前执行 , rails 5 以后的版本 before_filter 已更新为 before_action</li>
<li>around_filter       在action前后执行</li>
<li>after_filter        在action之后执行</li>
</ul>
<p>​    本质上只是定义了一个过滤方法，通过Filter过滤器控制在哪个action上使用</p>
<h2 id="Routes学习"><a href="#Routes学习" class="headerlink" title="Routes学习"></a>Routes学习</h2><p>​    我们设定路径的请求对应哪个控制下的哪个方法，进行返回，和Spring中的ResquestMapping类似</p>
<blockquote>
<p>自定义路由：</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 可以在 params[:id] 来获取id ，例如：/users/1 , parmas[:id] = 1，这里的请求是指使用 UsersController中的show</span>
get <span class="token string-literal"><span class="token string">'/users/:id'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'users#show'</span></span>
<span class="token keyword">or</span>
get <span class="token string-literal"><span class="token string">'/users/:id'</span></span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">'users#show'</span></span>

<span class="token comment"># 命名路由</span>
get <span class="token string-literal"><span class="token string">'/users/:id'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'users#show'</span></span><span class="token punctuation">,</span> <span class="token symbol">as</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"user"</span></span>
<span class="token comment"># in view or action</span>
user_path<span class="token punctuation">(</span>user<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token comment"># => /users/2</span>
user_path<span class="token punctuation">(</span>user<span class="token punctuation">)</span>     <span class="token comment"># 如果user中含有id，也会自动识别出</span>
user_url<span class="token punctuation">(</span>user<span class="token punctuation">)</span>      <span class="token comment"># http://localhost:3000/users/2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>Restful资源设计</p>
<ul>
<li>get</li>
<li>post</li>
<li>put/patch</li>
<li>delete</li>
</ul>
<p>​    同一个Url可以拥有不同的请求方式，不同的请求方式可以访问不同的方法</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span>

   Prefix Verb   <span class="token constant">URI</span> Pattern               Controller<span class="token comment">#Action</span>
    users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          users<span class="token comment">#index</span>
          <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          users<span class="token comment">#create</span>
 new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#new</span>
edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> users<span class="token comment">#edit</span>
     user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#show</span>
          <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    可以通过<code>rails routes</code> 查看</p>
<blockquote>
<p>控制器设定</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">controller <span class="token symbol">:welcome</span> <span class="token keyword">do</span>
  <span class="token comment"># 默认访问：welcome#hello</span>
   get <span class="token string-literal"><span class="token string">'/welcome/hello'</span></span>
<span class="token keyword">end</span>
       Prefix Verb <span class="token constant">URI</span> Pattern              Controller<span class="token comment">#Action</span>
welcome_hello <span class="token constant">GET</span>  <span class="token operator">/</span>welcome<span class="token operator">/</span>hello<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> welcome<span class="token comment">#hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>同时定义多个资源</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span><span class="token punctuation">,</span><span class="token symbol">:sessions</span>  <span class="token comment"># 资源都为复数</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>单数资源，比如用户自身的信息编辑，这里可以看到少了通过id查询的方式</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resource <span class="token symbol">:user</span>             <span class="token comment"># 这里吧 resources 改为 resource</span>

   Prefix Verb   <span class="token constant">URI</span> Pattern          Controller<span class="token comment">#Action</span>
 new_user <span class="token constant">GET</span>    <span class="token operator">/</span>user<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>  users<span class="token comment">#new</span>
edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>user<span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> users<span class="token comment">#edit</span>
     user <span class="token constant">GET</span>    <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#show</span>
          <span class="token constant">PATCH</span>  <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">PUT</span>    <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#update</span>
          <span class="token constant">DELETE</span> <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#destroy</span>
          <span class="token constant">POST</span>   <span class="token operator">/</span>user<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      users<span class="token comment">#create</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>控制器命名空间，会统一加入前缀，这里我们可以看到Controller为<code>admin/users</code>,那么Controller是如何设定的呢？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">namespace <span class="token symbol">:admin</span> <span class="token keyword">do</span>
  resources <span class="token symbol">:users</span>
<span class="token keyword">end</span>

         Prefix Verb   <span class="token constant">URI</span> Pattern                     Controller<span class="token comment">#Action</span>
    admin_users <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#index</span>
                <span class="token constant">POST</span>   <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#create</span>
 new_admin_user <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#new</span>
edit_admin_user <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> admin<span class="token operator">/</span>users<span class="token comment">#edit</span>
     admin_user <span class="token constant">GET</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#show</span>
                <span class="token constant">PATCH</span>  <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
                <span class="token constant">PUT</span>    <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
                <span class="token constant">DELETE</span> <span class="token operator">/</span>admin<span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">Admin</span><span class="token double-colon punctuation">::</span>UsersController <span class="token operator">&lt;</span> ApplicationController
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>scope ，不想在URL中显示 /admin的前缀</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># 方式1</span>
scope <span class="token keyword">module</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'admin'</span></span> <span class="token keyword">do</span>
  resources <span class="token symbol">:users</span>
<span class="token keyword">end</span>
<span class="token comment"># 方式2</span>
resources <span class="token symbol">:users</span><span class="token punctuation">,</span> <span class="token symbol">module</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'admin'</span></span>
<span class="token comment"># 生成路由</span>
   Prefix Verb   <span class="token constant">URI</span> Pattern               Controller<span class="token comment">#Action</span>
    users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#index</span>
          <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          admin<span class="token operator">/</span>users<span class="token comment">#create</span>
 new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#new</span>
edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> admin<span class="token operator">/</span>users<span class="token comment">#edit</span>
     user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#show</span>
          <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
          <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#update</span>
          <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      admin<span class="token operator">/</span>users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>嵌入路由</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token keyword">do</span>
  <span class="token comment"># 这里表示 一个user内有多个blogs</span>
  resources <span class="token symbol">:blogs</span>
<span class="token keyword">end</span>

        Prefix Verb   <span class="token constant">URI</span> Pattern                              Controller<span class="token comment">#Action</span>
    user_blogs <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          blogs<span class="token comment">#index</span>
               <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>          blogs<span class="token comment">#create</span>
 new_user_blog <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#new</span>
edit_user_blog <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> blogs<span class="token comment">#edit</span>
     user_blog <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#show</span>
               <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#update</span>
               <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#update</span>
               <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:user_id</span><span class="token operator">/</span>blogs<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>      blogs<span class="token comment">#destroy</span>
         users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                         users<span class="token comment">#index</span>
               <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                         users<span class="token comment">#create</span>
      new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#new</span>
     edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                users<span class="token comment">#edit</span>
          user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#show</span>
               <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#update</span>
               <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#update</span>
               <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>                     users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>嵌入式路由，不要超过一层</p>
</blockquote>
<blockquote>
<p>排除不需要的action和请求方法，因为rails路由匹配是自上而下的，影响效率，并可能出现 bug</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token punctuation">,</span> <span class="token symbol">only</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:index</span><span class="token punctuation">,</span><span class="token symbol">:destroy</span><span class="token punctuation">]</span>  <span class="token comment"># users资源，只生成 index，destroy 访问行为</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>添加自定义的RESTFUL路由</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token keyword">do</span>
  member <span class="token keyword">do</span>           <span class="token comment"># member 表示单个资源，所以会自动生成带有id的访问</span>
    post <span class="token symbol">:status</span>
  <span class="token keyword">end</span>
  collection <span class="token keyword">do</span>       <span class="token comment"># collection 表示集合资源，</span>
    get <span class="token symbol">:online</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span>

      Prefix Verb   <span class="token constant">URI</span> Pattern                 Controller<span class="token comment">#Action</span>
 status_user <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>status<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> users<span class="token comment">#status</span>
online_users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span>online<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>     users<span class="token comment">#online</span>
       users <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>            users<span class="token comment">#index</span>
             <span class="token constant">POST</span>   <span class="token operator">/</span>users<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>            users<span class="token comment">#create</span>
    new_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#new</span>
   edit_user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token operator">/</span>edit<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>   users<span class="token comment">#edit</span>
        user <span class="token constant">GET</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#show</span>
             <span class="token constant">PATCH</span>  <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#update</span>
             <span class="token constant">PUT</span>    <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#update</span>
             <span class="token constant">DELETE</span> <span class="token operator">/</span>users<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span>        users<span class="token comment">#destroy</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>如果需要传入id，就是member方法，如果不需要，则是批量资源：collection，也可以这样定义</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">resources <span class="token symbol">:users</span> <span class="token keyword">do</span>
  post <span class="token symbol">:status</span><span class="token punctuation">,</span> <span class="token symbol">on</span><span class="token operator">:</span> <span class="token symbol">:member</span>
  get  <span class="token symbol">:online</span><span class="token punctuation">,</span> <span class="token symbol">on</span><span class="token operator">:</span> <span class="token symbol">:collection</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>非资源路由</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># /photos/show/1</span>
<span class="token comment"># /photos/show</span>
<span class="token comment"># /photos #=> index action  括号代码可选参数</span>
get <span class="token string-literal"><span class="token string">':controller(/:action(/:id))'</span></span>
<span class="token comment"># /photos/show/1/2</span>
get <span class="token string-literal"><span class="token string">':controller/:action/:id/:user_id'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>match，控制请求方式，例如：get或post请求</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">match <span class="token string-literal"><span class="token string">'photos'</span></span><span class="token punctuation">,</span><span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"photos#show"</span></span><span class="token punctuation">,</span> <span class="token symbol">via</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token symbol">:get</span><span class="token punctuation">,</span><span class="token symbol">:post</span><span class="token punctuation">]</span>

Prefix Verb     <span class="token constant">URI</span> Pattern       Controller<span class="token comment">#Action</span>
photos <span class="token constant">GET</span><span class="token operator">|</span><span class="token constant">POST</span> <span class="token operator">/</span>photos<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> photos<span class="token comment">#show</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>匹配约束，使用正则表达式，Ruby中是没有设计开头和结尾的</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># /photos/A12345</span>
get <span class="token string-literal"><span class="token string">'photos/:id'</span></span><span class="token punctuation">,</span> <span class="token symbol">to</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'photos#show'</span></span><span class="token punctuation">,</span> <span class="token symbol">constraint</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token comment"># 请求中的id的匹配规则</span>
    <span class="token symbol">id</span><span class="token operator">:</span> <span class="token regex-literal"><span class="token regex">/[A-Z]\d&#123;5&#125;/</span></span>
<span class="token punctuation">&#125;</span>
Prefix Verb <span class="token constant">URI</span> Pattern           Controller<span class="token comment">#Action</span>
       <span class="token constant">GET</span>  <span class="token operator">/</span>photos<span class="token operator">/</span><span class="token symbol">:id</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> photos<span class="token comment">#show &#123;:constraint=>&#123;:id=>/[A-Z]\d&#123;5&#125;/&#125;&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>重定向</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">get <span class="token string-literal"><span class="token string">"/stories"</span></span><span class="token punctuation">,</span><span class="token symbol">to</span><span class="token operator">:</span> redirect<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">'/articles'</span></span><span class="token punctuation">)</span>
Prefix Verb <span class="token constant">URI</span> Pattern        Controller<span class="token comment">#Action</span>
stories <span class="token constant">GET</span>  <span class="token operator">/</span>stories<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token symbol">:format</span><span class="token punctuation">)</span> redirect<span class="token punctuation">(</span><span class="token number">301</span><span class="token punctuation">,</span> <span class="token operator">/</span>articles<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Mount</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">mount AdminApp<span class="token punctuation">,</span> <span class="token symbol">at</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">'/admin'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><blockquote>
<p>这一章主要讲解Rails传统前后端一体方案的View中的Helper方法，如果要采用前后端分离，这一章就不用太大的精力</p>
</blockquote>
<p>​    Rails其实是一堆gems的融合，比如说：ActionView，Actionpack，ActiveRecord</p>
<h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ol>
<li>template ： index.html.erb 这种就属于业务视图</li>
<li>partial  ： _user.htm.erb  这种属于局部视图，被业务视图所引用</li>
<li>layout   ： application.html.erb 模版视图，业务视图一般嵌入在模版视图中，比如说在模版视图中定义导航栏，或一些公用组件</li>
</ol>
<h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><p>​    index.html.erb 表示为一个html文件，内部嵌套ruby语法，并可以被解析，erb为解释引擎</p>
<ul>
<li>&lt;% %&gt; 无输出，循环，遍历，赋值</li>
<li>&lt;%= %&gt; 输出内容</li>
<li>&lt;% end -%&gt; 结尾无空行</li>
<li>&lt;% end %&gt;  结尾有空行</li>
</ul>
<h3 id="render"><a href="#render" class="headerlink" title="render"></a>render</h3><blockquote>
<p>作用：</p>
</blockquote>
<ol>
<li>生成 HTTP response</li>
<li>渲染和解释子视图</li>
</ol>
<blockquote>
<p>In Controller#Action</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">def</span> <span class="token method-definition"><span class="token function">search</span></span>
  render action<span class="token operator">:</span> <span class="token symbol">:index</span>  <span class="token comment"># 返回当前Controller的index'view，不会执行index'action的代码，这属于同一请求</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>语法：</p>
</blockquote>
<ul>
<li>render Hash</li>
<li>render text</li>
<li>render json</li>
<li>render partial</li>
<li>render file</li>
<li>render xml</li>
</ul>
<p>具体可看：<a href="https://guides.rubyonrails.org/layouts_and_rendering.html">https://guides.rubyonrails.org/layouts_and_rendering.html</a></p>
<blockquote>
<p>返回</p>
</blockquote>
<p>​    一个action只能执行一次render 或 redirect_to</p>
<p>​    如果不指定render或redirect_to 则会返回当前action’s view</p>
<blockquote>
<p>in View</p>
</blockquote>
<p>​    在视图中使用 render ：渲染子视图，也就是partial视图，action中的实例变量，可以被aciton’s view 或者 render partial’view 所访问到，当然我们也可以主动指定：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb">render partial: 'users',locals: &#123;var_1 : 'value_1'&#125; # 这里会访问_users.html.erb,并传入var_1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<blockquote>
<p>迭代</p>
</blockquote>
<p>​    一般我们在View中展示数据，会将一个数组数据迭代展示：</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span><span class="token ruby language-ruby"> <span class="token variable">@users</span><span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>user<span class="token operator">|</span> </span><span class="token delimiter punctuation">%></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> user<span class="token punctuation">.</span>id </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> user<span class="token punctuation">.</span>username </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span><span class="token ruby language-ruby"> <span class="token keyword">end</span> <span class="token operator">-</span></span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    如果看请求日志，会发现视图渲染被迭代了多次，rails给出了Helper方法，只迭代一次，并语法简洁</p>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb">render 'path',collection: @users,as :user # collection表示指定迭代，@users传入子视图中,并命名为user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="redirect-to"><a href="#redirect-to" class="headerlink" title="redirect_to"></a>redirect_to</h3><blockquote>
<p>语法</p>
</blockquote>
<ul>
<li>redirect_to Prefix , Hash</li>
</ul>
<p>Hash 部分可以指定 :back 回到之前页面，status: 301(永久)/302(临时)</p>
<p>​    redirect_to 重定向请求，代表着是一个新的请求了，所以会执行重定向位置的action代码</p>
<h3 id="render-vs-redirect-to"><a href="#render-vs-redirect-to" class="headerlink" title="render vs redirect_to"></a>render vs redirect_to</h3><p>render : 怎么组装 request body，同一个请求</p>
<p>redirect_to : 新的请求</p>
<blockquote>
<p>shell 的 curl 可以模拟请求，在命令行看到请求头和请求体</p>
</blockquote>
<h3 id="Layouts"><a href="#Layouts" class="headerlink" title="Layouts"></a>Layouts</h3><p>​    绑定父视图（模版视图）：<code>application.html.erb  =&gt; &lt;%= yield %&gt;</code> 我们的业务视图，相当于插入到这个yield位置</p>
<p>​    我们可以指定Controller内所有Action使用哪个父视图，也可以指定哪个Action用哪个父视图</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">UserController</span>
  <span class="token comment"># 这里指定所有Action所用父视图</span>
  layout <span class="token string-literal"><span class="token string">'admin'</span></span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">index</span></span>
    <span class="token comment"># 这里指定当前Action所用父视图</span>
    render layout<span class="token operator">:</span> <span class="token string-literal"><span class="token string">'admin'</span></span>
    <span class="token comment"># 不使用任何模版</span>
    <span class="token comment"># render layout: false</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Helper-Method"><a href="#Helper-Method" class="headerlink" title="Helper Method"></a>Helper Method</h3><p>​    由Action View提供的内容</p>
<blockquote>
<p>image</p>
</blockquote>
<ol>
<li>image_tag(“a.ong”)  =&gt; <img></li>
<li>Image_path</li>
</ol>
<blockquote>
<p>js</p>
</blockquote>
<ol>
<li>javascript_include_tag(“path”)</li>
<li>javascript_include_tag(“:all”)</li>
</ol>
<blockquote>
<p>css</p>
</blockquote>
<ol>
<li>stylesheet_link_tag(“path”)</li>
<li>stylesheet_link_tag(:all)</li>
</ol>
<blockquote>
<p>benchmark 性能测试</p>
</blockquote>
<blockquote>
<p>Cache 缓存</p>
</blockquote>
<blockquote>
<p>acpture HTML转为对象使用</p>
</blockquote>
<blockquote>
<p>time 时间转化</p>
</blockquote>
<blockquote>
<p>NumberHelper 数字转化</p>
</blockquote>
<blockquote>
<p>SanitizeHelper 安全性</p>
</blockquote>
<blockquote>
<p>FormHelper  表格</p>
</blockquote>
<p>文章介绍： <a href="https://api.rubyonrails.org/classes/ActionView/Helpers.html">https://api.rubyonrails.org/classes/ActionView/Helpers.html</a></p>
<h4 id="FormHelper"><a href="#FormHelper" class="headerlink" title="FormHelper"></a>FormHelper</h4><p>​    form_tag,form_for 都能生成HTML Form，区别在于是否模型相关，也就是是否与真实数据绑定，存储</p>
<p>Form_tag : 非模型相关 : 搜索，登录，</p>
<p>Form_for : 模型相关 : 用户注册，商品创建</p>
<h5 id="form-tag"><a href="#form-tag" class="headerlink" title="form_tag"></a>form_tag</h5><pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>用户登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> form_tag sessions_path<span class="token punctuation">,</span> <span class="token symbol">method</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"post"</span></span> <span class="token keyword">do</span> </span><span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-username form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form_username<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>用户名6-12个字符<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>密码...<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-password form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form_password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>登录<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span><span class="token ruby language-ruby"> <span class="token keyword">end</span> </span><span class="token delimiter punctuation">%></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h5 id="form-for"><a href="#form-for" class="headerlink" title="form_for"></a>form_for</h5><ol>
<li>和resource绑定</li>
<li>支持模型关联（一对多，多对一，一对一）</li>
<li>自动表单数据设置</li>
<li>支持表单数据命名空间</li>
</ol>
<pre class="line-numbers language-erb" data-language="erb"><code class="language-erb"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>用户注册<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> form_for <span class="token variable">@user</span><span class="token punctuation">,</span> <span class="token symbol">url</span><span class="token operator">:</span> users_path<span class="token punctuation">,</span> <span class="token symbol">method</span><span class="token operator">:</span> <span class="token symbol">:post</span> <span class="token keyword">do</span> <span class="token operator">|</span>f<span class="token operator">|</span> </span><span class="token delimiter punctuation">%></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>list-unstyled<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
          <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span><span class="token ruby language-ruby"> <span class="token variable">@user</span><span class="token punctuation">.</span>errors<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>values<span class="token punctuation">.</span>flatten<span class="token punctuation">.</span><span class="token keyword">each</span> <span class="token keyword">do</span> <span class="token operator">|</span>error<span class="token operator">|</span> </span><span class="token delimiter punctuation">%></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>fa fa-exclamation-circle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> error </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
          <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span><span class="token ruby language-ruby"> <span class="token keyword">end</span> <span class="token operator">-</span></span><span class="token delimiter punctuation">%></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> f<span class="token punctuation">.</span>text_field <span class="token symbol">:username</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form-control"</span></span><span class="token punctuation">,</span> <span class="token symbol">placeholder</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"用户名"</span></span> </span><span class="token delimiter punctuation">%></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> f<span class="token punctuation">.</span>password_field <span class="token symbol">:password</span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"form-control"</span></span><span class="token punctuation">,</span> <span class="token symbol">placeholder</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"密码"</span></span> </span><span class="token delimiter punctuation">%></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> f<span class="token punctuation">.</span>submit <span class="token string-literal"><span class="token string">"注册"</span></span><span class="token punctuation">,</span> <span class="token symbol">class</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">"btn btn-primary"</span></span> </span><span class="token delimiter punctuation">%></span></span>
      <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> link_to <span class="token string-literal"><span class="token string">"登录"</span></span><span class="token punctuation">,</span> new_session_path </span><span class="token delimiter punctuation">%></span></span>
    <span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span><span class="token ruby language-ruby"> <span class="token keyword">end</span> <span class="token operator">-</span></span><span class="token delimiter punctuation">%></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-sm-7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Rails中的AJAX"><a href="#Rails中的AJAX" class="headerlink" title="Rails中的AJAX"></a>Rails中的AJAX</h3><p>​    这里需要使用<code>gem &#39;jquery_rails&#39;</code></p>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>​    所属<code>actionpack gem</code>,ActionController::Base`</p>
<blockquote>
<p>使用</p>
</blockquote>
<ul>
<li>在<code>app/controllers</code>目录</li>
<li>命名规则：文件名-&gt;类名，根据文件名，加载对应类</li>
<li>命名空间：以module的方式组织，比如按照模块儿划分</li>
</ul>
<p>​    这里我们可以将一些公共函数写入BaseController，再将业务类继承BaseController，以达到方法公用，比如我们写一个Session模块儿</p>
<p><img src="../../typora-user-images/image-20230107194458907.png" alt="image-20230107194458907"></p>
<h3 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h3><blockquote>
<p>params</p>
</blockquote>
<p>​    获取get，post请求参数，可以通过Symbol或String访问到：<code>params[:user],params[&quot;user&quot;]</code></p>
<blockquote>
<p>session</p>
</blockquote>
<p>​    通过session记录当前用户信息: <code>session[:user_id]</code></p>
<blockquote>
<p>render</p>
</blockquote>
<p>​    组织 HTTP Response</p>
<blockquote>
<p>redirect_to</p>
</blockquote>
<p>​    请求重定向</p>
<p>​    这些方法均可在Controller与View中使用</p>
<h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><blockquote>
<p>Filter</p>
</blockquote>
<p>​    过滤器：<code>before_action,after_action,around_action</code></p>
<blockquote>
<p>CSRF</p>
</blockquote>
<p>​    protect_from_forgery，除get请求都要求token</p>
<blockquote>
<p>Helper_method</p>
</blockquote>
<p>​    将方法设定为Controller与View均可使用</p>
<h3 id="日志：Rails-logger"><a href="#日志：Rails-logger" class="headerlink" title="日志：Rails.logger"></a>日志：Rails.logger</h3><p>​    这里info可以改为其他级别</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">Rails<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>info <span class="token string-literal"><span class="token string">"Information"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h3 id="ExceptHandle"><a href="#ExceptHandle" class="headerlink" title="ExceptHandle"></a>ExceptHandle</h3><p>​    统一捕捉异常</p>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
	rescue_from ActiveRecord<span class="token double-colon punctuation">::</span>RecordNotFound<span class="token punctuation">,</span> <span class="token symbol">with</span><span class="token operator">:</span> <span class="token symbol">:record_not_found</span>

  <span class="token keyword">private</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">record_not_found</span></span>
    render plain<span class="token operator">:</span> <span class="token string-literal"><span class="token string">"404 Not Found"</span></span><span class="token punctuation">,</span><span class="token symbol">status</span><span class="token operator">:</span> <span class="token number">404</span>
  <span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="Session重构"><a href="#Session重构" class="headerlink" title="Session重构"></a>Session重构</h3><blockquote>
<p>使用独立命名空间创建Module</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">module</span> <span class="token class-name">Concerns</span>
  <span class="token keyword">module</span> <span class="token class-name">UserSession</span>
    <span class="token comment"># 这里是一个钩子函数，当UserSession模块被included触发</span>
    <span class="token keyword">def</span> <span class="token method-definition"><span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">included</span></span> base
      base<span class="token punctuation">.</span>class_eval <span class="token keyword">do</span>
        <span class="token comment"># 将logged_in? 和 current_user 方法转为实例方法，使视图也可以访问到</span>
        helper_method <span class="token symbol">:logged_in?</span>
        helper_method <span class="token symbol">:current_user</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">signin_user</span></span> user
      session<span class="token punctuation">[</span><span class="token symbol">:user_id</span><span class="token punctuation">]</span> <span class="token operator">=</span> user<span class="token punctuation">.</span>id
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">logout_user</span></span>
      session<span class="token punctuation">[</span><span class="token symbol">:user_id</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">nil</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">logged_in</span></span><span class="token operator">?</span>
      <span class="token operator">!</span><span class="token operator">!</span>session<span class="token punctuation">[</span><span class="token symbol">:user_id</span><span class="token punctuation">]</span>
    <span class="token keyword">end</span>

    <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">current_user</span></span>
      <span class="token keyword">if</span> logged_in<span class="token operator">?</span>
        <span class="token variable">@current_user</span> <span class="token operator">||=</span> User<span class="token punctuation">.</span>find<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token symbol">:user_id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
      <span class="token keyword">else</span>
        <span class="token keyword">nil</span>
      <span class="token keyword">end</span>
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>在<code>ApplicationController</code>中引入UserSession</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span>Base
  <span class="token comment"># Prevent CSRF attacks by raising an exception.</span>
  <span class="token comment"># For APIs, you may want to use :null_session instead.</span>
  protect_from_forgery with<span class="token operator">:</span> <span class="token symbol">:exception</span>
	<span class="token comment"># 引入UserSession，这样所有子类都拥有了引入方法</span>
  <span class="token keyword">include</span> Concerns<span class="token double-colon punctuation">::</span>UserSession
  <span class="token keyword">private</span>
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">auth_user</span></span>
    <span class="token keyword">unless</span> logged_in<span class="token operator">?</span>
      flash<span class="token punctuation">[</span><span class="token symbol">:notice</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"请登录"</span></span>
      redirect_to new_session_path
    <span class="token keyword">end</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="ModelBasic"><a href="#ModelBasic" class="headerlink" title="ModelBasic"></a>ModelBasic</h2><h3 id="conventions-（约定）"><a href="#conventions-（约定）" class="headerlink" title="conventions （约定）"></a>conventions （约定）</h3><p>​    Model（单数） 数据表（复数），这里并不是单纯加个s，因为Person复数，表名为：people</p>
<p>​    class User      -&gt; 表：users</p>
<p>​    class Person  -&gt; people</p>
<p>​    class Blog      -&gt; blogs</p>
<blockquote>
<p>默认创建：id , creat_at , update_at 字段</p>
</blockquote>
<p>​    这里如果是使用生成器生成，想要修改表名，需修改：Model中指定：self.table_name=”” 和 migrate 移植文件</p>
<h3 id="分页操作"><a href="#分页操作" class="headerlink" title="分页操作"></a>分页操作</h3><p>官方网址：<a href="https://ddnexus.github.io/pagy/">https://ddnexus.github.io/pagy/</a></p>
<ol>
<li>Gemfile添加：`gem ‘pagy’, ‘~&gt; 6.0’</li>
<li>下载依赖：<code>bundle</code></li>
<li>在ApplicationController 中引入,这样所有的子类都能使用该方法了</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span><span class="token constant">API</span>
    <span class="token keyword">include</span> Pagy<span class="token double-colon punctuation">::</span>Backend
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="4">
<li>在业务控制器中使用</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">page</span></span>
    page <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token symbol">:page</span><span class="token punctuation">]</span>
    per <span class="token operator">=</span> params<span class="token punctuation">[</span><span class="token symbol">:per</span><span class="token punctuation">]</span>
    <span class="token comment"># 这里page(数据集合 , 分页的参数)，这里返回的一个数组，@pagy表示分页的参数新股</span>
    <span class="token comment"># @records 表示分页后的数据</span>
    <span class="token variable">@pagy</span><span class="token punctuation">,</span> <span class="token variable">@records</span> <span class="token operator">=</span> pagy<span class="token punctuation">(</span>User<span class="token punctuation">.</span>all<span class="token punctuation">,</span><span class="token symbol">page</span><span class="token symbol">:page</span><span class="token punctuation">,</span><span class="token symbol">items</span><span class="token symbol">:per</span><span class="token punctuation">)</span>
    render json<span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"records"</span></span><span class="token operator">=></span><span class="token variable">@records</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"count"</span></span><span class="token operator">=></span><span class="token variable">@pagy</span><span class="token punctuation">.</span>count<span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​    这里我们可以按照需求将返回的Json任意组合</p>
<h3 id="crud操作"><a href="#crud操作" class="headerlink" title="crud操作"></a>crud操作</h3><h4 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h4><ul>
<li><code>where()</code></li>
<li><code>find_by()</code></li>
<li><code>first()</code></li>
<li><code>where().order().limit()</code></li>
</ul>
<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><ul>
<li><code>@user = user.find()</code></li>
<li><code>user.save()</code></li>
<li><code>user.update_all</code></li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li><code>user.destory()</code></li>
</ul>
<h4 id="Associations关联关系"><a href="#Associations关联关系" class="headerlink" title="Associations关联关系"></a>Associations关联关系</h4><ul>
<li>has_many : 一对多，多对多</li>
<li>has_one   ：一对一</li>
<li>belongs_to : 一对一</li>
<li>has_and_belongs_to_many : 多对多</li>
</ul>
<h3 id="Rails批量删除"><a href="#Rails批量删除" class="headerlink" title="Rails批量删除"></a>Rails批量删除</h3><p>待完成</p>
<h2 id="Rails-测试"><a href="#Rails-测试" class="headerlink" title="Rails 测试"></a>Rails 测试</h2><p>Ruby自带有MiniTest</p>
<p>集成测试：</p>
<ul>
<li>RSpec</li>
<li>Capybara</li>
</ul>
<h2 id="Rails-跨域问题"><a href="#Rails-跨域问题" class="headerlink" title="Rails 跨域问题"></a>Rails 跨域问题</h2><p><a href="https://blog.csdn.net/topswim/article/details/79311592">https://blog.csdn.net/topswim/article/details/79311592</a></p>
<ol>
<li>Gemfile： <code>gem &#39;rack-cors&#39;, :require =&gt; &#39;rack/cors&#39;</code></li>
<li></li>
</ol>
<h2 id="Rails-移植与回调"><a href="#Rails-移植与回调" class="headerlink" title="Rails 移植与回调"></a>Rails 移植与回调</h2><p>​    主要负责数据库版本管理，进行数据库迁移或回调</p>
<ul>
<li><p>Migrations （ActiveRecord gem）</p>
</li>
<li><p>使用：</p>
<ul>
<li>rails g model 模型名         生成model文件与移植文件</li>
<li>rails g migration 文件名     生成移植文件，比如对原有数据表做修改，文件名最好可表示意义<ul>
<li><code>add_column :数据表 ,:字段名 ,字段类型</code></li>
<li>也可以使用rails g migration 查看参数</li>
</ul>
</li>
</ul>
</li>
<li><p>Rake</p>
<ul>
<li>rails  db:migrate    根据移植文件，向数据库中操作，每次更新到最新的数据库版本</li>
<li>rails  db:rollback   回退移植文件，这里我们也可以控制具体操作</li>
<li>rails  db:migrate:status   查看数据库状态</li>
<li>rake -T  查看rake所有的命令</li>
<li>rake db:version   查看当前数据库版本</li>
<li>migrate文件内其实是把整个环境加载进来，所以我们也可以直接对数据进行操作</li>
<li>Rake db:rollback step=2 向后回滚两个版本</li>
</ul>
<blockquote>
<p>永远不要修改已经提交的migration！！！</p>
</blockquote>
</li>
</ul>
<h2 id="Callback"><a href="#Callback" class="headerlink" title="Callback"></a>Callback</h2><p>​    在增删改查的操作上添加的回调事件，在执行增删改查的时候同步触发一些逻辑</p>
<blockquote>
<p>回调触发分类</p>
</blockquote>
<ol>
<li>Create an Object</li>
<li>Updating an Object</li>
<li>Destorying an Object</li>
<li>finding an Object</li>
</ol>
<h3 id="Create回调"><a href="#Create回调" class="headerlink" title="Create回调"></a>Create回调</h3><img src="../../typora-user-images/image-20230112192554270.png" alt="image-20230112192554270" style="zoom:80%;" />

<p>​    顺序也是严格按照图中的顺序执行。这些方法也都是类方法，可直接指定：<code>before_save :update_username</code></p>
<blockquote>
<p>需要注意：after_save 是已经存储到数据库了，但并未提交，如果在after_save针对模型又做出修改，不能再使用 self.save ,因为会触发死循环。</p>
</blockquote>
<h3 id="Update回调"><a href="#Update回调" class="headerlink" title="Update回调"></a>Update回调</h3><img src="../../typora-user-images/image-20230112193429505.png" alt="image-20230112193429505" style="zoom:80%;" />

<h3 id="Destroy回调"><a href="#Destroy回调" class="headerlink" title="Destroy回调"></a>Destroy回调</h3><img src="../../typora-user-images/image-20230112193459198.png" alt="image-20230112193459198" style="zoom:80%;" />

<h3 id="Find回调"><a href="#Find回调" class="headerlink" title="Find回调"></a>Find回调</h3><img src="../../typora-user-images/image-20230112193533698.png" alt="image-20230112193533698" style="zoom:80%;" />

<h3 id="触发callback的方法"><a href="#触发callback的方法" class="headerlink" title="触发callback的方法"></a>触发callback的方法</h3><img src="../../typora-user-images/image-20230112193615984.png" alt="image-20230112193615984" style="zoom:80%;" />

<h3 id="触发after-find-（基本不使用）"><a href="#触发after-find-（基本不使用）" class="headerlink" title="触发after_find （基本不使用）"></a>触发after_find （基本不使用）</h3><img src="../../typora-user-images/image-20230112193716012.png" alt="image-20230112193716012" style="zoom:80%;" />

<h3 id="跳过callback的触发方法"><a href="#跳过callback的触发方法" class="headerlink" title="跳过callback的触发方法"></a>跳过callback的触发方法</h3><img src="../../typora-user-images/image-20230112193746758.png" alt="image-20230112193746758" style="zoom:80%;" />

<h3 id="Callback参数"><a href="#Callback参数" class="headerlink" title="Callback参数"></a>Callback参数</h3><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">User</span> ActiveRecord<span class="token double-colon punctuation">::</span>Base
  before_save <span class="token symbol">:update_username</span><span class="token punctuation">,</span><span class="token symbol">unless</span><span class="token symbol">:proc</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>user<span class="token operator">|</span> user<span class="token punctuation">.</span>evil<span class="token operator">?</span><span class="token punctuation">&#125;</span>
  <span class="token comment">#or</span>
  before_save <span class="token symbol">:update_username</span><span class="token punctuation">,</span><span class="token symbol">if</span><span class="token symbol">:proc</span> <span class="token punctuation">&#123;</span><span class="token operator">|</span>user<span class="token operator">|</span> <span class="token operator">!</span>user<span class="token punctuation">.</span>evil<span class="token operator">?</span><span class="token punctuation">&#125;</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Rails-事务"><a href="#Rails-事务" class="headerlink" title="Rails 事务"></a>Rails 事务</h2><p>​    在Rails中对事务的支持，自动将模型的<code>save,destory,回调</code>封装到一个事务中</p>
<blockquote>
<p>如何操作？</p>
</blockquote>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token comment"># will trigger rollback</span>
<span class="token comment"># 这里Blog可以是类，或者是一个实例对象，都可以操作事务</span>
Blog<span class="token punctuation">.</span>transaction <span class="token keyword">do</span>
  <span class="token comment"># save！如果失败，都会爆出异常</span>
  blog<span class="token punctuation">.</span>save<span class="token operator">!</span>
<span class="token keyword">end</span>
<span class="token comment"># will also trigger rollback</span>
Blog<span class="token punctuation">.</span>transaction <span class="token keyword">do</span>
  <span class="token comment">#...  主动抛出异常</span>
  <span class="token keyword">raise</span> <span class="token string-literal"><span class="token string">'error'</span></span>
<span class="token keyword">end</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="Rails-分页"><a href="#Rails-分页" class="headerlink" title="Rails 分页"></a>Rails 分页</h2><p>推荐使用：<a href="https://ddnexus.github.io/pagy/docs/how-to/">https://ddnexus.github.io/pagy/docs/how-to/</a></p>
<ol>
<li>下载gem</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">gem <span class="token string-literal"><span class="token string">'pagy'</span></span><span class="token punctuation">,</span> <span class="token string-literal"><span class="token string">'~> 6.0'</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>全局引入</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">ApplicationController</span> <span class="token operator">&lt;</span> ActionController<span class="token double-colon punctuation">::</span><span class="token constant">API</span>
  <span class="token keyword">include</span> Pagy<span class="token double-colon punctuation">::</span>Backend
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>组件使用</li>
</ol>
<pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby"><span class="token keyword">class</span> <span class="token class-name">StudentsController</span> <span class="token operator">&lt;</span> ApplicationController
  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">search</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token variable">@pagy</span><span class="token punctuation">,</span> <span class="token variable">@records</span> <span class="token operator">=</span> pagy<span class="token punctuation">(</span>Student<span class="token punctuation">.</span>all<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string-literal"><span class="token string">"page"</span></span><span class="token symbol">:params</span><span class="token punctuation">[</span><span class="token symbol">:page</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">"items"</span></span><span class="token symbol">:params</span><span class="token punctuation">[</span><span class="token symbol">:size</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    render json<span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token string-literal"><span class="token string">"count"</span></span><span class="token operator">=></span><span class="token variable">@pagy</span><span class="token punctuation">.</span>count<span class="token punctuation">,</span>
      <span class="token string-literal"><span class="token string">"data"</span></span><span class="token operator">=></span><span class="token variable">@records</span>
    <span class="token punctuation">&#125;</span>
  <span class="token keyword">end</span>
<span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>


]]></content>
      <categories>
        <category>Ruby</category>
      </categories>
      <tags>
        <tag>Rails</tag>
      </tags>
  </entry>
  <entry>
    <title>手写非公平锁（ReentrantLock）</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E6%89%8B%E5%86%99%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%EF%BC%88ReentrantLock%EF%BC%89.html</url>
    <content><![CDATA[<h1 id="手写非公平锁（ReentrantLock）"><a href="#手写非公平锁（ReentrantLock）" class="headerlink" title="手写非公平锁（ReentrantLock）"></a>手写非公平锁（ReentrantLock）</h1><p>​        ReentrantLock很多教程都在讲解，虽然很细致，但内容太多了，过段时间就很容易忘，我们知道ReentrantLock的核心是AQS(抽象队列同步器)，我们这里试着使用AQS，自己写一个非公平锁使用，看看AQS承载了哪部分的职责，ReentrantLock承载了哪部分的职责</p>
<blockquote>
<p>第一步：定义接口，面向接口编程嘛</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> myLock <span class="token punctuation">&#123;</span>
  	<span class="token comment">// 很简单的加锁和释放锁</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>第二步：看看ReentrantLock与AQS的关系</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> myUnFairLock <span class="token keyword">implements</span> myLock <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Sync</span> sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  	<span class="token comment">// 锁的核心由AQS管理，ReentrantLock只负责重写 tryAcquire 和 tryRelease方法的逻辑</span>
  	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">&#123;</span>
      	<span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
       	<span class="token annotation punctuation">@Override</span>
        <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
      
      	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
          	<span class="token comment">// 这些方法AQS都已经封装好，我们只需要组合即可</span>
          	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      
      	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sync<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        sync<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>第三部：查看ReentrantLock重写的加锁，释放锁的步骤</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Sync</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractQueuedSynchronizer</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryAcquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取当前线程</span>
        <span class="token keyword">final</span> <span class="token class-name">Thread</span> current <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取同步器的状态值(AQS初始好的),其实就是一个锁的引用计数器，为0时表示锁无人占有</span>
        <span class="token keyword">int</span> state <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 说明state值是与锁状态有关的</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 0代表可以再次抢锁</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 如果抢到，指明当前线程，获取到锁了</span>
                <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 判断占有线程是否就是自己，保证锁的可重入性</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current <span class="token operator">==</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 如果是自己的锁，则计数器+1</span>
            <span class="token keyword">int</span> newState <span class="token operator">=</span> state <span class="token operator">+</span> arg<span class="token punctuation">;</span>
            <span class="token comment">// 这里是怕无限递归，造成计数器溢出</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>newState <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"Maximum lock count exceeded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">// 设置新的值</span>
            <span class="token function">setState</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">tryRelease</span><span class="token punctuation">(</span><span class="token keyword">int</span> arg<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取锁的引用计数器</span>
        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> arg<span class="token punctuation">;</span>
        <span class="token comment">// 判断清楚现在释放的锁是自己占用的锁不</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">getExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalMonitorStateException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">boolean</span> free <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 锁状态清0</span>
            free <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">setState</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 如果锁还有被引用，就是false，无引用就是true</span>
        <span class="token keyword">return</span> free<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">compareAndSetState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">setExclusiveOwnerThread</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">release</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        这些就是ReentrantLock核心做的事儿，其他的都交给AQS来完成，例如设置锁占有，获取锁值，通过原子比较尝试获取锁，阻塞线程的管理等。如果需要我们可以在中间加入我们的逻辑，来替代原有的ReentrantLock。</p>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>AQS锁</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式的演化过程</title>
    <url>//post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%9A%84%E6%BC%94%E5%8C%96%E8%BF%87%E7%A8%8B.html</url>
    <content><![CDATA[<h1 id="初级阶段（本地调用）"><a href="#初级阶段（本地调用）" class="headerlink" title="初级阶段（本地调用）"></a>初级阶段（本地调用）</h1><p>​        在我们学习java初期，我们都会通过创建一个类对象，用该对象调用自身方法，得到需要的内容。整个过程都在本地当前JVM中进行的。这样的程序是最简单，方便，快速的。后面我们又学习了面向接口编程，用接口去规范子类的行为，也就是说调用者不需要知道具体方法的实现，只调用接口即可。</p>
<p>​        再后来我们又学习了分布式调用这些高端名词，什么Dubbo，什么RPC框架，什么Zookeeper注册中心，说实话我学完还是挺懵逼的，会有种漂浮的感觉，知道它大概是个什么东西后，又说这玩意儿落伍了，让我去看看SpringCloud，Nacos之类的玩意儿，说学这个没问题。现在回想起来有种知识断层的感觉，这种感觉从普通java程序进阶为Spring框架时有，从SpringBoot到SpringCloud时也有。废话不多说了 ，我们开始理理思路吧。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">askEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> factoryImpl <span class="token keyword">implements</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">askEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"旺财"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> demo<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Factory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">factoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">askEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        上面这个代码，没啥难度。就是通过Factory实现类，使用类方法返回一个User对象，但这个操作只能我这台机子操作，别人又没源码，简单粗暴的做法，你想用，直接复制粘贴我的源码。但假如有天我发现了一个Bug，只能修改的是我电脑里的代码，发布一个声明，你们知道后，再拷贝一遍，这不是麻烦死了嘛。</p>
<p>​        那转化一个思路，我只知道这个接口，而具体实现在你的电脑上，并发布注册到网络中，当我调用接口方法执行时，其实是将接口名，方法名，参数名，参数属性打包发给你，然后实际是在你的程序中进行执行，然后将结果返回到我这里。这样大家都找你调用服务，如果有bug，和我们没关系，你在你那修改，我们这边照常调用就好。这是不是就有点儿服务注册与发现的感觉了。那具体这个打包发送信息，就可以用上JAVA基础篇中的IO流啦，通过Socket进行TCP/IP连接，通过二进制流数据进行信息的传递，这里就又涉及到了Java对象的序列化与反序列化。底层实际就是我们基础篇学习的东西，只不过加了亿点儿细节。</p>
<p>​        那我们就想，我只想简单的调用个远程服务，上来就给我整个Dubbo框架，配置一堆东西，能不能简单点儿？ 给我缓一下，可以！！！下面就引出了 <code>RMI(Remote Method Invocation)</code>,简单理解就是Java本身对分布式方法调用就有的实现方法。</p>
<h1 id="中级阶段（JVM远程调用）"><a href="#中级阶段（JVM远程调用）" class="headerlink" title="中级阶段（JVM远程调用）"></a>中级阶段（JVM远程调用）</h1><p>![image-20220919215330719](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20220919215330719.png)</p>
<p>​        有没有感觉这个图很熟悉，我们上来直接看代码，通过代码可能逻辑能理得更清楚些。</p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><blockquote>
<p>Entity层：需要传输的对象</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>  
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里我们实现了Serializable接口和指定serialVersionUID，为了保证序列化与反序列化正常</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6490921832856589236L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Service，ServiceImpl层：定义接口，和具体的实现类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 这里继承Remote接口是关键，并且也需要保证序列化</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6490921832856589236L</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * 查找用户
     * @param userId
     * @return
     * @throws RemoteException  这里必须抛出异常
     */</span>
    <span class="token class-name">User</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 具体的接口实现类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FactoryImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Factory</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">FactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 就是简单的判断Id，决定是否返回对象。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"金庸"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> user<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RemoteException</span><span class="token punctuation">(</span><span class="token string">"查无此人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Main：启动类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RmiServer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"create remote service..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 实例化一个userService,这个实例就是未来真正干活的对象</span>
        <span class="token class-name">UserService</span> userService1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 这里其实相当于把userService1实例挂载到某个端口中，也就是服务端:  如果这里port=0，表示内核就会为我们随机一个端口</span>
        <span class="token class-name">UserService</span> rmiUserService1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UserService</span><span class="token punctuation">)</span> <span class="token class-name">UnicastRemoteObject</span><span class="token punctuation">.</span><span class="token function">exportObject</span><span class="token punctuation">(</span>userService1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 将RMI服务注册到1099端口，也就是注册中心</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 绑定此服务，服务名为"UserService": 这里已经很像注册中心了，注册中心有一个端口，服务提供者一个端口</span>
        registry<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"UserService"</span><span class="token punctuation">,</span> rmiUserService1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><blockquote>
<p>Entity：和服务端一致</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">6490921832856589236L</span><span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Service：和服务端一值</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Factory</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 查找用户
     * 
     * @param userId
     * @return
     * @throws RemoteException
     */</span>
    <span class="token class-name">User</span> <span class="token function">findUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>Main 启动类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RmiClient</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RemoteException</span><span class="token punctuation">,</span> <span class="token class-name">NotBoundException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 连接到服务器localhost，端口1099，也就是去找注册中心:</span>
        <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 查找名称为"Factory"的服务并强制转型为Factory接口，这里我们发现我们不需要知道服务端的地址，看注册中心有没有该服务，直接调用即可</span>
        <span class="token class-name">Factory</span> worldClock <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Factory</span><span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"Factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 正常调用接口方法，这里的调用实际上去服务端进行计算的，本地根本没有实现:</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> worldClock<span class="token punctuation">.</span><span class="token function">findUser</span><span class="token punctuation">(</span><span class="token string">"110"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印调用结果:</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        这里其实就已经可以远程服务调用了。就是调用了几个Java自身的接口，统一一下返回类型。是不是感觉很清晰，简单。你也不用引入啥其他玩意儿。建议读者自己再执行一遍。理一下思路。</p>
<p>​        现在我写的就一个很简单的Demo，常见的轮训访问，心跳机制啥的都没有。但对于初次接触的人感觉还是很有善的。那这个RMI看着这么简单方便，为啥后面还有个RPC框架呢。从我的理解，最直接的问题：</p>
<ol>
<li>RMI只针对JVM间进行服务，如果我们用其他编程语言没法进行使用调用。</li>
<li>序列化与反序列化机制。这里牵扯到了网络安全问题。<ol>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU2NzkxMDUyNg==&amp;mid=2247486261&amp;idx=1&amp;sn=5bce20d898eba670b4b129a8a3092449&amp;utm_source=tuicool&amp;utm_medium=referral">https://mp.weixin.qq.com/s?__biz=MzU2NzkxMDUyNg==&amp;mid=2247486261&amp;idx=1&amp;sn=5bce20d898eba670b4b129a8a3092449&amp;utm_source=tuicool&amp;utm_medium=referral</a>, 我后面估计会单独再总结一下，简单来攻击者将一些恶意代码夹杂到类对象中，进行序列化后发送，你反序列化后会自动执行恶意代码。</li>
</ol>
</li>
</ol>
<h1 id="高级阶段（分布式服务调用）"><a href="#高级阶段（分布式服务调用）" class="headerlink" title="高级阶段（分布式服务调用）"></a>高级阶段（分布式服务调用）</h1><p>终于到了RPC框架了，这里我是看到<code>b站：汤姆还在写代码</code> 中对grpc讲解 进行学习的。建议去看看原视频，讲的很细节。这里我直接贴代码了，内容还是比较多的。也可以直接下载源码：<a href="https://github.com/tomstillcoding/Simple-RPC">https://github.com/tomstillcoding/Simple-RPC</a></p>
<blockquote>
<p>代码相当于手撸一个简单的RPC框架，我们简单看一下项目结构</p>
</blockquote>
<p>![image-20220919224149858](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20220919224149858.png)</p>
<p>![image-20220919224307873](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20220919224307873.png)</p>
<blockquote>
<p>我们会先看客户端，服务端的启动类，然后一步步挖掘</p>
</blockquote>
<h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestClient</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 获取RpcService，相当于就是连接注册中心</span>
        <span class="token class-name">RpcClientProxy</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcClientProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从注册中心中找需要使用的接口</span>
        <span class="token class-name">HelloService</span> helloService <span class="token operator">=</span> proxy<span class="token punctuation">.</span><span class="token function">getService</span><span class="token punctuation">(</span><span class="token class-name">HelloService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 构造出请求对象HelloRequest，也就是定义好的请求参数</span>
        <span class="token class-name">HelloRequest</span> helloRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloRequest</span><span class="token punctuation">(</span><span class="token string">"tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// rpc调用并返回结果对象HelloResponse</span>
        <span class="token class-name">HelloResponse</span> helloResponse <span class="token operator">=</span> helloService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span>helloRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 从HelloResponse中获取msg</span>
        <span class="token class-name">String</span> helloMsg <span class="token operator">=</span> helloResponse<span class="token punctuation">.</span><span class="token function">getMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 打印msg</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>helloMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>初始化注册中心</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClientProxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
  	<span class="token comment">// 这里通过反射获取动态代理对象</span>
    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token class-name">T</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>
                clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>clazz<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  	<span class="token comment">// 这里你可以理解为当你调用对象方法时，实际上你拿到的是一个动态代理后的对象进行调用方法，而实际调用的方法信息通过Socket传输给了服务端，然后结果再通过Socket回传，再返回到你本机。可以说很是巧妙</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 1、将接口需要调用的方法的各类信息打包成一个请求体，这里使用了Builder模式【codec层】</span>
        <span class="token class-name">RpcRequestBody</span> rpcRequestBody <span class="token operator">=</span> <span class="token class-name">RpcRequestBody</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">interfaceName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">methodName</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">paramTypes</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getParameterTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">parameters</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token comment">// 转化为二进制数组，用于IO传输</span>
        <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcRequestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、创建RPC协议，将Header、Body的内容设置好（Body中存放调用编码）【protocol层】</span>
        <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token class-name">RpcRequest</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3、发送RpcRequest，获得RpcResponse</span>
        <span class="token class-name">RpcClientTransfer</span> rpcClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcClientTransfer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">RpcResponse</span> rpcResponse <span class="token operator">=</span> rpcClient<span class="token punctuation">.</span><span class="token function">sendRequest</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 4、解析RpcResponse，也就是在解析rpc协议【protocol层】</span>
        <span class="token class-name">String</span> header <span class="token operator">=</span> rpcResponse<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> rpcResponse<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 将RpcResponse的body中的返回编码，解码成我们需要的对象Object并返回【codec层】</span>
            <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">RpcResponseBody</span> rpcResponseBody <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcResponseBody</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> rpcResponseBody<span class="token punctuation">.</span><span class="token function">getRetObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>实际通过Socket发送信息</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcClientTransfer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcResponse</span> <span class="token function">sendRequest</span><span class="token punctuation">(</span><span class="token class-name">RpcRequest</span> rpcRequest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 通过Socket进行连接</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 发送【transfer层】</span>
            <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 通过Socket发送</span>
            objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 这里必须刷新，将数据写出</span>
            objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 获取Socket传回来的请求体</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">RpcResponse</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><blockquote>
<p>启动类</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServer</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 真正的rpc server，相当于注册中心，这里主要定义了一个线程池 和 一个监听器</span>
        <span class="token class-name">RpcServer</span> rpcServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RpcServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 负责干活的实例</span>
        <span class="token class-name">HelloService</span> helloService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 向rpc server注册实例</span>
        rpcServer<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>helloService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 开始监听，每监听到一个请求，就创建一个线程去执行</span>
        rpcServer<span class="token punctuation">.</span><span class="token function">serve</span><span class="token punctuation">(</span><span class="token number">9000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>RPC的服务端，也可以理解为注册中心</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcServer</span> <span class="token punctuation">&#123;</span>
  	<span class="token comment">// 线程池</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ExecutorService</span> threadPool<span class="token punctuation">;</span>
    <span class="token comment">// interfaceName -> interfaceImplementation object</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> registeredService<span class="token punctuation">;</span>

  	<span class="token comment">// 初始化线程池 和 服务容器</span>
    <span class="token keyword">public</span> <span class="token class-name">RpcServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 线程数</span>
        <span class="token keyword">int</span> corePoolSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
        <span class="token comment">// 最大线程数</span>
        <span class="token keyword">int</span> maximumPoolSize <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>
        <span class="token comment">// 线程存活时间</span>
        <span class="token keyword">long</span> keepAliveTime <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>
        <span class="token comment">// 线程容器</span>
        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 线程工厂</span>
        <span class="token class-name">ThreadFactory</span> threadFactory <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建线程池</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>corePoolSize<span class="token punctuation">,</span> maximumPoolSize<span class="token punctuation">,</span> keepAliveTime<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">,</span> workingQueue<span class="token punctuation">,</span> threadFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注册服务的容器，没想到就是Map</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registeredService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 存储服务</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">Object</span> service<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 就是将该对象存储到容器中 key为接口名  value为具体服务</span>
        registeredService<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> service<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

  	<span class="token comment">// 监听服务</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serve</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 这里实际上也是用Socket连接</span>
        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server starting..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Socket</span> handleSocket<span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>handleSocket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client connected, ip:"</span> <span class="token operator">+</span> handleSocket<span class="token punctuation">.</span><span class="token function">getInetAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 如果有请求进来，这里会调用一个线程去执行</span>
                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RpcServerWorker</span><span class="token punctuation">(</span>handleSocket<span class="token punctuation">,</span> registeredService<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>每个请求进入服务端后，记性相应的处理</p>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RpcServerWorker</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> registeredService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">RpcServerWorker</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> registeredService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>registeredService <span class="token operator">=</span> registeredService<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 从Socket中获取输入流 与 输出流，这里使用的对象流，也就是要序列化操作</span>
            <span class="token class-name">ObjectInputStream</span> objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">ObjectOutputStream</span> objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 1、Transfer层获取到RpcRequest消息【transfer层】  含有header 和 body</span>
            <span class="token class-name">RpcRequest</span> rpcRequest <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcRequest</span><span class="token punctuation">)</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 2、解析版本号，并判断【protocol层】</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>rpcRequest<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

                <span class="token comment">// 3、将rpcRequest中的body部分解码出来变成RpcRequestBody【codec层】</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body <span class="token operator">=</span> rpcRequest<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ByteArrayInputStream</span> bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 接口名，方法名，参数，参数类型</span>
                <span class="token class-name">RpcRequestBody</span> rpcRequestBody <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">RpcRequestBody</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 从注册的服务中，找到对应的接口名  这里是用到了反射</span>
                <span class="token class-name">Object</span> service <span class="token operator">=</span> registeredService<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rpcRequestBody<span class="token punctuation">.</span><span class="token function">getInterfaceName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Method</span> method <span class="token operator">=</span> service<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span>rpcRequestBody<span class="token punctuation">.</span><span class="token function">getMethodName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rpcRequestBody<span class="token punctuation">.</span><span class="token function">getParamTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              	<span class="token comment">// 通过反射，获取对象，方法，然后得到结果</span>
                <span class="token class-name">Object</span> returnObject <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>service<span class="token punctuation">,</span> rpcRequestBody<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 1、将结果编码成bytes[]即变成了返回编码【codec层】</span>
                <span class="token class-name">RpcResponseBody</span> rpcResponseBody <span class="token operator">=</span> <span class="token class-name">RpcResponseBody</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">retObject</span><span class="token punctuation">(</span>returnObject<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ByteArrayOutputStream</span> baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcResponseBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">// 2、将返回编码作为body，加上header，生成RpcResponse协议【protocol层】</span>
                <span class="token class-name">RpcResponse</span> rpcResponse <span class="token operator">=</span> <span class="token class-name">RpcResponse</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"version=1"</span><span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span>
                        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
              
                <span class="token comment">// 3、发送【transfer层】</span>
                objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>rpcResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>
                objectOutputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> <span class="token class-name">ClassNotFoundException</span> <span class="token operator">|</span> <span class="token class-name">NoSuchMethodException</span> <span class="token operator">|</span> <span class="token class-name">IllegalAccessException</span> <span class="token operator">|</span> <span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        上面就是整体的一个运行流程，至于里面的实例信息可以直接从github上查看，我主要帮助理一下思路，可以说是不停的debug，这里我遇到了一个比较坑的点：动态代理的invoke方法在debug时候会出现各种莫名奇妙的问题，你直接取消下图的按钮，就可以正常执行了。![image-20220920141753163](/Users/qinsicheng/Library/Application Support/typora-user-images/image-20220920141753163.png)</p>
<blockquote>
<p>总结：</p>
</blockquote>
<p>​        我们可以看到当在我们最后一块儿手写RPC时，真正干活的对象并没有分离为一个服务，而是将它放入了服务端的一个Map中，当请求过来时，对请求进行处理，找到需要执行的接口，从Map中看有没有该接口实例，如果有则进行执行，执行结果再通过Socket进行回传。</p>
<p>​        这里的案例我是照搬<code>汤姆还在写代码</code>的，从中我知道了可以通过自定义RPC简单协议来通过Socket进行信息交互，真的很酷，这样看其实各个协议离我们并不遥远，我们也可以自己去定义，通过Map来存储各个服务，虽然不知道真实的Zookeeper是怎么实现的，但应该原理是类似的。后面我可能再去看看grpc的实现，应该能发现更多的东西。</p>
]]></content>
      <categories>
        <category>分布式</category>
      </categories>
      <tags>
        <tag>RPC</tag>
        <tag>RMI</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程事务</title>
    <url>//post/%E5%B9%B6%E5%8F%91/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BA%8B%E5%8A%A1.html</url>
    <content><![CDATA[<h1 id="多线程事务"><a href="#多线程事务" class="headerlink" title="多线程事务"></a>多线程事务</h1><p>​        在Spring开发时，遇到一个从Excel表导入数据到数据库的需求，当然最简单的方法就是先使用EasyExcel把数据读出到集合中，然后依次插入到数据库中。但如何保证效率，原子性呢？我们一步步优化方案。这里会涉及到分布式事务的知识，如果感兴趣可以看我之前的文章：<a href="http://www.chengling.cloud/post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html">玲辰书斋</a>，这里不会引入不必要的组件，而是我们自己模拟类似的思想。</p>
<p>方法1：依次顺序插入</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>user <span class="token operator">-></span> userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法2：使用批处理，一次操作中执行多条SQL</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">=</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法3：使用多线程+批处理，每个线程插入多条数据</p>
<blockquote>
<p>需要注意的一点，Spring容器不允许线程注入，也就是没办法在多线程直接使用Bean操作，例如：</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// 下面两种方式是无效的，不会执行任何东西</span>
  <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">// 方法1</span>
  <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// 方法2</span>
  <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们需要下面的方式进行执行</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Runnable</span> runnable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            userService<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> future <span class="token operator">=</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span>runnable<span class="token punctuation">,</span> executorService<span class="token punctuation">)</span><span class="token punctuation">;</span>
        future<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</blockquote>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">testThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> threadSize <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>threadSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadSize<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 我们假设数据拆分为五分</span>
        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">runAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>
            userService<span class="token punctuation">.</span><span class="token function">saveBatch</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>executorService<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>方法4：这时候速度已经很快了，但是如果其中一个线程插入数据时发生错误进行回滚，其他线程是无法得知的，因为事务是针对线程的，所以这里我们需要用一些方式保证每个线程之间的状态是被共享的。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// UserService#saveUserSyn()</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">saveUserSyn</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> users<span class="token punctuation">,</span> <span class="token class-name">CountDownLatch</span> threadLatch<span class="token punctuation">,</span> <span class="token class-name">CountDownLatch</span> mainLatch<span class="token punctuation">,</span> <span class="token class-name">UserError</span> hasError<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TransactionStatus</span> transactionStatus <span class="token operator">=</span> dataSourceTransactionManager<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>transactionDefinition<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子线程："</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            users<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">save</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>
            threadLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换到主线程执行</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            mainLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//等待主线程执行</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">// 判断是否有错误，如有错误 就回滚事务</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>hasError<span class="token punctuation">.</span><span class="token function">isHasError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            dataSourceTransactionManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span>transactionStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            dataSourceTransactionManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span>transactionStatus<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 测试方法</span>
<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">userSaveSyn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> userList <span class="token operator">=</span> <span class="token function">getAllUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 添加一个错误数据</span>
        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUserAccount</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        user<span class="token punctuation">.</span><span class="token function">setUserPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        userList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 线程数量</span>
        <span class="token keyword">final</span> <span class="token class-name">Integer</span> threadCount <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>

        <span class="token comment">//每个线程处理的数据量</span>
        <span class="token keyword">final</span> <span class="token class-name">Integer</span> dataPartionLength <span class="token operator">=</span> <span class="token punctuation">(</span>userList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> threadCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> threadCount<span class="token punctuation">;</span>

        <span class="token comment">// 创建多线程处理任务</span>
        <span class="token class-name">ExecutorService</span> studentThreadPool <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CountDownLatch</span> threadLatchs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span>threadCount<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于计算子线程提交数量</span>
        <span class="token class-name">CountDownLatch</span> mainLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用于判断主线程是否提交</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> threadCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 每个线程处理的数据</span>
            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> threadDatas <span class="token operator">=</span> userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span>i <span class="token operator">*</span> dataPartionLength<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span>dataPartionLength<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            studentThreadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
                userService<span class="token punctuation">.</span><span class="token function">saveUserSyn</span><span class="token punctuation">(</span>threadDatas<span class="token punctuation">,</span> threadLatchs<span class="token punctuation">,</span> mainLatch<span class="token punctuation">,</span> hasError<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">// 倒计时锁设置超时时间 30s</span>
            <span class="token keyword">boolean</span> await <span class="token operator">=</span> threadLatchs<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>await<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 等待超时，事务回滚</span>
                hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            hasError<span class="token punctuation">.</span><span class="token function">setHasError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        mainLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 切换到子线程执行</span>
        studentThreadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//关闭线程池</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主线程完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        这里我们使用<code>CountDownLatch</code> 和 Volatile来解决这个问题。</p>
<p>CountDownLatch的语法与原理讲解：<a href="https://zhuanlan.zhihu.com/p/148231820">https://zhuanlan.zhihu.com/p/148231820</a></p>
<p>Volatile保证线程间数据的可见性</p>
<p>2PC（两阶段提交），这个属于分布式事务的一个理论，可以看我之前写的文章：<a href="http://www.chengling.cloud/post/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.html">玲辰书斋</a>，我们这里模拟了这样的业务场景，大致流程为：</p>
<ul>
<li>每个线程开启事务，插入数据，但不提交，向主线程通知说，我这里已经好了</li>
<li>主线程等待一段时间，看是否所有的子线程都没问题了。如果超时也算是异常</li>
<li>如果没有异常，主线程向所有子线程通知，可以提交事务</li>
<li>如果有异常，主线程向所有子线程通知，进行回滚操作</li>
<li>而中间使用Volatile修饰的hasError对象进行传达，是否出现异常。需要注意如果只是传递普通的boolean对象，可能会发生不一致的情况，我测试时没法通过。</li>
<li>CountDownLatch则保证子线程在主线程没有通知前，是不能提交事务的。</li>
</ul>
<p>​        这里细心的小伙伴就会发现，即便是主线程通知子线程可以提交了，子线程依然有可能出现提交失败的可能，那其他线程提交事务是无法得知这边的失败的消息的。这该怎么办呢？这里我是看的极海老师视频的：<a href="https://www.bilibili.com/video/BV1zM411C7Uf/?spm_id_from=333.999.0.0&vd_source=0a64aa946b64cdeca6c32ae21dc17f40">Bilibili</a>，就是我们其实无法在一个Java进程中保证多线程的原子性。</p>
<blockquote>
</blockquote>
]]></content>
      <categories>
        <category>并发</category>
      </categories>
      <tags>
        <tag>事务</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>opencv环境搭建</title>
    <url>//post/opencv/opencv%20%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8.html</url>
    <content><![CDATA[<h1 id="opencv-入门"><a href="#opencv-入门" class="headerlink" title="opencv 入门"></a>opencv 入门</h1><h2 id="环境下载与搭建"><a href="#环境下载与搭建" class="headerlink" title="环境下载与搭建"></a>环境下载与搭建</h2><h3 id="Windows用户"><a href="#Windows用户" class="headerlink" title="Windows用户"></a>Windows用户</h3><p>直接在官网下载 Windows 文件：<a href="https://opencv.org/releases/">https://opencv.org/releases/</a> 。然后参考这篇文章：<a href="https://blog.csdn.net/qianlixiaomage/article/details/108416400%E3%80%82%E8%AF%B4%E5%AE%9E%E8%AF%9DWindows%E4%B8%8A%E6%93%8D%E4%BD%9C%E5%A4%AA%E6%96%B9%E4%BE%BF%E4%BA%86%E3%80%82%E6%88%91%E7%94%A8Mac%E6%8D%A3%E9%BC%93%E4%BA%86%E5%8D%8A%E5%A4%A9%EF%BC%8C%E6%B0%94%E6%AD%BB%E3%80%82">https://blog.csdn.net/qianlixiaomage/article/details/108416400。说实话Windows上操作太方便了。我用Mac捣鼓了半天，气死。</a></p>
<img src="../../typora-user-images/image-20230220124942228.png" alt="image-20230220124942228" style="zoom:50%;" />

<h3 id="Mac用户"><a href="#Mac用户" class="headerlink" title="Mac用户"></a>Mac用户</h3><p>直接在官网下载 Sources 文件：<a href="https://opencv.org/releases/">https://opencv.org/releases/</a> 。并进行解压。</p>
<p>下载cmake：<code>brew install cmake</code></p>
<p>下载Ant：<a href="https://www.jianshu.com/p/bdca5215e9ca">https://www.jianshu.com/p/bdca5215e9ca</a>  这里是必须的，如果没有，最后无法生成jar包</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> opencv-4.7.0  <span class="token comment"># 这里是opencv源码包解压的文件地址</span>
<span class="token function">mkdir</span> build  
<span class="token builtin class-name">cd</span> build
cmake <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_BUILD_TYPE</span><span class="token operator">=</span>RELEASE <span class="token parameter variable">-D</span> <span class="token assign-left variable">CMAKE_INSTALL_PREFIX</span><span class="token operator">=</span>/usr/local <span class="token punctuation">..</span> <span class="token comment"># 这俩点表示OpenCV的源码位置，不能省略</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>​        如果最后一句报错，就到上一层目录中找有没有：<code>CMakeCache.txt</code> 这是上一次cmake的缓存，删除即可。</p>
<p>​        这一步会耗费很长时间，如果中间耗时过久，在这里卡顿：<code>IPPICV: Download: ippicv_2019_lnx_intel64_general_20180723.tgz</code>,可以参考这篇文章：<a href="https://www.jianshu.com/p/3c2fc0da7398/">https://www.jianshu.com/p/3c2fc0da7398/</a></p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span>
<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<blockquote>
<p>这里应该在build/bin 文件下出现jar包，如果你没有</p>
</blockquote>
<p>​        参考这篇文章：<a href="https://blog.csdn.net/sinat_34163739/article/details/103497452">https://blog.csdn.net/sinat_34163739/article/details/103497452</a> ，检查你的配置是否都正常。</p>
<p>​        现在检查你有没有这个文件：<code>opencv-4.7.0/build/lib/libopencv_java470.dylib</code>，如果都没问题，说明你已经能操作opencv了</p>
<ul>
<li><p>打开一个Java项目</p>
</li>
<li><p>在Project Structure中Libraries中添加opencv的jar包</p>
<p><img src="../../typora-user-images/image-20230220130215311.png" alt="image-20230220130215311"></p>
</li>
<li><p>然后在opencv下添加：opencv-4.7.0/build/lib/libopencv_java470.dylib</p>
</li>
<li><p>验证是否加载成功：<code>System.loadLibrary(NATIVE_LIBRARY_NAME);  </code>如果正常，就说明没问题了。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>opencv</category>
      </categories>
      <tags>
        <tag>opencv</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动装配原理</title>
    <url>//post/Spring/SpringBoot%20%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D%E5%8E%9F%E7%90%86.html</url>
    <content><![CDATA[<h1 id="SpringBoot-自动装配原理"><a href="#SpringBoot-自动装配原理" class="headerlink" title="SpringBoot 自动装配原理"></a>SpringBoot 自动装配原理</h1><h2 id="SpringBootApplication-启动注解"><a href="#SpringBootApplication-启动注解" class="headerlink" title="@SpringBootApplication 启动注解"></a>@SpringBootApplication 启动注解</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringBootBasicLearnApplication</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SpringBootBasicLearnApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


	<span class="token comment">/**
	 * to store the base package from the importing configuration
	 * 也就是获取到我们启动类的包路径
	 */</span>
	<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Registrar</span> <span class="token keyword">implements</span> <span class="token class-name">ImportBeanDefinitionRegistrar</span><span class="token punctuation">,</span> <span class="token class-name">DeterminableImports</span> <span class="token punctuation">&#123;</span>

		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerBeanDefinitions</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token comment">// 这里注入容器，将我们的包路径信息封装成一个Bean</span>
			<span class="token function">register</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PackageImports</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPackageNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">determineImports</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singleton</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PackageImports</span><span class="token punctuation">(</span>metadata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

	<span class="token punctuation">&#125;</span>



<span class="token comment">// BeanClassLoaderAware,ResourceLoaderAware 这些表示可以获取Aware前的信息</span>
<span class="token comment">// Ordered 表示Bean注入排序</span>
<span class="token comment">// 关键是这个： DeferredImportSelector  延迟导入选择器  extends </span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AutoConfigurationImportSelector</span> <span class="token keyword">implements</span> <span class="token class-name">DeferredImportSelector</span><span class="token punctuation">,</span> <span class="token class-name">BeanClassLoaderAware</span><span class="token punctuation">,</span>
		<span class="token class-name">ResourceLoaderAware</span><span class="token punctuation">,</span> <span class="token class-name">BeanFactoryAware</span><span class="token punctuation">,</span> <span class="token class-name">EnvironmentAware</span><span class="token punctuation">,</span> <span class="token class-name">Ordered</span>
      
      
      
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">DeferredImportSelector</span> <span class="token keyword">extends</span> <span class="token class-name">ImportSelector</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 这里是接口的定义方法，具体实现看AutoConfigurationImportSelector</span>
		<span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">DeferredImportSelector</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token annotation punctuation">@Override</span>
		<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">,</span> <span class="token class-name">DeferredImportSelector</span> deferredImportSelector<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">AutoConfigurationEntry</span> autoConfigurationEntry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportSelector</span><span class="token punctuation">)</span> deferredImportSelector<span class="token punctuation">)</span>
           <span class="token comment">// 这里是核心，获取自动配置的实例，通过元数据 ！！！ </span>
					<span class="token punctuation">.</span><span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationEntries<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> importClassName <span class="token operator">:</span> autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token function">putIfAbsent</span><span class="token punctuation">(</span>importClassName<span class="token punctuation">,</span> annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span>


<span class="token keyword">protected</span> <span class="token class-name">AutoConfigurationEntry</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token constant">EMPTY_ENTRY</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
  	<span class="token comment">// 获取EnableAutoConfiguration注解中定义的exclude排除的Bean类</span>
		<span class="token class-name">AnnotationAttributes</span> attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 这里获取候选配置，是关键！！！</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 删除注解声明的不用的类信息</span>
		configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 关键！！！根据过滤规则，过滤不用的类信息</span>
		configurations <span class="token operator">=</span> <span class="token function">getConfigurationClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 触发自动配置导入事件</span>
  	<span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>




<span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span><span class="token class-name">AnnotationMetadata</span> metadata<span class="token punctuation">,</span> <span class="token class-name">AnnotationAttributes</span> attributes<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>
				<span class="token class-name">SpringFactoriesLoader</span><span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 这里是关键，会找原先定义的所有Bean配置！！！</span>
		<span class="token class-name">ImportCandidates</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">AutoConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>configurations<span class="token operator">::</span><span class="token function">add</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> configurations<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>


<span class="token comment">// 获取注解类的全类名集合</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ImportCandidates</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> annotation<span class="token punctuation">,</span> <span class="token class-name">ClassLoader</span> classLoader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// LOCATION: "META-INF/spring/%s.imports"; 通过这个文件来找到所有自动配置类的信息</span>
  <span class="token comment">// annotation.getName() = org.springframework.boot.autoconfigure.AutoConfiguration</span>
  <span class="token comment">// 最终加载：META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</span>
  <span class="token comment">// 这里直接下载源码，找Maven:org.springframework.boot:spring-boot-autoconfigure:2.7.5，一共有144个</span>
  <span class="token comment">// 里面的就是默认启动的一个项,比如：org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration，可以追一下源码</span>
		<span class="token class-name">String</span> location <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">LOCATION</span><span class="token punctuation">,</span> annotation<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token comment">// 这里就读取到了所有的全类名集合</span>
		<span class="token class-name">Enumeration</span><span class="token generics"><span class="token punctuation">&lt;</span>URL<span class="token punctuation">></span></span> urls <span class="token operator">=</span> <span class="token function">findUrlsInClasspath</span><span class="token punctuation">(</span>classLoaderToUse<span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> autoConfigurations <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">while</span> <span class="token punctuation">(</span>urls<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token class-name">URL</span> url <span class="token operator">=</span> urls<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			autoConfigurations<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token function">readAutoConfigurations</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
    <span class="token comment">// 封装被返回</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ImportCandidates</span><span class="token punctuation">(</span>autoConfigurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>




<span class="token comment">// 这里就是过滤一部分不符合的类名</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> configurations<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candidates <span class="token operator">=</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">boolean</span> skipped <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token comment">// 通过过滤器 原来加载配置文件有144个，如果是基础SpringBoot项目，就剩13个了</span>
			<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AutoConfigurationImportFilter</span> filter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>filters<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> match <span class="token operator">=</span> filter<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>candidates<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> match<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
						candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
						skipped <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
					<span class="token punctuation">&#125;</span>
				<span class="token punctuation">&#125;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>skipped<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token keyword">return</span> configurations<span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
  
  
<span class="token comment">// 这里我们以META-INF中Redis自动装配类来演示</span>
<span class="token number">1.</span> 查找 <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span></span>RedisAutoConfiguration</span>
<span class="token number">2.</span> 查看源码
<span class="token annotation punctuation">@AutoConfiguration</span>
<span class="token comment">// 这里就是判断你容器内有没有这个类数据</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">// 加载配置类，也就是我们在resource文件下写的内容，加载进来</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">RedisProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token comment">// 导如 Lettuce  Jedis 这都是我们熟悉的工具</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token class-name">LettuceConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">JedisConnectionConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisAutoConfiguration</span> <span class="token punctuation">&#123;</span>

	<span class="token annotation punctuation">@Bean</span>
  <span class="token comment">// redisTemplate 工具</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"redisTemplate"</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> template<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token annotation punctuation">@Bean</span>
  <span class="token comment">// StringRedisTemplate 工具</span>
	<span class="token annotation punctuation">@ConditionalOnMissingBean</span>
	<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">public</span> <span class="token class-name">StringRedisTemplate</span> <span class="token function">stringRedisTemplate</span><span class="token punctuation">(</span><span class="token class-name">RedisConnectionFactory</span> redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisTemplate</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">// 核心点就是我们需要导入使用组件的核心位，比如我们使用Redis就要导入依赖</span>
org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core
 
<span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>
  <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>boot<span class="token operator">-</span>starter<span class="token operator">-</span>data<span class="token operator">-</span>redis<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>自动装配</tag>
      </tags>
  </entry>
  <entry>
    <title>ABAC权限设计</title>
    <url>//post/%E6%95%B0%E6%8D%AE%E5%BA%93/ABAC%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1.html</url>
    <content><![CDATA[<p>这里我使用ABAC理论来设计：</p>
<h2 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h2><ul>
<li><p>用户属性：</p>
<ul>
<li>```sql<br>CREATE TABLE User<br>(<br>userId int,<br>userName varchar(100),<br>roleId int<br>);<pre class="line-numbers language-none"><code class="language-none">  
- 环境属性
  - &#96;&#96;&#96;sql
    CREATE TABLE Role
    (
    roleId int,
    roleName varchar(100)  # 比如：普通用户，付费用户，积分等级 
    );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>操作属性：</p>
<ul>
<li>```sql<br>CREATE TABLE <code>action</code><br>(<br>actionId int,<br>actionName varchar(100)  # 比如：read读，write评论<br>);<pre class="line-numbers language-none"><code class="language-none">  
  - 试读
  
  - 付费读
  
  - 免费读
  
  - 评论
  
- Resources属性：
  - &#96;&#96;&#96;sql
    CREATE TABLE module  # 我们最终操作的资源，例如查看的文章，数据
    (
    moduleId int,
    moduleName varchar(100),  # 比如：Java基础模块儿，Java高级模块儿 
    moduleTitle varchar(50),  # 模块儿的标题   这里就可以通过Policy来自定义控制展示
    moduleDes varchar(255),   # 模块儿的描述
    moduleContent text        # 模块儿具体的内容
    );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>Policy策略：</p>
<ul>
<li>```sql<br>CREATE TABLE policy # 这里定义我们的权限控制方案<br>(<br>policyId int,<br>policyDetail varchar(255),  # 在下面我们将给出示例<br>policyStatus tinyint        # 策略状态，例如禁用，启用<br>);<pre class="line-numbers language-none"><code class="language-none">  
- Policy 与 Resources 关联表，

  - 其中一个资源可能有多个策略，比如针对资源普通用户一种策略，付费用户一种策略，这取决于我们Policy如何解析，是否加入or的操作
  - 一个策略可能也针对多个资源生效


定义不同的Policy，

- Java模块儿下文章免费读取或评论

&#96;&#96;&#96;json
&#123;
  &quot;effect&quot;:&quot;Allow&quot;, 
  &quot;actions&quot;:[
    &quot;read&quot;,&quot;write&quot;
  ],
  &quot;resources&quot;:[
    &quot;Module:java:article:*&quot;,
  ]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
</li>
<li><p>这里表示 非vip用户，可以读取Java模块儿下文章的标题和描述，其中condition相当于条件，也可以定义多种条件</p>
</li>
</ul>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"effect"</span><span class="token operator">:</span><span class="token string">"Allow"</span><span class="token punctuation">,</span> 
  <span class="token property">"actions"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token string">"read"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"resources"</span><span class="token operator">:</span><span class="token punctuation">[</span>
    <span class="token string">"Module:java:article:title"</span><span class="token punctuation">,</span>
    <span class="token string">"Module:java:article:description"</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"condition"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"isVip:0"</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>通过Policy可以控制，哪些资源可以哪些用户访问，其中普通用户能访问什么，访问多少，具体展示可以在Resources中控制。而Resoures与Policy做关联。</p>
<h2 id="大体流程"><a href="#大体流程" class="headerlink" title="大体流程"></a>大体流程</h2><p>​         用户登录时，后台将用户信息保存到Session中，当用户想要访问某个资源时并进行操作时，后台读取该资源对应的策略，然后通过Session中保存的用户数据与对应的策略进行计算对比，看是否可以授权，如果授权通过，则只能读取到策略规定的访问内容，封装并返回，前端根据信息来展示对应的内容。</p>
<h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><ol>
<li>Policy内容格式进行规范统一</li>
<li>需要写一个解析器，来解析Policy的内容</li>
<li>资源与策略的对应关系与策略本身可以写入Redis中，快速读取和校验</li>
</ol>
<p>​       这里的想法是我查阅ABAC理论的思路，之前并未使用过，不过自己推断的流程应该是行的通的，策略与角色之间分离，如果未来有更多的权限管理，只需要修改或加入新的策略，也更灵活。</p>
]]></content>
      <categories>
        <category>权限设计</category>
      </categories>
      <tags>
        <tag>权限设计</tag>
      </tags>
  </entry>
  <entry>
    <title>注解开发</title>
    <url>//post/Java/%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91.html</url>
    <content><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>在Java基础中我们都学习过简单的注解开发，但并不没有意识到重要性，直到使用了SpringBoot后，我们看到了注解相比原先配置文件的大量定义的简洁与优雅。在测试中我们也常用注解：@Test  ，在方法定义时加上该注解，我们便可以执行这个方法，这到底怎么做的呢？ 本文将回顾注解基础，并衍生到具有应用：</p>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">SOURCE</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Override</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上面的代码大家都很熟悉，当我们子类重新父类的方法时，会带有该注解。而我们在声明一个注解时，</p>
<ul>
<li>首先需要使用 @Interface 来定义，这和我们定义 class，Interface 一样，最终编译时也会生成一个 class 文件</li>
<li>其次需要 @Target 和 @Retention 来定义该注解的作用域，这也被称为元注解，下面我们看看它们常用的范围</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">ElementType</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/** 类, 接口 (包含注解), 枚举
    TYPE,
    /** 字段 */</span>
    <span class="token constant">FIELD</span><span class="token punctuation">,</span>
    <span class="token comment">/** 方法 */</span>
    <span class="token constant">METHOD</span><span class="token punctuation">,</span>
    <span class="token comment">/** 参数 */</span>
    <span class="token constant">PARAMETER</span><span class="token punctuation">,</span>
    <span class="token comment">/** 构造器 */</span>
    <span class="token constant">CONSTRUCTOR</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">RetentionPolicy</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">/**
     * 被编译器丢弃
     */</span>
    <span class="token constant">SOURCE</span><span class="token punctuation">,</span>
    <span class="token comment">/**
     * 在class文件中可用，但被vm丢弃
     */</span>
    <span class="token constant">CLASS</span><span class="token punctuation">,</span>
    <span class="token comment">/**
     * 运行时可用，可通过反射读取
     */</span>
    <span class="token constant">RUNTIME</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<blockquote>
<p>注解的作用是什么？</p>
</blockquote>
<p>可以提供用来完整描述程序所需要的信息，而这些信息无法用Java来表达，或者是不方便表达。</p>
<blockquote>
<p>如何使用呢？</p>
</blockquote>
<p>如果你学过Mybatis这种orm框架，会知道想将数据库字段与Java类相映射，我们需要使用XML文件来做配对，比如：</p>
<pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>userResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>user_age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看着很直观，但有个问题，如果我的User类中的字段名要修改，我还需要再XML文件中再调整。但如果使用注解</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"User"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>
  <span class="token annotation punctuation">@Id</span>
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_id"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_name"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
  
  <span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_age"</span><span class="token punctuation">)</span>
  <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关系更加清晰，且调整更加灵活。所以我们就可以定义以下这几个注解</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Table</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Id</span> <span class="token punctuation">&#123;</span>
<span class="token punctuation">&#125;</span>

<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">FIELD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Column</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="注解处理器"><a href="#注解处理器" class="headerlink" title="注解处理器"></a>注解处理器</h2><p>有了注解后，并标识到类或方法中，如果不进行处理，则不会有任何影响，这里我们需要借助到反射机制，在运行时获取到这些信息，并自动生成对应的SQL。也就是编写注解处理器。</p>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> makeSQL <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
        <span class="token class-name">Table</span> table <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Table</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>table <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"creat table "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">tableName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" &#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Id</span> id <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Id</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"id Bigint, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token class-name">Column</span> column <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Column</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>column <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>column<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" varchar(10) , "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">String</span> sql <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> builder<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        sql <span class="token operator">=</span> sql <span class="token operator">+</span> <span class="token string">"&#125;;"</span><span class="token punctuation">;</span>
        <span class="token comment">// 最终生成： creat table Person &#123;id Bigint, userName varchar(10) , userAge varchar(10)&#125;;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="MyTest-测试注解编写"><a href="#MyTest-测试注解编写" class="headerlink" title="MyTest 测试注解编写"></a>MyTest 测试注解编写</h2><img src="/Users/qinsicheng/Library/Application%20Support/typora-user-images/image-20230312214048834.png" alt="image-20230312214048834" style="zoom:40%;" />

<p>对于上面的测试方法，相信大家都使用过，那为什么我们给方法上加入 <code>@Test</code> 这个方法就能被执行呢？一个类中不是只有 main方法会被执行吗？这里还是使用了反射的知识点，实际上通过反射获取一个类中拥有 <code>@Test</code> 的方法，然后在运行执行目标方法。下面我们用代码说话：</p>
<ul>
<li>这里我们定义MyTest注解： 这里并没有写注解题，因为我们只打算起一个标识的作用</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">MyTest</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li>创建单元测试类：这里我们test1加入了注解，但test2没有加入</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestJunit</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@MyTest</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is test1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is test2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ul>
<li>编写注解处理器：</li>
</ul>
<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTestDemo</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestJunit</span><span class="token punctuation">></span></span> aClass <span class="token operator">=</span> <span class="token class-name">TestJunit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>
      	<span class="token comment">// 通过反射实例化对象</span>
        <span class="token class-name">TestJunit</span> instance <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取该类的所有方法</span>
        <span class="token class-name">Method</span><span class="token punctuation">[</span><span class="token punctuation">]</span> methods <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Method</span> method <span class="token operator">:</span> methods<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token comment">// 找到带有 MyTest注解的 方法</span>
            <span class="token class-name">MyTest</span> myTest <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">MyTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>myTest <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// 执行</span>
                method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最终打印：<code>this is test1</code></p>
<p>​        其实JUnit也是使用类似的方式进行执行，再配合Idea的插件，所以可以直接点击按钮执行该测试方法。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>注解</tag>
      </tags>
  </entry>
</search>
