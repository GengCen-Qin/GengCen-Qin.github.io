{"name":"逃逸分析","slug":"逃逸分析","count":1,"postlist":[{"title":"后端编译与优化","uid":"b541249aeac135d3361cb459457b0ae9","slug":"JVM/后端编译与优化","date":"2022-11-25T05:04:04.000Z","updated":"2022-12-02T07:43:54.368Z","comments":true,"path":"api/articles/JVM/后端编译与优化.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"后端编译与优化编译器优化技术逃逸分析 逃逸分析本身不是直接进行优化的方法，而是一种为优化提供帮助的分析算法 逃逸分析的原理： ​ 我们分析对象的动态作用域，如果对象创建在方法中，可能被外部方法所引用到，例如作为参数被外部方法进行调用，这叫做方法逃逸， ​ 被外部线程所访问到，例如...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"JVM","slug":"JVM","count":4,"path":"api/categories/JVM.json"}],"tags":[{"name":"逃逸分析","slug":"逃逸分析","count":1,"path":"api/tags/逃逸分析.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}