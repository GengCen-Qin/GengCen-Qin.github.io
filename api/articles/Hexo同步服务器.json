{"title":"Hexo d 推送至服务器","uid":"1b45a8bf657516596200d2bea123bb7b","slug":"Hexo同步服务器","date":"2022-11-28T02:57:12.000Z","updated":"2022-11-28T03:45:59.894Z","comments":true,"path":"api/articles/Hexo同步服务器.json","keywords":null,"cover":"/img/default_top_img.jpg","content":"<h1 id=\"Hexo-d-推送至服务器\"><a href=\"#Hexo-d-推送至服务器\" class=\"headerlink\" title=\"Hexo d 推送至服务器\"></a>Hexo d 推送至服务器</h1><p>​    前段时间利用Hexo搭建博客，并配合GitHub page进行页面显示，一切都很美妙，但有一个问题就是访问速度太慢，后面我希望将博客迁移到腾讯云中，之后就从服务器访问了。现在关于Hexo搭建基本博客的帖子已经很详细了，所以我会放一些我参考的链接，主要介绍如何从本地将文件同步到自己的服务器中。</p>\n<h2 id=\"前置知识\"><a href=\"#前置知识\" class=\"headerlink\" title=\"前置知识\"></a>前置知识</h2><h3 id=\"Hexo博客搭建\"><a href=\"#Hexo博客搭建\" class=\"headerlink\" title=\"Hexo博客搭建\"></a>Hexo博客搭建</h3><p>三水同学的笔记：<a href=\"https://sanshui.vip/2022/08/10/indexday1/\">https://sanshui.vip/2022/08/10/indexday1/</a>  （这里操作完，基本上就是博客雏形和Github page的显示）</p>\n<h3 id=\"Butterfly主题\"><a href=\"#Butterfly主题\" class=\"headerlink\" title=\"Butterfly主题\"></a>Butterfly主题</h3><p>有了基本的博客雏形，但样式比较单一，这时候就可以利用现有的Hexo主题，这里只列举了Butterfly，还有些其他主题，可以自行查找。</p>\n<p>推荐教程：<a href=\"https://www.fomal.cc/posts/4aa2d85f.html\">https://www.fomal.cc/posts/4aa2d85f.html</a>  （这里操作完，样子就会好看许多，剩下的就是页面的修改，按照自己的意愿）</p>\n<h3 id=\"页面音乐播放\"><a href=\"#页面音乐播放\" class=\"headerlink\" title=\"页面音乐播放\"></a>页面音乐播放</h3><p>我当时觉得博客加点儿音乐很有感觉，就捣鼓了些。</p>\n<p>推荐教程：<a href=\"https://blog.csdn.net/qq_41467882/article/details/124734598\">https://blog.csdn.net/qq_41467882/article/details/124734598</a></p>\n<h2 id=\"博客同步\"><a href=\"#博客同步\" class=\"headerlink\" title=\"博客同步\"></a>博客同步</h2><p>前面的步骤里，只有Hexo博客搭建是必须的，另外两个都是为了美化，那我们先说如何从本地同步到Github page。</p>\n<ol>\n<li><code>hexo g</code> : 生成静态页面</li>\n<li><code>hexo d</code> : hexo帮你部署，这里需要在_config.yml中配置地址即可，上面的教程有讲</li>\n</ol>\n<p>我之前遇到个问题，以为<code>hexo g</code>只用生成一次即可，后面修改完直接<code>hexo d</code>,实际上需要每次都要执行这两步，因为需要根据你修改的文章，生成新的静态页面，再上传。这里我嫌麻烦在<code>package.json</code>中写了新的选项来一次执行两步：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;scripts&quot;</span>: &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这里以后就可以用 yarn upload 来执行两步</span></span><br><span class=\"line\">  <span class=\"string\">&quot;upload&quot;</span>: <span class=\"string\">&quot;hexo generate &amp;&amp; hexo deploy&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;build&quot;</span>: <span class=\"string\">&quot;hexo generate&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;clean&quot;</span>: <span class=\"string\">&quot;hexo clean&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;deploy&quot;</span>: <span class=\"string\">&quot;hexo deploy&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;server&quot;</span>: <span class=\"string\">&quot;hexo server&quot;</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    说完上面的了，你的博客就已经可以通过本地修改，通过到Github page中，但有些问题：</p>\n<ol>\n<li>同步上去后，Github page显示会有延迟</li>\n<li>普通用户会加载的很慢，影响体验</li>\n</ol>\n<p>​    所以这里我尝试着迁移到自己的服务器中，以后直接通过Nginx访问服务器的静态博客页面，这里就牵扯到了购买服务器和域名（非必要），服务器没必要买很大的，因为只是简单的做博客效果，一般最小的轻量级服务器都可以。域名的话就是访问方便， 除非你乐意给别人发IP地址访问。这里都是比较简单的操作，直接去阿里云，腾讯云或者其他的厂商官网查看。</p>\n<blockquote>\n<p>到这里我假设你已经可以通过IP地址/域名访问到Nginx了。那我们如何进行数据迁移呢？</p>\n</blockquote>\n<p>​    最初我在想有没有插件可以直接通过<code>hexo d</code>直接部署到服务器指定位置中，确实有，但是我一直显示连接异常，后选择其他方式。也就是通过<code>github</code>的<code>WebHooks</code>功能。</p>\n<p>​    大致思路为： <code>hexo d</code> 推送代码到<code>github</code>仓库，当<code>WebHooks</code>监测到有pull事件，将发送一条命令通知服务器，然后服务器触发脚本，拉取最新<code>git</code>代码。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8kokpdj63j30dc0810sy.jpg\" alt=\"image-20221128112850056\"></p>\n<ol>\n<li>下载go  : <code>yum install -y golang </code></li>\n<li>设置代理 : <code>go env -w GOPROXY=[https://goproxy.cn](https://goproxy.cn/),direct</code>  否则用go访问会老超时</li>\n<li>查看go环境，看是否代理修改了 : <code>go env</code></li>\n<li>安装WebHooks : <code>go get github.com/adnanh/webhook</code></li>\n<li>编写shell脚本，主要作用就是拉取<code>git</code>仓库代码，如果你前面已经在服务器自己博客文件目录中<code>git clone</code>，克隆Github文件了，这里之后就可以直接用<code>git pull</code>了</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">cd /home/blog/GMaya   # 这里就是你自己打算存放博客的目录，可以自己定义</span><br><span class=\"line\">git pull</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>编写<code>hooks.json</code>文件，就放在上一个文件下面就行</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;id&quot;</span>: <span class=\"string\">&quot;随便自定义&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;execute-command&quot;</span>: <span class=\"string\">&quot;webhook.sh&quot;</span>, # 这里是你脚本的名字，就是上面的文件</span><br><span class=\"line\">    <span class=\"string\">&quot;command-working-directory&quot;</span>: <span class=\"string\">&quot;/home/hook&quot;</span> # 这里是你脚本存放的地址</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<ol start=\"7\">\n<li>后台启动</li>\n</ol>\n<p><code>nohup /root/go/bin/webhook -hooks /上面定义的地址/hooks.json -verbose &amp;</code></p>\n<ol start=\"8\">\n<li>查看日志</li>\n</ol>\n<p><code>tail -f nohup.out</code></p>\n<p>正常显示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[webhook] 2021/01/30 00:10:53 version 2.8.0 starting</span><br><span class=\"line\">[webhook] 2021/01/30 00:10:53 setting up os signal watcher</span><br><span class=\"line\">[webhook] 2021/01/30 00:10:53 attempting to load hooks from /home/hook/hooks.json</span><br><span class=\"line\">[webhook] 2021/01/30 00:10:53 found 1 hook(s) in file</span><br><span class=\"line\">[webhook] 2021/01/30 00:10:53 \tloaded: gmaya-hooks</span><br><span class=\"line\">[webhook] 2021/01/30 00:10:53 serving hooks on http://0.0.0.0:9000/hooks/&#123;id&#125;</span><br><span class=\"line\">[webhook] 2021/01/30 00:10:53 os signal watcher ready</span><br></pre></td></tr></table></figure>\n\n<p>​    注意：这里可以看到是根据9000端口通信的，所以一方面需要在服务器打开防护墙端口，一方面在你的服务器厂商那里打开防火墙或者什么安全设置。这里我用的腾讯云，直接在轻量服务器里加入9000端口的设置即可。</p>\n<p>​    现在你的服务器就已经监听Github了，但Github还不知道你的服务器。</p>\n<ol start=\"9\">\n<li>github上配置钩子</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8kozlqqbpj317v0jadi2.jpg\" alt=\"image-20221128114311505\"></p>\n<p>填入Payload URL：<code>http://ip:9000/hooks/上面你自己定义的ID，在hooks.json</code></p>\n<p>添加好后，就可以直接从本地同步到Github上，当Github上发生修改，服务器就会被触发执行脚本，拉取最新的代码。</p>\n","text":"Hexo d 推送至服务器​ 前段时间利用Hexo搭建博客，并配合GitHub page进行页面显示，一切都很美妙，但有一个问题就是访问速度太慢，后面我希望将博客迁移到腾讯云中，之后就从服务器访问了。现在关于Hexo搭建基本博客的帖子已经很详细了，所以我会放一些我参考的链接，主要...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"博客搭建","slug":"博客搭建","count":1,"path":"api/tags/博客搭建.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Hexo-d-%E6%8E%A8%E9%80%81%E8%87%B3%E6%9C%8D%E5%8A%A1%E5%99%A8\"><span class=\"toc-text\">Hexo d 推送至服务器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">前置知识</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA\"><span class=\"toc-text\">Hexo博客搭建</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Butterfly%E4%B8%BB%E9%A2%98\"><span class=\"toc-text\">Butterfly主题</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A1%B5%E9%9D%A2%E9%9F%B3%E4%B9%90%E6%92%AD%E6%94%BE\"><span class=\"toc-text\">页面音乐播放</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8D%9A%E5%AE%A2%E5%90%8C%E6%AD%A5\"><span class=\"toc-text\">博客同步</span></a></li></ol></li></ol>","author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"第二章：链表问题","uid":"d03f3e28d8ef9c66091c681cce2f6e52","slug":"数据结构/第二章：链表问题","date":"2022-11-28T05:03:04.000Z","updated":"2022-12-01T02:10:52.726Z","comments":true,"path":"api/articles/数据结构/第二章：链表问题.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"第二章：链表问题打印两个有序链表的公共部分1234567891011121314151617181920/** * 给定两个有序链表的头指针head1和head2,打印两个链表的公共部分 * @param head1 * @param head2 */public static ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":3,"path":"api/categories/数据结构.json"}],"tags":[{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"第一章：栈与队列","uid":"7bfcb6263ec210a85c00c06eddb51ce5","slug":"数据结构/第一章：栈与队列","date":"2022-11-27T05:03:04.000Z","updated":"2022-11-27T10:24:19.773Z","comments":true,"path":"api/articles/数据结构/第一章：栈与队列.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"第一章：栈与队列设计一个有getMin功能的栈 要求：pop，push，getMin的时间复杂度为：O(1) 123456789101112131415161718192021222324252627282930313233public class stackTemplate &...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":3,"path":"api/categories/数据结构.json"}],"tags":[{"name":"栈","slug":"栈","count":1,"path":"api/tags/栈.json"},{"name":"队列","slug":"队列","count":1,"path":"api/tags/队列.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}