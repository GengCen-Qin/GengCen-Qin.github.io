{"title":"第三章：二叉树问题","uid":"ef3a6aac56d074894be545c71d6959e7","slug":"数据结构/第三章：二叉树问题","date":"2022-11-25T05:03:04.000Z","updated":"2022-12-01T02:13:16.426Z","comments":true,"path":"api/articles/数据结构/第三章：二叉树问题.json","keywords":null,"cover":"/img/default_top_img.jpg","content":"<h1 id=\"树形dp套路\"><a href=\"#树形dp套路\" class=\"headerlink\" title=\"树形dp套路\"></a>树形dp套路</h1><p><strong>在做树结构的题目中，如果求解规则可以分为，以某个节点为子树，先向左要数据，再向右要数据，最后返回总数据，我们就可以使用该套路。</strong></p>\n<ol>\n<li><p><strong>递归进行遍历</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">QTraverse2</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;先序&quot;</span>);</span><br><span class=\"line\">        QTraverse2(tree.left);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;中序&quot;</span>);</span><br><span class=\"line\">        QTraverse2(tree.right);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后续&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>非递归进行遍历</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非递归前序遍历  使用栈</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">QTraverse1</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">       Stack&lt;Point&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">       stack.add(tree);</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">           <span class=\"type\">Point</span> <span class=\"variable\">pop</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">           System.out.print(pop.value + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               stack.add(pop.right);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (pop.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               stack.add(pop.left);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//非递归中序遍历</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ZTraverse1</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">       Stack&lt;Point&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">       stack.add(tree);</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">while</span> (tree.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               stack.add(tree.left);</span><br><span class=\"line\">               tree = tree.left;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"type\">Point</span> <span class=\"variable\">pop</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">           System.out.print(pop.value + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               stack.add(pop.right);</span><br><span class=\"line\">               tree = pop.right;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//非递归后序遍历</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">HTraverse1</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">       Stack&lt;Point&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">       Stack&lt;Point&gt; stack1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">       stack.add(tree);</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">           <span class=\"type\">Point</span> <span class=\"variable\">pop</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">           stack1.add(pop);</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (pop.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               stack.add(pop.left);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">               stack.add(pop.right);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">while</span> (!stack1.isEmpty()) &#123;</span><br><span class=\"line\">           System.out.print(stack1.pop().value + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>宽度遍历</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//宽度遍历  也就是将二叉树一行一行的遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">WideTraverse</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//关键就是我们需要知道我们遍历节点的层数  我们可以使用LinkedList(Java提供的队列 先进先出)</span></span><br><span class=\"line\">        LinkedList&lt;Point&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        list.add(tree);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!list.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">Point</span> <span class=\"variable\">pop</span> <span class=\"operator\">=</span> list.pop();</span><br><span class=\"line\">            System.out.print(pop.value + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pop.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                list.add(pop.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                list.add(pop.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>求二叉树的宽度</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//求二叉树的宽度  也就是求出整棵树哪一行的节点最多  使用map和栈（不灵活）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">GetWid</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">        HashMap&lt;Point, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(tree, <span class=\"number\">1</span>);</span><br><span class=\"line\">        Stack&lt;Point&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">        stack.add(tree);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">flor</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">Point</span> <span class=\"variable\">pop</span> <span class=\"operator\">=</span> stack.pop();</span><br><span class=\"line\">            <span class=\"comment\">//从栈中pop出的元素的层数</span></span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> map.get(pop);</span><br><span class=\"line\">            System.out.println(pop.value + <span class=\"string\">&quot; 层数：&quot;</span> + num);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (num &gt; flor) &#123;</span><br><span class=\"line\">                flor = num;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                map.put(pop.right, num + <span class=\"number\">1</span>);</span><br><span class=\"line\">                stack.add(pop.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pop.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                map.put(pop.left, num + <span class=\"number\">1</span>);</span><br><span class=\"line\">                stack.add(pop.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//所有层的元素个数已经统计出  也知道有多少层了</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] ints = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[flor + <span class=\"number\">1</span>];</span><br><span class=\"line\">        Set&lt;Map.Entry&lt;Point, Integer&gt;&gt; entries = map.entrySet();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Map.Entry&lt;Point, Integer&gt; entry : entries) &#123;</span><br><span class=\"line\">            ints[entry.getValue()] = ints[entry.getValue()] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> anInt : ints) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (anInt &gt; max) &#123;</span><br><span class=\"line\">                max = anInt;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大节点数：&quot;</span> + max);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//求二叉树的宽度  使用队列和map</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">GetWidByLinkedList</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">        LinkedList&lt;Point&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        HashMap&lt;Point, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        list.add(tree);</span><br><span class=\"line\">        map.put(tree, <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//当前所在行</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curLevel</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">//所在行节点数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">curNum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//整棵树最多节点</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!list.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"type\">Point</span> <span class=\"variable\">pop</span> <span class=\"operator\">=</span> list.pop();</span><br><span class=\"line\">            <span class=\"type\">Integer</span> <span class=\"variable\">level</span> <span class=\"operator\">=</span> map.get(pop);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (level == curLevel) &#123;</span><br><span class=\"line\">                curNum++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                max = Math.max(max, curNum);</span><br><span class=\"line\">                curNum = <span class=\"number\">1</span>;</span><br><span class=\"line\">                curLevel = level;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pop.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                map.put(pop.left, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">                list.add(pop.left);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                map.put(pop.right, level + <span class=\"number\">1</span>);</span><br><span class=\"line\">                list.add(pop.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最多节点数：&quot;</span> + Math.max(max, curNum));</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>判断是否为搜索二叉树</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断二叉树为搜索二叉树   左子节点的值 &lt;= 当前节点的值 &lt;= 右子节点的值</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">isSearchTree</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//使用中序遍历</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tree.left.value &gt;= tree.value) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;不是搜索二叉树&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            isSearchTree(tree.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tree.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tree.value &lt;= tree.right.value) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;不是搜索二叉树&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            isSearchTree(tree.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;是搜索二叉树&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>判断是否为完整二叉树</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断是否为完全二叉树  也就是要树是完整拥有左右子节点的 ，要么从左至右 填补叶节点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">isCompleteBinaryTree</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//1.只要有右不左子节点 就是说明不是</span></span><br><span class=\"line\">    <span class=\"comment\">//2.满足1条件后，如果遇到只有左子节点的，则同层节点后面必须没有子节点</span></span><br><span class=\"line\">    <span class=\"comment\">//需要宽度遍历  使用队列</span></span><br><span class=\"line\">    LinkedList&lt;Point&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    list.add(tree);</span><br><span class=\"line\">    <span class=\"type\">Point</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Point</span>();</span><br><span class=\"line\">    <span class=\"type\">Point</span> <span class=\"variable\">finPoint</span> <span class=\"operator\">=</span> test;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!list.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Point</span> <span class=\"variable\">pop</span> <span class=\"operator\">=</span> list.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pop == finPoint) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!list.isEmpty()) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;不是完全二叉树&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pop.left == <span class=\"literal\">null</span> &amp;&amp; pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;不是完全二叉树&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pop.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            list.add(pop.left);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (test == finPoint &amp;&amp; pop.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                finPoint = pop.left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pop.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            list.add(pop.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;是完全二叉树&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>套路判断是否为搜索二叉树</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用二叉树套路解决是否为搜索二叉树</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">isSearchTreeByMethod</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//左边为搜索二叉树</span></span><br><span class=\"line\">        <span class=\"comment\">//右边为搜索二叉树</span></span><br><span class=\"line\">        <span class=\"comment\">//左边值&lt;当前值&lt;右边值  所以我们需要知道左右两边的值  使用后序遍历</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">isSearch</span> <span class=\"operator\">=</span> process(tree).isSearch;</span><br><span class=\"line\">        System.out.println(isSearch?<span class=\"string\">&quot;是搜索二叉树&quot;</span>:<span class=\"string\">&quot;不是搜索二叉树&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReturnType</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> min;</span><br><span class=\"line\">        <span class=\"type\">int</span> max;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> isSearch;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">ReturnType</span><span class=\"params\">(<span class=\"type\">int</span> min,<span class=\"type\">int</span> max,<span class=\"type\">boolean</span> isSearch)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.min = min;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.max = max;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.isSearch = isSearch;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReturnType <span class=\"title function_\">process</span><span class=\"params\">(Point head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ReturnType</span> <span class=\"variable\">LeftData</span> <span class=\"operator\">=</span> process(head.left);</span><br><span class=\"line\">        <span class=\"type\">ReturnType</span> <span class=\"variable\">RightData</span> <span class=\"operator\">=</span> process(head.right);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> head.value;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> head.value;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.left!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//当前值  与  左节点的最小值  比较</span></span><br><span class=\"line\">            min = Math.min(min,LeftData.min);</span><br><span class=\"line\">            <span class=\"comment\">//当前值  与  左节点的最大值  比较</span></span><br><span class=\"line\">            max = Math.max(max, LeftData.max);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.right!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//最小值  与  右节点的最小值  比较</span></span><br><span class=\"line\">            min = Math.min(min,RightData.min);</span><br><span class=\"line\">            <span class=\"comment\">//最大值  与  右节点的最大值  比较</span></span><br><span class=\"line\">            max = Math.max(max,RightData.max);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">isSearch</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (LeftData!=<span class=\"literal\">null</span>&amp;&amp;(!LeftData.isSearch||LeftData.max &gt;= head.value)) &#123;</span><br><span class=\"line\">            isSearch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (RightData!=<span class=\"literal\">null</span>&amp;&amp;(!RightData.isSearch||RightData.min&lt;= head.value)) &#123;</span><br><span class=\"line\">            isSearch = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnType</span>(min,max,isSearch);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>套路判断是否为完全二叉树</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用套路解决是否为完全二叉树</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">isCBT</span><span class=\"params\">(Point tree)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ReturnType</span> <span class=\"variable\">process</span> <span class=\"operator\">=</span> process(tree);</span><br><span class=\"line\">        System.out.println(process.isCBT?<span class=\"string\">&quot;是完全二叉树&quot;</span>:<span class=\"string\">&quot;不是完全二叉树&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReturnType</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//节点高度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> high;</span><br><span class=\"line\">        <span class=\"comment\">//节点个数</span></span><br><span class=\"line\">        <span class=\"type\">int</span> Num;</span><br><span class=\"line\">        <span class=\"comment\">//是否为完全二叉树</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> isCBT;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">ReturnType</span><span class=\"params\">(<span class=\"type\">int</span> high, <span class=\"type\">int</span> num, <span class=\"type\">boolean</span> isCBT)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.high = high;</span><br><span class=\"line\">            Num = num;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.isCBT = isCBT;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReturnType <span class=\"title function_\">process</span><span class=\"params\">(Point head)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnType</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ReturnType</span> <span class=\"variable\">leftData</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\">        <span class=\"type\">ReturnType</span> <span class=\"variable\">rightData</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span> ;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">high</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">isCBT</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head.left != <span class=\"literal\">null</span> &amp;&amp; head.right!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            leftData = process(head.left);</span><br><span class=\"line\">            rightData = process(head.right);</span><br><span class=\"line\">            high = leftData.high+<span class=\"number\">1</span>;</span><br><span class=\"line\">            num = leftData.Num+ rightData.Num+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!leftData.isCBT||!rightData.isCBT) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnType</span>(high,num,<span class=\"literal\">false</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//层数  与  节点个数呈  N=2^L - 1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((<span class=\"number\">2</span>^high-<span class=\"number\">1</span>)==num) &#123;</span><br><span class=\"line\">                isCBT = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnType</span>(high, num, isCBT);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>套路寻找两个节点的交汇处，也就是给出一个树，给两个点，寻找点的共同交汇处</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//寻找两个节点的交会点</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Point <span class=\"title function_\">FindCommon</span> <span class=\"params\">(Point head,Point node1,Point node2)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>||head == node1||head == node2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">Point</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> FindCommon(head.left, node1, node2);</span><br><span class=\"line\">    <span class=\"type\">Point</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> FindCommon(head.right, node1, node2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left!=<span class=\"literal\">null</span>&amp;&amp;right!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> left==<span class=\"literal\">null</span>?right:left;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>二叉树节点间的最大距离（从树上某个点到另一个点最大距离，一个点到相邻一个点的距离为1）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//二叉树节点间最大距离</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReturnTypeByMaxLen <span class=\"title function_\">maxLength</span><span class=\"params\">(Point hear)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hear == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnTypeByMaxLen</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ReturnTypeByMaxLen</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> maxLength(hear.left);</span><br><span class=\"line\">        <span class=\"type\">ReturnTypeByMaxLen</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> maxLength(hear.right);</span><br><span class=\"line\">        <span class=\"comment\">//当前节点不参与  左节点最大距离  与  右节点最大距离比较</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxDistance</span> <span class=\"operator\">=</span> Math.max(left.maxConnect, right.maxConnect);</span><br><span class=\"line\">        <span class=\"comment\">//最大距离值与当前节点参与时  进行比较</span></span><br><span class=\"line\">        maxDistance = Math.max(maxDistance, left.maxDeepLen+<span class=\"number\">1</span>+ right.maxDeepLen);</span><br><span class=\"line\">        <span class=\"comment\">//向上一层  深度+1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnTypeByMaxLen</span>(Math.max(left.maxDeepLen, right.maxDeepLen)+<span class=\"number\">1</span>,maxDistance);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReturnTypeByMaxLen</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//最大深度</span></span><br><span class=\"line\">        <span class=\"type\">int</span> maxDeepLen;</span><br><span class=\"line\">        <span class=\"comment\">//节点最大距离</span></span><br><span class=\"line\">        <span class=\"type\">int</span> maxConnect;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">ReturnTypeByMaxLen</span><span class=\"params\">(<span class=\"type\">int</span> maxDeepLen, <span class=\"type\">int</span> maxConnect)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.maxDeepLen = maxDeepLen;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.maxConnect = maxConnect;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>派顿最大快乐值（多叉树）</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//派顿最大快乐值（多叉树）</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ReturnTypeByMaxHappy <span class=\"title function_\">MaxHappy</span><span class=\"params\">(Employee employee)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (employee.subordinates.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnTypeByMaxHappy</span>(employee.happy, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果当前节点来 返回值</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">lai</span> <span class=\"operator\">=</span> employee.happy;</span><br><span class=\"line\">        <span class=\"comment\">//不来</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bu</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Employee subordinate : employee.subordinates) &#123;</span><br><span class=\"line\">            <span class=\"type\">ReturnTypeByMaxHappy</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> MaxHappy(subordinate);</span><br><span class=\"line\">            <span class=\"comment\">//如果我来  底下人不能来</span></span><br><span class=\"line\">            lai += ret.buMaxHappy;</span><br><span class=\"line\">            <span class=\"comment\">//如果我不来  底下人可以来可以不来  取最大值</span></span><br><span class=\"line\">            bu += Math.max(ret.laiMaxHappy, ret.buMaxHappy);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReturnTypeByMaxHappy</span>(lai,bu);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ReturnTypeByMaxHappy</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> laiMaxHappy;</span><br><span class=\"line\">        <span class=\"type\">int</span> buMaxHappy;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">ReturnTypeByMaxHappy</span><span class=\"params\">(<span class=\"type\">int</span> laiMaxHappy, <span class=\"type\">int</span> buMaxHappy)</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.laiMaxHappy = laiMaxHappy;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.buMaxHappy = buMaxHappy;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> happy;  <span class=\"comment\">//该员工的快乐值</span></span><br><span class=\"line\">    List&lt;Employee&gt; subordinates;  <span class=\"comment\">//直接下级</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(<span class=\"type\">int</span> happy, List&lt;Employee&gt; subordinates)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.happy = happy;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.subordinates = subordinates;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"lhcRd\"></a></p>\n<h1 id=\"树结构Morris遍历\"><a href=\"#树结构Morris遍历\" class=\"headerlink\" title=\"树结构Morris遍历\"></a>树结构Morris遍历</h1><p><a name=\"TbFyW\"></a></p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h2></li>\n</ol>\n<p><strong>我们能不能做到遍历整棵树，时间复杂度为o(n)，空间复杂度为o(1),利用原树种大量空闲指针</strong><br /><strong>很多关于树结构的题，以morris为基础求出最优解。（笔试还是用正常的遍历就好，错误率低）</strong><br /><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8hd7yc2vwj30st0iitbo.jpg\" alt=\"image-20221125143908385\"></p>\n<ol>\n<li><p><strong>利用morris进行遍历树结构</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Morris先序遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Morris_F</span><span class=\"params\">(tree node)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">tree</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        <span class=\"type\">tree</span> <span class=\"variable\">mostRight</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur !=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                mostRight = cur.left;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (mostRight.right!=<span class=\"literal\">null</span>&amp;&amp;mostRight.right!=cur) &#123;</span><br><span class=\"line\">                    mostRight = mostRight.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mostRight.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    mostRight.right = cur;</span><br><span class=\"line\">                    cur = cur.left;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//这里说明是遍历到cur第一次</span></span><br><span class=\"line\">                    System.out.println(cur.value);</span><br><span class=\"line\">                    mostRight.right = node;</span><br><span class=\"line\">                    cur = cur.right;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//这里说明是最底层节点  没有左节点 在右转前输出一次</span></span><br><span class=\"line\">                System.out.println(cur.value);</span><br><span class=\"line\">                cur = cur.right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//Morris中序遍历</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">Morris_M</span><span class=\"params\">(tree node)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">tree</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">        <span class=\"type\">tree</span> <span class=\"variable\">mostRight</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (cur != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (cur.left!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                 mostRight = cur.left;</span><br><span class=\"line\">                 <span class=\"keyword\">while</span> (mostRight.right!=<span class=\"literal\">null</span>&amp;&amp;mostRight.right!=cur) &#123;</span><br><span class=\"line\">                     mostRight = mostRight.right;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">                 <span class=\"keyword\">if</span> (mostRight.right == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                     mostRight.right = cur;</span><br><span class=\"line\">                     cur = cur.left;</span><br><span class=\"line\">                     <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                 &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                     mostRight.right = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                 &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(cur.value);</span><br><span class=\"line\">            cur = cur.right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p><a name=\"zwEgb\"></a></p>\n<h1 id=\"dp套路与Morris套路什么时候使用\"><a href=\"#dp套路与Morris套路什么时候使用\" class=\"headerlink\" title=\"dp套路与Morris套路什么时候使用\"></a>dp套路与Morris套路什么时候使用</h1></li>\n<li><p><strong>当我们的方法必须做第三次信息的强整合，也就是说我最后的决策必须依赖于左右两边的信息，我们使用dp套路，因为Morris每个点只返回两次。</strong></p>\n</li>\n<li><p><strong>如果不需要则就可以使用Morris。</strong></p>\n</li>\n</ol>\n","text":"树形dp套路在做树结构的题目中，如果求解规则可以分为，以某个节点为子树，先向左要数据，再向右要数据，最后返回总数据，我们就可以使用该套路。 递归进行遍历 1234567891011public static void QTraverse2(Point tree) &#123; i...","link":"","photos":[],"count_time":{"symbolsCount":"15k","symbolsTime":"14 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":3,"path":"api/categories/数据结构.json"}],"tags":[{"name":"二叉树","slug":"二叉树","count":1,"path":"api/tags/二叉树.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%91%E5%BD%A2dp%E5%A5%97%E8%B7%AF\"><span class=\"toc-text\">树形dp套路</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%91%E7%BB%93%E6%9E%84Morris%E9%81%8D%E5%8E%86\"><span class=\"toc-text\">树结构Morris遍历</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\"><span class=\"toc-text\"></span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#dp%E5%A5%97%E8%B7%AF%E4%B8%8EMorris%E5%A5%97%E8%B7%AF%E4%BB%80%E4%B9%88%E6%97%B6%E5%80%99%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">dp套路与Morris套路什么时候使用</span></a></li></ol>","author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Mysql的事务与索引","uid":"99be73816d71c90e1cc1cbf82e76416f","slug":"数据库/Mysql的事务与索引","date":"2022-11-25T05:03:04.000Z","updated":"2022-11-25T07:26:26.008Z","comments":true,"path":"api/articles/数据库/Mysql的事务与索引.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"Mysql事务与索引 ​ 需求：先从数据库中读取摸一个字段的值，然后在该字段上的基础上进行修改，由于操作不是原子性，无法保证线程安全，也就是当A线程读取到1时，想+1，赋值为2。而B线程已经将数据修改为2了，那么A线程应该是在2的基础上+1，赋值为3。但实际中可能该值都到8了，A...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"数据库","slug":"数据库","count":2,"path":"api/categories/数据库.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":1,"path":"api/tags/Mysql.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Shell脚本","uid":"4c7aeff5501d897794d9e23b1c1097ec","slug":"Linux/shell脚本","date":"2022-11-25T03:03:04.000Z","updated":"2022-12-02T07:43:54.386Z","comments":true,"path":"api/articles/Linux/shell脚本.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"Shell输入输出重定向 我们在后台挂在jar包时，常使用过一个命令：nohup java -jar xxx.jar &gt; java.log 2&gt;&amp;1 &amp; 这里就有几个知识点： 末尾的 &amp; 代表后台默认启动，页面关闭后，程序终止。 头部的 noh...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Linux","slug":"Linux","count":1,"path":"api/categories/Linux.json"}],"tags":[{"name":"Shell","slug":"Shell","count":1,"path":"api/tags/Shell.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}