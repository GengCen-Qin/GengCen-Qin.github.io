{"title":"第二章：链表问题","uid":"d03f3e28d8ef9c66091c681cce2f6e52","slug":"数据结构/第二章：链表问题","date":"2022-11-28T05:03:04.000Z","updated":"2022-12-01T02:10:52.726Z","comments":true,"path":"api/articles/数据结构/第二章：链表问题.json","keywords":null,"cover":"/img/default_top_img.jpg","content":"<h1 id=\"第二章：链表问题\"><a href=\"#第二章：链表问题\" class=\"headerlink\" title=\"第二章：链表问题\"></a>第二章：链表问题</h1><h2 id=\"打印两个有序链表的公共部分\"><a href=\"#打印两个有序链表的公共部分\" class=\"headerlink\" title=\"打印两个有序链表的公共部分\"></a>打印两个有序链表的公共部分</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 给定两个有序链表的头指针head1和head2,打印两个链表的公共部分</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> head1</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> head2</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printCommonPart</span><span class=\"params\">(Node head1,Node head2)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有序 则说明，我们可以用双指针思想，找到相同的点</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head1 != <span class=\"literal\">null</span> &amp;&amp; head2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (head1.value &gt; head2.value) &#123;</span><br><span class=\"line\">            head1 = head1.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (head1.value &lt; head2.value) &#123;</span><br><span class=\"line\">            head2 = head2.next;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果相等，说明到达了公共节点</span></span><br><span class=\"line\">            System.out.println(head1.value);</span><br><span class=\"line\">            head1 = head1.next;</span><br><span class=\"line\">            head2 = head2.next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在单链表和双链表中删除倒数第K个节点\"><a href=\"#在单链表和双链表中删除倒数第K个节点\" class=\"headerlink\" title=\"在单链表和双链表中删除倒数第K个节点\"></a>在单链表和双链表中删除倒数第K个节点</h2><blockquote>\n<p>单链表</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 单链表删除倒数第k个节点</span></span><br><span class=\"line\"><span class=\"comment\"> * 假如链表长度为N，则删除倒数第K个点，就需要找到倒数K点的前一个点，也就是N-K位置</span></span><br><span class=\"line\"><span class=\"comment\"> * 我们每遍历一个点，k-1</span></span><br><span class=\"line\"><span class=\"comment\"> * 这里需要想一下，比如：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1-&gt;2-&gt;3 k=4 : 3 2 1 ,发现最终k&gt;0 说明倒数第K个点，已经超出范围了</span></span><br><span class=\"line\"><span class=\"comment\"> * 1-&gt;2-&gt;3 k=3 : 2 1 0 ,发现k=0, 说明删除的就是头结点，返回头结点下一个</span></span><br><span class=\"line\"><span class=\"comment\"> * 1-&gt;2-&gt;3 k=2 : 1 0 -1,k&lt;0, 说明删除的点在中间 这时候我们从头遍历，K+1，则第一遍遍历为K-N,则第二遍当K=0时，则就是遍历到N-K的位置</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> head</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> lastKth</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">removeLastKthNode</span><span class=\"params\">(Node head,<span class=\"type\">int</span> lastKth)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span> || lastKth &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;输入参数有误&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这里用一个指针遍历，因为第二遍我们还需要找到头结点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        lastKth--;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastKth &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;删除结点超出范围&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lastKth == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这里就剩下 K &lt; 0 情况</span></span><br><span class=\"line\">    cur = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lastKth != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        lastKth++;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cur.next = cur.next == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : cur.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>双链表</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 双链表结构与单链表就是多了个前指针，我们在删除时需要注意</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> head</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> lastKth</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">removeLastKthNode</span><span class=\"params\">(Node head, <span class=\"type\">int</span> lastKth)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span> || lastKth &lt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;参数异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">cur</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cur != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        lastKth--;</span><br><span class=\"line\">        cur = cur.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastKth == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        head.before = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lastKth &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cur = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lastKth != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cur = cur.next;</span><br><span class=\"line\">            lastKth++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 当前就找到了要删除的点</span></span><br><span class=\"line\">        cur.next = cur.next.next;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> cur.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (tmp != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            tmp.before = cur;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除链表的中间节点\"><a href=\"#删除链表的中间节点\" class=\"headerlink\" title=\"删除链表的中间节点\"></a>删除链表的中间节点</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 删除中间节点：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1-&gt;2 删除 1</span></span><br><span class=\"line\"><span class=\"comment\"> * 1-&gt;2-&gt;3 删除 2</span></span><br><span class=\"line\"><span class=\"comment\"> * 问题的关键就是要找到中间这个点，通过前一个点进行删除</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> head</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">removeMidNode</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 利用快慢指针，快指针一次走两步，慢指针一次走一步</span></span><br><span class=\"line\">  \t<span class=\"comment\">// 这里快指针先走一步，则最终slow的下一个点就是中间点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">fast</span> <span class=\"operator\">=</span> head.next.next;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">slow</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast.next != <span class=\"literal\">null</span> &amp;&amp; fast.next.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        slow = slow.next;</span><br><span class=\"line\">        fast = fast.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow.next = slow.next.next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反转单向和双向链表\"><a href=\"#反转单向和双向链表\" class=\"headerlink\" title=\"反转单向和双向链表\"></a>反转单向和双向链表</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 反转单向链表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> head</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">reverseList</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        next = head;</span><br><span class=\"line\">        head = head.next;</span><br><span class=\"line\">        next.next = pre;</span><br><span class=\"line\">        pre = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 反转双向链表</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> head</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">reverseList</span><span class=\"params\">(Node head)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">pre</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        next = head.next;</span><br><span class=\"line\">        head.next = pre;</span><br><span class=\"line\">        head.before = next;</span><br><span class=\"line\">        pre = head;</span><br><span class=\"line\">        head = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反转部分单向链表\"><a href=\"#反转部分单向链表\" class=\"headerlink\" title=\"反转部分单向链表\"></a>反转部分单向链表</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 反转部分链表</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Node <span class=\"title function_\">reverseFromToNode</span><span class=\"params\">(Node head, <span class=\"type\">int</span> from, <span class=\"type\">int</span> to)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 统计链表长度</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node1</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"comment\">// 记录from 和 to的前后节点</span></span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">fPre</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">tPos</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node1 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        len++;</span><br><span class=\"line\">        <span class=\"comment\">// 确定from前一个节点</span></span><br><span class=\"line\">        fPre = len == from - <span class=\"number\">1</span> ? node1 : fPre;</span><br><span class=\"line\">        <span class=\"comment\">// 确定to后一个节点</span></span><br><span class=\"line\">        tPos = len == to + <span class=\"number\">1</span> ? node1 : tPos;</span><br><span class=\"line\">        node1 = node1.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (from &gt; to || from &lt; <span class=\"number\">1</span> || to &gt; len) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 判断from是不是在头结点，确定需要反转的头结点</span></span><br><span class=\"line\">    node1 = fPre == <span class=\"literal\">null</span> ? head : fPre.next;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">node2</span> <span class=\"operator\">=</span> node1.next;</span><br><span class=\"line\">    node1.next = tPos;</span><br><span class=\"line\">    <span class=\"type\">Node</span> <span class=\"variable\">next</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 反转</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node2 != tPos) &#123;</span><br><span class=\"line\">        next = node2.next;</span><br><span class=\"line\">        node2.next = node1;</span><br><span class=\"line\">        node1 = node2;</span><br><span class=\"line\">        node2 = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fPre != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// node1 现在就反转前的to节点</span></span><br><span class=\"line\">        fPre.next = node1;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","text":"第二章：链表问题打印两个有序链表的公共部分1234567891011121314151617181920/** * 给定两个有序链表的头指针head1和head2,打印两个链表的公共部分 * @param head1 * @param head2 */public static ...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"数据结构","slug":"数据结构","count":3,"path":"api/categories/数据结构.json"}],"tags":[{"name":"链表","slug":"链表","count":1,"path":"api/tags/链表.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%9A%E9%93%BE%E8%A1%A8%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">第二章：链表问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%89%93%E5%8D%B0%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E7%9A%84%E5%85%AC%E5%85%B1%E9%83%A8%E5%88%86\"><span class=\"toc-text\">打印两个有序链表的公共部分</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%8D%95%E9%93%BE%E8%A1%A8%E5%92%8C%E5%8F%8C%E9%93%BE%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E5%80%92%E6%95%B0%E7%AC%ACK%E4%B8%AA%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">在单链表和双链表中删除倒数第K个节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">删除链表的中间节点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E8%BD%AC%E5%8D%95%E5%90%91%E5%92%8C%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">反转单向和双向链表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8F%8D%E8%BD%AC%E9%83%A8%E5%88%86%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8\"><span class=\"toc-text\">反转部分单向链表</span></a></li></ol></li></ol>","author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"从 JDBC 到 ORM（例：Mybatis）的演化过程","uid":"bf110c25b189686e7bf0f2a9ddd106cd","slug":"数据库/从 JDBC 到 ORM（例：Mybatis）的演化过程","date":"2022-11-29T11:03:04.000Z","updated":"2022-11-29T11:45:34.570Z","comments":true,"path":"api/articles/数据库/从 JDBC 到 ORM（例：Mybatis）的演化过程.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"从 JDBC 到 ORM（例：Mybatis）的演化过程​ 下面我将介绍Java操作Mysql数据的方式的演化过程，从最基本的JDBC到ORM框架的实现，每一次演化都是为了解决现有存在的问题。 JDBC这里需要加入Mysql驱动包或者依赖. 12345&lt;dependency...","link":"","photos":[],"count_time":{"symbolsCount":"20k","symbolsTime":"18 mins."},"categories":[{"name":"数据库","slug":"数据库","count":2,"path":"api/categories/数据库.json"}],"tags":[{"name":"jdbc","slug":"jdbc","count":1,"path":"api/tags/jdbc.json"},{"name":"orm","slug":"orm","count":1,"path":"api/tags/orm.json"},{"name":"mysql","slug":"mysql","count":1,"path":"api/tags/mysql.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Hexo d 推送至服务器","uid":"1b45a8bf657516596200d2bea123bb7b","slug":"Hexo同步服务器","date":"2022-11-28T02:57:12.000Z","updated":"2022-11-28T03:45:59.894Z","comments":true,"path":"api/articles/Hexo同步服务器.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"Hexo d 推送至服务器​ 前段时间利用Hexo搭建博客，并配合GitHub page进行页面显示，一切都很美妙，但有一个问题就是访问速度太慢，后面我希望将博客迁移到腾讯云中，之后就从服务器访问了。现在关于Hexo搭建基本博客的帖子已经很详细了，所以我会放一些我参考的链接，主要...","link":"","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"博客搭建","slug":"博客搭建","count":1,"path":"api/tags/博客搭建.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}