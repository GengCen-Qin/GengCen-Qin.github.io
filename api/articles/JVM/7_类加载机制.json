{"title":"类加载机制","uid":"7749a2b5879f92c33b3cacbb2a610b9b","slug":"JVM/7_类加载机制","date":"2022-11-25T05:04:04.000Z","updated":"2022-12-02T07:43:54.390Z","comments":true,"path":"api/articles/JVM/7_类加载机制.json","keywords":null,"cover":"/img/default_top_img.jpg","content":"<h1 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h1><blockquote>\n<p>虚拟机是如何加载Class文件的？</p>\n<p>Class文件进入虚拟机后会有什么变化？</p>\n</blockquote>\n<p>​        在Java中我们知道有编译期和运行期，其中编译期为我们写的java代码通过javac编译成一个一个的class文件，而运行期则为将class文件通过jvm加载到内存中，通过一些列操作变成可以jvm直接使用的Java类型。这为Java带来了极高的扩展性和灵活性，例如动态链接和到动态加载，具体下来可用面向接口编程和一系列设计模式进行举例。</p>\n<h2 id=\"类的加载时机\"><a href=\"#类的加载时机\" class=\"headerlink\" title=\"类的加载时机\"></a>类的加载时机</h2><p>​        一个类型从加载到jvm内存中开始，到卸载出内存为止，整个生命周期经历了：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8heg77pblj30vo0fydhc.jpg\" alt=\"image-20220611192459719\"></p>\n<p>​        其中加载，验证，准备，初始化是按部就班的开始的，解析则不一定，一些情况中解析是在初始化后的，而这也是为了支持java的运行时绑定特性。</p>\n<p>​        一般类的加载在《java虚拟机规范》中并没有强制要求，根据具体的虚拟机实现完成，而类的初始化则严格按照规定，有且只有六中情况，必须对类进行初始化，而前面的步骤自然也要提前完成。</p>\n<ol>\n<li>遇到new,getstatic,putstatic,invokestatic 这四条字节码指令时，如果当前系统中还没加载这个类，则必须对其进行初始化。其中具体场景有：<ol>\n<li>通过new关键字创建实例时，对类进行初始化：<code>new Object()</code>。</li>\n<li>读取或设置一个类型的静态字段（static final 不算，因为在编译期间就把结果放在了常量池中，读取数据时，不需要初始化该类）：<code>read(object.Field)</code></li>\n<li>调用一个类的静态方法。<code>object.Field()</code></li>\n</ol>\n</li>\n<li>使用reflect包进行反射时，对类进行初始化。<code>Class.forName(class_reference_name)</code></li>\n<li>在该类初始化时发现其父类还没有初始化，则先将其父类进行初始化，再初始化当前类</li>\n<li>当虚拟机启动时，用户需要执行一个主类（<code>执行main()方法的类</code>），虚拟机会先初始化这个类</li>\n<li>jdk7新加入的动态语言支持时，如果有一个java.long.invoke.MethodHandle实例最后解析为REF_getStatus,REF_putStatus,REF_invokeStatic,REF_newInvokeSpecial四种类型的方法句柄，当这个方法句柄的类没有初始化时，则需要先初始化。</li>\n<li>当一个接口中定义了JDK8新加入的默认方法，(被default关键字修饰的接口方法)时，该类的实现类发生初始化时，需要先对其接口初始化</li>\n</ol>\n<p>​        这6方法为有且仅有的使触发类型进行初始化的场景，也被称为主动引用，其他引用方式的类型都不会触发初始化了，也被称为被动引用。下面举几个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;this is SuperClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;this is SubClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NotInitialization</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        通过-XX:+TraceClassLoading可以查看类的加载情况</span></span><br><span class=\"line\"><span class=\"comment\">        可以发现三个类的被加载了，但是SubClass类并没有初始化，也就是其中的static静态代码块并没执行</span></span><br><span class=\"line\"><span class=\"comment\">        而这里我们通过子类去调用父类的静态变量，则只是初始化父类信息</span></span><br><span class=\"line\"><span class=\"comment\">        </span></span><br><span class=\"line\"><span class=\"comment\">        运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">        this is SuperClass</span></span><br><span class=\"line\"><span class=\"comment\">        10</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        System.out.println(SubClass.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NotInitialization</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里我们可以发现，在创建类型数组时，也只是对该类型进行加载，而没有初始化</span></span><br><span class=\"line\">        SuperClass[] list = <span class=\"keyword\">new</span> <span class=\"title class_\">SuperClass</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">NotInitialization</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 我们可发现这里也没有打印静态代码块内容i，连ConstClass类都没有加载</span></span><br><span class=\"line\"><span class=\"comment\">         * 这是因为ConstClass.i 在编译期间通过常量的传播优化，已经将该值传入到</span></span><br><span class=\"line\"><span class=\"comment\">         * NotInitialization类的常量池中，这时候对ConstClass.i的引用就变成了对自身常量池的引用</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        System.out.println(ConstClass.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ConstClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;this is ConstClass&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span>  <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>​        而接口的加载与类的加载有一些不同，接口也有初始化的过程，与类一致，但是没有static静态代码块，编译器仍会为接口生成“<clinit>”类构造器，用来初始化接口中定义的成员变量，而接口与类的真正区别在于，类的初始化之前会将父类都进行初始化，而接口在初始化时，并不要求父接口都完成初始化，只有在真正使用父接口时（如引用接口中的常量）才会初始化。</p>\n<h2 id=\"类加载的过程\"><a href=\"#类加载的过程\" class=\"headerlink\" title=\"类加载的过程\"></a>类加载的过程</h2><h3 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h3><p>​        在加载阶段，java虚拟机需要完成以下三件事</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个字节流代表的静态存储结构转化为方法区的运行时数据结构</li>\n<li>在内存中生成一个代表这个类的java.long.Class对象，作为方法区这个类的各种数据的访问入口</li>\n</ol>\n<blockquote>\n<p>《java虚拟机规范》对这三点要求并不是很具体，供开发人员操作的空间很大</p>\n</blockquote>\n<blockquote>\n<p>就比如说获取二进制字节流的方式就有很多</p>\n<ol>\n<li>从ZIP压缩包获取，常见的JAR包，WAR包</li>\n<li>从网络中获取，常见的有Web Applet</li>\n<li>运行时计算生成，动态代理技术</li>\n<li>从其他文件生成，JSP文件生成对应的Class文件</li>\n<li>。。。</li>\n</ol>\n</blockquote>\n<p>​        相对于类加载过程的其他阶段，非数组类型的加载阶段（准确来说是加载阶段中获取类的二进制字节流的动作）是开发者可控性最高的阶段，加载阶段既可以使用java虚拟机内置的启动类加载器来完成。也可以由用户定义的类加载器完成。</p>\n<p>​        对于数组类而言，情况也有所不同，数组类本身不通过类加载器创建，是由Java虚拟机在内存中动态构造出来的，但数组类与类加载仍有很大关系，因为里面的元素还是要靠类加载器完成加载。一个数组类在创建中遵守以下几个规则。</p>\n<ol>\n<li>如果数组类的元素为引用型数据，就递归采用原先定义好的类加载过程去加载组件，数组类将被标记在加载该组件类型的类加载器的类名称空间上。（！！！一个类型必须与类加载器一起确定唯一性）</li>\n<li>如果数组类元素不是引用型（例如<code>int[]</code>）Java虚拟机将会把数组类标记为与启动类加载器关联。</li>\n<li>数组类的可访问性与他的组件类型的可访问性一致，如果组件类型不是引用类型，他的数组类的可访问性将默认为public，可被所有的类和接口访问到。</li>\n</ol>\n<p>​        加载阶段结束后，Java虚拟机外部的二进字节流就按照虚拟机所设定的格式存储在<code>方法区</code>之中，类型数据妥善安置在方法区之后，会在Java<code>堆内存</code>中实例化一个<code>java.lang.Class</code>类的对象，这个对象将作为程序访问方法区中类型数据的<code>外部接口</code></p>\n<p>​        加载阶段与连接阶段的部分动作是交叉进行的，加载阶段尚未完成，连接阶段可能就已经开始。</p>\n<h4 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h4><p>​        对于任何一个类，<strong>都需要它的类加载器与类本身共同确定在虚拟机中的唯一性</strong>，每个类加载器都有自己的名称空间，通俗来说判断两个类是否相等，前提条件就是是否是同一个类加载器加载的，换句话说：即使是同一个Class文件源，通过不同的类加载器，两个类也就势必不同。</p>\n<blockquote>\n<p>代码测试</p>\n<p>这个案例中我们可以看到我们自己定义了一个类记载器，然后来加载当前这个类，并输出实例对象，都没有问题，但最后使用instance时做类型判定时发现输出为false。</p>\n<p>这是因为我们在类的初始化中所述，当java含有main方法的启动类执行时，会默认进行类的初始化，这个时候它是由系统默认的类加载器，而当我们在main方法中创建了一个类加载器时并加载该类，在虚拟机中创建的完全就是不同的类了。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> org.fenixsoft.classloading;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassLoaderTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//org.fenixsoft.classloading.ClassLoaderTest@47089e5f</span></span><br><span class=\"line\">    <span class=\"comment\">//false</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException &#123;</span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">myloader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassLoader</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Class&lt;?&gt; loadClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">String</span> <span class=\"variable\">fileName</span> <span class=\"operator\">=</span> name.substring(name.lastIndexOf(<span class=\"string\">&quot;.&quot;</span>) + <span class=\"number\">1</span>) + <span class=\"string\">&quot;.class&quot;</span>;</span><br><span class=\"line\">                    <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span> getClass().getResourceAsStream(fileName);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (inputStream == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.loadClass(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"type\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[inputStream.available()];</span><br><span class=\"line\">                    inputStream.read(b);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> defineClass(name, b, <span class=\"number\">0</span>, b.length);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ClassNotFoundException</span>(name);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> myloader.loadClass(<span class=\"string\">&quot;org.fenixsoft.classloading.ClassLoaderTest&quot;</span>).newInstance();</span><br><span class=\"line\">        System.out.println(instance);</span><br><span class=\"line\">        System.out.println(instance <span class=\"keyword\">instanceof</span> org.fenixsoft.classloading.ClassLoaderTest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h5><p>​        从java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（Bootstrap ClassLoader），该加载器是用C++实现的(这里仅限HotSpot)，是虚拟机的一部分，另外一种是其他所有的类加载器，又java实现，独立于虚拟机外部，并全部继承抽象类<code>java.lang.ClassLoader</code></p>\n<p>​        从JDK1.2以来，Java一直保持着三层类加载器，双亲委派的类加载架构，尽管该架构，在java模块化系统出现了一些调整，但未改变主体架构。</p>\n<blockquote>\n<p> 下面我们来介绍什么是三层类加载器，什么是双亲委派。</p>\n</blockquote>\n<ol>\n<li>启动类加载器（BootStrap Class Loader）<ol>\n<li>只加载<code>&lt;JAVA_HOME&gt;/bin</code>目录下的文件</li>\n<li>被-Xbootclasspath参数指定的路径下文件</li>\n<li>按照文件名（rt.jar,tools.jar）可被识别的类库</li>\n<li>启动类加载器无法被java程序直接调用，当自定义类加载器时，需要交给启动类加载器，使用null代替即可。</li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>通过<code>java.lang.Class.getClassLoader()方法作为示例</code></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Returns the class loader for the class.  Some implementations may use</span></span><br><span class=\"line\"><span class=\"comment\">    * null to represent the bootstrap class loader. This method will return</span></span><br><span class=\"line\"><span class=\"comment\">    * null in such implementations if this class was loaded by the bootstrap</span></span><br><span class=\"line\"><span class=\"comment\">    * class loader.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt; If a security manager is present, and the caller&#x27;s class loader is</span></span><br><span class=\"line\"><span class=\"comment\">    * not null and the caller&#x27;s class loader is not the same as or an ancestor of</span></span><br><span class=\"line\"><span class=\"comment\">    * the class loader for the class whose class loader is requested, then</span></span><br><span class=\"line\"><span class=\"comment\">    * this method calls the security manager&#x27;s &#123;<span class=\"doctag\">@code</span> checkPermission&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    * method with a &#123;<span class=\"doctag\">@code</span> RuntimePermission(&quot;getClassLoader&quot;)&#125;</span></span><br><span class=\"line\"><span class=\"comment\">    * permission to ensure it&#x27;s ok to access the class loader for the class.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * &lt;p&gt;If this object</span></span><br><span class=\"line\"><span class=\"comment\">    * represents a primitive type or void, null is returned.</span></span><br><span class=\"line\"><span class=\"comment\">    *</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@return</span>  the class loader that loaded the class or interface</span></span><br><span class=\"line\"><span class=\"comment\">    *          represented by this object.</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@throws</span> SecurityException</span></span><br><span class=\"line\"><span class=\"comment\">    *    if a security manager exists and its</span></span><br><span class=\"line\"><span class=\"comment\">    *    &#123;<span class=\"doctag\">@code</span> checkPermission&#125; method denies</span></span><br><span class=\"line\"><span class=\"comment\">    *    access to the class loader for the class.</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> java.lang.ClassLoader</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> SecurityManager#checkPermission</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> java.lang.RuntimePermission</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"meta\">@CallerSensitive</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> ClassLoader <span class=\"title function_\">getClassLoader</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">ClassLoader</span> <span class=\"variable\">cl</span> <span class=\"operator\">=</span> getClassLoader0();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (cl == <span class=\"literal\">null</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">       <span class=\"type\">SecurityManager</span> <span class=\"variable\">sm</span> <span class=\"operator\">=</span> System.getSecurityManager();</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (sm != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">           ClassLoader.checkClassLoaderPermission(cl, Reflection.getCallerClass());</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> cl;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>扩展类加载器（Extension Class Loader）:</p>\n<ol>\n<li><p>这个类加载器是在类<code>sun.misc.Launcher&amp;ExtClassLoader</code>中以Java代码形式实现的</p>\n</li>\n<li><p>主要负责加载<code>&lt;JAVA_HOME&gt;/lib/ext</code>目录中</p>\n</li>\n<li><p>或者被<code>java.ext.dirs</code>系统变量所指定的路径中所有的类库</p>\n</li>\n<li><p>这是Java系统类库的扩展机制，也就是可以将具有通用性的类库放置在ext目录里扩展Java SE的功能</p>\n<blockquote>\n<p>不过在JDK9之后被模块化带来的天然扩展能力替代</p>\n</blockquote>\n</li>\n<li><p>由于是Java编写的，开发者可直接调用</p>\n</li>\n</ol>\n</li>\n<li><p>应用程序类加载器（Application Class Loader）：</p>\n<ol>\n<li>在<code>sun.misc.Launcher$AppClassLoader</code>来实现的。</li>\n<li>是ClassLoader.getSystemClassLoader()方法的返回值</li>\n<li>负责加载用户路径（ClassPath）上所有的类库</li>\n<li>可被直接调用，如果没有自己定义，它就是系统默认的类加载器</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8heg7kduuj30hy0g2gmo.jpg\" alt=\"image-20220618151703298\"></p>\n<p>​        双亲委派模型要求：除了顶部的启动类加载器，剩下的类加载器都应有自己的父类加载器，这里的父类不是指继承，<code>通常</code>指的是组合，也就是复用父类加载器的代码。</p>\n<blockquote>\n<p>这里的通常是指:双亲委派模型并不是强制性约束，而是推荐的一种类加载器实现的最佳实现</p>\n</blockquote>\n<blockquote>\n<p>双亲委派模型的工作流程：</p>\n</blockquote>\n<p>​        当类加载器受到类加载请求时，并不会自己直接尝试加载，而是交给父类加载器，所有的请求最终都应该到启动类加载器，如果父类反馈无法加载（搜索范围找不到所需的类），子类再自己去尝试加载。</p>\n<blockquote>\n<p>双亲委派的好处？</p>\n</blockquote>\n<p>​        一个好处就是可以让类也保持一种层级关系，比如<code>java.lang.Object</code>,每个类的超类，存放在<code>rt.jar</code>下，无论哪个类加载器加载，都会发送到启动类加载器加载，因此Object类在各种类加载器环境下都能保证是同一个类。</p>\n<p>​        这里如果不使用双亲委派模型，就会导致类关系混乱。比如用各自不同的类加载器加载Object，系统中就会有不同的Object类。比如我们自己写一个Object类,或者一个String类，编译可以通过，但是无法运行，这也是一种强有力的保护措施。</p>\n<blockquote>\n<p>双亲委派的代码：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">        <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">  \t\t\t<span class=\"comment\">// 只能有一个线程来加载</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// First, check if the class has already been loaded</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                      \t<span class=\"comment\">// 如果有父类加载器，用父类的</span></span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 用Bootstrap</span></span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// ClassNotFoundException thrown if class not found</span></span><br><span class=\"line\">                    <span class=\"comment\">// from the non-null parent class loader</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If still not found, then invoke findClass in order</span></span><br><span class=\"line\">                    <span class=\"comment\">// to find the class.</span></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"comment\">// this is the defining class loader; record the stats</span></span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"破坏双亲委派模型\"><a href=\"#破坏双亲委派模型\" class=\"headerlink\" title=\"破坏双亲委派模型\"></a>破坏双亲委派模型</h5><h3 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h3><p>​        确保class文件的二进制流数据符合java虚拟机规范，不会损害虚拟机。我们可以知道java编译器会先对代码进行格式检查，如果正确才编译成class文件，但是class文件并不一定是编译后的，也可以通过0,1直接在二进制编辑器中生成的，所以虚拟机需要再对该数据进行校验。</p>\n<p>​        验证阶段一般分为：文件格式校验，元数据校验，字节码校验，符号引用校验。</p>\n<ol>\n<li><p>文件格式校验：</p>\n<ol>\n<li>该阶段只要检查文件版本，魔数，索引等一些规范数据是否正常</li>\n<li>如果没有问题，字节流才被允许进入java虚拟机内存的方法区进行存储，也就是后面的阶段都是针对方法区的存储结构进行的，不会直接读取，操作字节流了。</li>\n</ol>\n</li>\n<li><p>元数据校验：</p>\n<ol>\n<li>针对类的信息进行检查，比如父类信息，子类是否实现父类所有要求实现的方法。</li>\n<li>保证符合《Java语义规范》</li>\n</ol>\n</li>\n<li><p>字节码校验：</p>\n<ol>\n<li>这一部分是整个校验部分最复杂的，负责检查语义是否合法，比如类中的方法体，进行校验分析，保证不会损害虚拟机。</li>\n<li>需要注意如果一个类型的方法体的字节码没有通过字节码验证，说明一定有问题，但如果验证通过了，也无法保证其一定安全。</li>\n</ol>\n<blockquote>\n<p>这里引申一个概念：“停机问题”</p>\n<blockquote>\n<p>通俗的讲：通过程序去判断一个程序是否有问题是无法保证准确的。</p>\n</blockquote>\n</blockquote>\n<ol start=\"3\">\n<li>后面因为设计团队不想在这个阶段花费太多的时间，JDK6之后javac编译器和虚拟机进行一项联合优化，把尽可能多的校验放在javac中，具体做法是在方法体Code属性的属性表新添加一个“StackMapTable”属性。以后虚拟机只检查它就好了，不过也有一定被篡改欺骗的风险。</li>\n</ol>\n</li>\n<li><p>符合引用校验：        </p>\n<ol>\n<li>发生在虚拟机将符号引用变为直接引用的时候。</li>\n<li>判断该类是否缺少或者被禁止访问它所需要的外部资源，例如外部类，方法，字段。</li>\n<li>这里可以做一个优化，当一个程序运行的全部代码已经被反复的使用和验证后，则可以在生产环境使用<code>-Xverify:none</code>参数来关闭大部分的类校验措施，缩短虚拟机加载的时间。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h3><p>​        这一阶段是正式为类中定义的静态变量（static修饰的）进行初始化零值，也就是类型的默认值。这一部分数据在JDK7之前是放在方法区的，后面类变量则会随着Class对象存放在堆中。</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><blockquote>\n<p>符号引用：可以指向没有加载到虚拟机中内容</p>\n<p>直接引用：直接指向目标的指针，也就是必须是虚拟机内的</p>\n</blockquote>\n<p>​        将常量池中的符号引用变为直接引用。</p>\n<h4 id=\"类或接口解析\"><a href=\"#类或接口解析\" class=\"headerlink\" title=\"类或接口解析\"></a>类或接口解析</h4><p>​        假设当前代码在A类中，需要将一个符号引用B解析为一个直接引用C，则解析需要以下三步。</p>\n<ol>\n<li>如果C不是一个数组类型，虚拟机会把代表B的全限定名交给A的类加载器去加载C类。</li>\n<li>如果是数组，则按照第一步去加载元素类型。</li>\n<li>如果上面都没问题，C已经是一个类或者接口了，但这个时候还需要进行符号引用验证，就是看是否有权限访问。<ol>\n<li>如果可以访问说明肯定是下面三种情况的一种：<ol>\n<li>C为public，且与A在同一个模块儿</li>\n<li>C是public，但与A不在一个模块儿，但是 C允许A访问</li>\n<li>C不是public，但是与D在同一个包</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<h4 id=\"字段解析\"><a href=\"#字段解析\" class=\"headerlink\" title=\"字段解析\"></a>字段解析</h4><p>​        通俗的说现在我需要解析C类的一个变量，如果C类本身含有则直接返回直接引用，如果没有就从下向上到父类和接口中寻找，如果有则返回直接引用，如果没有则抛出<code>java.lang.NoSuchFieldError</code>，如果成功返回来了引用还需要判断有没有权限，如果没有则派出<code>java.lang.IllegalAccessError</code>异常。</p>\n<p>​        而实际中如果父类和接口都有同名字段，则可能拒绝编译。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">text1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">C</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">C</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 爆出：Reference to &#x27;i&#x27; is ambiguous, both &#x27;B.i&#x27; and &#x27;A.i&#x27; match</span></span><br><span class=\"line\">        <span class=\"comment\">// 无法编译</span></span><br><span class=\"line\">        System.out.println(c.i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">A</span> &#123;<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">C</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">B</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">A</span> &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"方法解析\"><a href=\"#方法解析\" class=\"headerlink\" title=\"方法解析\"></a>方法解析</h4><p>​        与字段解析类似，解析符号引用方法，看是否本类是否有，如果有则返回直接引用，没有去父类找，如果还没有去看自己实现的接口与父接口有没有该方法，如果有说明该类是一个抽象类爆出<code>java.lang.ABstractMethodError</code>异常，否则返回<code>java.lang.NoSuchMethodError</code>,如果成功返回了，还得继续判断权限，如果没有返回：<code>java.lang.IllegalAccessError</code>.</p>\n<h4 id=\"接口方法解析\"><a href=\"#接口方法解析\" class=\"headerlink\" title=\"接口方法解析\"></a>接口方法解析</h4><p>​        与方法解析类似。</p>\n<h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>​        虚拟机开始正式执行类中编写的java程序代码。对静态代码块儿进行执行，对静态变量进行赋值。这里注意：静态代码块儿与静态变量优先级一致，谁在前面先执行谁。以下例子就能说明问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        i = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//Error:(13, 28) java: 非法前向引用 无法进行编译</span></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虚拟机会保证子类初始化前，先将父类进行初始化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">text1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 2</span></span><br><span class=\"line\">        System.out.println(B.B);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>  <span class=\"type\">int</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        A = <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">B</span> <span class=\"operator\">=</span> A;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<ol>\n<li>上述初始化过程其实是执行了生成的<code>&lt;clinit&gt;()</code>方法,它并不是必须的，如果类和接口没有静态代码块也没有静态变量赋值，就不会生成这个方法</li>\n<li>接口没有静态代码块和静态变量，但是可以进行初始化值，所以也会生成<code>&lt;clinit&gt;()</code>方法，但是接口不同的是，初始化时只执行自己的<code>&lt;clinit&gt;()</code>方法，不会管父类的，只有使用父类定义变量时，才会使用。</li>\n<li><strong>虚拟机需要保证，在多线程情况下，类的初始化只完成一次，所以进行同步加锁，只有一个线程去执行<code>&lt;clinit&gt;()</code>方法，其他线程阻塞，如果该方法持续很久，就会导致多线程一直阻塞这是很隐蔽的。！！！</strong></li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">text1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">//会导致线程一直阻塞。</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread()+<span class=\"string\">&quot; start&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">            System.out.println(Thread.currentThread()+<span class=\"string\">&quot; init&quot;</span>);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread()+<span class=\"string\">&quot; start&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">            System.out.println(Thread.currentThread()+<span class=\"string\">&quot; init&quot;</span>);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread()+<span class=\"string\">&quot;init DeadLoopClass&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","text":"概述 虚拟机是如何加载Class文件的？ Class文件进入虚拟机后会有什么变化？ ​ 在Java中我们知道有编译期和运行期，其中编译期为我们写的java代码通过javac编译成一个一个的class文件，而运行期则为将class文件通过jvm加载到内存中，通过一些列操作变成可以j...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"JVM","slug":"JVM","count":4,"path":"api/categories/JVM.json"}],"tags":[{"name":"类加载","slug":"类加载","count":1,"path":"api/tags/类加载.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">概述</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA\"><span class=\"toc-text\">类的加载时机</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">类加载的过程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A0%E8%BD%BD\"><span class=\"toc-text\">加载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8\"><span class=\"toc-text\">类加载器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6\"><span class=\"toc-text\">双亲委派机制</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%A0%B4%E5%9D%8F%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B\"><span class=\"toc-text\">破坏双亲委派模型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">验证</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%86%E5%A4%87\"><span class=\"toc-text\">准备</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">解析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E6%88%96%E6%8E%A5%E5%8F%A3%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">类或接口解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%97%E6%AE%B5%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">字段解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">方法解析</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%A3%E6%96%B9%E6%B3%95%E8%A7%A3%E6%9E%90\"><span class=\"toc-text\">接口方法解析</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">初始化</span></a></li></ol></li></ol></li></ol>","author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"后端编译与优化","uid":"b541249aeac135d3361cb459457b0ae9","slug":"JVM/后端编译与优化","date":"2022-11-25T05:04:04.000Z","updated":"2022-12-02T07:43:54.368Z","comments":true,"path":"api/articles/JVM/后端编译与优化.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"后端编译与优化编译器优化技术逃逸分析 逃逸分析本身不是直接进行优化的方法，而是一种为优化提供帮助的分析算法 逃逸分析的原理： ​ 我们分析对象的动态作用域，如果对象创建在方法中，可能被外部方法所引用到，例如作为参数被外部方法进行调用，这叫做方法逃逸， ​ 被外部线程所访问到，例如...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"JVM","slug":"JVM","count":4,"path":"api/categories/JVM.json"}],"tags":[{"name":"逃逸分析","slug":"逃逸分析","count":1,"path":"api/tags/逃逸分析.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Redis挖矿分析","uid":"ac22266bae0c79a0958a1796275c31c3","slug":"Redis/为什么当你学习Redis，发现自己的服务器在挖矿了","date":"2022-11-25T05:03:04.000Z","updated":"2022-11-25T06:47:42.938Z","comments":true,"path":"api/articles/Redis/为什么当你学习Redis，发现自己的服务器在挖矿了.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"为什么当你学习Redis，发现自己的服务器在挖矿了​ 在我学习Redis时，因为嫌麻烦就没有设置密码，结果导致一段时间后系统提醒我，我的服务器上有挖矿行为，如果不清理就停止运行，我一脸懵逼，并不断上网查找哪里出现问题了，但最终还是没有解决，无奈下我初始化了服务器。希望本篇文章能对...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"Redis","slug":"Redis","count":2,"path":"api/categories/Redis.json"}],"tags":[{"name":"网络攻击","slug":"网络攻击","count":1,"path":"api/tags/网络攻击.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}