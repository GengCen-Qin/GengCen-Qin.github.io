{"title":"手写线程池","uid":"df1cff2ea6b0a8229883d729950dd5e6","slug":"并发/手写线程池","date":"2022-11-25T05:03:04.000Z","updated":"2022-11-25T06:50:12.412Z","comments":true,"path":"api/articles/并发/手写线程池.json","keywords":null,"cover":"/img/default_top_img.jpg","content":"<h1 id=\"手写线程池\"><a href=\"#手写线程池\" class=\"headerlink\" title=\"手写线程池\"></a>手写线程池</h1><blockquote>\n<p>​    我们从初级阶段自己创建线程去异步执行任务，到后期使用线程池不断执行任务，原理书上都有，但都是字面意思，无法深入理解，所以打算自己进行实现。</p>\n</blockquote>\n<ol>\n<li>阶段一：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;异步任务执行。。。&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>阶段二:</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽离出一个统一接口，具体实现由子类完成</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable r)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义各自的子类去实现execute方法</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 底层还是执行的 new Thread(r)，虽然现在看起来是有点儿麻烦，但更方便我们进行扩展了</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>阶段三：上面我们执行一次方法就创建一个线程，先不说会不会OOM，就线程的创建与销毁都够损耗性能的。我们能不能只使用一个异步线程，但是执行多个任务呢?</li>\n</ol>\n<blockquote>\n<p>这里我之前有一个小疑惑，一般任务都是在<code>new Thead(这里就指定好需要完成的任务).start()</code>，那假如这个线程执行完了后，我还能不能再指定一个新的任务，让它再启动，后来发现不行，执行完的线程就已经挂了，不能再进行复用，那大家平时说的线程复用是啥意思呢？ 所以转化一些思路，是线程一直在运行，在这期间不断读取一个任务表，第一个任务完成后，马上干第二个任务。以此类推，让一个线程完成多个任务。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 抽离出一个统一接口，具体实现由子类完成</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable r)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个阻塞任务队列</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> BlockingDeque&lt;Runnable&gt; task = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用一个线程不断从任务队列中读取数据，然后执行，达到复用的效果</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;异步线程开始不断读取任务。。。&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 因为无限循环，所以线程会一致运行，后期我们会再升级，让它优雅的结束</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// take方法是阻塞方法，当队列中无任务时，线程阻塞</span></span><br><span class=\"line\">                    <span class=\"type\">Runnable</span> <span class=\"variable\">poll</span> <span class=\"operator\">=</span> task.take();</span><br><span class=\"line\">                    <span class=\"comment\">// 当读取到任务时，就开始执行。</span></span><br><span class=\"line\">                    poll.run();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新来的任务直接添加到队列中</span></span><br><span class=\"line\">        task.add(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>阶段四：上面仍有许多潜在的问题</p>\n<ol>\n<li>其中一个任务报错且未处理，后面的任务别想执行了。</li>\n<li>其中一个任务耗时过久，新来的任务迟迟不能处理，任务会不断挤压，造成OOM。</li>\n<li>未利用多核CPU的优势</li>\n</ol>\n<p>那这里很简单，不是嫌少嘛，我多安排几个线程去不断监控任务队列，这里一定注意队列需要有锁保护，不能一个任务多个线程都处理一遍</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个阻塞任务队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BlockingDeque&lt;Runnable&gt; task = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 需要指定多少个线程去执行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> CORE_POOL_SIZE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 新来的任务直接添加到队列中</span></span><br><span class=\"line\">        task.add(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">myExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.CORE_POOL_SIZE = corePoolSize;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 初始化制定线程数去不断监控队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用一个线程不断从任务队列中读取数据，然后执行，达到复用的效果</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;异步线程开始不断读取任务。。。&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_SIZE; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// 因为无限循环，所以线程会一致运行</span></span><br><span class=\"line\">                    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// take方法是阻塞方法，当队列中无任务时，线程阻塞</span></span><br><span class=\"line\">                        <span class=\"type\">Runnable</span> <span class=\"variable\">poll</span> <span class=\"operator\">=</span> task.take();</span><br><span class=\"line\">                        <span class=\"comment\">// 当读取到任务时，就开始执行。</span></span><br><span class=\"line\">                        poll.run();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li><p>阶段五：上面有哪些问题呢？</p>\n<ol>\n<li>我们初始化时直接创建了<code>corePoolSize</code>个数量的线程，如果一直没任务不就浪费了嘛，还占内存，我们能不能指定<code>corePoolSize</code>后，暂时不创建线程，每次执行任务时，判断当前工作线程数，是否小于<code>corePoolSize</code>,如果小于，我就创建新的线程，否则我就不创建线程了。</li>\n<li>传入RejectedExecutionHandler对象，任务队列不能无限放置吧，所以当我们判定任务队列已经满了的时候，就需要使用用户传来的RejectedExecutionHandler进行处理，也就是决定这些任务该怎么处理。</li>\n<li>传入ThreadFactory对象，对线程进行统一的管理，如线程名，需要执行额外的逻辑，而不直接new Thread()。</li>\n<li>线程自我摧毁装置，当一定时间内都没有获取到任务，就默认线程池不需要太多的线程了，则进行销毁</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">myExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Executor</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 创建一个阻塞任务队列</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> BlockingDeque&lt;Runnable&gt; task = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingDeque</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 定制任务队列长度，当队列长度溢出，触发溢出策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> queueSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 需要指定多个线程去执行</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> CORE_POOL_SIZE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 任务溢出策略</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RejectedExecutionHandler handler;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 利用工厂模式统一管理线程的创建，例如线程名等信息</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> ThreadFactory factory;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检查在线线程数量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">workThreadSize</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 这里应该进行同步，因为判断与添加是两个操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (workThreadSize.get() &lt; CORE_POOL_SIZE) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果线程数不到核心线程数，没进入一个任务，就添加一个线程</span></span><br><span class=\"line\">            addThread();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        taskAdd(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addThread</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        factory.newThread(() -&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (workThreadSize.get() = CORE_POOL_SIZE) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">Runnable</span> <span class=\"variable\">poll</span> <span class=\"operator\">=</span> task.poll(<span class=\"number\">60</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (poll == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//但当我们任务量可能已经渐渐平缓了，就不再需要那么多线程监听了,这里我们默认可以只剩5个，当然也可以作为参数调整</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (workThreadSize.get() &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                            <span class=\"keyword\">synchronized</span> (Executor.class) &#123;</span><br><span class=\"line\">                                <span class=\"keyword\">if</span> (workThreadSize.get() &gt; <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">                                    <span class=\"comment\">// 让线程结束</span></span><br><span class=\"line\">                                    Thread.currentThread().interrupt();</span><br><span class=\"line\">                                    workThreadSize.decrementAndGet();</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">// 当读取到任务时，就开始执行。</span></span><br><span class=\"line\">                    poll.run();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 通过一个自旋锁，来保证在线线程数准确</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> workThreadSize.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workThreadSize.compareAndSet(size,size+<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">taskAdd</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (task.size()&gt;queueSize) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这里可以定义不同的任务溢出策略</span></span><br><span class=\"line\">            handler.rejectedExecution(r,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        task.add(r);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">myExecutor</span><span class=\"params\">(<span class=\"type\">int</span> thread_size)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.queueSize = <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.CORE_POOL_SIZE = thread_size;</span><br><span class=\"line\">        <span class=\"comment\">// 如果线程池队列满了丢掉这个任务并且抛出RejectedExecutionException异常。</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.handler = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = Executors.defaultThreadFactory();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">myExecutor</span><span class=\"params\">(<span class=\"type\">int</span> queueSize, <span class=\"type\">int</span> CORE_POOL_SIZE, RejectedExecutionHandler handler, ThreadFactory factory)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.queueSize = queueSize;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.CORE_POOL_SIZE = CORE_POOL_SIZE;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.factory = factory;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>这里JUC包下定义的参数</p>\n<p><img src=\"/Users/qinsicheng/Desktop/008vxvgGly1h7lb0r2w9lj317403sjsj.png\" alt=\"image-20221028210505748\"></p>\n<p>这里是我们，自己定义的，唯一不一样就是少了<code>maximumPoolSize</code>,也就是再对线程数量进行控制，这里感兴趣的朋友可以自己试着去做。</p>\n<p><img src=\"/Users/qinsicheng/Desktop/008vxvgGly1h7lb2r7broj30wj03bmxp.png\" alt=\"image-20221028210704145\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    如果你能跟随着思路完成到这里，我觉得这块儿知识点，你应该是没问题了，具体代码细节，或者是组件如何使用，就靠你们自己去查询和实验。我感觉我的代码还是通俗易懂的。这里再次感谢<code>低并发编程</code>公众号，我感觉干活满满，推荐大家读一读。</p>\n","text":"手写线程池 ​ 我们从初级阶段自己创建线程去异步执行任务，到后期使用线程池不断执行任务，原理书上都有，但都是字面意思，无法深入理解，所以打算自己进行实现。 阶段一： 123456new Thread(new Runnable() &#123; @Override public v...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"并发","slug":"并发","count":2,"path":"api/categories/并发.json"}],"tags":[{"name":"线程池","slug":"线程池","count":1,"path":"api/tags/线程池.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%89%8B%E5%86%99%E7%BA%BF%E7%A8%8B%E6%B1%A0\"><span class=\"toc-text\">手写线程池</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%80%BB%E7%BB%93\"><span class=\"toc-text\">总结</span></a></li></ol></li></ol>","author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"分布式事务","uid":"c064617a2958c28ea23700a4261c6075","slug":"分布式/分布式事务","date":"2022-11-25T05:03:04.000Z","updated":"2022-12-03T09:27:00.033Z","comments":true,"path":"api/articles/分布式/分布式事务.json","keywords":null,"cover":[],"text":"简介​ 我们在过去总是使用本地事务，也就是数据库提供的事务操作，其中具有ACID的特性，但在如今我们的各个模块儿被拆分，服务与服务间相互调用，简单来说就是需要跨进程的事务，我们来想一下现有的本地事务是否能解决分布式事务。情况1：跨JVM，跨数据库产生分布式事务 graph TD;...","link":"","photos":[],"count_time":{"symbolsCount":"8.8k","symbolsTime":"8 mins."},"categories":[{"name":"分布式","slug":"分布式","count":2,"path":"api/categories/分布式.json"}],"tags":[{"name":"事务","slug":"事务","count":1,"path":"api/tags/事务.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"并发编程","uid":"be447ed25be14672c8ade5d39be9da07","slug":"并发/并发编程","date":"2022-11-25T05:03:04.000Z","updated":"2022-11-25T06:49:54.174Z","comments":true,"path":"api/articles/并发/并发编程.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"基础的概念什么是并发操作？利用多核CPU去完成任务，类似于使用影分身去完成不同的作业，这肯定比我一个人一个个写要快的多 什么时候可以使用并发？当有多核CPU时。如果只有一个CPU，那并发实际上只是线程的不断切换，好比我在数学作业上先写点儿，再到语文上再写点儿，因为处理的很快，给人...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"并发","slug":"并发","count":2,"path":"api/categories/并发.json"}],"tags":[{"name":"并发","slug":"并发","count":1,"path":"api/tags/并发.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}