{"title":"IO流","uid":"eab0435802cc6e95f43c834dccfaf907","slug":"Java/IO流","date":"2022-11-24T05:03:04.000Z","updated":"2022-12-02T07:43:54.349Z","comments":true,"path":"api/articles/Java/IO流.json","keywords":null,"cover":"/img/default_top_img.jpg","content":"<p>今天面试的时候问了一道IO流的题，鉴于之前在java基础篇的时候学过一遍，后再无使用和复习，就再跟着韩顺平老师的课件复习一遍。</p>\n<h1 id=\"IO流\"><a href=\"#IO流\" class=\"headerlink\" title=\"IO流\"></a>IO流</h1><h2 id=\"IO流是什么？\"><a href=\"#IO流是什么？\" class=\"headerlink\" title=\"IO流是什么？\"></a>IO流是什么？</h2><p>当我们使用程序读取或修改本地文件时， 文件是以流的形式加载在内存中的。</p>\n<ol>\n<li>InputStream:输入流，从数据源加载至内存。</li>\n<li>OutputStream:输出流，从存在中加载至目的地。</li>\n</ol>\n<p><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8heh5hdrcj30jh045dg2.jpg\" alt=\"image-20220902174637579\"></p>\n<h2 id=\"IO流有哪些分类\"><a href=\"#IO流有哪些分类\" class=\"headerlink\" title=\"IO流有哪些分类\"></a>IO流有哪些分类</h2><p><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8heh5td93j30tz0bywh6.jpg\" alt=\"image-20220902174807812\"></p>\n<blockquote>\n<p> 输入流，输出流是最宽泛的概念，也是我们上面讲的概念。那为什么还需要分成字节流，字符流，节点流，处理流呢？</p>\n</blockquote>\n<p>字节我们都知道：byte，是一个二进制单位，而我们的文件可以是txt(存储字符的),png(存储图片的),mp3(存储音频的),mp4(存储视频的)，但传输的时候我们都将其转化为二进制，因为计算机只能识别二进制，也就是字节。所以字节流的意思就是说：将该文件以字节为单位进行读取，可以一个字节一个字节读取，或者一段字节数组进行重复读取。这样不管是什么文件都可以进行传输了。</p>\n<p>那为啥还需要字符流呢？这是已因为字节流是直接作用于文件的，而字符流使用了缓冲区，先将数据写入缓冲区进行读写操作，当输出流close或者flush时，才会把内容写入目的地。一般我们在操作文本内容时，使用字符流会更好一些，而图片，视频如果使用字符流，可能导致文件损坏。</p>\n<p>节点流代表的是我们实际操作数据的流，相比包装流会更贴近底层一些，也就是我们使用FileInputStream,FileOutputStream等，而包装流是封装在节点流之上，用来加入缓存，封装接口，进行性能优化等。相当于节点流是mybatis，包装流就是mybatis-plus。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008vxvgGly1h8heh68926j30h10g3dgh.jpg\" alt=\"image-20220903100526143\"></p>\n<h2 id=\"具体使用（这里我只引用常用的）：\"><a href=\"#具体使用（这里我只引用常用的）：\" class=\"headerlink\" title=\"具体使用（这里我只引用常用的）：\"></a>具体使用（这里我只引用常用的）：</h2><h3 id=\"FileInputStream-节点流，字节流\"><a href=\"#FileInputStream-节点流，字节流\" class=\"headerlink\" title=\"FileInputStream(节点流，字节流)\"></a>FileInputStream(节点流，字节流)</h3><blockquote>\n<p>请使用 FileInputStream 读取 hello.txt 文件，并将文件内容显示到控制台</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fileInputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">readLength</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            fileInputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((readLength = fileInputStream.read(bytes)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(bytes,<span class=\"number\">0</span>,readLength));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;哪里出现问题了&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            fileInputStream.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FileOutputStream-节点流，字节流\"><a href=\"#FileOutputStream-节点流，字节流\" class=\"headerlink\" title=\"FileOutputStream(节点流，字节流)\"></a>FileOutputStream(节点流，字节流)</h3><blockquote>\n<p>请使用  FileOutputStream    在 hello.txt 文件，中写入  “hello，world”,   如果文件不存在，会创建<br>文件(注意：前提是目录已经存在.)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fileOutputStream</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">        file.createNewFile();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 这里构造器如果加true，表示追加模式，如果不写，默认是覆盖原来内容</span></span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">byte</span>[] bytes = <span class=\"string\">&quot;hello，world---&quot;</span>.getBytes();</span><br><span class=\"line\">        fileOutputStream.write(bytes);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        fileOutputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>图片文件的拷贝</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fileCopy</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">fileInputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven.png&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven_.png&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">readLen</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">byte</span>[] bytes = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((readLen = fileInputStream.read(bytes)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            fileOutputStream.write(bytes,<span class=\"number\">0</span>,readLen);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        fileInputStream.close();</span><br><span class=\"line\">        fileOutputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FileReader-节点流，字符流\"><a href=\"#FileReader-节点流，字符流\" class=\"headerlink\" title=\"FileReader(节点流，字符流)\"></a>FileReader(节点流，字符流)</h3><blockquote>\n<p>使用  FileReader   从    story.txt   读取内容，并显示</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fileReader</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">FileReader</span> <span class=\"variable\">fileReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">readLen</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((readLen = fileReader.read(chars)) != -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(chars,<span class=\"number\">0</span>,readLen));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        fileReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"FileWriter-节点流，字符流\"><a href=\"#FileWriter-节点流，字符流\" class=\"headerlink\" title=\"FileWriter(节点流，字符流)\"></a>FileWriter(节点流，字符流)</h3><blockquote>\n<p>使用 FileWriter   将   “风雨之后，定见彩虹”    写入到   note.txt    文件中,    注意细节.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void fileWriter() throws IOException &#123;</span><br><span class=\"line\">    // 使用 FileWriter   将   “风雨之后，定见彩虹”    写入到   note.txt    文件中,    注意细节.</span><br><span class=\"line\">    FileWriter fileWriter = new FileWriter(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;, true);</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        fileWriter.write(&quot;风雨之后，定见彩虹&quot;);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        // 一定要关闭流 ，数据才会写入到文件中，或者使用fileWriter.flush();</span><br><span class=\"line\">        fileWriter.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BufferReader-包装流，字符流\"><a href=\"#BufferReader-包装流，字符流\" class=\"headerlink\" title=\"BufferReader(包装流，字符流)\"></a>BufferReader(包装流，字符流)</h3><blockquote>\n<p>使用BufferReader读取文件，并打印到控制台</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void bufferedReader() throws IOException &#123;</span><br><span class=\"line\">    BufferedReader bufferedReader = new BufferedReader(new FileReader(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;));</span><br><span class=\"line\">    String readLen;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // readLine() 按照行读取，效率高</span><br><span class=\"line\">        while ((readLen = bufferedReader.readLine()) != null) &#123;</span><br><span class=\"line\">            System.out.println(readLen);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        throw new RuntimeException(e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        // 这里包装流关闭时，节点流底层自动关闭了</span><br><span class=\"line\">        bufferedReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BufferWriter-包装流，字符流\"><a href=\"#BufferWriter-包装流，字符流\" class=\"headerlink\" title=\"BufferWriter(包装流，字符流)\"></a>BufferWriter(包装流，字符流)</h3><blockquote>\n<p>bufferWriter 写 文件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">bufferWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">    <span class=\"type\">BufferedWriter</span> <span class=\"variable\">bufferedWriter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileWriter</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;</span>));</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        bufferedWriter.write(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 换行</span></span><br><span class=\"line\">        bufferedWriter.newLine();</span><br><span class=\"line\">        bufferedWriter.write(<span class=\"string\">&quot;world&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        bufferedWriter.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>bufferReader，bufferedWriter 拷贝文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void fileCopyByBuffered() throws IOException &#123;</span><br><span class=\"line\">    BufferedReader bufferedReader = new BufferedReader(new FileReader(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;));</span><br><span class=\"line\">    BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello_.txt&quot;));</span><br><span class=\"line\">    String readLen;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        // 注意这里的bufferedReader.readLine()为换行符时，默认返回的是空字符，所以导致原本换行的地方，现在直接拼接了</span><br><span class=\"line\">        while ((readLen = bufferedReader.readLine()) != null) &#123;</span><br><span class=\"line\">            if (&quot;&quot;.equals(readLen)) &#123;</span><br><span class=\"line\">                // 这样就能保证正常输出了，还有一点比方说：\\n\\n\\n  实际上中间只空了两行</span><br><span class=\"line\">                readLen+=&quot;\\n&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bufferedWriter.write(readLen);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        bufferedWriter.close();</span><br><span class=\"line\">        bufferedReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BufferInputStream-包装流，字节流\"><a href=\"#BufferInputStream-包装流，字节流\" class=\"headerlink\" title=\"BufferInputStream(包装流，字节流)\"></a>BufferInputStream(包装流，字节流)</h3><h3 id=\"BufferOutputStream-包装流，字节流\"><a href=\"#BufferOutputStream-包装流，字节流\" class=\"headerlink\" title=\"BufferOutputStream(包装流，字节流)\"></a>BufferOutputStream(包装流，字节流)</h3><blockquote>\n<p>BufferInputStream,BufferOutputStream拷贝文件</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void fileCopyByBufferedStream() throws IOException &#123;</span><br><span class=\"line\">    BufferedInputStream bufferedInputStream = new BufferedInputStream(new FileInputStream(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven.png&quot;));</span><br><span class=\"line\">    BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(new FileOutputStream(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/wallhaven__.png&quot;));</span><br><span class=\"line\">    byte[] bytes = new byte[1024];</span><br><span class=\"line\">    int readLen = 0;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        while ((readLen = bufferedInputStream.read(bytes)) != -1) &#123;</span><br><span class=\"line\">            bufferedOutputStream.write(bytes,0,readLen);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        bufferedInputStream.close();</span><br><span class=\"line\">        bufferedOutputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ObjectInputStream-对象流，字节流\"><a href=\"#ObjectInputStream-对象流，字节流\" class=\"headerlink\" title=\"ObjectInputStream(对象流，字节流)\"></a>ObjectInputStream(对象流，字节流)</h3><p>对象流就是我们将java对象进行序列化，存储在文件中，并可以通过对象流反序列化回来，要序列化的对象一定需要实现<code>Serializable</code>,其属性也需要实现，基本数据类型会自动变成包装类，而包装类是已经实现了的。</p>\n<blockquote>\n<p>序列化一个dog对象到文件中，并再反序列化回来</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void objectInputStream() throws IOException, InterruptedException, ClassNotFoundException &#123;</span><br><span class=\"line\">    // FileOutputStream()  如果没有使用追加默认 会直接将文件清空</span><br><span class=\"line\">    ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.dat&quot;));</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        objectOutputStream.writeObject(new dog(&quot;旺财&quot;,123));</span><br><span class=\"line\">        objectOutputStream.writeObject(1);</span><br><span class=\"line\">        System.out.println(&quot;输出成功&quot;);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        objectOutputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    Thread.sleep(500);</span><br><span class=\"line\"></span><br><span class=\"line\">    // ObjectInputStream 在读取数据文件时候会判断 magic value，version value，来判断文件是否正确，如果不正确会爆出EOP错误</span><br><span class=\"line\">    ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.dat&quot;));</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        Object o = objectInputStream.readObject();</span><br><span class=\"line\">        System.out.println((dog)o);</span><br><span class=\"line\">        System.out.println(objectInputStream.readObject());</span><br><span class=\"line\">        System.out.println(&quot;读取成功&quot;);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        objectInputStream.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ObjectOutputStream-对象流，字节流\"><a href=\"#ObjectOutputStream-对象流，字节流\" class=\"headerlink\" title=\"ObjectOutputStream(对象流，字节流)\"></a>ObjectOutputStream(对象流，字节流)</h3><h3 id=\"InputStreamReader-转化流，字节流\"><a href=\"#InputStreamReader-转化流，字节流\" class=\"headerlink\" title=\"InputStreamReader  (转化流，字节流)\"></a>InputStreamReader  (转化流，字节流)</h3><blockquote>\n<p>为什么需要转化流？</p>\n</blockquote>\n<p>因为字符编码问题，当我们使用BufferedReader读txt文件时，默认使用Utf-8编码，现在想用其他编码格式，就可以将字节流转为字符流，然后指定编码规则，其实字符流本身底层使用的还是字节流，只是针对字符内容做出了优化。</p>\n<blockquote>\n<p>字节流FileInputStream 包装成字节流InputStreamReader,对文件进行读取(按照 utf-8/gbk 格式),进而在包装成BufferedReader。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void InputStreamReader() throws IOException &#123;</span><br><span class=\"line\">    // 将字节流FileInputStream 包装成字符流 InputStreamReader，对文件进行读取（utf-8/gbk格式）,进而包装成BufferedReader</span><br><span class=\"line\">    FileInputStream fileInputStream = new FileInputStream(&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;);</span><br><span class=\"line\">    // 底层默认使用的就是UTF-8  ，我们也可以使用gbk等</span><br><span class=\"line\">    InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, &quot;utf-8&quot;);</span><br><span class=\"line\">    BufferedReader bufferedReader = new BufferedReader(inputStreamReader);</span><br><span class=\"line\"></span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">        String s = bufferedReader.readLine();</span><br><span class=\"line\">        System.out.println(&quot;读取到的内容=&quot;+s);</span><br><span class=\"line\">    &#125; catch (IOException e) &#123;</span><br><span class=\"line\">        throw new RuntimeException(e);</span><br><span class=\"line\">    &#125; finally &#123;</span><br><span class=\"line\">        bufferedReader.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"OutputStreamWriter-转化流，字节流\"><a href=\"#OutputStreamWriter-转化流，字节流\" class=\"headerlink\" title=\"OutputStreamWriter(转化流，字节流)\"></a>OutputStreamWriter(转化流，字节流)</h3><blockquote>\n<p>使用gbk编码输出文本</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">OutputStreamWriter</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">outputStreamWriter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fileOutputStream, <span class=\"string\">&quot;gbk&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">BufferedWriter</span> <span class=\"variable\">bufferedWriter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedWriter</span>(outputStreamWriter);</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        bufferedWriter.write(<span class=\"string\">&quot;hello Jvav 世界&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        bufferedWriter.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>序列化需要注意的点</p>\n</blockquote>\n<ol>\n<li>读写顺序一定一致</li>\n<li>序列化，反序列化对象，需要实现Serializable</li>\n<li>序列化的类中加入 SerialVersionUID,提高版本的兼容性</li>\n<li>序列化对象时，其属性也都必须实现序列化接口</li>\n<li>序列化具有继承性</li>\n</ol>\n<h2 id=\"课后练习\"><a href=\"#课后练习\" class=\"headerlink\" title=\"课后练习\"></a>课后练习</h2><ol>\n<li>创建文件，并写入内容</li>\n<li>利用转化流，改变字符编码</li>\n<li>读取properties文件，创建对象</li>\n<li>将对象序列化</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalTest1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 判断磁盘是否有mytemp文件，如果没有就创建mytemp</span></span><br><span class=\"line\">        <span class=\"comment\">// 创建文件前需要保证该路径是否存在，如果不存在应先创建对应的包</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/pack1/pack2/pack3/mytemp&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.getParentFile().exists()) &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">mkdirs</span> <span class=\"operator\">=</span> file.getParentFile().mkdirs();</span><br><span class=\"line\">            System.out.println(mkdirs?<span class=\"string\">&quot;创建前提包&quot;</span>:<span class=\"string\">&quot;创建失败&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!file.exists()) &#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">newFile</span> <span class=\"operator\">=</span> file.createNewFile();</span><br><span class=\"line\">            System.out.println(newFile?<span class=\"string\">&quot;成功创建&quot;</span>:<span class=\"string\">&quot;创建失败&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 如果该文件已经存在 则输出文件已经存在，请不要重复创建了</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;文件已经存在，请不要重复创建了&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 3. 在该文件中追加hello , world</span></span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file,<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            fileOutputStream.write(<span class=\"string\">&quot;hello,world&quot;</span>.getBytes());</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;数据写入成功&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            fileOutputStream.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalTest2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. 使用BufferedReader 读取一个文本文件 为每一行加一个句号，并输出到屏幕</span></span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fileReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">bufferedReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(fileReader);</span><br><span class=\"line\">        String readLen;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((readLen = bufferedReader.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 如果不加\\n 默认换行只返回&quot;&quot;，所有内容挤在一起</span></span><br><span class=\"line\">                System.out.println(readLen+<span class=\"string\">&quot;.\\n&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输出结束&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bufferedReader.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 2.如果文本是gbk模式 出现了乱码</span></span><br><span class=\"line\">        <span class=\"type\">InputStreamReader</span> <span class=\"variable\">inputStreamReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/hello.txt&quot;</span>), <span class=\"string\">&quot;gbk&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">bufferedReader1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(inputStreamReader);</span><br><span class=\"line\">        <span class=\"type\">char</span>[] chars = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">readSize</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            while ((readSize = inputStreamReader.read(chars)) != -1) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(new String(chars,0,readSize));</span></span><br><span class=\"line\"><span class=\"comment\">//            &#125;</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> ((readLen=bufferedReader1.readLine()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                System.out.println(readLen);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            bufferedReader1.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalTest3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 编写一个dog.properties 含有：name，age</span></span><br><span class=\"line\">        <span class=\"comment\">// 编写一个dog类，创建一个dog对象，并读取dog.properties相应的属性，并完成初始化。</span></span><br><span class=\"line\">        <span class=\"type\">Properties</span> <span class=\"variable\">properties</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Properties</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 这里需要注意 IDEA的properties文件默认使用的编码ISO-8859-1，要么改为utf-8，要么读的时候改变字符编码格式</span></span><br><span class=\"line\">        <span class=\"type\">FileReader</span> <span class=\"variable\">fileReader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileReader</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.properties&quot;</span>);</span><br><span class=\"line\">        properties.load(fileReader);</span><br><span class=\"line\">        properties.list(System.out);</span><br><span class=\"line\">        <span class=\"comment\">// 实例化dog对象</span></span><br><span class=\"line\">        <span class=\"type\">dog</span> <span class=\"variable\">dog</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">dog</span>(properties.getProperty(<span class=\"string\">&quot;name&quot;</span>), Integer.parseInt(properties.getProperty(<span class=\"string\">&quot;age&quot;</span>)));</span><br><span class=\"line\">        System.out.println(dog);</span><br><span class=\"line\">        <span class=\"comment\">// 关闭流</span></span><br><span class=\"line\">        fileReader.close();</span><br><span class=\"line\">        <span class=\"comment\">// 将dog对象序列化到dog.dat文件</span></span><br><span class=\"line\">        <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">objectOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;/Users/qinsicheng/IdeaProjects/IOStream/com/qinsicheng/dog.dat&quot;</span>));</span><br><span class=\"line\">        objectOutputStream.writeObject(dog);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输出成功&quot;</span>);</span><br><span class=\"line\">        objectOutputStream.close();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>​    我们上面列举到的实例，只是针对本地文件读取，这个最简单的，而真正需要我们去运用的是在网络IO中。不过基础还是得先打好。</p>\n","text":"今天面试的时候问了一道IO流的题，鉴于之前在java基础篇的时候学过一遍，后再无使用和复习，就再跟着韩顺平老师的课件复习一遍。 IO流IO流是什么？当我们使用程序读取或修改本地文件时， 文件是以流的形式加载在内存中的。 InputStream:输入流，从数据源加载至内存。 Out...","link":"","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"13 mins."},"categories":[{"name":"Java","slug":"Java","count":2,"path":"api/categories/Java.json"}],"tags":[{"name":"IO流","slug":"IO流","count":1,"path":"api/tags/IO流.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#IO%E6%B5%81\"><span class=\"toc-text\">IO流</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IO%E6%B5%81%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">IO流是什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#IO%E6%B5%81%E6%9C%89%E5%93%AA%E4%BA%9B%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">IO流有哪些分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B7%E4%BD%93%E4%BD%BF%E7%94%A8%EF%BC%88%E8%BF%99%E9%87%8C%E6%88%91%E5%8F%AA%E5%BC%95%E7%94%A8%E5%B8%B8%E7%94%A8%E7%9A%84%EF%BC%89%EF%BC%9A\"><span class=\"toc-text\">具体使用（这里我只引用常用的）：</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FileInputStream-%E8%8A%82%E7%82%B9%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">FileInputStream(节点流，字节流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FileOutputStream-%E8%8A%82%E7%82%B9%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">FileOutputStream(节点流，字节流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FileReader-%E8%8A%82%E7%82%B9%E6%B5%81%EF%BC%8C%E5%AD%97%E7%AC%A6%E6%B5%81\"><span class=\"toc-text\">FileReader(节点流，字符流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#FileWriter-%E8%8A%82%E7%82%B9%E6%B5%81%EF%BC%8C%E5%AD%97%E7%AC%A6%E6%B5%81\"><span class=\"toc-text\">FileWriter(节点流，字符流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BufferReader-%E5%8C%85%E8%A3%85%E6%B5%81%EF%BC%8C%E5%AD%97%E7%AC%A6%E6%B5%81\"><span class=\"toc-text\">BufferReader(包装流，字符流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BufferWriter-%E5%8C%85%E8%A3%85%E6%B5%81%EF%BC%8C%E5%AD%97%E7%AC%A6%E6%B5%81\"><span class=\"toc-text\">BufferWriter(包装流，字符流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BufferInputStream-%E5%8C%85%E8%A3%85%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">BufferInputStream(包装流，字节流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BufferOutputStream-%E5%8C%85%E8%A3%85%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">BufferOutputStream(包装流，字节流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ObjectInputStream-%E5%AF%B9%E8%B1%A1%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">ObjectInputStream(对象流，字节流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ObjectOutputStream-%E5%AF%B9%E8%B1%A1%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">ObjectOutputStream(对象流，字节流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#InputStreamReader-%E8%BD%AC%E5%8C%96%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">InputStreamReader  (转化流，字节流)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#OutputStreamWriter-%E8%BD%AC%E5%8C%96%E6%B5%81%EF%BC%8C%E5%AD%97%E8%8A%82%E6%B5%81\"><span class=\"toc-text\">OutputStreamWriter(转化流，字节流)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AF%BE%E5%90%8E%E7%BB%83%E4%B9%A0\"><span class=\"toc-text\">课后练习</span></a></li></ol></li></ol>","author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Shell脚本","uid":"4c7aeff5501d897794d9e23b1c1097ec","slug":"Linux/shell脚本","date":"2022-11-25T03:03:04.000Z","updated":"2022-12-02T07:43:54.386Z","comments":true,"path":"api/articles/Linux/shell脚本.json","keywords":null,"cover":"/img/default_top_img.jpg","text":"Shell输入输出重定向 我们在后台挂在jar包时，常使用过一个命令：nohup java -jar xxx.jar &gt; java.log 2&gt;&amp;1 &amp; 这里就有几个知识点： 末尾的 &amp; 代表后台默认启动，页面关闭后，程序终止。 头部的 noh...","link":"","photos":[],"count_time":{"symbolsCount":"1.9k","symbolsTime":"2 mins."},"categories":[{"name":"Linux","slug":"Linux","count":1,"path":"api/categories/Linux.json"}],"tags":[{"name":"Shell","slug":"Shell","count":1,"path":"api/tags/Shell.json"}],"author":{"name":"秦思成","slug":"blog-author","avatar":"https://tva2.sinaimg.cn/large/9bd9b167ly1fzjxy660fij20b40b43yi.jpg","link":"/","description":"我的个人知识库","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}